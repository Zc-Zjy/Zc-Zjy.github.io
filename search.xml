<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SVN 学习笔记</title>
    <url>/2023/09/25/SVN/</url>
    <content><![CDATA[<hr>
<br/>


<h2 id="一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。"><a href="#一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。" class="headerlink" title="一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。"></a>一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。</h2><br/>

<hr>
<h2 id="二、三大指令："><a href="#二、三大指令：" class="headerlink" title="二、三大指令："></a>二、三大指令：</h2><ol>
<li>check out:客户端第一次与服务端连接使用。以后不用。</li>
<li>commit：提交本地数据到服务端。</li>
<li>update：从服务端更新下来项目。<br/></li>
</ol>
<hr>
<h2 id="三、图标集的意思："><a href="#三、图标集的意思：" class="headerlink" title="三、图标集的意思："></a>三、图标集的意思：</h2><img src="/2023/09/25/SVN/1.png" class="">
<ol>
<li>常规：当客户端文件与服务端文件完全同步时，系统显示这个图标。</li>
<li>冲突：当客户端提交的文件与服务端数据有冲突，系统显示该图标。</li>
<li>已删除：当服务端数据已删除，那么客户端文件将显示该图标。</li>
<li>增加：当我们编写文件已添加到提交队列，那么显示该图标。</li>
<li>无版本控制：当我们编写的文件没有添加到上传队列时，显示该图标。</li>
<li>修改：当客户端有修改但没有提交，显示该图标。</li>
<li>锁定：当服务端数据已锁定，那么客户端文件将显示该图标。</li>
<li>关于IDEA集成字体颜色</li>
</ol>
<ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>版本控制</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm、nrm、nvm、yarn学习记录</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8Enpm%E3%80%81nrm%E3%80%81nvm%E3%80%81yarn%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、npm"><a href="#一、npm" class="headerlink" title="一、npm"></a>一、npm</h1><h6 id="1、什么是npm？"><a href="#1、什么是npm？" class="headerlink" title="1、什么是npm？"></a>1、什么是npm？</h6><p>npm 是 Node.js 的包管理器，用于安装、管理、卸载 JavaScript 模块。npm 提供了一个包管理器，使得开发者可以方便使用第三方模块，同时也可以将自己编写的模块发布到 npm 上供其他人使用。（npm相当于后端的maven，帮助我们下载依赖）<br><strong>注意：</strong><br>    npm不用安装，只要安装了nodejs就有了。</p>
<h6 id="2、官网地址"><a href="#2、官网地址" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<h6 id="3、中文官网地址"><a href="#3、中文官网地址" class="headerlink" title="3、中文官网地址"></a>3、中文官网地址</h6><p><a href="https://www.npmjs.cn/">https://www.npmjs.cn/</a></p>
<h6 id="4、使用方法"><a href="#4、使用方法" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）查看npm版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>（2）初始化一个npm项目<br>说明：在目录下运行下面的命名，目录中就会 多了一个文件 package.json（相当于pom.xml）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// -y:直接生成 package.json</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>（3）下载依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm install 【包名】</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>npm install xxx –save –global（简写：-g）（简写：-S大写）-dev</p>
<ul>
<li>xxx 表示某个依赖名字</li>
<li>–save 表示将这个依赖保存进 package.json 依赖标签里（dependencies）；</li>
<li>-dev 表示将这个依赖保存进 package.json 开发依赖标签里（devDependencies）；</li>
<li>–global 表示全局安装。<br><strong>注：</strong>npm5及更高版本install 和install -S效果相同，如缺省默认为–save</li>
</ul>
<p>（4）同时下载多个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 包名之间用空格隔开</span><br><span class="line">npm i 【包名<span class="number">1</span>】 【包名<span class="number">2</span>】 【包名<span class="number">3</span>】...</span><br></pre></td></tr></table></figure>
<p>（5）配置npm下载镜像</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>（6）卸载某个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm uninstall 【包名】</span><br></pre></td></tr></table></figure>
<p>（7）npm启动项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 具体查看package.json中是不是serve</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>（8）npm构建项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>（7）查看全局按照位置</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure>
<p>（8）如何找依赖包<br>可以去上面第2点中的官网查找需要的依赖包名。<br>（9）查看依赖包版本  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm view 【包名】 versions</span><br><span class="line"></span><br><span class="line">// 查看 webpack 版本信息</span><br><span class="line">npm view webpack versions</span><br></pre></td></tr></table></figure>
<br/>

<hr>
<br/>


<h1 id="二、yarn"><a href="#二、yarn" class="headerlink" title="二、yarn"></a>二、yarn</h1><h6 id="1、什么yarn？"><a href="#1、什么yarn？" class="headerlink" title="1、什么yarn？"></a>1、什么yarn？</h6><p>和npm是一样的（yarn需要使用npm安装，npm是npdejs自带的）。</p>
<h6 id="2、官网"><a href="#2、官网" class="headerlink" title="2、官网"></a>2、官网</h6><p>（1）地址1：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a><br>（2）地址2：<a href="https://classic.yarnpkg.com/en/docs/install/#windows-stable">https://classic.yarnpkg.com/en/docs/install/#windows-stable</a></p>
<h6 id="3、中文官网"><a href="#3、中文官网" class="headerlink" title="3、中文官网"></a>3、中文官网</h6><p>（1）地址1：<a href="https://yarn.nodejs.cn/">https://yarn.nodejs.cn/</a><br>（2）地址2：<a href="https://www.yarnpkg.cn/">https://www.yarnpkg.cn/</a></p>
<h6 id="4、使用方法-1"><a href="#4、使用方法-1" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>
<p>（2）查看版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>
<p>（3）添加依赖包<br><strong>说明：</strong> 下载不了就加  –ignore-engines</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br><span class="line"></span><br><span class="line">// 分别添加到 devDependencies、peerDependencies、optionalDependencies</span><br><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer</span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure>
<p>（4）升级依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>
<p>（5）删除依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>


<h1 id="三、nrm"><a href="#三、nrm" class="headerlink" title="三、nrm"></a>三、nrm</h1><h6 id="1、什么是nrm？为什么要使用nrm？"><a href="#1、什么是nrm？为什么要使用nrm？" class="headerlink" title="1、什么是nrm？为什么要使用nrm？"></a>1、什么是nrm？为什么要使用nrm？</h6><p>我们在使用npm下载依赖的时候，如果不设置国内镜像，下载得就很慢，所以我们需要手动去设置镜像，有可能有些依赖还不能使用国内镜像下载，这个时候还得去设置镜像，虽然有cnpm，但是还是太麻烦了。而nrm就是帮助我们解决了这个麻烦事，提供了一些最常用的npm包镜像地址，能够让我们快速的切换镜像地址。</p>
<h6 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 全局安装nrm包</span><br><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure>
<p>（2）查看当前所有可用的镜像源地址以及当前所使用的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
<p>（3）切换不同的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 切换成npm镜像</span><br><span class="line">nrm use npm</span><br><span class="line"></span><br><span class="line">// 切换成taobao镜像</span><br><span class="line">urm use taobao</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、nvm"><a href="#四、nvm" class="headerlink" title="四、nvm"></a>四、nvm</h1><h6 id="1、什么是nvm？为什么要使用nvm？"><a href="#1、什么是nvm？为什么要使用nvm？" class="headerlink" title="1、什么是nvm？为什么要使用nvm？"></a>1、什么是nvm？为什么要使用nvm？</h6><p>我们在使用nodejs的时候，一台电脑只能装一个版本的nodejs，如果我们想要更换nodejs版本，就需要我们卸载已有的版本，重新下载我们需要的版本，很麻烦，而nvm帮我们解决了这个麻烦事。<br>nvm是一个 node版本管理工具，拥有它可以轻松的让我们在一台电脑上随时切换node版本。</p>
<h6 id="2、官网地址-1"><a href="#2、官网地址-1" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://nvm.uihtm.com/">https://nvm.uihtm.com/</a></p>
<h6 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h6><p>（1）设置镜像<br>    在 nvm 的安装路径下，找到 settings.txt，设置node_mirro与npm_mirror为国内镜像地址。<br>    将下面两行复制粘贴进settings.txt中。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure>
<p>（2）显示nodejs可下载版本的部分列表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>
<p>也可以打开链接查看可以node版本：<a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a><br>（3）安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm install latest</span><br></pre></td></tr></table></figure>
<p>（4）安装指定的版本的nodejs</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 例如：nvm install <span class="number">8</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">nvm install 【版本号】</span><br></pre></td></tr></table></figure>
<p>（5）查看已安装版本<br><strong>说明：</strong> 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错。 </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 简写：nvm ls</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure>
<p>（6）切换node版本<br><strong>说明：</strong>  这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm use 【版本号】</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="五、其它问题"><a href="#五、其它问题" class="headerlink" title="五、其它问题"></a>五、其它问题</h1><h5 id="1、npx、npm、cnpm、pnpm区别"><a href="#1、npx、npm、cnpm、pnpm区别" class="headerlink" title="1、npx、npm、cnpm、pnpm区别"></a>1、npx、npm、cnpm、pnpm区别</h5><p><a href="https://zhuanlan.zhihu.com/p/494076214">https://zhuanlan.zhihu.com/p/494076214</a></p>
<h5 id="2、npm、nrm、nvm的安装和使用"><a href="#2、npm、nrm、nvm的安装和使用" class="headerlink" title="2、npm、nrm、nvm的安装和使用"></a>2、npm、nrm、nvm的安装和使用</h5><p><a href="https://www.jianshu.com/p/95d5228ac73e">https://www.jianshu.com/p/95d5228ac73e</a></p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Postman笔记</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、关于Postman的说明"><a href="#一、关于Postman的说明" class="headerlink" title="一、关于Postman的说明"></a>一、关于Postman的说明</h1><h3 id="1、postman界面"><a href="#1、postman界面" class="headerlink" title="1、postman界面"></a>1、postman界面</h3><p>1、Collections：集合，项目集合<br>2、Apis：api文档<br>3、EnViromments：环境变量，全局变量<br>4、Mock Server：虚拟服务器<br>5、Monitors：监听器<br>6、History：历史记录  </p>
<h3 id="2、请求页面说明"><a href="#2、请求页面说明" class="headerlink" title="2、请求页面说明"></a>2、请求页面说明</h3><p>1、Params（get请求传参 ）<br>（1）@PathVariable 这种方式传参，直接在请求路径后面加参数值<br><strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;list/&#123;category&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">voidlist</span><span class="params">(<span class="meta">@PathVariable(&quot;category&quot;)</span> String category)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg" class="">
<p>（2）@RequestParam 这种方式传参，就在Query Params列表下输入参数<br><strong>说明：</strong> 要是参数比较多，不能一个一个输入，可以点击 Bulk Edit，批量输入。<br> <strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/doneList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doneList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String category,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(value = &quot;keywords&quot;,defaultValue = &quot;&quot;)</span>String keywords)</span> &#123;&#125;       </span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg" class="">
<p>2、Authorization（鉴权）<br>3、Headers（请求头）<br>4、Body（post请求参数）<br>（1）none：没有参数<br>（2）form-data：既可以传键值对参数，也可以传文件<br>（3）x-www-from-urlencoded：只能够传键值对参数<br>（4）raw：可以传json、text、xml、html、javascript<br>（5）binary：把文件以二进制的方式传参<br>5、Pre-request Script（请求前的前置脚本）<br>6、Tests（请求之后的断言，用来查看请求之后的结果）<br>7、Cookies（蓝色的字体，用来管理cookie信息）  </p>
<h3 id="3、响应页面说明"><a href="#3、响应页面说明" class="headerlink" title="3、响应页面说明"></a>3、响应页面说明</h3><p>（1）Body：接口返回的数据<br>（2）Cookies：响应的Cookie信息<br>（3）Headers：响应头<br>（4）Test Results：断言的结果</p>
<h3 id="4、Postman的内置参数"><a href="#4、Postman的内置参数" class="headerlink" title="4、Postman的内置参数"></a>4、Postman的内置参数</h3><p><strong>说明：</strong>“{ {}}” 中加上“$”就是内置的参数。<br>（1）{ { $timestamp }}：生成当前时间的时间戳。<br>（2）{ { $randomInt }}：生成 0-1000 之间的随机数。<br>（3）{ { $guid }}：生成速记 GUID 字符串。</p>
<h3 id="5、请求头各参数说明"><a href="#5、请求头各参数说明" class="headerlink" title="5、请求头各参数说明"></a>5、请求头各参数说明</h3><p>（1）Host：请求的主机地址。<br>（2）Connection：连接方式。<br>（3）Accept：客户端接收到的数据格式。<br>（4）X-Requested-With：异步请求。<br>（5）User-Agent：客户端的用户类型。（向服务器描述浏览器的类型）<br>（6）Referer：来源。<br>（7）Cookie：Cookie信息。<br>（8）Content-Type：请求内容的格式。</p>
<br/>

<hr>
<br/>

<h1 id="二、Postman的一些用法"><a href="#二、Postman的一些用法" class="headerlink" title="二、Postman的一些用法"></a>二、Postman的一些用法</h1><h3 id="1、Postman全局设置token"><a href="#1、Postman全局设置token" class="headerlink" title="1、Postman全局设置token"></a>1、Postman全局设置token</h3><p><strong>说明：</strong>当我们使用Postman来测试接口时，发送每个请求都需要手动加上token，这样的操作太繁琐了，所以我们可以设置全局token，在每次发送请求的时候自动给我们加上token。<br>（1）在Collections中，点击Pre-request Script选项。<br>（2）输入下面代码脚本，根据实际情况更改。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">sendRequest</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/api/v1/account/login&#x27;</span>, <span class="comment">// 登录的接口地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,</span><br><span class="line">        <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">// 登录账号</span></span><br><span class="line">            <span class="attr">password</span>: <span class="string">&quot;admin&quot;</span> <span class="comment">// 登录密码</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    pm.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>, <span class="attr">value</span>: res.<span class="title function_">json</span>().<span class="property">data</span> <span class="comment">// 登录请求返回的token数据，如果是data里面的token，就是data.token；key后面的&#x27;token&#x27;表示token的名字。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、Postman全局变量使用方法"><a href="#2、Postman全局变量使用方法" class="headerlink" title="2、Postman全局变量使用方法"></a>2、Postman全局变量使用方法</h3><p>（1）在登录的接口那，点击 Tests 选项。<br>（2）在这里使用 js 代码提取 responseBody 返回的数据，比如 token。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(responseBody); <span class="comment">// 查看 responseBody 数据</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody); <span class="comment">// 将 responseBody（返回的是 JSON 字符串） 转换为 JSON 数据</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,result.<span class="property">data</span>.<span class="property">token</span>); <span class="comment">// 左边方框里面 Snippets 下面选择 Set a global variable 这个选项，然后自动生成的</span></span><br></pre></td></tr></table></figure>
<p>（3）然后可以点击右上角 No Environment 旁边的小眼睛图标查看是否提取设置成功。<br><strong>注意：</strong>如果出现 token 无效等关于 token 的异常错误，就需要在每个请求接口的 Headers 头部中加入  这个。 </p>
<h3 id="3、Postman环境变量使用方法"><a href="#3、Postman环境变量使用方法" class="headerlink" title="3、Postman环境变量使用方法"></a>3、Postman环境变量使用方法</h3><p><strong>说明：</strong>有多种环境（开发环境、生产环境、测试环境）的情况下使用 EnViromments  环境变量。<br>（1）点击 EnViromments 选项，新增三个环境，分别为 开发环境、生产环境、测试环境；<br>（2）三个环境的 Variable 下的值要一样，比如都是 url ，Initial value下的值为服务器地址，比如 localhost:8080；<br>（3）在请求接口的时候就不用这样写了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>&#123;&#123;url&#125;&#125;:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>（4）使用：在右上角有一个 No EnViromment，点击选择需要在哪个环境下发送请求就可以了。</p>
<h3 id="4、Postman请求测试同时上传文件和json对象的接口"><a href="#4、Postman请求测试同时上传文件和json对象的接口" class="headerlink" title="4、Postman请求测试同时上传文件和json对象的接口"></a>4、Postman请求测试同时上传文件和json对象的接口</h3><p><strong>controller的代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端需要两个参数，一个参数用来接收上传文件，另一个参数用来接收json数据。</span></span><br><span class="line"><span class="comment">// 后端接收文件可以采用MultipartFile来接收，json数据可以创建对象进行接收， </span></span><br><span class="line"><span class="comment">// 采用@RequestPart注解进行数据绑定</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile uploadFile,<span class="meta">@RequestPart(&quot;req&quot;)</span> <span class="meta">@Valid</span> Query req)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 业务代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用postman进行请求：</strong><br>（1）使用 form-data 来进行传参，将文件和json数据隔开。<br>（2）根据后端别名来取名，文件为：file；json为：req（根据上面controller参数得来。<br>（3）在req json数据后面 Content type列加上 application&#x2F;json就可以了  </p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg" class="">

<h3 id="5、前端通过日期参数传给后端"><a href="#5、前端通过日期参数传给后端" class="headerlink" title="5、前端通过日期参数传给后端"></a>5、前端通过日期参数传给后端</h3><p>（1）前端请求<br><code>http://localhost:8080/dateParam?time=2022-12-12 10:05:45</code><br>（2）后端controller接收  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime time)</span>&#123;</span><br><span class="line">  System.out.println(time);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、前端传过来的是路径参数"><a href="#6、前端传过来的是路径参数" class="headerlink" title="6、前端传过来的是路径参数"></a>6、前端传过来的是路径参数</h3><p>（1）前端请求<br><code>http://localhost:8080/path/1</code><br>（2）后端controller接收  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">  System.out.println(id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、参数是数组对象以及普通属性，并且每个对象里面都有file"><a href="#7、参数是数组对象以及普通属性，并且每个对象里面都有file" class="headerlink" title="7、参数是数组对象以及普通属性，并且每个对象里面都有file"></a>7、参数是数组对象以及普通属性，并且每个对象里面都有file</h3><p>参数示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;classObj&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class1&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> file对象<span class="number">1</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> file对象<span class="number">2</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>1、后端接口接受<br>（1）可以先创建一个实体类vo用来接收前端的参数，针对上面的示例（也可以直接使用Map，不创建接收类）；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">// 下面用来接收classObj中的id和name</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sting&gt; idList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Sting&gt; nameList;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Integer&gt; countList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在controller中接收参数  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(MultipartFile[] files, TestVO testVO)</span>&#123;</span><br><span class="line">  <span class="comment">//TODO 业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、前端postman请求<br>（1）使用<code>form-data</code>来发送请求；<br>（2）将参数分为：id、name、idList、nameList、files、countList（注意：这里命名一定要和VO和controller中的参数对应）；<br>特别说明：<code>idList、nameList、files、countList</code>这四个中存的数据顺序要一一对应！（顺序需要前端进行排序）<br>示例为：  </p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/4.png" class="">
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>测试工具</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 stream 调式方法</title>
    <url>/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<p><strong>说明：</strong><code>Java</code>的<code>Stream</code>编程给调试带来了极大的不便，IDEA推出了stream trace功能，可以详细看到每一步操作的关系、结果，非常方便进行调试。  </p>
<div align="center">
    <font size="50">StreamTrace 用法</font>
</div>

<h3 id="1、StreamTrace-例子"><a href="#1、StreamTrace-例子" class="headerlink" title="1、StreamTrace 例子"></a>1、StreamTrace 例子</h3><p>这里简单将字符串转成它的字符数，并设置断点开启debug模式。</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/1.png" class="">
<p>如上图所示，可以看到每一步操作的元素个数、操作的结果、元素转换前后的对应关，非常清晰明了；还可以查看具体的对象内容。  </p>
<h3 id="2、使用-StreamTrace-方法"><a href="#2、使用-StreamTrace-方法" class="headerlink" title="2、使用 StreamTrace 方法"></a>2、使用 StreamTrace 方法</h3><p>StreamTrace只有在debug模式下才能使用，当在Stream代码上设置断点后，启动debug，点击流按钮，如图所示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/2.png" class=""> 
<br/>

<p>点击后，默认Split 模式显示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/3.png" class=""> 
<br/>

<p>可以点击左下方按钮切换到FlatMode模式，当然也可以再切换回去：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/4.png" class="">

<h3 id="3、实战演练"><a href="#3、实战演练" class="headerlink" title="3、实战演练"></a>3、实战演练</h3><p>这里演示一段字符转长度并过滤长度小于5的stream操作：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestTrace</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream.of(<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;tianjin&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;wuhan&quot;</span>)                </span><br><span class="line">        .map(String::length)               </span><br><span class="line">        .filter(e -&gt; e &gt; <span class="number">5</span>)               </span><br><span class="line">        .collect(Collectors.toList()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/5.png" class="">
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ObjectMapper（各个类型和Json类型互转）</title>
    <url>/2023/10/07/ObjectMapper%EF%BC%88%E5%90%84%E4%B8%AA%E7%B1%BB%E5%9E%8B%E5%92%8CJson%E7%B1%BB%E5%9E%8B%E4%BA%92%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<h1 id="一、ObjectMapper（各个类型和Json类型互转）"><a href="#一、ObjectMapper（各个类型和Json类型互转）" class="headerlink" title="一、ObjectMapper（各个类型和Json类型互转）"></a>一、ObjectMapper（各个类型和Json类型互转）</h1><p><strong>说明：</strong><code>ObjectMapper</code>类<code>(com.fasterxml.jackson.databind.ObjectMapper)</code>是<code>Jackson</code>的主要类，它可以帮助我们快速的进行各个类型和Json类型的相互转换。  </p>
<h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><p>（1）引入Jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据自己需要引入相关版本依赖。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、ObjectMapper的常用配置"><a href="#2、ObjectMapper的常用配置" class="headerlink" title="2、ObjectMapper的常用配置"></a>2、<code>ObjectMapper</code>的常用配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title function_">getObjectMapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.mapper;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">    mapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//configure方法 配置一些需要的参数</span></span><br><span class="line">    <span class="comment">// 转换为格式化的json 显示出来的格式美化</span></span><br><span class="line">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//序列化的时候序列对象的那些属性  </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_DEFAULT 属性为默认值不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.ALWAYS      所有属性</span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_EMPTY   属性为 空（“”） 或者为 NULL 都不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_NULL    属性为NULL 不序列化</span></span><br><span class="line">   mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);  </span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//反序列化时,遇到未知属性会不会报错 </span></span><br><span class="line">    <span class="comment">//true - 遇到没有的属性就报错 false - 没有的属性不会管，不会报错</span></span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果是空对象的时候,不抛异常  </span></span><br><span class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">    mapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//修改序列化后日期格式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);  </span><br><span class="line">    mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//处理不同的时区偏移格式</span></span><br><span class="line">   mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">   mapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、ObjectMapper的常用方法"><a href="#3、ObjectMapper的常用方法" class="headerlink" title="3、ObjectMapper的常用方法"></a>3、<code>ObjectMapper</code>的常用方法</h3><h6 id="（1）json字符串转对象"><a href="#（1）json字符串转对象" class="headerlink" title="（1）json字符串转对象"></a>（1）json字符串转对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Hyl\&quot;, \&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将字符串转换为对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mapper.readValue(jsonString, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//将对象转换为json字符串</span></span><br><span class="line">jsonString = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonString); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br><span class="line">结果二：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（2）数组和对象之间转换"><a href="#（2）数组和对象之间转换" class="headerlink" title="（2）数组和对象之间转换"></a>（2）数组和对象之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象转为byte数组</span></span><br><span class="line"><span class="type">byte</span>[] byteArr = mapper.writeValueAsBytes(student);</span><br><span class="line">System.out.println(byteArr); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//byte数组转为对象</span></span><br><span class="line">Student student= mapper.readValue(byteArr, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[B@3327bd23</span><br><span class="line">结果二：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br></pre></td></tr></table></figure>
<h6 id="（3）集合和json字符串之间转换"><a href="#（3）集合和json字符串之间转换" class="headerlink" title="（3）集合和json字符串之间转换"></a>（3）集合和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl1&quot;</span> ,<span class="number">20</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl2&quot;</span> ,<span class="number">21</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl3&quot;</span> ,<span class="number">22</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl4&quot;</span> ,<span class="number">23</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(studentList);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">        </span><br><span class="line">List&lt;Student&gt; studentList2 = mapper.readValue(jsonStr, List.class);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串转集合：&quot;</span> + studentList2 ); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[ &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125; ]</span><br><span class="line">结果二：</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		name=hyl1, </span><br><span class="line">		age=<span class="number">20</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl2, </span><br><span class="line">		age=<span class="number">21</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl3, </span><br><span class="line">		age=<span class="number">22</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl4, </span><br><span class="line">		age=<span class="number">23</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h6 id="（4）map和json字符串之间转换"><a href="#（4）map和json字符串之间转换" class="headerlink" title="（4）map和json字符串之间转换"></a>（4）map和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; testMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">testMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">testMap.put(<span class="string">&quot;student&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(testMap);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map.class);</span><br><span class="line">System.out.println(testMapDes); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;date&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;22&quot;</span>,</span><br><span class="line">  <span class="string">&quot;student&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">    <span class="string">&quot;intList&quot;</span> : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">结果二：</span><br><span class="line">&#123;date=<span class="number">1525164212803</span>, name=<span class="number">22</span>, student=&#123;name=hyl, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>, intList=<span class="literal">null</span>&#125;, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（5）日期转json字符串"><a href="#（5）日期转json字符串" class="headerlink" title="（5）日期转json字符串"></a>（5）日期转json字符串</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改时间格式</span></span><br><span class="line">mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> (<span class="string">&quot;hyl&quot;</span>,<span class="number">21</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">student.setIntList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="string">&quot;2020-07-23 13:14:36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;intList&quot;</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（6）Object类型转list"><a href="#（6）Object类型转list" class="headerlink" title="（6）Object类型转list"></a>（6）Object类型转list</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(object); <span class="comment">// object是Object类型</span></span><br><span class="line"><span class="keyword">return</span> objectMapper.readValue(json, List.class);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2023/10/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、目录结构介绍"><a href="#一、目录结构介绍" class="headerlink" title="一、目录结构介绍"></a>一、目录结构介绍</h1><h3 id="1、-root-localhost-讲解说明"><a href="#1、-root-localhost-讲解说明" class="headerlink" title="1、[root@localhost ~]#  讲解说明"></a>1、[root@localhost ~]#  讲解说明</h3><p>（1）<code>root</code>：代表当前登录的用户，在Linux中管理员账户是<code>root</code>。<br>（2）<code>localhost</code>：当前计算机主机名。<br>（3）<code>~</code>：当前所在家目录。<br>（4）<code>/</code>：当前所在根目录。<br>（5）<code>#</code>：超级用户提示符。<br>（6）<code>$</code>：普通用户的提示符（<code>$</code>钱的符号，普通用户就是俗人，俗人就爱钱）。</p>
<h3 id="2、目录结构说明"><a href="#2、目录结构说明" class="headerlink" title="2、目录结构说明"></a>2、目录结构说明</h3><p>（1）<code>/bin</code>：bin是Binary的缩写，这个目录存放着最常用的命令。<br>（2）<code>/boot</code>：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件（不要随便动）。<br>（3）<code>/dev</code>：dev是Device（设备）的缩写，存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。<br>（4）<code>/etc</code>：这个目录用来存放所有的系统管理所需要的配置文件和子目录。<br>（5）<code>/home</code>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账户命名的。<br>（6）<code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的dll文件。<br>（7）<code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。<br>（8）<code>/media</code>：Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。<br>（9）<code>/mnt</code>：系统提供该目录是为了让用户临时挂在别的文件系统的，我们可以将光驱挂载在<code>/mnt</code>上，然后进入该目录就可以查看光驱里的内容了。<br>（10）<code>/opt</code>：这是给主机额外安装软件所摆放的目录，比如你安装一个oracle数据库，就可以放在这个目录下，默认是空的。<br>（11）<code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>（12）<code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录。<br>（13）<code>/sbin</code>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。<br>（14）<code>/srv</code>：该目录存放一些服务启动之后需要提取的数据。<br>（15）<code>/sys</code>：这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。<br>（16）<code>/tmp</code>：这个目录是用来存放一些临时文件的。<br>（17）<code>/usr</code>：这个一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files目录。<br>（18）<code>/usr/bin</code>：系统用户使用的应用程序。</p>
<br/>

<hr>
<br/>

<h1 id="二、常用的Linux命令"><a href="#二、常用的Linux命令" class="headerlink" title="二、常用的Linux命令"></a>二、常用的Linux命令</h1><h3 id="1、cd（改变目录）"><a href="#1、cd（改变目录）" class="headerlink" title="1、cd（改变目录）"></a>1、cd（改变目录）</h3><p>（1）<code>cd /</code>：进入根目录；<br>（2）<code>cd /home/sharplee/creatfile</code>：进入到<code>home</code>文件夹下的<code>sharplee</code>文件夹下的<code>creatfile</code>目录；<br>（3）<code>cd ..</code>：回退到上一个目录，直接cd进入默认目录。特别说明：cd 空格 .. 才可以。</p>
<h3 id="2、pwd（显示当前所在的目录路径）"><a href="#2、pwd（显示当前所在的目录路径）" class="headerlink" title="2、pwd（显示当前所在的目录路径）"></a>2、pwd（显示当前所在的目录路径）</h3><h3 id="3、ls（列出当前目录的所有文件）"><a href="#3、ls（列出当前目录的所有文件）" class="headerlink" title="3、ls（列出当前目录的所有文件）"></a>3、ls（列出当前目录的所有文件）</h3><p>（1）<code>ls</code>：列出当前目录中的所有文件；<br>（2）<code>ll</code>：比<code>ls</code>列出的内容更详细；<br>（3）<code>ls -a</code>：列出当前目录中所有文件包括隐藏文件；<br>（4）<code>ls -l</code>：同<code>ll</code>;<br>（5）<code>ls -l /path/to/file</code>：查看文件的权限；<br>（6）<code>ls -ld /path/to/directory</code>：查看目录的权限</p>
<h3 id="4、touch（新建文件）"><a href="#4、touch（新建文件）" class="headerlink" title="4、touch（新建文件）"></a>4、touch（新建文件）</h3><p><code>touch</code>：新建一个文件，如：<code>touch index.js</code>，就会在当前目录下新建一个index.js文件。（如果文件已经存在，则只会修改文件的当前时间）</p>
<h3 id="5、rm（删除文件）"><a href="#5、rm（删除文件）" class="headerlink" title="5、rm（删除文件）"></a>5、rm（删除文件）</h3><p><strong>常用后缀选项：</strong>  </p>
<ul>
<li><code>-f</code>：强制删除文件，忽略不存在的文件和不可写的文件，不会出现警告提示；  </li>
<li><code>-d(--dir)</code>：删除空目录；  </li>
<li><code>-i</code>：交互式地询问是否删除每个文件，如果要删除多个文件，rm将询问是否确认删除每个文件；  </li>
<li><code>-I</code>：在删除超过三个文件或者递归删除前要求确认，此选项比-i 提示内容更少，但同样可以阻止大多数错误发生；  </li>
<li><code>-r</code>：递归地删除目录及其内容，用于删除非空目录；  </li>
<li><code>-v</code>：显示详细输出，列出每个删除的文件名；</li>
</ul>
<p><strong>使用例子：</strong><br>（1）<code>rm index.js</code>：删除index.js文件；<br>（2）<code>rm index1.js index2.js</code>：删除index1.js和index2.js文件；<br>（3）<code>rm -f index.js</code>：强制删除index.js文件；<br>（4）<code>rm -r src</code>：删除src目录（特别说明：一般不要使用rm，特别是rm -rf 命令，一定不能使用）；<br>（5）<code>rmdir test</code>：删除test文件夹；<br>（6）<code>rmdir -p test/test/test.txt</code>：递归删除。</p>
<h3 id="6、mkdir（新建目录）"><a href="#6、mkdir（新建目录）" class="headerlink" title="6、mkdir（新建目录）"></a>6、mkdir（新建目录）</h3><p>（1）<code>mkdir test</code>：新建test文件夹；<br>（2）<code>mkdir -p test/test/test</code>：递归创建。</p>
<h3 id="7、mv（移动文件）"><a href="#7、mv（移动文件）" class="headerlink" title="7、mv（移动文件）"></a>7、mv（移动文件）</h3><p><strong>常用后缀选项：</strong>  </p>
<ul>
<li><code>-b</code>：当目标文件存在，先进行备份在覆盖；</li>
<li><code>-f</code>：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；</li>
<li><code>-i</code>：交互移动，如果目标文件已经存在，则会询问用户是否覆盖（默认选项）；</li>
<li><code>-n</code>：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；</li>
<li><code>-v</code>：显示文件或目录的移动过程；</li>
<li><code>-u</code>：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；</li>
</ul>
<p><strong>常用示例：</strong><br>（1）<code>mv index.js src/</code>：将index.js移动到src目录下（文件夹用 文件夹名 + <code>/</code>的方式表示）；<br>（2）<code>mv -b a/aa b/</code>：将a目录下的aa文件移动到b目录中，因为b目录已经存在aa文件，所以b目录先备份一份b目录下的aa文件<code>aa~</code>，再将a目录下的aa文件移动到b目录；<br>（3）<code>mv -f index.js b/</code>：强制覆盖，不管b目录下有没有index.js，都将index.js移动到b目录下，如果b目录存在index.js，就覆盖；<br>（4）<code>mv a b</code>：将a文件名改为b；<br>（5）<code>mv file1.txt file2.txt file3.txt /target/directory/</code>：将文件<code>file1.txt</code>，<code>file2.txt</code>，<code>file3.txt</code>移动到<code>/target/directory/</code>；  </p>
<h3 id="8、reset（初始化终端）"><a href="#8、reset（初始化终端）" class="headerlink" title="8、reset（初始化终端）"></a>8、reset（初始化终端）</h3><p><code>reset</code>：初始化终端；</p>
<h3 id="9、clear（清屏）"><a href="#9、clear（清屏）" class="headerlink" title="9、clear（清屏）"></a>9、clear（清屏）</h3><p><code>clear</code>：清屏；</p>
<h3 id="10、history（查看命令历史）"><a href="#10、history（查看命令历史）" class="headerlink" title="10、history（查看命令历史）"></a>10、history（查看命令历史）</h3><p><code>history</code>：查看命令历史；</p>
<h3 id="11、help（帮助）"><a href="#11、help（帮助）" class="headerlink" title="11、help（帮助）"></a>11、help（帮助）</h3><p><code>help</code>：帮助；</p>
<h3 id="12、exit（退出）"><a href="#12、exit（退出）" class="headerlink" title="12、exit（退出）"></a>12、exit（退出）</h3><p><code>exit</code>：帮助；</p>
<h3 id="13、-（注释）"><a href="#13、-（注释）" class="headerlink" title="13、#（注释）"></a>13、#（注释）</h3><h3 id="14、cat（查看文件内容）"><a href="#14、cat（查看文件内容）" class="headerlink" title="14、cat（查看文件内容）"></a>14、cat（查看文件内容）</h3><p>（1）<code>cat test.txt</code>：查看test文件的内容；<br>（2）<code>cat &gt; test.txt</code>：新建一个test文件，按下回车之后，向test文件里输出保存内容，在按<code>ctr + d</code>来保存退出；<br>（3）<code>cat test1.txt test2.txt</code>：查看test1和test2文件的内容；<br>（4）<code>cat test1.txt &gt; test2.txt</code>：将test1文件内容备份到test2文件中；<br>（5）<code>cat test1.txt test2.txt &gt; test3.txt</code>：将test1和test2文件内容备份到test3文件中；<br>（6）<code>tac test.txt</code>：将test文件内容反过来查看；<br>（7）<code>cat test1.txt &gt;&gt; test2.txt</code>：将test1文件内容添加到test2文件内容末尾；<br>（8）<code>cat &gt;&gt; test.txt</code>：在终端输入内容到test.txt末尾，按<code>ctr + d</code>来保存退出；<br>（9）<code>cat -n test.txt</code>：查看test文件内容，并显示行号；<br>（10）<code>cat /etc/os-release</code>：查看当前系统版本；</p>
<h3 id="15、查看系统内核"><a href="#15、查看系统内核" class="headerlink" title="15、查看系统内核"></a>15、查看系统内核</h3><p>（1）<code>uname -r</code>：查看系统内核；<br>（2）<code>cat /etc/redhat-release</code>：查看当前系统相关信息；</p>
<h3 id="16、将数据从内存同步到硬盘"><a href="#16、将数据从内存同步到硬盘" class="headerlink" title="16、将数据从内存同步到硬盘"></a>16、将数据从内存同步到硬盘</h3><p><code>sync</code>：将数据从内存同步到硬盘；</p>
<h3 id="17、关机"><a href="#17、关机" class="headerlink" title="17、关机"></a>17、关机</h3><p>（1）<code>half</code>：立刻关机；<br>（2）<code>shutdown -h now</code>：立刻关机；<br>（3）<code>shutdown -h 10</code>：10分钟后关机；<br>（4）<code>shutdown -h 20:30</code>：20：30的时候关机；<br>（5）<code>shutdown -h +30 &#39;系统将在30分钟后关机&#39;</code>：30分钟后关机，同时向在线用户发送警告消息；</p>
<h3 id="18、重启"><a href="#18、重启" class="headerlink" title="18、重启"></a>18、重启</h3><p><code>reboot</code>：重启；</p>
<h3 id="19、cp（复制粘贴）"><a href="#19、cp（复制粘贴）" class="headerlink" title="19、cp（复制粘贴）"></a>19、cp（复制粘贴）</h3><p><code>cp 【复制的文件名】 【要粘贴到的文件夹】</code><br>（1）<code>cp -r 【要复制的文件夹】 【要粘贴到的路径】</code>：将文件夹递归复制粘贴；  </p>
<h3 id="20、chmod（更改文件权限）"><a href="#20、chmod（更改文件权限）" class="headerlink" title="20、chmod（更改文件权限）"></a>20、chmod（更改文件权限）</h3><p>（1）<code>chmod 777 文件名</code>：更改文件权限为777，可以应用于文件夹和文件，它将赋予所有者、所属组和其他用户全部的读取、写入和执行权限；<br>（2）<code>chmod 755</code>：主要用于文件夹，它给予所有者读取、写入和执行的权限，而所属组和其他用户只有读取和执行的权限，没有写入权限；<br>（2）<code>chmod 644</code>：主要用于文件，它给予所有者读取和写入的权限，而所属组和其他用户只有读取的权限。对于文件夹而言，执行的权限。<br>相关知识查看下面第三大点。</p>
<h3 id="21、man（查看命令使用文档）"><a href="#21、man（查看命令使用文档）" class="headerlink" title="21、man（查看命令使用文档）"></a>21、man（查看命令使用文档）</h3><p><code>man cd</code>：查看cd命令的使用文档；</p>
<h3 id="22、vim（修改文件内容）"><a href="#22、vim（修改文件内容）" class="headerlink" title="22、vim（修改文件内容）"></a>22、vim（修改文件内容）</h3><p><code>vim test.txt</code>：修改test文件内容，进入文件后按键盘中的<code>i</code>或者<code>Insert</code>键，就可以输入内容了，然后按<code>Esc</code>退出输入模式，敲入<code>:wq</code>表示保存退出，<code>:q</code>仅退出不保存，显示行号：<code>:set nu</code>，不显示行号：<code>set nonu</code>；</p>
<h3 id="23、hostname（查看主机名）"><a href="#23、hostname（查看主机名）" class="headerlink" title="23、hostname（查看主机名）"></a>23、hostname（查看主机名）</h3><p><code>hostname 【要修改成的新主机名】</code>：修改主机名；</p>
<h3 id="24、ps（查看当前系统正在运行的进程）"><a href="#24、ps（查看当前系统正在运行的进程）" class="headerlink" title="24、ps（查看当前系统正在运行的进程）"></a>24、ps（查看当前系统正在运行的进程）</h3><p>（1）<code>ps -a</code>：显示当前终端运行的所有进程<br>（2）<code>ps -u</code>：查看当前以用户登录的所有进程<br>（3）<code>ps -x</code>：显示后台运行进程的参数<br>（4）<code>ps -aux</code>：查看所有的进程<br>（5）<code>grep</code>：查找文件中符合条件的信息<br>（6）<code>ps -aux|grep mysql</code>：查找所有进程，过滤出mysql进程（查找出mysql进程）<br>（7）<code>rpm -qa | grep postgres</code>：查看当前服务器是否已安装PostgreSQL  </p>
<h3 id="25、结束进程"><a href="#25、结束进程" class="headerlink" title="25、结束进程"></a>25、结束进程</h3><p><code>kill -9 【进程id】</code>：结束进程；</p>
<h3 id="26、解压压缩包"><a href="#26、解压压缩包" class="headerlink" title="26、解压压缩包"></a>26、解压压缩包</h3><p>（1）解压tar.gz：<code>tar -zxvf 【压缩包名】</code>：解压压缩包；<br>（2）解压zip：<code>unzip -o aaa.zip</code>，如果要保留原来的文件，把解压后的文件存放在&#x2F;root&#x2F;test2目录下，则执行命令<code>unzip -o -d /root/test2/ ./aaa.zip</code>，<a href="https://blog.csdn.net/z19861216/article/details/131823727">相关教程请点击</a></p>
<h3 id="27、查看进程状态"><a href="#27、查看进程状态" class="headerlink" title="27、查看进程状态"></a>27、查看进程状态</h3><p><code>systemctl status postgresql.service</code>：查看postgresql服务器进程状态；</p>
<h3 id="28、查看当前登录的用户名"><a href="#28、查看当前登录的用户名" class="headerlink" title="28、查看当前登录的用户名"></a>28、查看当前登录的用户名</h3><p><code>whoami</code>：查看当前登录的用户名；</p>
<h3 id="29、查看系统中的所有用户"><a href="#29、查看系统中的所有用户" class="headerlink" title="29、查看系统中的所有用户"></a>29、查看系统中的所有用户</h3><p>（1）<code>cat /etc/passwd</code>：查看系统中的所有用户；<br>（2）<code>getent passwd</code>：该命令将显示系统中所有用户的用户名、用户ID、用户所属组ID、用户家目录等信息；  </p>
<h3 id="30、启动、停止服务"><a href="#30、启动、停止服务" class="headerlink" title="30、启动、停止服务"></a>30、启动、停止服务</h3><p>（1）启动某个服务：<code>systemctl start 【服务名】</code><br>（2）停止某个服务：<code>systemctl stop 【服务名】</code><br>（3）重启某个服务：<code>systemctl restart 【服务名】</code><br>（4）查看一个服务的状态：<code>systemctl status 【服务名】</code><br>（5）开机时启用一个服务：<code>systemctl enable 【服务名】</code><br>（6）开机时关闭一个服务：<code>systemctl disable 【服务名】</code><br>（7）查看服务是否开机启动：<code>systemctl is-enabled 【服务名】</code>  </p>
<h3 id="31、防火墙端口"><a href="#31、防火墙端口" class="headerlink" title="31、防火墙端口"></a>31、防火墙端口</h3><p>（1）增加防火墙端口号（端口范围 4400-4600）：<code>firewall-cmd --zone=public --add-port=4400-4600/udp --permanen</code><br>（2）指定端口 4369：<code>firewall-cmd --zone=public --add-port=4369/udp --permanen</code>，出现：<code>Warning: ALREADY_ENABLED: 4369:tcp</code>（说明4369端口通过成功）<br>（3）关闭指定端口：<code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code><br>（4）查看通过的端口：<code>firewall-cmd --zone=public --list-ports</code></p>
<h3 id="32、sudo（以系统管理者的身份执行指令）"><a href="#32、sudo（以系统管理者的身份执行指令）" class="headerlink" title="32、sudo（以系统管理者的身份执行指令）"></a>32、sudo（以系统管理者的身份执行指令）</h3><p>（1）以root用户的环境变量执行命令：<code>sudo -i</code><br>（2）设置root初始密码：<code>sudo passwd root</code>（以root身份执行命令，需要输入当前用户的密码，不是root的密码）<br>（3）显示出自己（执行 sudo 的使用者）的权限：<code>sudo -l</code>  </p>
<h3 id="33、su（切换身份）"><a href="#33、su（切换身份）" class="headerlink" title="33、su（切换身份）"></a>33、su（切换身份）</h3><p>（1）使用root密码，切换到root用户，但是并没有转到root用户家目录下：<code>su</code><br>（2）使用root密码，切换到root用户，并转到root用户的家目录下：<code>su -</code><br>（3）登陆root用户：<code>su root</code></p>
<h3 id="34、scp（远程文件拷贝）"><a href="#34、scp（远程文件拷贝）" class="headerlink" title="34、scp（远程文件拷贝）"></a>34、scp（远程文件拷贝）</h3><p>现在假设服务器的ip为：<code>192.168.126.130</code>，域名是<code>www.abc.com</code><br>1、从服务器分别复制文件和文件夹到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp root@192.168.126.130:/home/file /myMachine/x (可以将ip换成域名，也可以去掉root@)</span><br><span class="line">scp -r www.abc.com:/home/file/ /myMachine/myFile/（-r：递归复制整个目录）</span><br></pre></td></tr></table></figure>
<p>2、本地复制到服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">复制文件</span><br><span class="line">scp /myMachine/x root@192.168.126.130:/home/file</span><br><span class="line">复制文件夹</span><br><span class="line">scp -r /myMachine/myFile/ www.abc.com:/home/file/（-r：递归复制整个目录）</span><br></pre></td></tr></table></figure>
<h3 id="35、查看运行的jar包"><a href="#35、查看运行的jar包" class="headerlink" title="35、查看运行的jar包"></a>35、查看运行的jar包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下几种命令均可</span></span><br><span class="line">ps -ef | grep java      查看当前运行的java进程</span><br><span class="line">ps -ef | grep xxx.jar   查看当前运行的jar进程</span><br><span class="line"></span><br><span class="line">ps aux | grep xxx.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps：process status的简称，用于显示当前进程的状态；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a：all简称，显示所有程序；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u：user简称，以用户为主的格式来显示；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">x：显示所有程序，不区分终端机；</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某端口对应的线程pid</span></span><br><span class="line">netstat -nlp |grep :9181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据进程号查看端口号</span></span><br><span class="line">netstat -anop | grep 15161</span><br></pre></td></tr></table></figure>
<h3 id="36、jar包的启动、终止和启停脚本"><a href="#36、jar包的启动、终止和启停脚本" class="headerlink" title="36、jar包的启动、终止和启停脚本"></a>36、jar包的启动、终止和启停脚本</h3><p>1、jar包的运行  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">当前ssh窗口被锁定，不可进行其它操作，ctrl + c或直接关闭窗口停止程序</span><br><span class="line">java -jar xxx.jar</span><br><span class="line"></span><br><span class="line">当前ssh窗口不被锁定，可进行其它操作，当窗口关闭时，程序退出</span><br><span class="line">java -jar xxxxx.jar &amp;</span><br><span class="line"></span><br><span class="line">后台挂起程序，当账户退出或终端关闭时程序停止，日志文件存储在当前目录的nohup.out文件中</span><br><span class="line">nohup java -jar xxx.jar &amp;</span><br><span class="line"></span><br><span class="line">指定输出日志到log.txt文件,后台挂起程序,当账户退出或终端关闭时,程序仍然运行</span><br><span class="line">nohup java -jar xxxxxx.jar &gt; log.txt &amp;</span><br></pre></td></tr></table></figure>
<p>2、jar的终止  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9：使用第9种信号(SIGKILL)无条件终止该进程</span></span><br><span class="line">kill -9 jar包pid</span><br></pre></td></tr></table></figure>
<p>3、jar启停脚本  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将jar包启动对应的pid写入文件中，为停止时提供pid</span></span><br><span class="line">nohup java -jar 包名.jar &gt;log.txt &amp;       </span><br><span class="line">echo $! &gt; /var/run/包名.pid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shutdown.sh</span></span><br><span class="line">PID=$(cat /var/run/包名.pid)</span><br><span class="line">kill -9 $PID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给脚本添加可执行权限</span></span><br><span class="line">sudo chmod +x ./test.sh</span><br></pre></td></tr></table></figure>

<h3 id="37、查找"><a href="#37、查找" class="headerlink" title="37、查找"></a>37、查找</h3><p>1、<code>find / -name 【需要查找的名字】</code>：全盘查找，例如：全盘查找harbor<code>find / -name harbor</code>；  </p>
<br/>

<hr>
<br/>

<h1 id="三、权限说明"><a href="#三、权限说明" class="headerlink" title="三、权限说明"></a>三、权限说明</h1><img src="/2023/10/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Linux1.jpg" class="">
<p>1、<code>drwxr-xr-x</code>说明：<br>（1）第一个字母表示：<code>d 文件夹，- 文件，l 文档</code><br>（2）后面9个字母，三个为一组<code>rwx</code>，<code>r</code>可读，<code>w</code>可写，<code>x</code>可执行，<code>-</code>没有此权限<br>（3）<code>r</code>：4，<code>w</code>：2，<code>x</code>：1  </p>
<br/>


<hr>
<br/>


<h1 id="四、其他使用及问题"><a href="#四、其他使用及问题" class="headerlink" title="四、其他使用及问题"></a>四、其他使用及问题</h1><h3 id="1、设置命令别名"><a href="#1、设置命令别名" class="headerlink" title="1、设置命令别名"></a>1、设置命令别名</h3><p>1、在命令行执行<code>vi ~/.bashrc</code>找到bashrc文件；<br>2、在文件中添加需要设置别名的命令保存退出即可。<br>例如设置docker镜像命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置之后在命令行执行dps就会执行docker ps --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Name&#125;&#125;&quot;</span></span></span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Name&#125;&#125;&quot;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker 查看镜像列表命令别名</span></span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>服务器</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记</title>
    <url>/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、中文学习文档链接地址"><a href="#一、中文学习文档链接地址" class="headerlink" title="一、中文学习文档链接地址"></a>一、中文学习文档链接地址</h1><p>&emsp;&emsp;<a href="https://mybatis.org/mybatis-3/zh_CN/index.html">https://mybatis.org/mybatis-3/zh_CN&#x2F;index.html</a></p>
<br/>

<hr>
<br/>

<h1 id="二、依赖配置"><a href="#二、依赖配置" class="headerlink" title="二、依赖配置"></a>二、依赖配置</h1><h3 id="1、所需依赖"><a href="#1、所需依赖" class="headerlink" title="1、所需依赖"></a>1、所需依赖</h3><p>要使用myBatis，要导入两个依赖，一个是myBatis包，一个是myBatis驱动包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个包含了上面两个依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>数据库URL</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc</span>:<span class="string">mysql://localhost:3306/stu?useSSL=true&amp;amp;useUnicode=true&amp;amp;serverTimezone=GMT</span></span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="三、学习笔记"><a href="#三、学习笔记" class="headerlink" title="三、学习笔记"></a>三、学习笔记</h1><h3 id="1、XML文件里的结果集映射"><a href="#1、XML文件里的结果集映射" class="headerlink" title="1、XML文件里的结果集映射"></a>1、XML文件里的结果集映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里的id对应select里resultMap，resultMap里是什么，这里的id就是什么--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column为数据库里的字段名，property为实例类中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span> <span class="comment">&lt;!--这里的resultMap随意取--&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、多对一查询方法"><a href="#2、多对一查询方法" class="headerlink" title="2、多对一查询方法"></a>2、多对一查询方法</h3><p>1、第一种方法  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pojo.Student</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String aname;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="comment">// getter和setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pojo.Teacher</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="comment">// getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentTeacher随便取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--StudentTeacher要对应上面随便取的名字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--getTeacher要对应下面随便取的名字，tid是副表当中对应主表id的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;pojo.Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.Teacher&quot;</span>&gt;</span> <span class="comment">&lt;!--getTeacher随便取--&gt;</span></span><br><span class="line">        select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、第二种方法  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.name tname </span><br><span class="line">        from student s,teacher t </span><br><span class="line">        where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、第三种方法（分步查询）  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper层：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过分步查询员工以及员工所对应的部门信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分步查询第一步：查询员工信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Emp getEmpAndDeptByStepOne(@Param(&quot;uid&quot;)String uid); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分步查询第二步：查询部门信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dept getEmpAndDeptStepTwo(@Param(&quot;did&quot;)String did); --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mapper.xml：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不是驼峰命名的属性可以不写，它自动就映射了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里的dept是Emp实体类中的属性，类型为Dept  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getEmpAndDeptStepTwo&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">  select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	将多列值封装为map传递，写法：columu=&quot;&#123;key1=column1,key2=column2&#125;&quot;</span></span><br><span class="line"><span class="comment">	key1代表第二条查询语句的数据库字段，column1代表当前要传递的值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、一对多查询方法"><a href="#3、一对多查询方法" class="headerlink" title="3、一对多查询方法"></a>3、一对多查询方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户实体类，一个客户有多个订单</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer customerId;</span><br><span class="line">	<span class="keyword">private</span> String customerName;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Order&gt; orders;</span><br><span class="line">	<span class="comment">// getter和setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer orderId;</span><br><span class="line">	<span class="keyword">private</span> String orderName;</span><br><span class="line">	<span class="comment">// getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customerMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">colimn</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     property：集合属性名，和Customer实体类中的List&lt;Order&gt; orders保持一致</span></span><br><span class="line"><span class="comment">	 ofType：集合的泛型类型，和Customer实体类中的List&lt;Order&gt; orders保持一致</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> /&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customerMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_order tor join t_customer tur on tor.customer_id = tur.customer</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="4、分页查询"><a href="#4、分页查询" class="headerlink" title="4、分页查询"></a>4、分页查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--startIndex 是数据的下标  pageSize是显示多少条数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MybatisUtil工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resource.getResourceAsStream(config);</span><br><span class="line">              factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">          &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(factory != <span class="literal">null</span>)&#123;</span><br><span class="line">            factory.openSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层方法：</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findAllMap</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; userList = mapper.findAll();</span></span><br><span class="line"><span class="comment">//        for (User user :</span></span><br><span class="line"><span class="comment">//                userList) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(user);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">4</span>);</span><br><span class="line">        List&lt;User&gt; userList = mapper.findAllMap(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、模糊查询"><a href="#5、模糊查询" class="headerlink" title="5、模糊查询"></a>5、模糊查询</h3><p>1、第一种方法<br>（1）Java代码执行的时候，传递通配符 <code>% %</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>); <span class="comment">//查询姓李的人</span></span><br></pre></td></tr></table></figure>
<p>（2）在sql拼接中使用通配符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%&quot; #&#123;<span class="keyword">value</span>&#125; &quot;%&quot;;</span><br></pre></td></tr></table></figure>
<p>2、第二种方法<br>在xml查询中直接使用<code>concat</code>，比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> concat(&quot;%&quot;,#&#123;<span class="keyword">value</span>&#125;,&quot;%&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="6、关于-“-”-和-“-”-的使用"><a href="#6、关于-“-”-和-“-”-的使用" class="headerlink" title="6、关于 “#” 和 “$” 的使用"></a>6、关于 “#” 和 “$” 的使用</h3><p><strong>说明：</strong>因为 “$” 不是安全的，会造成sql注入，所以一般查询条件使用 “#”，后者是直接将字符串原模原样映射到sql语句中的。<br>例子：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 传的参数是：</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">User</span> getUser(<span class="type">int</span> id);</span><br><span class="line"></span><br><span class="line">// 写的<span class="keyword">sql</span>语句是：</span><br><span class="line">&lt;<span class="keyword">select</span> id=&quot;getUser&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> $&#123;id&#125; <span class="keyword">desc</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line"></span><br><span class="line">// 实际上输出的<span class="keyword">sql</span>语句是：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<h3 id="7、新增数据之后自动获取数据主键"><a href="#7、新增数据之后自动获取数据主键" class="headerlink" title="7、新增数据之后自动获取数据主键"></a>7、新增数据之后自动获取数据主键</h3><p>1、第一种：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 说明：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGenerateKeys：开启自动获取主键功能 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty：将获取的主键用什么属性接收（获取主键id，肯定是用id来接收了）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;xxxx&quot;</span> <span class="attr">useGenerateKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、第二种：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertHepKbesPlanProgramme&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;HepKbesPlanProgrammeEvent&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 说明：</span></span><br><span class="line"><span class="comment">				selectKey标签是获取新增数据之后自动获取数据主键</span></span><br><span class="line"><span class="comment">				keyProperty：将获取的主键用什么属性接收（获取主键id，肯定是用id来接收了）</span></span><br><span class="line"><span class="comment">				resultType：返回主键的类型</span></span><br><span class="line"><span class="comment">				order：指定selectKey标签中的sql语句在insert语句之前还是之后执行（AFTER/BEFORE）</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;programmeId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into hep_kbes_plan_programme_event</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;planId != null&quot;</span>&gt;</span>plan_id,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">				...</span><br><span class="line">         <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;planId != null&quot;</span>&gt;</span>#&#123;planId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">				...</span><br><span class="line">         <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="8、在DAO层模拟创建数据库的方法"><a href="#8、在DAO层模拟创建数据库的方法" class="headerlink" title="8、在DAO层模拟创建数据库的方法"></a>8、在DAO层模拟创建数据库的方法</h3><p>1、在dao层创建一个dao类，例如DepartmentDao类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、使用HashMap创建数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentDao</span> &#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; departmentMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个部门表</span></span><br><span class="line">        departmentMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Department&gt;();</span><br><span class="line">        departmentMap.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;学交部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">102</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;编辑部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">103</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;后勤部&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建一个员工表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟创建数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employeeMap = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个员工表</span></span><br><span class="line">        employeeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Employee&gt;();</span><br><span class="line">        employeeMap.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;学交部&quot;</span>),<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        employeeMap.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;编辑部&quot;</span>),<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        employeeMap.put(<span class="number">3</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;学交部&quot;</span>),<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        employeeMap.put(<span class="number">4</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;后勤部&quot;</span>),<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.getEmployeeId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setEmployeeId(initId ++);</span><br><span class="line">        &#125;</span><br><span class="line">        employee.setDepartment(departmentDao.getDepartemntById(employee.getDepartment().getDepartmentId()));</span><br><span class="line">        employeeMap.put(employee.getEmployeeId(),employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmployee</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employeeMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有员工</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">findAllEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找一个员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">findEmployeeById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、Spring是如何整合Mybatis将Mapper接口注册为Bean的原理？"><a href="#9、Spring是如何整合Mybatis将Mapper接口注册为Bean的原理？" class="headerlink" title="9、Spring是如何整合Mybatis将Mapper接口注册为Bean的原理？"></a>9、Spring是如何整合Mybatis将Mapper接口注册为Bean的原理？</h3><p>1、首先MyBatis的Mapper接口核心是JDK动态代理；<br>2、Spring会排除接口，无法注册到IOC容器中；<br>3、MyBatis实现了<code>BeanDefinitionRegistryPostProcessor</code>可以动态注册BeanDefinition；<br>4、需要自定义扫描器（继承Spring内部扫描器<code>ClassPathBeanDefinitionScanner</code>）重写排除接口的方法（<code>isCandidateComponent</code>）；<br>5、但是接口虽然注册成了BeanDefinition，但是无法实例化bean，因为接口无法实例化；<br>6、需要将BeanDefinition的BeanClass替换成JDK动态代理的实例；<br>7、Mybatis通过FactoryBean的工厂方法设计模式可以自由控制Bean的实例化过程，可以在getObject方法中创建JDK动态代理。  </p>
<h3 id="10、Mapper接口传参方式"><a href="#10、Mapper接口传参方式" class="headerlink" title="10、Mapper接口传参方式"></a>10、Mapper接口传参方式</h3><p>1、单个简单类型参数<br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByName</span> <span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125;中的参数如果参数只有一个的时候可以随便写，推荐写参数名 --&gt;</span></span><br><span class="line">  select * from user where name = #&#123;n&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、多个简单类型参数<br>第一种方式：使用<code>@Param</code>注解<br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByNameAndAge</span> <span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where name = #&#123;name&#125; and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二种方式：使用<code>arg</code><br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByNameAndAge</span> <span class="params">(String name, Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- arg0对应接口方法中的第一个参数，arg1对应接口方法中的第二个参数 --&gt;</span></span><br><span class="line">  select * from user where name = #&#123;arg0&#125; and age = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三种方式：使用<code>param</code><br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByNameAndAge</span> <span class="params">(String name, Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByNameAndAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- param0对应接口方法中的第一个参数，param1对应接口方法中的第二个参数 --&gt;</span></span><br><span class="line">  select * from user where name = #&#123;param0&#125; and age = #&#123;param1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、单个实体对象参数<br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByNameAndAge</span> <span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）service  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TestService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">		user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		user.setAge(<span class="number">18</span>);</span><br><span class="line">		List&lt;User&gt; list = testMapper.getListUserByNameAndAge(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByNameAndAge&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125;中的字符串必须是和User对象中的属性名一样 --&gt;</span></span><br><span class="line">  select * from user where name = #&#123;name&#125; and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、Map参数<br>（1）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">getListUserByNameAndAge</span> <span class="params">(Map map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）service  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TestService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">		List&lt;User&gt; list = testMapper.getListUserByNameAndAge(map);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListUserByNameAndAge&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125;中的字符串必须是和map对象中的key一样 --&gt;</span></span><br><span class="line">  select * from user where name = #&#123;name&#125; and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11、插入后返回主键"><a href="#11、插入后返回主键" class="headerlink" title="11、插入后返回主键"></a>11、插入后返回主键</h3><p>1、主键是自增模式<br>（1）mapper.xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	useGeneratedKeys=&quot;true&quot;：使用数据库生成主键</span></span><br><span class="line"><span class="comment">	keyColumn=&quot;id&quot;：指定数据库主键的字段名</span></span><br><span class="line"><span class="comment">	keyProperty=&quot;id&quot;：指定Java实体类中用来接收主键的字段名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(name,email,gender) values(#&#123;name&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">insertEmp</span> <span class="params">(Employee employee)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）service  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TestService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">		employee.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		employee.setEmail(<span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">		employee.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		testMapper.insertEmp(employee);</span><br><span class="line">		System.out.println(employee.getId());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、主键是非自增模式（比如主键是varchar类型）<br>（1）mapper.xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertTeacher&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     selectKey：插入之前，先指定一段sql语句，生成一个主键值。</span></span><br><span class="line"><span class="comment">	 order=&quot;before | after&quot;：sql语句是在插入语句之前还是之后执行</span></span><br><span class="line"><span class="comment">	 resultType=&quot;&quot;：返回值类型</span></span><br><span class="line"><span class="comment">	 keyProperty=&quot;&quot;：将生成出来的值给谁</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&quot;before&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;tId&quot;</span>&gt;</span></span><br><span class="line">    select replace(uuid(), &#x27;-&#x27;, &#x27;&#x27;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into teacher (id, name) value (#&#123;tId&#125;, #&#123;tName&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface TestMapper &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">insertEmp</span> <span class="params">(Employee employee)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）service  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TestService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">		teacher.setName(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">		System.out.println(teacher.getId());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12、foreach标签"><a href="#12、foreach标签" class="headerlink" title="12、foreach标签"></a>12、foreach标签</h3><p>1、批量查询  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; selectBatch(@Param(&quot;ids&quot;) List&lt;Integer&gt; idList); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBatch&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id in</span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     collection=&quot;idList | arg0 | list&quot;</span></span><br><span class="line"><span class="comment">	 open：遍历之前要追加的字符串</span></span><br><span class="line"><span class="comment">	 close：遍历结束需要添加的字符串</span></span><br><span class="line"><span class="comment">	 separator：每次遍历之间需要添加的字符串，如果是最后一次就不会追加了</span></span><br><span class="line"><span class="comment">	 item：获取每个遍历项</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;idList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对应item --&gt;</span></span><br><span class="line">	#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、批量插入  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void insertBatch(@Param(&quot;users&quot;) List&lt;User&gt; userList); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">  insert into user (name, age) values</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (#&#123;user.name&#125;, #&#123;user.age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、批量更新<br>批量更新需要注意，如果一个标签涉及多个语句执行，需要设置允许指定多语句执行。<br>可以在数据库url链接后面加<code>allowMultiQueries=true</code>。<br>比如：<code>jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true</code>  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateBatch(@Param(&quot;users&quot;) List&lt;User&gt; userList); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;user.name&#125;, age = #&#123;user.age&#125; where id = #&#123;user.id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="13、分页插件"><a href="#13、分页插件" class="headerlink" title="13、分页插件"></a>13、分页插件</h3><p>1、导入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置插件<br>在mybatis-config.xml中配置插件。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页参数合理化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>com.github.pagehelper.PageInterceptor</code>是PageHelper插件的名词，<code>dialect</code>属性用于指定数据库类型（支持多种数据库）。<br>3、使用  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用查询方法之前必须先设置分页参数</span></span><br><span class="line"><span class="comment">// 第一个参数为：pageNum，表示当前页</span></span><br><span class="line"><span class="comment">// 第二个参数为：pageSize，表示每页显示的条数</span></span><br><span class="line"><span class="comment">// 注意：这里这个设置分页参数方法只针对一个查询方法，如果有多个查询方法，需要多次设置</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将查询到的结果封装到一个PageInfo的分页实体类中</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(userList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前页</span></span><br><span class="line">pageInfo.getPageNum();</span><br><span class="line"><span class="comment">// 总页数</span></span><br><span class="line">pageInfo.getPages();</span><br><span class="line"><span class="comment">// 总条数</span></span><br><span class="line">pageInfo.getTotal();</span><br><span class="line"><span class="comment">// 当前页的条数</span></span><br><span class="line">pageInfo.getSize();</span><br><span class="line"><span class="comment">// 当前页的数据</span></span><br><span class="line">pageInfo.getList();</span><br></pre></td></tr></table></figure>

<h3 id="14、生成代码"><a href="#14、生成代码" class="headerlink" title="14、生成代码"></a>14、生成代码</h3><p>MyBatisX 是一个 MyBatis 的代码生成插件，可以通过简单的配置和操作快速生成 MyBatis Mapper、pojo 类和 Mapper.xml 文件。下面是使用 MyBatisX 插件实现逆向工程的步骤：<br>1、安装插件<br>在 IntelliJ IDEA 中打开插件市场，搜索 MyBatisX 并安装。<br>2、使用 IntelliJ IDEA连接数据库<br>（1）连接数据库  </p>
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.png" class="">  
<p>（2）填写信息  </p>
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>（3）展示库表  </p>
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>（4）生成代码  </p>
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  
<p>（5）查看结果  </p>
<img src="/2023/10/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" class="">  


<h3 id="15、鉴别器"><a href="#15、鉴别器" class="headerlink" title="15、鉴别器"></a>15、鉴别器</h3><p>1、说明<br><code>discriminator</code>标签在MyBatis中是一种用于实现结果映射（ResultMap）的动态分支选择 的标签。它类似于Java中的switch-case或if-else逻辑，可以根据查询结果中的某个字段值（鉴别器字段）动态决定如何映射不同的结果类型。<br>2、作用<br>根据某个字段的值（如user_type、status等），动态选择不同的映射规则，适用于继承关系或多态查询。<br>3、示例<br>假设有一个 user 表，包含不同类型的用户（type 字段决定用户角色）：<br>（1）<code>type=1</code>：普通用户（GeneralUser）；<br>（2）<code>type=2</code>：VIP用户（VipUser）；<br>（3）<code>其他</code>：默认映射到基础用户（User）。<br>Java实体类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer type; <span class="comment">// 鉴别字段：1=普通用户，2=VIP用户</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String generalField; <span class="comment">// 普通用户特有字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VipUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String vipField; <span class="comment">// VIP用户特有字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基础映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;type&quot;</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态分支选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;generalUserMap&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;vipUserMap&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 默认映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 普通用户子映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;generalUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;GeneralUser&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;generalField&quot;</span> <span class="attr">column</span>=<span class="string">&quot;general_field&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- VIP用户子映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;vipUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;VipUser&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;vipField&quot;</span> <span class="attr">column</span>=<span class="string">&quot;vip_field&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, type, general_field, vip_field</span><br><span class="line">    FROM user</span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>navicat premium连接各数据库的方法</title>
    <url>/2023/10/16/navicat-premium%E8%BF%9E%E6%8E%A5%E5%90%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、navicat-premium连接oracle数据库"><a href="#一、navicat-premium连接oracle数据库" class="headerlink" title="一、navicat premium连接oracle数据库"></a>一、navicat premium连接oracle数据库</h1><p><code>jdbc:oracle:thin:@111.205.100.117:1521:dhcctest</code></p>
<img src="/2023/10/16/navicat-premium%E8%BF%9E%E6%8E%A5%E5%90%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/navicat1.jpg" class="">
<p>1.连接名：可以随便取<br>2.主机：对应  111.205.100.117<br>3.端口：对应 1521<br>4.服务名：对应  dhcctest  （SID）  </p>
<br/>

<hr>
<br/>

<h1 id="二、navicat-premium连接Postgresql数据库"><a href="#二、navicat-premium连接Postgresql数据库" class="headerlink" title="二、navicat premium连接Postgresql数据库"></a>二、navicat premium连接Postgresql数据库</h1><p><code>jdbc:postgresql://192.168.51.182:5432/ims</code></p>
<img src="/2023/10/16/navicat-premium%E8%BF%9E%E6%8E%A5%E5%90%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/navicat2.jpg" class="">
<p>1.连接名：可以随便取<br>2.主机：对应  192.168.51.182<br>3.端口：对应 5432<br>4.初始化数据库：对应ims  </p>
<br/>

<hr>
<br/>

<h1 id="三、navicat-premium连接Mysql数据库"><a href="#三、navicat-premium连接Mysql数据库" class="headerlink" title="三、navicat premium连接Mysql数据库"></a>三、navicat premium连接Mysql数据库</h1><p><code>jdbc:mysql://localhost:3306/test</code></p>
<img src="/2023/10/16/navicat-premium%E8%BF%9E%E6%8E%A5%E5%90%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/navicat3.jpg" class="">
<p>1.连接名：可以随便取<br>2.主机：对应  localhost<br>3.端口：对应 3306  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>数据库</tag>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2023/11/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<br/>

<hr>
<h1 id="一、策略模式（行为型模式）"><a href="#一、策略模式（行为型模式）" class="headerlink" title="一、策略模式（行为型模式）"></a>一、策略模式（行为型模式）</h1><h3 id="1、后端"><a href="#1、后端" class="headerlink" title="1、后端"></a>1、后端</h3><p>1、说明：<br>定义一组算法，将每个算法都封装起来，并且使它们之间可以根据需求互换使用。<br><strong>重点理解：</strong>就是把策略算法行为提出来，写成接口，然后再创建各种策略算法行为去实现这个接口，然后在需要使用到的地方，通过传入不同的参数来使用不同的策略算法行为。<br>比如：有一个<code>鸭子接口</code>，这个<code>接口</code>中有<code>颜色</code>、<code>飞行</code>两个方法，然后这个<code>接口</code>一开始有两个实现类：白鸭和红鸭，它们都实现了颜色和飞行的方法。<br>现在，需要新增一个黄鸭实现类，但是这个黄鸭是不会飞的，所以如果实现这个鸭子接口，就需要重写飞行的方法，但是这样就会导致代码重复，而且代码结<br>构看上去不是很合理，所以就可以使用策略模式，有两种方案，两种方案都是将飞行的方法提出来，将飞行的方法写成一个接口，都创建这个飞行接口，并在<br>这个飞行接口中添加飞行方法：<br>（1）第一种方案<br>白鸭和红鸭都去实现这个飞行接口，然后黄鸭不实现这个飞行接口。<br>（2）第二种方案<br>创建两个实现类：会飞和不会飞去实现该接口，具体看下面代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建鸭子接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">color</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建飞行接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个实现类去实现飞行接口</span></span><br><span class="line"><span class="comment">// 会飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyWithWings</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying with wings!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不会飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyNoWay</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can&#x27;t fly!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后，我们实现具体的 Duck 类，并在其中使用 FlyBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MallardDuck</span> <span class="keyword">implements</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MallardDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flyBehavior = <span class="keyword">new</span> <span class="title class_">FlyWithWings</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">color</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a mallard duck with green head.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RubberDuck</span> <span class="keyword">implements</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RubberDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flyBehavior = <span class="keyword">new</span> <span class="title class_">FlyNoWay</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">color</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a yellow rubber duck.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DuckTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">mallard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MallardDuck</span>();</span><br><span class="line">        mallard.color();</span><br><span class="line">        mallard.fly();</span><br><span class="line"></span><br><span class="line">        <span class="type">Duck</span> <span class="variable">rubber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RubberDuck</span>();</span><br><span class="line">        rubber.color();</span><br><span class="line">        rubber.fly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态改变 rubber duck 的飞行行为</span></span><br><span class="line">        rubber.setFlyBehavior(<span class="keyword">new</span> <span class="title class_">FlyWithWings</span>());</span><br><span class="line">        rubber.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、场景一：<br>（1）有一个系统，一开始只支持Mysql；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MysqlDemo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 数据库实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    MysqlDemo(String username,String password) &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 ServiceDemo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 业务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doServiceDemo</span> <span class="params">(MysqlDemo mysqlDemo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + mysqlDemo.getClass().getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + mysqlDemo.getUsername());</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + mysqlDemo.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 Test</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MysqlDemo</span> <span class="variable">mysqlDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlDemo</span>(<span class="string">&quot;Mysql&quot;</span>, <span class="string">&quot;Mysql&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ServiceDemo</span>().doServiceDemo(mysqlDemo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">使用的数据库：MysqlDemo</span><br><span class="line">使用的数据库用户名：Mysql</span><br><span class="line">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>
<p>（2）因为系统升级，开始支持SqlService、Oracle、Postgresql，修改代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 DataBasesDemo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 数据库实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBasesDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    DataBasesDemo(String username,String password,Integer type) &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 DataBasesType</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 数据库类型 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DataBasesType</span> &#123;</span><br><span class="line"></span><br><span class="line">    Msql(<span class="number">0</span>),</span><br><span class="line">    SqlService(<span class="number">1</span>),</span><br><span class="line">    Oracle(<span class="number">2</span>),</span><br><span class="line">    Postgresql(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    DataBasesType(Integer code) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 ServiceDemo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 业务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doServiceDemo</span> <span class="params">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class="line">        <span class="comment">// 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(DataBasesType.Msql.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(DataBasesType.SqlService.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.SqlService);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(DataBasesType.Oracle, dataBasesDemo.getType())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Postgresql);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 Test</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DataBasesDemo</span> <span class="variable">mySqlDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;Mysql&quot;</span>, <span class="string">&quot;Mysql&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">DataBasesDemo</span> <span class="variable">sqlServiceDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;SqlService&quot;</span>, <span class="string">&quot;SqlService&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">DataBasesDemo</span> <span class="variable">oracleDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;Oracle&quot;</span>, <span class="string">&quot;Oracle&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="type">DataBasesDemo</span> <span class="variable">postgresqlDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;Postgresql&quot;</span>, <span class="string">&quot;Postgresql&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ServiceDemo</span>().doServiceDemo(sqlServiceDemo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">使用的数据库：SqlService</span><br><span class="line">使用的数据库用户名：SqlService</span><br><span class="line">使用的数据库密码：SqlService</span><br></pre></td></tr></table></figure>
<p>查看<code>ServiceDemo</code>业务处理，有多个<code>if...else if...if</code>，这样如果以后再新增一个数据库，还要去修改<code>if...else</code>，代码看着很臃肿，不利于维护，有可能还要修改旧的代码，不可取的。依据面向对象设计原则中<code>开放封闭原则</code>（对扩展开放，对修改封闭），使用<code>策略模式</code>。<br>（3）使用策略模式（实体类和枚举不变，只修改业务）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 ServiceDemo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 用来扩展，每个数据库都会实现这个接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServiceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(DataBasesDemo dataBasesDemo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 Mysql业务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlServiceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">ServiceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doService</span> <span class="params">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 Oracle业务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleServiceDemoImpl</span> <span class="keyword">implements</span> <span class="title class_">ServiceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doService</span> <span class="params">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">        System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 Test</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Mysql</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MysqlServiceDemoImpl</span>().doService(<span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;Mysql&quot;</span>,<span class="string">&quot;Mysql&quot;</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">使用的数据库：Msql</span><br><span class="line">使用的数据库用户名：Mysql</span><br><span class="line">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>
<p>说明：这样不用在业务里再写<code>if...else...</code>了，如果新增了一个数据库，直接实现<code>ServiceDemo</code>接口就行了，对修改关闭，对扩展开放。（还可以使用<code>Lambda</code>表达式来进行简化，不需要上面的实现类）<br>（4）使用Lambda简化（实体类、枚举类和ServiceDemo接口不变，删除<code>MysqlServiceDemoImpl</code>和<code>OracleServiceDemoImpl</code>类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 Test</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/11/24</span></span><br><span class="line"><span class="comment"> * @描述 test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Mysql</span></span><br><span class="line">        doService(<span class="keyword">new</span> <span class="title class_">DataBasesDemo</span>(<span class="string">&quot;Mysql&quot;</span>, <span class="string">&quot;Mysql&quot;</span>, <span class="number">0</span>), dataBasesDemo -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(DataBasesDemo dataBasesDemo, ServiceDemo serviceDemo)</span> &#123;</span><br><span class="line">        serviceDemo.doService(dataBasesDemo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">使用的数据库：Msql</span><br><span class="line">使用的数据库用户名：Mysql</span><br><span class="line">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>

<h3 id="2、前端"><a href="#2、前端" class="headerlink" title="2、前端"></a>2、前端</h3><p>1、使用<code>if...else...</code>的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">tag, num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(tag == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 + num2;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">&#x27;sub&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 - num2;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">&#x27;mul&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 * num2;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tag == <span class="string">&#x27;div&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 / num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、改进：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">	<span class="string">&#x27;add&#x27;</span>: <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 + num2;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&#x27;sub&#x27;</span>: <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 - num2;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&#x27;mul&#x27;</span>: <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 * num2;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&#x27;div&#x27;</span>: <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 / num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (tag, num1, num2) &#123;</span><br><span class="line">	<span class="keyword">return</span> data[tag](num1, num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、使用策略模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StrategyDemo</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">strategy</span> = <span class="literal">null</span>; <span class="comment">// strategy指代下面的Add、Sub、Mul、Div类</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">setStrategy</span>(<span class="params">strategy</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">result</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">do</span>(num1, num2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">	<span class="title function_">do</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 + num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> &#123;</span><br><span class="line">	<span class="title function_">do</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 - num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> &#123;</span><br><span class="line">	<span class="title function_">do</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 * num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> &#123;</span><br><span class="line">	<span class="title function_">do</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num1 / num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">test</span>:</span><br><span class="line"><span class="keyword">let</span> strategyDemo = <span class="keyword">new</span> <span class="title class_">StrategyDemo</span>();</span><br><span class="line">strategyDemo.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">Add</span>());</span><br><span class="line">strategyDemo.<span class="title function_">result</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3、示例一：基础使用"><a href="#3、示例一：基础使用" class="headerlink" title="3、示例一：基础使用"></a>3、示例一：基础使用</h3><p>1、创建一个策略接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileStrategy</span> &#123;</span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(File file)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、创建具体的策略类，然后去实现策略接口<br>（1）策略一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体策略实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelStrategy</span> <span class="keyword">implements</span> <span class="title class_">FileStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xlsx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理Excel逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）策略二  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfStrategy</span> <span class="keyword">implements</span> <span class="title class_">FileStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pdf&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理PDF逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建一个策略工厂类，使用springboot依赖注入简化策略管理和通过自动配置实现策略自动发现  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, FileStrategy&gt; strategyMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动注入所有策略实现</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileStrategyFactory</span><span class="params">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class="line">        strategies.forEach(strategy -&gt; </span><br><span class="line">            strategyMap.put(strategy.getType(), strategy));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FileStrategy <span class="title function_">getStrategy</span><span class="params">(String fileType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不存在该策略&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、示例二：使用枚举管理策略类型"><a href="#4、示例二：使用枚举管理策略类型" class="headerlink" title="4、示例二：使用枚举管理策略类型"></a>4、示例二：使用枚举管理策略类型</h3><p>通过枚举集中管理策略类型，避免散落的字符串导致的类型安全问题。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略接口增强</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileStrategy</span> &#123;</span><br><span class="line">    FileType <span class="title function_">getFileType</span><span class="params">()</span>; <span class="comment">// 返回枚举类型</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(File file)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FileType</span> &#123;</span><br><span class="line">    EXCEL(<span class="string">&quot;xlsx&quot;</span>, <span class="string">&quot;Excel文件处理器&quot;</span>),</span><br><span class="line">    PDF(<span class="string">&quot;pdf&quot;</span>, <span class="string">&quot;PDF文件处理器&quot;</span>),</span><br><span class="line">    WORD(<span class="string">&quot;docx&quot;</span>, <span class="string">&quot;Word文件处理器&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String extension;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    FileType(String extension, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.extension = extension;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据扩展名获取枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FileType <span class="title function_">fromExtension</span><span class="params">(String ext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(values())</span><br><span class="line">                   .filter(t -&gt; t.extension.equalsIgnoreCase(ext))</span><br><span class="line">                   .findFirst()</span><br><span class="line">                   .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未知文件类型&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略实现示例</span></span><br><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelStrategy</span> <span class="keyword">implements</span> <span class="title class_">FileStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileType <span class="title function_">getFileType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FileType.EXCEL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 具体处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略工厂优化</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;FileType, FileStrategy&gt; strategyMap = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(FileType.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileStrategyFactory</span><span class="params">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class="line">        strategies.forEach(strategy -&gt; </span><br><span class="line">            strategyMap.put(strategy.getFileType(), strategy));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FileStrategy <span class="title function_">getStrategy</span><span class="params">(FileType fileType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未支持的文件类型&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在控制器中使用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileExt</span> <span class="operator">=</span> <span class="string">&quot;xlsx&quot;</span>;</span><br><span class="line"><span class="type">FileType</span> <span class="variable">type</span> <span class="operator">=</span> FileType.fromExtension(fileExt);</span><br><span class="line"><span class="type">FileStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> factory.getStrategy(type);</span><br><span class="line">strategy.process(file);</span><br></pre></td></tr></table></figure>

<h3 id="5、示例五：结合条件注解的动态策略"><a href="#5、示例五：结合条件注解的动态策略" class="headerlink" title="5、示例五：结合条件注解的动态策略"></a>5、示例五：结合条件注解的动态策略</h3><p>根据运行环境或配置动态启用不同的策略实现。<br>缓存策略选择：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span>;</span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redis实现（当cache.type=redis时启用）</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheStrategy</span> <span class="keyword">implements</span> <span class="title class_">CacheStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="comment">// 连接Redis进行存储</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 从Redis获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地缓存实现（默认启用）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConditionalOnProperty</span>(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="comment"> * 1、name = &quot;cache.type&quot;：检查配置属性 cache.type 的值。</span></span><br><span class="line"><span class="comment"> * 2、havingValue = &quot;local&quot;：如果配置文件中cache.type的值是 &quot;local&quot;，则条件成立。</span></span><br><span class="line"><span class="comment"> * 3、matchIfMissing = true：如果配置文件中属性cache.type不存在，也认为条件成立。</span></span><br><span class="line"><span class="comment"> * 综合起来，这个注解表示：当配置文件中属性cache.type的值是&quot;local&quot;或者该配置属性不存在时，装配这个Bean；否则，不装配这个 Bean。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalCacheStrategy</span> <span class="keyword">implements</span> <span class="title class_">CacheStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略工厂</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheStrategyFactory</span><span class="params">(CacheStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheStrategy <span class="title function_">getCurrentStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​配置方式​：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">redis</span> <span class="comment"># 切换为redis策略</span></span><br></pre></td></tr></table></figure>
<p>使用：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务层使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheStrategy cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductService</span><span class="params">(CacheStrategyFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache = factory.getCurrentStrategy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> (Product) cache.get(id);</span><br><span class="line">        <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">            product = loadFromDB(id);</span><br><span class="line">            cache.put(id, product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、示例六：策略模式-模板方法"><a href="#6、示例六：策略模式-模板方法" class="headerlink" title="6、示例六：策略模式+模板方法"></a>6、示例六：策略模式+模板方法</h3><p>在策略模式中复用公共逻辑，保持扩展性。<br>（支付策略）下面的示例，要想使用AbstractPaymentStrategy，就必须有一个类去继承它。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPaymentStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法定义处理流程</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> PaymentResult <span class="title function_">pay</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        validateRequest(request);</span><br><span class="line">        checkBalance(request);</span><br><span class="line">        <span class="type">PaymentResult</span> <span class="variable">result</span> <span class="operator">=</span> doPay(request);</span><br><span class="line">        recordLog(request, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共校验方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateRequest</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getAmount().compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;金额必须大于零&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法由子类实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">checkBalance</span><span class="params">(PaymentRequest request)</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> PaymentResult <span class="title function_">doPay</span><span class="params">(PaymentRequest request)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共日志方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recordLog</span><span class="params">(PaymentRequest request, PaymentResult result)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录支付日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractPaymentStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkBalance</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查支付宝余额</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> PaymentResult <span class="title function_">doPay</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用支付宝接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaymentResult</span>(<span class="literal">true</span>, <span class="string">&quot;支付成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPayStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractPaymentStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkBalance</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查微信支付余额</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> PaymentResult <span class="title function_">doPay</span><span class="params">(PaymentRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用微信支付接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaymentResult</span>(<span class="literal">true</span>, <span class="string">&quot;支付成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、示例七：默认为本地存储，添加配置后使用远程存储"><a href="#7、示例七：默认为本地存储，添加配置后使用远程存储" class="headerlink" title="7、示例七：默认为本地存储，添加配置后使用远程存储"></a>7、示例七：默认为本地存储，添加配置后使用远程存储</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 策略接口定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StorageStrategy</span> &#123;</span><br><span class="line">    StorageType <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(File file)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 策略自动注册工厂</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StorageStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;StorageType, StorageStrategy&gt; strategyMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动收集所有实现</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StorageStrategyFactory</span><span class="params">(List&lt;StorageStrategy&gt; strategies)</span> &#123;</span><br><span class="line">        strategies.forEach(strategy -&gt; </span><br><span class="line">            strategyMap.put(strategy.getType(), strategy)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StorageStrategy <span class="title function_">getStrategy</span><span class="params">(StorageType type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(strategyMap.get(type))</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">StorageException</span>(<span class="string">&quot;未支持的存储类型&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 具体策略实现（阿里云OSS）</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssStorageStrategy</span> <span class="keyword">implements</span> <span class="title class_">StorageStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StorageType <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StorageType.OSS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用OSS SDK实现上传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 本地存储策略（默认启用）</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalStorageStrategy</span> <span class="keyword">implements</span> <span class="title class_">StorageStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StorageType <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StorageType.LOCAL_DISK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存到本地磁盘</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">oss</span> <span class="comment"># 切换存储策略</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-shanghai.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key:</span> <span class="string">AKIDxxxx</span></span><br><span class="line">    <span class="attr">secret-key:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>



<h1 id="二、代理模式（结构型模式）"><a href="#二、代理模式（结构型模式）" class="headerlink" title="二、代理模式（结构型模式）"></a>二、代理模式（结构型模式）</h1><p>什么是静态代理和动态代理？<br>比如有一个中介公司，中介公司里面有3个中介，分别是小红、小明、小江，然后有一个房东，有很多套房子，想要将房子租出去，房东将第一套房子交给中介小红帮他出租，结果小红能力很强，房东以后就将自己所有房子都交给小红，固定不变，这就是静态代理；<br>房东将房子交给中介公司，我不管谁能力强，我只需要将房子租出去，由公司动态将房子随机分配给小红、小明、小江三人，这就是动态代理。  </p>
<h3 id="1、静态代理模式"><a href="#1、静态代理模式" class="headerlink" title="1、静态代理模式"></a>1、静态代理模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个房东类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Landlord</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Landlord landlord;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Landlord landlord)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.landlord = landlord;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 可以写新的业务逻辑</span></span><br><span class="line">		System.out.println(<span class="string">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 原本的业务逻辑</span></span><br><span class="line">		landlord.rent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Landlord</span> <span class="variable">landlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Landlord</span>();</span><br><span class="line">		<span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(landlord);</span><br><span class="line">		proxy.rent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、动态代理模式"><a href="#2、动态代理模式" class="headerlink" title="2、动态代理模式"></a>2、动态代理模式</h3><p>说明：由上面的例子可以得知，是由公司动态分配，而这个公司，在java这里只有两家，分别是<code>JDK动态代理</code>和<code>cglib</code>。<br><code>JDK动态代理</code>：（java原生自带的）JDK原生的实现方式，需要被代理的目标类必须有接口（也就是目标类必须有实现的接口，如果只有一个没有实现接口的普通类是不行的）！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（<strong>如果有接口就用</strong>）<br><code>cglib</code>：（第三方的，导入spring包就有）通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（<strong>如果没有接口就用</strong>）<br>1、<code>JDK动态代理</code><br>JDK动态代理使用<code>java.lang.reflect.Proxy</code>这个类来进行实现的（JDK动态代理只能对接口中的方法进行增强）。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个jdk动态代理工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Object target;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.target = target;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">		Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">		<span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * invoke方法：就是代理对象执行的代理方法</span></span><br><span class="line"><span class="comment">			 * proxy：代理对象</span></span><br><span class="line"><span class="comment">			 * method：代理对象需要实现的方法</span></span><br><span class="line"><span class="comment">			 * args：method所对应的方法参数</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class="line">				<span class="comment">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class="line">				<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">		 * 其中有三个参数：</span></span><br><span class="line"><span class="comment">		 * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">		 * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">		 * 3、handler：设置代理对象实现目标对象方法的过程，也就是代理类所要执行的业务逻辑</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="comment">// 目标方法要实现的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Landlord</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 创建目标类</span></span><br><span class="line">		<span class="type">Landlord</span> <span class="variable">landlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Landlord</span>();</span><br><span class="line">		<span class="comment">// 创建代理工厂</span></span><br><span class="line">		<span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(landlord);</span><br><span class="line">		<span class="comment">// 创建代理对象，这里注意：必须转成接口类型，因为JDK动态代理是基于接口的！</span></span><br><span class="line">		<span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) proxyFactory.getProxy();</span><br><span class="line">		<span class="comment">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class="line">		proxy.rent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面也可以使用万能动态代理工具类来实现：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理有两个类Proxy和InvocationHandler</span></span><br><span class="line"><span class="comment"> * Proxy类是 生成得到代理类</span></span><br><span class="line"><span class="comment"> * InvocationHandler类是 处理代理实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//被代理的接口</span></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//生成得到代理类</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="built_in">this</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个日志功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String log)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;现在执行的操作是：&quot;</span> + log);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在时间是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接使用JDK动态代理：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标方法要实现的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Landlord</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent)Proxy.newProxyInstance(Test.class.getClassLoader(), Landlord.class.getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            </span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class="line">                <span class="comment">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class="line">		proxy.rent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、<code>Cglib</code>动态代理<br>使用<code>org.springframework.cglib.proxy.Enhancer</code>类进行实现的。<br>前提条件：必须引入<code>spring-context</code>依赖。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Landlord</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">		<span class="comment">// 将要代理的目标对象设置给代理对象</span></span><br><span class="line">		enhancer.setSuperclass(Landlord.class);</span><br><span class="line">		<span class="comment">// 设置回调函数，MethodInterceptor是回调类的实现类</span></span><br><span class="line">		enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * obj：代理对象</span></span><br><span class="line"><span class="comment">			 * method：目标方法</span></span><br><span class="line"><span class="comment">			 * args：目标方法的参数</span></span><br><span class="line"><span class="comment">			 * proxy：目标方法的代理对象</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class="line">				<span class="comment">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class="line">				<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="type">Landlord</span> <span class="variable">proxy</span> <span class="operator">=</span> (Landlord) enhancer.create();</span><br><span class="line">		proxy.rent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>



<hr>
<br/>



<h1 id="三、工厂模式（创建型模式）"><a href="#三、工厂模式（创建型模式）" class="headerlink" title="三、工厂模式（创建型模式）"></a>三、工厂模式（创建型模式）</h1><p>工厂模式分为：简单工厂模式、工厂方法模式、抽象工厂模式。<br>三者区别：<br>1、简单工厂模式，工厂是个类，负责创建具体的产品A类、产品B类；<br>2、工厂方法模式，将工厂变为接口（包含创建产品的抽象方法，这个创建产品的抽象方法由子类去实现），具体创建哪个产品由它的子类去创建；<br>3、抽象工厂模式，本来要创建的产品之前只有A、B两类，现在如果每个类都出现了两个型号（产品Aa型号、产品Ab型号、产品Ba型号和产品Bb型号），按照工厂方法模式的话，就需要新建四个工厂类（分别创建四个型号）去实现工厂接口。现在使用抽象工厂模式，直接在抽象工厂接口中增加创建产品Bb型号的方法，然后创建一个工厂类去实现这个抽象工厂接口，这个工厂类就可以创建Aa型号和Ab型号，也可以创建Ba型号和Bb型号。  </p>
<h3 id="1、简单工厂模式"><a href="#1、简单工厂模式" class="headerlink" title="1、简单工厂模式"></a>1、简单工厂模式</h3><p>简单工厂模式：定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例通常都具有共同的父类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Car接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Benz类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Benz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BMW类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Benz&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;BMW&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMW</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面工厂类中，如果需要增加一个<code>Audi</code>类，那么就需要修改工厂类中的代码，违反了开闭原则。<br>我们可以在工厂中使用反射来创建对象：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂类二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(Class&lt;? extends Car&gt; carClass)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> carClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用<code>工厂方法模式</code>（是简单工厂模式的升级版），将工厂类中方法抽象出来，让子类实现工厂方法，返回不同实例。  </p>
<h3 id="2、工厂方法模式"><a href="#2、工厂方法模式" class="headerlink" title="2、工厂方法模式"></a>2、工厂方法模式</h3><p>（1）将原来的工厂类抽象，定义一个工厂接口，让要创建的实体类的工厂类去实现这个接口。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Benz工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是Benz（奔驰汽车）工厂，只创建Benz（奔驰）&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BMW工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是BMW（宝马汽车）工厂，只创建BMW（宝马）&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMW</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）原来的Car接口和实现类不变。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Car接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Benz类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Benz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BMW类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">CarFactory</span> <span class="variable">benzFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BenzFactory</span>();</span><br><span class="line">		<span class="type">Car</span> <span class="variable">benz</span> <span class="operator">=</span> benzFactory.createCar();</span><br><span class="line">		benz.print();</span><br><span class="line">		</span><br><span class="line">		<span class="type">CarFactory</span> <span class="variable">bmwFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BMWFactory</span>();</span><br><span class="line">		<span class="type">Car</span> <span class="variable">bmw</span> <span class="operator">=</span> bmwFactory.createCar();</span><br><span class="line">		bmw.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、抽象工厂模式"><a href="#3、抽象工厂模式" class="headerlink" title="3、抽象工厂模式"></a>3、抽象工厂模式</h3><p>抽象工厂模式相当于工厂方法模式的升级版，工厂方法模式中，一个工厂只能生产一种产品，而抽象工厂模式中，一个工厂可以生产多种产品。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Engine <span class="title function_">createEngine</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品接口一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品接口二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Engine <span class="title function_">createEngine</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzEngine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMW</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Engine <span class="title function_">createEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWEngine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Benz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类三</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzEngine</span> <span class="keyword">implements</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BenzEngine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类四</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWEngine</span> <span class="keyword">implements</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMWEngine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">AbstractFactory</span> <span class="variable">benzFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BenzFactory</span>();</span><br><span class="line">		<span class="type">Car</span> <span class="variable">benz</span> <span class="operator">=</span> benzFactory.createCar();</span><br><span class="line">		benz.print();</span><br><span class="line">		<span class="type">Engine</span> <span class="variable">benzEngine</span> <span class="operator">=</span> benzFactory.createEngine();</span><br><span class="line">		benzEngine.print();</span><br><span class="line">		</span><br><span class="line">		<span class="type">AbstractFactory</span> <span class="variable">bmwFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BMWFactory</span>();</span><br><span class="line">		<span class="type">Car</span> <span class="variable">bmw</span> <span class="operator">=</span> bmwFactory.createCar();</span><br><span class="line">		bmw.print();</span><br><span class="line">		<span class="type">Engine</span> <span class="variable">bmwEngine</span> <span class="operator">=</span> bmwFactory.createEngine();</span><br><span class="line">		bmwEngine.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<br/>



<hr>
<br/>



<h1 id="四、单例模式"><a href="#四、单例模式" class="headerlink" title="四、单例模式"></a>四、单例模式</h1><p>作用：确保某个类只能创建一个对象。  </p>
<h3 id="1、饿汉式单例模式（预加载）"><a href="#1、饿汉式单例模式（预加载）" class="headerlink" title="1、饿汉式单例模式（预加载）"></a>1、饿汉式单例模式（预加载）</h3><p>获取对象时，对象早就创建好了（很饿）。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量，并new一个对象；<br>（3）定义一个静态方法，将上面new的对象返回。<br>很明显，没有使用该单例对象，该对象就被加载到了内存，会造成内存的浪费。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="comment">//（1）将类的构造器私有</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">A</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（2）定义一个静态变量，并new一个对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（3）定义一个静态方法，将上面new的对象返回</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了避免内存的浪费，我们可以采用懒加载，即用到该单例对象的时候再创建。  </p>
<h3 id="2、懒汉式单例模式（懒加载）"><a href="#2、懒汉式单例模式（懒加载）" class="headerlink" title="2、懒汉式单例模式（懒加载）"></a>2、懒汉式单例模式（懒加载）</h3><p>要用对象时，才开始创建创建对象。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量；<br>（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="comment">//（1）将类的构造器私有</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">B</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（2）定义一个静态变量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> B b;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> B <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(b == <span class="literal">null</span>) &#123;</span><br><span class="line">			b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、单例模式和线程安全"><a href="#3、单例模式和线程安全" class="headerlink" title="3、单例模式和线程安全"></a>3、单例模式和线程安全</h3><p>1、预加载只有一条语句return instance,这显然可以保证线程安全。但是，我们知道预加载会造成内存的浪费。<br>2、懒加载不浪费内存，但是无法保证线程的安全。首先，if判断以及其内存执行代码是非原子性的。其次，new Singleton()无法保证执行的顺序性。<br>不满足原子性或者顺序性，线程肯定是不安全的，这是基本的常识，不再赘述。我主要讲一下为什么new Singleton()无法保证顺序性。我们知道创建一个对象分三步：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memory=allocate();<span class="comment">//1:初始化内存空间</span></span><br><span class="line"> </span><br><span class="line">ctorInstance(memory);<span class="comment">//2:初始化对象</span></span><br><span class="line"></span><br><span class="line">instance=memory();<span class="comment">//3:设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure>
<p>jvm为了提高程序执行性能，会对没有依赖关系的代码进行重排序，上面2和3行代码可能被重新排序。我们用两个线程来说明线程是不安全的。线程A和线程B都创建对象。其中，A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象（线程不安全）。<br>3、保证懒加载的线程安全<br>我们首先想到的就是使用synchronized关键字：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="comment">//（1）将类的构造器私有</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">B</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（2）定义一个静态变量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> B b;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class="line">	<span class="comment">// 使用synchronized关键字保证线程安全</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> B <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(b == <span class="literal">null</span>) &#123;</span><br><span class="line">			b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>synchronized加载getInstace()函数上确实保证了线程的安全。但是，如果要经常的调用getInstance()方法，不管有没有初始化实例，都会唤醒和阻塞线程。为了避免线程的上下文切换消耗大量时间，如果对象已经实例化了，我们没有必要再使用synchronized加锁，直接返回对象，所以我们把sychronized加在if(instance&#x3D;&#x3D;null)判断语句里面，保证instance未实例化的时候才加锁，这里我们还需要使用另一个关键字volatile保证对象实例化过程的顺序性：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="comment">//（1）将类的构造器私有</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">B</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（2）定义一个静态变量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> B b;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class="line">	<span class="comment">// 使用synchronized关键字保证线程安全</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> B <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(b == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (B.class) &#123;</span><br><span class="line">				<span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">					b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<br/>



<hr>
<br/>



<h1 id="五、模板方法设计模式（行为型模式）"><a href="#五、模板方法设计模式（行为型模式）" class="headerlink" title="五、模板方法设计模式（行为型模式）"></a>五、模板方法设计模式（行为型模式）</h1><p>作用：提供一个方法作为完成某类功能的模板，具体实现让子类去实现。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 具体方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 具体的业务处理</span></span><br><span class="line">		System.out.println(<span class="string">&quot;相同的业务处理....&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 这里的处理根据子类不同而不同，调用模板方法</span></span><br><span class="line">		templateMethod();</span><br><span class="line">		System.out.println(<span class="string">&quot;相同的业务处理....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 模板方法，具体实现交给子类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SonOne</span> <span class="keyword">extends</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;子类一的业务处理....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SonTwo</span> <span class="keyword">extends</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;子类二的业务处理....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Demo</span> <span class="variable">sonOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SonOne</span>();</span><br><span class="line">		sonOne.method();</span><br><span class="line">		</span><br><span class="line">		<span class="type">Demo</span> <span class="variable">sonTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SonTwo</span>();</span><br><span class="line">		sonTwo.method();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>



<hr>
<br/>




]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>StringUtils中isEmpty和isBank的区别</title>
    <url>/2023/12/01/StringUtils%E4%B8%ADisEmpty%E5%92%8CisBank%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<h1 id="一、isEmpty系列"><a href="#一、isEmpty系列" class="headerlink" title="一、isEmpty系列"></a>一、isEmpty系列</h1><h3 id="1、StringUtils-isEmpty"><a href="#1、StringUtils-isEmpty" class="headerlink" title="1、StringUtils.isEmpty"></a>1、StringUtils.isEmpty</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isEmpty(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;&quot;</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; &quot;</span>) = <span class="literal">false</span></span><br><span class="line">StringUtils.isEmpty(“bob”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; bob &quot;</span>) = <span class="literal">false</span></span><br><span class="line">/</span><br><span class="line"> * 源码</span><br><span class="line"> * &lt;p&gt;NOTE: This method changed in Lang version <span class="number">2.0</span>.</span><br><span class="line"> * It no longer trims the CharSequence.</span><br><span class="line"> * That functionality is available in <span class="title function_">isBlank</span><span class="params">()</span>.&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * <span class="meta">@param</span> cs  the CharSequence to check, may be <span class="literal">null</span></span><br><span class="line"> * <span class="meta">@return</span> &#123;<span class="meta">@code</span> <span class="literal">true</span>&#125; <span class="keyword">if</span> the CharSequence is empty or <span class="literal">null</span></span><br><span class="line"> * <span class="meta">@since</span> <span class="number">3.0</span> Changed signature from <span class="title function_">isEmpty</span><span class="params">(String)</span> to <span class="title function_">isEmpty</span><span class="params">(CharSequence)</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cs == <span class="literal">null</span> || cs.length() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>是否为空，可以看到 “ “ 空格是会绕过这种空判断,因为是一个空格,并不是严格的空值,会导致 isEmpty(“ “)&#x3D;false。  </p>
<h3 id="2、StringUtils-isNotEmpty"><a href="#2、StringUtils-isNotEmpty" class="headerlink" title="2、StringUtils.isNotEmpty"></a>2、StringUtils.isNotEmpty</h3><p>相当于不为空， &#x3D; !isEmpty()。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !isEmpty(cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、StringUtils-isAnyEmpty"><a href="#3、StringUtils-isAnyEmpty" class="headerlink" title="3、StringUtils.isAnyEmpty"></a>3、StringUtils.isAnyEmpty</h3><p>是否有一个为空，只有一个为空，就为true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isAnyEmpty(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyEmpty(<span class="literal">null</span>, “foo”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyEmpty(<span class="string">&quot;&quot;</span>, “bar”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyEmpty(“bob”, “”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyEmpty(<span class="string">&quot; bob &quot;</span>, <span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyEmpty(<span class="string">&quot; &quot;</span>, “bar”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isAnyEmpty(“foo”, “bar”) = <span class="literal">false</span></span><br><span class="line">/  </span><br><span class="line"> * 源码</span><br><span class="line"> * <span class="meta">@param</span> css  the CharSequences to check, may be <span class="literal">null</span> or empty</span><br><span class="line"> * <span class="meta">@return</span> &#123;<span class="meta">@code</span> <span class="literal">true</span>&#125; <span class="keyword">if</span> any of the CharSequences are empty or <span class="literal">null</span></span><br><span class="line"> * <span class="meta">@since</span> <span class="number">3.2</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnyEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence... css)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ArrayUtils.isEmpty(css)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> CharSequence cs : css)&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(cs)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、StringUtils-isNoneEmpty"><a href="#4、StringUtils-isNoneEmpty" class="headerlink" title="4、StringUtils.isNoneEmpty"></a>4、StringUtils.isNoneEmpty</h3><p>相当于<code>!isAnyEmpty(css)</code>，必须所有的值都不为空才返回true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isNoneEmpty(<span class="literal">null</span>)             = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="literal">null</span>, <span class="string">&quot;foo&quot;</span>)      = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot;&quot;</span>, <span class="string">&quot;bar&quot;</span>)        = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;&quot;</span>)        = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot;  bob  &quot;</span>, <span class="literal">null</span>)  = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot; &quot;</span>, <span class="string">&quot;bar&quot;</span>)       = <span class="literal">true</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>)     = <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>


<h1 id="二、isBank系列"><a href="#二、isBank系列" class="headerlink" title="二、isBank系列"></a>二、isBank系列</h1><h3 id="1、StringUtils-isBlank"><a href="#1、StringUtils-isBlank" class="headerlink" title="1、StringUtils.isBlank"></a>1、StringUtils.isBlank</h3><p>是否为真空值（空格或者空值）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isBlank(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;&quot;</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot; &quot;</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isBlank(“bob”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot; bob &quot;</span>) = <span class="literal">false</span></span><br><span class="line">/</span><br><span class="line"> * &lt;p&gt;Checks <span class="keyword">if</span> a CharSequence is whitespace, empty (<span class="string">&quot;&quot;</span>) or <span class="literal">null</span>.&lt;/p&gt;</span><br><span class="line"> * <span class="meta">@param</span> cs  the CharSequence to check, may be <span class="literal">null</span></span><br><span class="line"> * <span class="meta">@return</span> &#123;<span class="meta">@code</span> <span class="literal">true</span>&#125; <span class="keyword">if</span> the CharSequence is <span class="literal">null</span>, empty or whitespace</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2.0</span></span><br><span class="line"> * <span class="meta">@since</span> <span class="number">3.0</span> Changed signature from <span class="title function_">isBlank</span><span class="params">(String)</span> to <span class="title function_">isBlank</span><span class="params">(CharSequence)</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> strLen;</span><br><span class="line">    <span class="keyword">if</span> (cs == <span class="literal">null</span> || (strLen = cs.length()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isWhitespace(cs.charAt(i)) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、StringUtils-isNotBlank"><a href="#2、StringUtils-isNotBlank" class="headerlink" title="2、StringUtils.isNotBlank"></a>2、StringUtils.isNotBlank</h3><p>是否真的不为空，不是空格或者空值，相当于<code>!isBlank()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isBlank(cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、StringUtils-isAnyBlank"><a href="#3、StringUtils-isAnyBlank" class="headerlink" title="3、StringUtils.isAnyBlank"></a>3、StringUtils.isAnyBlank</h3><p>是否包含任何真空值（包含空格或空值）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isAnyBlank(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(<span class="literal">null</span>, “foo”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(<span class="literal">null</span>, <span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(<span class="string">&quot;&quot;</span>, “bar”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(“bob”, “”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(<span class="string">&quot; bob &quot;</span>, <span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(<span class="string">&quot; &quot;</span>, “bar”) = <span class="literal">true</span></span><br><span class="line">StringUtils.isAnyBlank(“foo”, “bar”) = <span class="literal">false</span></span><br><span class="line"> /</span><br><span class="line"> * &lt;p&gt;Checks <span class="keyword">if</span> any one of the CharSequences are <span class="title function_">blank</span> <span class="params">(<span class="string">&quot;&quot;</span>)</span> or <span class="literal">null</span> and not whitespace only..&lt;/p&gt;</span><br><span class="line"> * <span class="meta">@param</span> css  the CharSequences to check, may be <span class="literal">null</span> or empty</span><br><span class="line"> * <span class="meta">@return</span> &#123;<span class="meta">@code</span> <span class="literal">true</span>&#125; <span class="keyword">if</span> any of the CharSequences are blank or <span class="literal">null</span> or whitespace only</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">3.2</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnyBlank</span><span class="params">(<span class="keyword">final</span> CharSequence... css)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ArrayUtils.isEmpty(css)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> CharSequence cs : css)&#123;</span><br><span class="line">    <span class="keyword">if</span> (isBlank(cs)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、StringUtils-isNoneBlank"><a href="#4、StringUtils-isNoneBlank" class="headerlink" title="4、StringUtils.isNoneBlank"></a>4、StringUtils.isNoneBlank</h3><p>是否全部都不包含空值或空格。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isNoneBlank(<span class="literal">null</span>) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="literal">null</span>, “foo”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="literal">null</span>, <span class="literal">null</span>) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="string">&quot;&quot;</span>, “bar”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(“bob”, “”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="string">&quot; bob &quot;</span>, <span class="literal">null</span>) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="string">&quot; &quot;</span>, “bar”) = <span class="literal">false</span></span><br><span class="line">StringUtils.isNoneBlank(“foo”, “bar”) = <span class="literal">true</span></span><br><span class="line">/</span><br><span class="line">* &lt;p&gt;Checks <span class="keyword">if</span> none of the CharSequences are <span class="title function_">blank</span> <span class="params">(<span class="string">&quot;&quot;</span>)</span> or <span class="literal">null</span> and whitespace only..&lt;/p&gt;</span><br><span class="line">* <span class="meta">@param</span> css  the CharSequences to check, may be <span class="literal">null</span> or empty</span><br><span class="line">* <span class="meta">@return</span> &#123;<span class="meta">@code</span> <span class="literal">true</span>&#125; <span class="keyword">if</span> none of the CharSequences are blank or <span class="literal">null</span> or whitespace only</span><br><span class="line">* <span class="meta">@since</span> <span class="number">3.2</span></span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNoneBlank</span><span class="params">(<span class="keyword">final</span> CharSequence... css)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !isAnyBlank(css);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>


<h1 id="三、StringUtils的其他方法"><a href="#三、StringUtils的其他方法" class="headerlink" title="三、StringUtils的其他方法"></a>三、StringUtils的其他方法</h1><p>可以参考官方的文档，里面有详细的描述,有些方法还是很好用的：<br><a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html">点击连接跳转</a></p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>消灭if...else...的方法</title>
    <url>/2023/12/01/%E6%B6%88%E7%81%ADif-else-%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<h1 id="一、使用函数式接口消灭"><a href="#一、使用函数式接口消灭" class="headerlink" title="一、使用函数式接口消灭"></a>一、使用函数式接口消灭</h1><p><strong>介绍：</strong>使用注解<code>@FunctionalInterface</code>标识，并且只包含一个抽象方法的接口是函数式接口。  </p>
<h3 id="1、内置的函数式接口："><a href="#1、内置的函数式接口：" class="headerlink" title="1、内置的函数式接口："></a>1、内置的函数式接口：</h3><p>1、<code>Supplier</code>供给型函数（不接受参数、只返回数据）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、<code>Consumer</code>消费型函数（接收一个参数，没有返回值）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs, in sequence, this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation. If performing either</span></span><br><span class="line"><span class="comment">     * operation throws an exception, it is relayed to the caller of the</span></span><br><span class="line"><span class="comment">     * composed operation.  If performing this operation throws an exception,</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@code</span> after&#125; operation will not be performed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the operation to perform after this operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs in sequence this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> after&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、<code>Runnable</code>无参无返回型函数（没有参数也没有返回值）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、<code>Function</code>函数（接收一个参数，并返回一个值）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function to its input, and then applies this function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="doctag">@code</span> before&#125; function, and to the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> before the function to apply before this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function and then applies this function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if before is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #andThen(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">     * its input, and then applies the &#123;<span class="doctag">@code</span> after&#125; function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="doctag">@code</span> after&#125; function, and of the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">     * applies the &#123;<span class="doctag">@code</span> after&#125; function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if after is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #compose(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、场景"><a href="#2、场景" class="headerlink" title="2、场景"></a>2、场景</h3><p>1、场景一（处理抛出异常的if）<br>（1）传统方式  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;出现异常了&quot;</span>)；</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>（2）使用函数式接口消灭if<br>a. 定义接口：定义一个抛出异常的形式的函数式接口, 这个接口只有参数没有返回值是个消费型接口；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛异常接口</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThrowExceptionFunction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抛出异常信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">throwMessage</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b. 编写判断工具类：创建工具类<code>IFtils</code>并创建一个<code>isTure</code>方法，方法的返回值为刚才定义的函数式接口-<code>ThrowExceptionFunction</code>，<code>ThrowExceptionFunction</code>的接口实现逻辑为当参数<code>b</code>为<code>true</code>时抛出异常；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  如果参数为true抛出异常</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.example.demo.func.ThrowExceptionFunction</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThrowExceptionFunction <span class="title function_">isTure</span><span class="params">(<span class="type">boolean</span> b)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorMessage) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (b)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c. 测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFUtils.isTure(<span class="literal">true</span>).throwMessage(<span class="string">&quot;出错啦!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、场景二（处理if分支操作）<br>（1）传统方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...)&#123;</span><br><span class="line">    doSomething.....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    doSomething.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）使用函数式接口消灭if…else…<br>a. 定义接口：创建一个名为<code>BranchHandle</code>的函数式接口，接口的参数为两个<code>Runnable</code>接口，这两个<code>Runnable</code>接口分别代表了为<code>true</code>或<code>false</code>时要进行的操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分支处理接口</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BranchHandle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分支操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trueHandle 为true时要进行的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> falseHandle 为false时要进行的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">trueOrFalseHandle</span><span class="params">(Runnable trueHandle, Runnable falseHandle)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b. 编写判断工具类：创建一个名为<code>isTureOrFalse</code>的方法，方法的返回值为刚才定义的函数式接口-<code>BranchHandle</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数为true或false时，分别进行不同的操作 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.example.demo.func.BranchHandle     </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BranchHandle <span class="title function_">isTureOrFalse</span><span class="params">(<span class="type">boolean</span> b)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (trueHandle, falseHandle) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (b)&#123;</span><br><span class="line">            trueHandle.run();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            falseHandle.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c. 测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFUtils.isTureOrFalse(<span class="literal">true</span>).trueOrFalseHandle(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;true:doSoming&quot;</span>);</span><br><span class="line">        &#125;, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;false:doSoming&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果存在值执行消费操作，否则执行基于空的操作：<br>a. 定义接口：创建一个名为<code>PresentOrElseHandler</code>的函数式接口，接口的参数一个为<code>Consumer</code>接口，一个为<code>Runnable</code>，分别代表值不为空时执行消费操作和值为空时执行的其他操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空值与非空值分支处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PresentOrElseHandler</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值不为空时执行消费操作</span></span><br><span class="line"><span class="comment">     * 值为空时执行其他的操作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 值不为空时，执行的消费操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emptyAction 值为空时，执行的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void    </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">presentOrElseHandle</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action, Runnable emptyAction)</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b. 编写判断工具类：创建一个名为<code>isBlankOrNoBlank</code>的方法，方法的返回值为刚才定义的函数式接口-<code>PresentOrElseHandler</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数为true或false时，分别进行不同的操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PresentOrElseHandler&lt;?&gt; isBlankOrNoBlank(String str)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (consumer, runnable) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            consumer.accept(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c. 测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFUtils.isBlankOrNoBlank(<span class="string">&quot;hello&quot;</span>).presentOrElseHandle(System.out::println, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空字符串！！！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>


<h1 id="二、使用策略-工厂模式消灭"><a href="#二、使用策略-工厂模式消灭" class="headerlink" title="二、使用策略+工厂模式消灭"></a>二、使用策略+工厂模式消灭</h1><p>1、传统方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;春天&quot;</span>) &#123;</span><br><span class="line">	dosoming...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;夏天&quot;</span>) &#123;</span><br><span class="line">	dosoming...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;秋天&quot;</span>) &#123;</span><br><span class="line">	dosoming...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;冬天&quot;</span>) &#123;</span><br><span class="line">	dosoming...</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure>
<p>2、策略+工厂模式方式<br>（1）创建策略接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理各种活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">dealActivity</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建各种活动实现该接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 春天活动</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringActivity</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;春季活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 夏天活动</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummerActivity</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;夏天活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秋天活动</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutumnActivity</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秋天活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冬天活动</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WinterActivity</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;冬天活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）新建策略类工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Strategy <span class="title function_">execute</span><span class="params">(Integer levelCode)</span>&#123;</span><br><span class="line">        <span class="type">Strategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (levelCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                strategy = <span class="keyword">new</span> <span class="title class_">SpringActivity</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                strategy = <span class="keyword">new</span> <span class="title class_">SummerActivity</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                strategy = <span class="keyword">new</span> <span class="title class_">AutumnActivity</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                strategy = <span class="keyword">new</span> <span class="title class_">WinterActivity</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;活动编号错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dealActivity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="type">Strategy</span> <span class="variable">strategy</span> <span class="operator">=</span> StrategyFactory.execute(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> strategy.dealActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>


<h1 id="三、Map-函数式接口"><a href="#三、Map-函数式接口" class="headerlink" title="三、Map+函数式接口"></a>三、Map+函数式接口</h1><p>1、将上述策略类全部作为方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityStrategyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealSpringActivity</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;春季活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealSummerActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;夏季活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealAutumnActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秋季活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealWinterActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;冬季活动逻辑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActivityStrategyService activityStrategyService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ActivityFunction</span>&lt;A&gt;&#123;</span><br><span class="line">        <span class="comment">//这里可以传参啊，我这里举例用不上参数</span></span><br><span class="line">        <span class="comment">//String dealActivity(A a);</span></span><br><span class="line">     String <span class="title function_">dealActivity</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, ActivityFunction&gt; strategyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDispatcher</span><span class="params">()</span>&#123;</span><br><span class="line">        strategyMap.put(<span class="number">1</span>,()-&gt;activityStrategyService.dealSpringActivity());</span><br><span class="line">        strategyMap.put(<span class="number">2</span>, ()-&gt; activityStrategyService.dealSummerActivity());</span><br><span class="line">        strategyMap.put(<span class="number">3</span>, ()-&gt; activityStrategyService.dealAutumnActivity());</span><br><span class="line">        strategyMap.put(<span class="number">4</span>, ()-&gt; activityStrategyService.dealWinterActivity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        ActivityFunction&lt;Integer&gt; function = strategyMap.get(code);</span><br><span class="line">        <span class="comment">//这里防止活动编号没匹配上，可以使用断言来判断从而抛出统一异常</span></span><br><span class="line">        <span class="keyword">return</span> function.dealActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActivityService activityService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dealActivity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealActivity</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line"><span class="comment">//        Strategy strategy = StrategyFactory.execute(1);</span></span><br><span class="line"><span class="comment">//        return strategy.dealActivity();</span></span><br><span class="line">        <span class="keyword">return</span> activityService.dealActivity(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 将Object对象转为列表</title>
    <url>/2024/01/16/Java-%E5%B0%86Object%E5%AF%B9%E8%B1%A1%E8%BD%AC%E4%B8%BA%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<p><strong>说明：</strong>在Java编程中，我们经常需要将一个对象（Object）转换为列表（List）的形式进行处理。这种转换通常用于数据的整理、存储和展示等操作。本文将介绍几种常用的方法来实现将Object转为列表的操作，并提供相应的代码示例。  </p>
<h1 id="方法一：手动转换"><a href="#方法一：手动转换" class="headerlink" title="方法一：手动转换"></a>方法一：手动转换</h1><p><strong>说明：</strong>最简单的方法是手动将Object的属性逐个提取出来，再将其添加到列表中。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// get、set方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">convertObjectToList</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(person.getName());</span><br><span class="line">    list.add(person.getAge());</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">objToList</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ArrayList&lt;?&gt;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object o : (List&lt;?&gt;) obj) &#123;</span><br><span class="line">            list.add(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方法的优点是灵活性较高，可以根据实际需求选择需要转换的属性。但是缺点是代码较为冗长，对于复杂的对象结构，需要编写大量的代码。  </p>
<br/>


<hr>
<br/>


<h1 id="方法二：Apache-Commons-BeanUtils"><a href="#方法二：Apache-Commons-BeanUtils" class="headerlink" title="方法二：Apache Commons BeanUtils"></a>方法二：Apache Commons BeanUtils</h1><p><strong>说明：</strong>Apache Commons BeanUtils是一个常用的Java工具库，其中提供了一个BeanUtils类，可以方便地将Java对象的属性转换为Map对象。然后，我们可以将Map对象转换为列表。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">convertObjectToList</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, object&gt; map = BeanUtils.describe(obj);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方法的优点是代码简洁，不需要手动提取对象的属性。但是缺点是需要引入额外的依赖库。  </p>
<br/>


<hr>
<br/>


<h1 id="方法三：使用反射"><a href="#方法三：使用反射" class="headerlink" title="方法三：使用反射"></a>方法三：使用反射</h1><p><strong>说明：</strong>反射是Java编程中的一个重要特性，可以在运行时动态地获取和操作对象的属性和方法。我们可以利用反射机制将Java对象的属性逐个提取出来，再将其添加到列表中。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">convertObjectToList</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        list.add(field.get(obj));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方法的优点是灵活性较高，可以适用于任意类型的对象。但是缺点是性能较差，对于大量的对象转换操作，会有一定的性能影响。  </p>
<br/>


<hr>
<br/>


<h1 id="方法四：使用Jackson库"><a href="#方法四：使用Jackson库" class="headerlink" title="方法四：使用Jackson库"></a>方法四：使用Jackson库</h1><p><strong>说明：</strong>Jackson是一个流行的Java库，可以方便地将Java对象转换为JSON格式的字符串。我们可以利用Jackson库将Java对象转换为JSON字符串，再将其解析为列表。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">convertObjectToList</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(obj);</span><br><span class="line">    <span class="keyword">return</span> objectMapper.readValue(json, List.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方法的优点是简洁、效率较高，并且可以处理复杂的对象结构。但是缺点是需要引入额外的依赖库。</p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 学习笔记</title>
    <url>/2024/01/16/Java8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h1><p>使用<code>Lambda</code>表达式，接口必须是函数式接口（只有一个方法的接口），并且函数式接口需要用注解<code>@FunctionalInterface</code>修饰（检查接口是不是函数式接口）。<br>一、Java内置的函数式接口<br>1、<code>Consumer&lt;T&gt;</code> 消费型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span></span><br></pre></td></tr></table></figure>
<p>2、<code>Supplier&lt;T&gt;</code> 供给型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">get</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>3、<code>Function&lt;T,R&gt;</code> 函数型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">R <span class="title function_">apply</span><span class="params">(T t)</span></span><br></pre></td></tr></table></figure>
<p>4、<code>Predicate&lt;T&gt;</code> 断言型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span></span><br></pre></td></tr></table></figure>
<p>5、<code>BiFunction&lt;T,U,R&gt;</code> 双参数函数型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">R <span class="title function_">apply</span><span class="params">(T t,U u)</span></span><br></pre></td></tr></table></figure>
<p>6、<code>UnaryOperator&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">apply</span><span class="params">(T t)</span></span><br></pre></td></tr></table></figure>
<p>7、<code>BinaryOperatoy&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">apply</span><span class="params">(T t1,T ,t2)</span></span><br></pre></td></tr></table></figure>
<p>8、<code>BiConsumer&lt;T,U&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t,U u)</span></span><br></pre></td></tr></table></figure>
<p>9、<code>ToIntFunction&lt;T&gt;、ToLongFunction&lt;T&gt;、ToDoubleFunction&lt;T&gt;</code><br>分别计算int、long、double值的函数式接口<br><a href="https://www.cnblogs.com/lwjQAQ/p/16321930.html">链接教程请点击</a><br>二、例子<br>1、使用内置接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">  <span class="comment">// 1、无参数，无返回值</span></span><br><span class="line">  <span class="comment">//使用函数式接口Runnable</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="comment">// 匿名内部类使用方式：</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>（）&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">    r.run();</span><br><span class="line">    <span class="comment">// Lambda方式使用：</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">    r1.run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、多个参数(如果只有一个参数小括号可以省略，如果方法体有多条语句必须写大括号)，无返回值</span></span><br><span class="line">  <span class="comment">// 一个参数使用Consumer接口</span></span><br><span class="line">  <span class="comment">// 两个参数使用Comparator接口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">    con.accept(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3、两个参数，有返回值</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    com.compare(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、使用自定义接口<br>（1）场景一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFun</span>&lt;T,R&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">getValue</span><span class="params">(T t1,T t2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator</span><span class="params">(Integer x,Integer y,MyFun&lt;Integer,Integer&gt; m)</span> &#123;</span><br><span class="line">    System.out.println(m.getValue(x,y));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    operator(<span class="number">3</span>,<span class="number">2</span>,(x,y) -&gt; x + y); <span class="comment">// 计算x+y等于5</span></span><br><span class="line">    operator(<span class="number">3</span>,<span class="number">2</span>,(x,y) -&gt; x * y); <span class="comment">// 计算x*y等于6</span></span><br><span class="line">    operator(<span class="number">3</span>,<span class="number">2</span>,(x,y) -&gt; x - y); <span class="comment">// 计算x-y等于1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）场景二  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Myfun</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">(Integer num)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">operation</span><span class="params">(Integer num,Myfun m)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.getValue(num);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> operation(<span class="number">100</span>,x -&gt; x + x);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、其他使用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个user类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id,String name,Integer age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给users排序，先按年龄排序，年龄相同按姓名排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">  List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">101</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">102</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">59</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">103</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">28</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">104</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">8</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">105</span>,<span class="string">&quot;田七&quot;</span>,<span class="number">38</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Collections.sort(users,(item1,item2) -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(item1.getAge() == item2.getAge()) &#123;</span><br><span class="line">        <span class="keyword">return</span> item1.getName().compareTo(item2.getName());</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -Integer.compare(item1.getAge(),item2.getAge()); <span class="comment">// 加个“-”号表示倒序排序</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 测试</span></span><br><span class="line">      <span class="keyword">for</span> (User user:users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><h3 id="1、获取指定元素的下标"><a href="#1、获取指定元素的下标" class="headerlink" title="1、获取指定元素的下标"></a>1、获取指定元素的下标</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加测试数据</span></span><br><span class="line">list.add(<span class="string">&quot;test1&quot;</span>);list.add(<span class="string">&quot;test2&quot;</span>);list.add(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;test4&quot;</span>);list.add(<span class="string">&quot;test5&quot;</span>);list.add(<span class="string">&quot;test6&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;test7&quot;</span>);list.add(<span class="string">&quot;test8&quot;</span>);list.add(<span class="string">&quot;test9&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">list.stream()</span><br><span class="line">    <span class="comment">//指定匹配逻辑</span></span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        <span class="comment">//每比对一个元素，数值加1</span></span><br><span class="line">        index.getAndIncrement();</span><br><span class="line">        <span class="keyword">return</span> s.equals(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .findFirst();</span><br><span class="line">	</span><br><span class="line">System.out.println(index.get());</span><br></pre></td></tr></table></figure>
<h3 id="2、reduce（归约）使用方法"><a href="#2、reduce（归约）使用方法" class="headerlink" title="2、reduce（归约）使用方法"></a>2、<code>reduce（归约）</code>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子：执行1+2+3+4+5</span></span><br><span class="line"><span class="comment">// 传统的方法：</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Integer i : list)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用java8方法：</span></span><br><span class="line"><span class="comment">// reduce解释：0是初始值，相当于第一次是0+a+b，</span></span><br><span class="line"><span class="comment">// 然后将0+a+b的值返回给初始值；第二次循环计算的时候，</span></span><br><span class="line"><span class="comment">// 初始值就不是0了，变成了0+a+b的值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>,(a,b) -&gt; a + b);</span><br><span class="line">System.out.println(<span class="string">&quot;sum2 = &quot;</span> + sum2);</span><br></pre></td></tr></table></figure>
<h3 id="3、分组使用方法"><a href="#3、分组使用方法" class="headerlink" title="3、分组使用方法"></a>3、分组使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组按数组每项的长度分组</span></span><br><span class="line"><span class="comment">// 传统方法</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">Map&lt;Integer,List&lt;String&gt;&gt; groups = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String s : list) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="comment">// groups没有包含length长度才执行if里面的</span></span><br><span class="line">    <span class="keyword">if</span>(!groups.containsKey(length))&#123;</span><br><span class="line">        groups.put(length,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    groups.get(length).add(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(groups);</span><br><span class="line"></span><br><span class="line"><span class="comment">// java8方法，下面的Collectors是java8中的</span></span><br><span class="line">Map&lt;Integer,List&lt;String&gt;&gt; groups2 = list.stream().collect(Collectors.groupingBy(String::length));</span><br><span class="line">System.out.println(groups2);</span><br></pre></td></tr></table></figure>
<h3 id="4、合并list的方式"><a href="#4、合并list的方式" class="headerlink" title="4、合并list的方式"></a>4、合并list的方式</h3><p>一、使用<code>addAll()</code>方法<br><strong>说明：</strong>这种方式简单直接，适用于两个List元素类型相同的场景。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Type&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">result.addAll(list1);</span><br><span class="line">result.addAll(list2);</span><br></pre></td></tr></table></figure>
<p>二、使用<code>Stream</code>的<code>concat()</code>方法<br><strong>说明：</strong>这也是一种简单的合并方式，同样要求两个List元素类型相同。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Type&gt; result = Stream.concat(list1.stream(), list2.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<p>三、使用<code>Stream</code>的<code>flatMap()</code>方法<br><strong>说明：</strong>这种方式通过Stream的flatMap()先将两个List展开为元素流，再使用collect()收集到一个List，更加灵活。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Type&gt; result = Stream.of(list1, list2).flatMap(list -&gt; list.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<p>四、如果两个List元素类型不同,可以：<br>1、先将每个List映射为对应的Stream，然后再concat：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; result = Stream.concat(list1.stream().map(x -&gt; (Object)x),</span><br><span class="line">                             list2.stream().map(x -&gt; (Object)x))</span><br><span class="line">                            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<p>2、或者使用flatMap()并在映射过程中统一元素类型：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; result =  Stream.of(list1, list2) .flatMap(list -&gt; list.stream().map(x -&gt;(Object)x))</span><br><span class="line">                                               .collect(Collectors.toList()); </span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="三、API"><a href="#三、API" class="headerlink" title="三、API"></a>三、API</h1><h3 id="1、AtomicInteger类-原子计数器（线程安全）"><a href="#1、AtomicInteger类-原子计数器（线程安全）" class="headerlink" title="1、AtomicInteger类 原子计数器（线程安全）"></a>1、AtomicInteger类 原子计数器（线程安全）</h3><h3 id="2、LocalDate类（时间）"><a href="#2、LocalDate类（时间）" class="headerlink" title="2、LocalDate类（时间）"></a>2、LocalDate类（时间）</h3><p>一、获取当前时间  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br></pre></td></tr></table></figure>
<p>二、自定义获取时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">formatDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2018</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>三、获取月份</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ldt.getMonth()); <span class="comment">// 获取英文的月份 SEPTEMBER</span></span><br><span class="line">System.out.println(ldt.getMonthValue()); <span class="comment">// 获取数字 9</span></span><br><span class="line">System.out.println(ldt.getDayOfMonth()); <span class="comment">// 获取当前月份有多少天 30</span></span><br></pre></td></tr></table></figure>
<p>四、获取下个或者上个当前时间（plusX()、minusX()）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(ldt); <span class="comment">// 当前时间 2023-09-20T17:30:56.492057200</span></span><br><span class="line">System.out.println(ldt.plusDays(<span class="number">1</span>)); <span class="comment">// 明天的当前时间 2023-09-21T17:30:56.492057200</span></span><br><span class="line">System.out.println(ldt.plusWeeks(<span class="number">1</span>)); <span class="comment">// 下周也就是7天后的当前时间 2023-09-27T17:30:56.492057200</span></span><br><span class="line">System.out.println(ldt.minusMonths(<span class="number">1</span>)); <span class="comment">// 上个月的当前时间 2023-08-20T17:30:56.492057200</span></span><br></pre></td></tr></table></figure>
<p>五、其它用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同环比日期计算</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">firstWeekDay</span> <span class="operator">=</span> formatDate.with(TemporalAdjusters.previous(DayOfWeek.MONDAY));</span><br><span class="line">System.out.println(firstWeekDay); <span class="comment">// 2020-02-03 本周第一天</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">firstMonthDay</span> <span class="operator">=</span> formatDate.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class="line">System.out.println(firstMonthDay); <span class="comment">// 2020-02-01 本月第一天</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">firstYearDay</span> <span class="operator">=</span> formatDate.with(TemporalAdjusters.firstDayOfYear());</span><br><span class="line">System.out.println(firstYearDay); <span class="comment">// 2020-01-01 本年第一天</span></span><br><span class="line"><span class="comment">// 判断两个日期前后</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">param</span> <span class="operator">=</span> formatDate.isBefore(today);</span><br><span class="line">System.out.println(param); <span class="comment">// true 判断a是否早于b</span></span><br><span class="line"><span class="comment">// 计算两个日期的间隔天数</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2019-12-01&quot;</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2020-02-05&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> start.until(end, ChronoUnit.DAYS);</span><br><span class="line">System.out.println(<span class="string">&quot;days: &quot;</span> + days); <span class="comment">// days: 66</span></span><br></pre></td></tr></table></figure>
<p>六、<code>LocalDate</code>转<code>String</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">fmt</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> date.format(fmt);</span><br><span class="line">System.out.println(<span class="string">&quot;LocalDate转String:&quot;</span>+dateStr); <span class="comment">// LocalDate转String:2023-09-21</span></span><br></pre></td></tr></table></figure>
<p>七、<code>String</code>转<code>LocalDate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">dateParam</span> <span class="operator">=</span> LocalDate.parse(dateStr, df);</span><br><span class="line">System.out.println(<span class="string">&quot;String =&gt; LocalDate: &quot;</span> + dateParam);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Arrays.asList、ArrayList.subList注意事项</title>
    <url>/2024/01/16/%E4%BD%BF%E7%94%A8Arrays-asList%E3%80%81ArrayList-subList%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<br/>


<hr>
<br/>

<h1 id="一、Arrays-asList"><a href="#一、Arrays-asList" class="headerlink" title="一、Arrays.asList"></a>一、Arrays.asList</h1><p>1、例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(list.contains(<span class="number">1</span>));</span><br><span class="line">System.out.println(list.contains(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>往list中添加元素3：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(list.contains(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">抛出java.lang.UnsupportedOperationException异常</span><br></pre></td></tr></table></figure>
<p>2、原因：<br>查看源码得知，Arrays.asList方法中，返回的ArrayList不是我们new List那个ArrayList，我们new List那个ArrayList是位于java.util包下的，而这个Arrays.asList方法中返回的ArrayList是Arrays类的内部类，它继承了AbstractList类，没有重写add方法，所以当我们调用add方法时才会抛出异常。<br>3、总结：<br>使用工具类Arrays.asList()把数组转成集合时，不能使用其修改集合相关的方法，比如：add、remove、clear等方法，会抛出异常。  </p>
<br/>


<hr>
<br/>


<h1 id="二、ArrayList-subList"><a href="#二、ArrayList-subList" class="headerlink" title="二、ArrayList.subList"></a>二、ArrayList.subList</h1><p>1、例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">lsit.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;水浒传&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; listSub = list.subList(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(listSub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br><span class="line">[ <span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>可以看出，subList方法返回的是list中索引从2（包含）到4（不包含）的元素集合。<br>2、问题注意：<br>（1）修改原集合的值，会影响子集合  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改原集合第二个元素红楼梦 -》简爱</span></span><br><span class="line">list.set(<span class="number">2</span>, <span class="string">&quot;简爱&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(listSub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;简爱&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br><span class="line">[ <span class="string">&quot;简爱&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>可以看出，修改原集合的值，子集合也会跟着被修改。<br>（2）修改原集合的结构，对子集合操作时会抛出异常<br><strong>注意：</strong>只有在对子集合操作时才会抛出异常。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向原集合添加新元素，会抛出ConcurrentModificationException异常</span></span><br><span class="line">list.add(<span class="string">&quot;简爱&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(listSub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;简爱&quot;</span>,<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;简爱&quot;</span>]</span><br><span class="line"><span class="comment">// 子集合输出时，会抛出ConcurrentModificationException异常</span></span><br></pre></td></tr></table></figure>
<p>（3）修改子集合的值，会影响原集合  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listSub.set(<span class="number">0</span>, <span class="string">&quot;简爱&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(listSub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;简爱&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br><span class="line">[ <span class="string">&quot;简爱&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>可以看出，修改子集合元素，原集合元素也跟着被修改了。<br>（4）修改子集合的结构，会影响原集合  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listSub.add(<span class="string">&quot;简爱&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(listSub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;简爱&quot;</span>]</span><br><span class="line">[ <span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;简爱&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>3、问题解析：<br>（1）查看subList方法源码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得知subList方法中，调用了SubList类的构造函数</span></span><br><span class="line"><span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubList</span>(<span class="built_in">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubList类的构造函数源码</span></span><br><span class="line">SubList(AbstractList&lt;E&gt; parent, <span class="type">int</span> offset, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex) &#123;</span><br><span class="line">    <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    <span class="built_in">this</span>.parentOffset = fromIndex;</span><br><span class="line">    <span class="built_in">this</span>.offset = offset + fromIndex;</span><br><span class="line">    <span class="built_in">this</span>.size = toIndex - fromIndex;</span><br><span class="line">    <span class="built_in">this</span>.modCount = ArraryList.<span class="built_in">this</span>.modCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，SubList类是ArrayList的内部类，该构造函数中也并没有重新创建一个新的ArrayList，所以修改原集合或子集合的元素，会相互影响。<br>4、总结：<br>（1）在定义方法时，如果返回值类型是List的话，一定要思考是否允许修改，如果不允许修改，在方法注释上，一定要说明清楚！<br>（2）我们可以使用Guava提供的方法，去创建一个新的List：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lists.newArrayList(E... elements)</span><br><span class="line">Sets.newHashSet(E... elements)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 特殊运算符（异或、右位移等）</title>
    <url>/2024/01/23/java-%E7%89%B9%E6%AE%8A%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E5%BC%82%E6%88%96%E3%80%81%E5%8F%B3%E4%BD%8D%E7%A7%BB%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、instanceof"><a href="#一、instanceof" class="headerlink" title="一、instanceof"></a>一、instanceof</h1><p><strong>说明：</strong>检查是否是某个类的对象。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (str <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Object) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>



<h1 id="二、-（异或）"><a href="#二、-（异或）" class="headerlink" title="二、^（异或）"></a>二、^（异或）</h1><p>1、特点：<br>（1）<code>1^1=0 , 0^0=0 , 1^0=1 , 0^1=1</code>，相同则为false，不同则为true；<br>（2）当一个数据被另一个数据^两次，得到的数据依然是之前的数据。  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">6 ^ 3 亦或运算：(亦或运算特点:两边相同false,两边不同为true  记忆：亦或，有真就行，但是全真不行)</span><br><span class="line"><span class="code">  0000-0000 0000-0000 0000-0000 0000-0110         6的二进制</span></span><br><span class="line"><span class="section">^ 0000-0000 0000-0000 0000-0000 0000-0011         3的二进制</span></span><br><span class="line"><span class="section">-----------------------------------------------------------</span></span><br><span class="line"><span class="code">  0000-0000 0000-0000 0000-0000 0000-0101         转为十进制为5</span></span><br><span class="line"><span class="section">^ 0000-0000 0000-0000 0000-0000 0000-0011         3的二进制 (再亦或同一个数)</span></span><br><span class="line"><span class="section">-----------------------------------------------------------</span></span><br><span class="line"><span class="code">  0000-0000 0000-0000 0000-0000 0000-0110         转为十进制为6</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line">所以： 6 ^ 3 = 5        5 ^ 3 = 6  (亦或的特点:同时亦或一个相同的数据两次，结果还是这个数)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示特点1：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span> ^ <span class="literal">true</span> ;</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span> ^ <span class="literal">false</span> ;</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">false</span> ^ <span class="literal">true</span> ;</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> <span class="literal">false</span> ^ <span class="literal">false</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 演示特点2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>, b = <span class="number">456</span>;</span><br><span class="line">        a = a ^ b;</span><br><span class="line">		System.out.println(a); <span class="comment">// 435</span></span><br><span class="line">        b = b ^ a;</span><br><span class="line">		System.out.println(b); <span class="comment">// 123</span></span><br><span class="line">        a = a ^ b;</span><br><span class="line">        System.out.println(a); <span class="comment">// 456</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="三、-（与运算）"><a href="#三、-（与运算）" class="headerlink" title="三、&amp;（与运算）"></a>三、&amp;（与运算）</h1><p>1、特点：<code>1&amp;1=1 , 1&amp;0=0 , 0&amp;0=0</code>，0相当于false，1相当于true，只有两边都为true时才为true。<br>2、<code>6 &amp; 3 = 2</code>：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> &amp; <span class="number">3</span> 与运算: (与运算特点：有一个false则为false)</span><br><span class="line">  <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0110</span>         <span class="number">6</span>的二进制</span><br><span class="line">&amp; <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0011</span>         <span class="number">3</span>的二进制</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">  <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0010</span>         转为十进制为<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">所以： <span class="number">6</span> &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">HashMap的源码里有个计算： (n - <span class="number">1</span>) &amp; hash，其实刚初始化的时候计算结果无论如何都在<span class="number">16</span>以内。</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="四、-（或运算）"><a href="#四、-（或运算）" class="headerlink" title="四、|（或运算）"></a>四、|（或运算）</h1><p>1、特点：<code>1|1=1 , 1|0=1 , 0|0=0</code>，0相当于false，1相当于true，有一个true则为true，记忆：有真就行。<br>2、<code>6 | 3 = 7</code>：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> | <span class="number">3</span> 或运算: (或运算特点：有一个true则为true  记忆：或，有真就行。)</span><br><span class="line">  <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0110</span>         <span class="number">6</span>的二进制</span><br><span class="line">| <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0011</span>         <span class="number">3</span>的二进制</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">  <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0000</span> <span class="number">0000-0111</span>         转为十进制为<span class="number">7</span></span><br><span class="line"> </span><br><span class="line">所以： <span class="number">6</span> | <span class="number">3</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>



<h1 id="五、"><a href="#五、" class="headerlink" title="五、&lt;&lt;（左移）"></a>五、&lt;&lt;（左移）</h1><p>1、左移两位：<code>3 &lt;&lt; 2 = 12  --&gt; 3 * 2 * 2 = 12</code>;<br>2、左移三位：<code>3 &lt;&lt; 3 = 24  --&gt; 3 * 2 * 2 * 2 = 24</code>;  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3 &lt;&lt; 2</span><br><span class="line"><span class="section">  0000-0000 0000-0000 0000-0000 0000-0011        3的二进制</span></span><br><span class="line"><span class="section">----------------------------------------------------------</span></span><br><span class="line"><span class="code">  0000-0000 0000-0000 0000-0000 0000-1100        把实际数据向左移2位，转为10进制为12</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line">所以： 3 &lt;&lt; 2 = 12 ,口算方法： 3 * 2 * 2 = 12</span><br><span class="line">例如： 1 &lt;&lt; 3 = 8 ,口算方法： 1 * 2 * 2 * 2 = 8</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="六、-（右移）和-（无符号右移）"><a href="#六、-（右移）和-（无符号右移）" class="headerlink" title="六、&gt;&gt;（右移）和 &gt;&gt;&gt;（无符号右移）"></a>六、&gt;&gt;（右移）和 &gt;&gt;&gt;（无符号右移）</h1><p>1、右移一位：<code>3 &gt;&gt; 1 = 1   --&gt; 3 / 2 = 1</code>;<br>2、右移两位：<code>3 &gt;&gt; 2 = 1   --&gt; 3 / 2 / 2 = 0</code>;  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">负数右移高位无论如何都是1</span><br><span class="line">3 &gt;&gt; 1</span><br><span class="line"><span class="section">  0000-0000 0000-0000 0000-0000 0000-0011        3的二进制</span></span><br><span class="line"><span class="section">----------------------------------------------------------</span></span><br><span class="line"><span class="code">  0000-0000 0000-0000 0000-0000 0000-0001        转十进制后为1</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line">所以： 3 &gt;&gt; 1 = 1 ,口算方法： 3 / 2 = 1 余数为 1</span><br><span class="line">例如： 3 &gt;&gt; 2 = 0 ,口算方法： 3 / 2 / 2 余数为 0</span><br></pre></td></tr></table></figure>
<p>3、具体示例：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">32 &gt;&gt; 1 = 16</span><br><span class="line">0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0010<span class="string">-0000</span></span><br><span class="line">0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0001<span class="string">-0000</span></span><br><span class="line"> </span><br><span class="line">32 &gt;&gt;&gt; 1 = 16</span><br><span class="line">0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0010<span class="string">-0000</span></span><br><span class="line">0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0001<span class="string">-0000</span>   </span><br><span class="line"> </span><br><span class="line"><span class="string">-32</span> &gt;&gt; 1 = <span class="string">-16</span></span><br><span class="line">1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1110<span class="string">-0000</span></span><br><span class="line">1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-0000</span></span><br><span class="line"> </span><br><span class="line"><span class="string">-32</span> &gt;&gt;&gt; 1 = 2147483632</span><br><span class="line">1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1110<span class="string">-0000</span></span><br><span class="line">0111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-0000</span></span><br></pre></td></tr></table></figure>
<p>4、区别：<br>（1）无符号右移，数据右移时，二进制最高位出现的空位，无论原高位是什么，空位都用0补位；<br>（2）有符号右移，需要先看正负，正的同无符号右移，负数最高位补1。  </p>
<br/>


<hr>
<br/>


<h1 id="七、-（反码）"><a href="#七、-（反码）" class="headerlink" title="七、~（反码）"></a>七、~（反码）</h1><p>1、<code>~6</code>反码运算：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">	0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0110</span>         6的二进制</span><br><span class="line">~</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">	1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1001</span>         转为十进制为<span class="string">-7</span></span><br><span class="line">简单运算方法：<span class="string">-6</span><span class="string">-1</span> = <span class="string">-7</span>  (其实就是：取该值得负数减1)</span><br></pre></td></tr></table></figure>
<p>2、<code>~-7</code>反码运算：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">	1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1111</span> 1111<span class="string">-1001</span>        <span class="string">-7</span>的二进制</span><br><span class="line">~</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">	0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0000</span> 0000<span class="string">-0110</span>        转为十进制为6</span><br><span class="line">结果： 取<span class="string">-7</span>的负数减1 (-<span class="string">-7</span><span class="string">-1</span> = 7<span class="string">-1</span> = 6)</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="八、s-4和s-s-4的区别"><a href="#八、s-4和s-s-4的区别" class="headerlink" title="八、s +&#x3D; 4和s &#x3D; s + 4的区别"></a>八、s +&#x3D; 4和s &#x3D; s + 4的区别</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 不会报错，会自动强转 s = (byte)(s + 4)，输出：-125</span></span><br><span class="line">        System.out.println(s += <span class="number">4</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 编译报错，因为4为int类型，如果还用低级别类型接收数据，就必须手动强转</span></span><br><span class="line">        System.out.println(s = s + <span class="number">4</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 将上面System.out.println(s = s + 4);改为下面的就不会报错了</span></span><br><span class="line">		System.out.println(s = (<span class="type">byte</span>) (s + <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="九、-（自增）和–（自减）"><a href="#九、-（自增）和–（自减）" class="headerlink" title="九、++（自增）和–（自减）"></a>九、++（自增）和–（自减）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOne</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">		<span class="comment">// 第一个s++：先使用s，再执行 +1操作，所以是3；</span></span><br><span class="line">		<span class="comment">// 第二个++s：因为s已经+1变成4了，然后先执行+1操作，再使用s，所以是5；</span></span><br><span class="line">		<span class="comment">// 第三个s++：同第一个一样，所以是5，但是实际s的值是6；</span></span><br><span class="line">        <span class="comment">// 3 + 5 + 5		</span></span><br><span class="line">        <span class="comment">//s = s++ + ++s + s++;</span></span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line"> </span><br><span class="line">        System.out.println(s++);  <span class="comment">//3</span></span><br><span class="line">        System.out.println(++s);  <span class="comment">//5</span></span><br><span class="line">        System.out.println(s++);  <span class="comment">//5</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>,b;</span><br><span class="line">        b= a++;</span><br><span class="line">        System.out.println(b+<span class="string">&quot;,&quot;</span>+a); <span class="comment">// 3,4</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//a++; // 相当于 a = a + 1</span></span><br><span class="line">        <span class="comment">//int c = 5++;  // 编译报错,应该是编译后为： 5 = 5 + 1;  所以报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习笔记</title>
    <url>/2024/03/04/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、基础知识记录"><a href="#一、基础知识记录" class="headerlink" title="一、基础知识记录"></a>一、基础知识记录</h1><p>1、属性用法  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 孩子选择 */</span></span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-class">.middle-section1</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">8</span>)) &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">list-style</span>: none; <span class="comment">/* 隐藏ul前面的点 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>; <span class="comment">/* 首行缩进2em */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以本css文件为对象：home.css/../img/aa.png。home.css回退到html文件夹 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/aa.png&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: block; <span class="comment">/* 将元素变为块级元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">white-space</span>:nowrap; <span class="comment">/* 规定段落中的文本不进行换行 */</span></span><br></pre></td></tr></table></figure>
<p>2、<code>content</code>属性与<code>:before</code>及<code>:after</code>伪元素配合使用，来插入生成内容。<br>3、定位<br>（1）绝对定位：使用通常是父级定义<code>position:relative</code>定位，子级定义<code>position:absolute</code>绝对定位属性，并且子级使用<code>left</code>或<code>right</code>和<code>top</code>或<code>bottom</code>进行绝对定位。如果没有设置父级元素<code>position:relative</code>，设置了<code>position:absolute</code>的子级会相对于浏览器窗口来进行偏移；<br>（2）相对定位：<code>position:relative</code>，相对于原来的位置偏移。<br>4、<code>text-overflow</code>参数值和解释：<br>（1）<code>clip</code>：不显示省略标记<code>（...）</code>，而是简单的裁切；<br>（2）<code>ellipsis</code>：当对象内文本溢出时显示省略标记<code>（...）</code>。<br>5、属性选择器<br>（1）<code>=</code>绝对等于；<br>（2）<code>*=</code>包含这个元素；<br>（3）<code>^=</code>以这个开头；<br>（2）<code>$=</code>以这个结尾。  </p>
<br/>


<hr>
<br/>



<h1 id="二、各种样式记录"><a href="#二、各种样式记录" class="headerlink" title="二、各种样式记录"></a>二、各种样式记录</h1><h3 id="1、div标签鼠标悬停提示"><a href="#1、div标签鼠标悬停提示" class="headerlink" title="1、div标签鼠标悬停提示"></a>1、div标签鼠标悬停提示</h3><p>1、鼠标悬停在下方的元素上时，将显示一个tooltip提示：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span></span><br><span class="line">Hover me</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tooltiptext&quot;</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>: <span class="number">125%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">visibility</span>: visible;</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、鼠标悬停在下方的元素上时，将显示动态生成的HTML内容：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span></span><br><span class="line">Hover me</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tooltiptext&quot;</span>&gt;</span></span><br><span class="line">Tooltip Content</span><br><span class="line">This is a tooltip with dynamic content.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>: <span class="number">125%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">visibility</span>: visible;</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、四角边框"><a href="#2、四角边框" class="headerlink" title="2、四角边框"></a>2、四角边框</h3><p>（1）方法一：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;border_style&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.border_style</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) left top,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) left top,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) right top,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) right top,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) left bottom,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) left bottom,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) right bottom,</span></span><br><span class="line"><span class="language-css">  <span class="built_in">linear-gradient</span>(<span class="number">#33cdfa</span>, <span class="number">#33cdfa</span>) right bottom;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#33cdfa</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-size</span>: <span class="number">0.2vw</span> <span class="number">1.5vw</span>, <span class="number">1.5vw</span> <span class="number">0.2vw</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）方法二：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 也可以使用下面的</span><br><span class="line"><span class="attribute">background</span>:</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to top, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) left top no-repeat, //上左</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to right, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) left top no-repeat, //左上</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to left, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) right top no-repeat, //上右</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) right top no-repeat, //上右</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to left, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) left bottom no-repeat, //下左</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) left bottom no-repeat, //左下</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to top, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) right bottom no-repeat, //下右</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to left, <span class="number">#26aad1</span>, <span class="number">#26aad1</span>) right bottom no-repeat; //右下</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">2px</span> <span class="number">10px</span>, <span class="number">10px</span> <span class="number">2px</span>, <span class="number">2px</span> <span class="number">10px</span>, <span class="number">10px</span> <span class="number">2px</span>;</span><br></pre></td></tr></table></figure>
<p>（3）方法三：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.panel</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>,<span class="number">186</span>,<span class="number">139</span>,<span class="number">0.17</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.panel-footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        &amp;<span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、鼠标悬浮效果"><a href="#3、鼠标悬浮效果" class="headerlink" title="3、鼠标悬浮效果"></a>3、鼠标悬浮效果</h3><p>1、表单整体悬浮效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.login-form</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、CSS鼠标悬浮盒子边框加载效果  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>边框加载效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 上边和右边 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">5px</span> solid <span class="built_in">rgb</span>(<span class="number">225</span>, <span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">5px</span> solid <span class="built_in">rgb</span>(<span class="number">225</span>, <span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 添加移开鼠标的过渡效果 高度延时1s触发*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">3s</span>, height <span class="number">1s</span> linear <span class="number">2s</span>,opacity <span class="number">0s</span> linear <span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 下边和左边 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 注意边框位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid <span class="built_in">rgb</span>(<span class="number">225</span>, <span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="built_in">rgb</span>(<span class="number">225</span>, <span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 小坑 此处用top的话 会向下伸长 不会向上 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 添加移开鼠标的过渡效果 高度延时1s触发*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">1s</span>, height <span class="number">1s</span> linear,opacity <span class="number">0s</span> linear <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* before变化 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 添加过渡效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: width <span class="number">1s</span> linear, height <span class="number">1s</span> linear <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* after变化 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 添加过渡效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">2s</span>, height <span class="number">1s</span> linear <span class="number">3s</span>,opacity <span class="number">0s</span> linear <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>鼠标放上来试试<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、表单项悬浮放大效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-form-item</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.02</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.el-input__inner</span> &#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.input-icon</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、图标颜色变化效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.input-icon</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: color <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-form-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.input-icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、标题悬浮效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">    </span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#409EFF</span>;</span><br><span class="line">      <span class="attribute">animation</span>: underline <span class="number">0.3s</span> ease;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> underline &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">width</span>: <span class="number">50px</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、验证码图片悬浮效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.login-code-img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、注册链接悬浮效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.link-type</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#409EFF</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">5px</span>);</span><br><span class="line">    </span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;→&#x27;</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、媒体查询"><a href="#4、媒体查询" class="headerlink" title="4、媒体查询"></a>4、媒体查询</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 约束屏幕尺寸</span><br><span class="line">// 如果屏幕尺寸宽度小于<span class="number">1024</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">42px</span> <span class="meta">!important</span>; // <span class="number">1024</span> / <span class="number">24</span> = <span class="number">42</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 如果屏幕尺寸宽度大于<span class="number">1920</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1920px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">80px</span> <span class="meta">!important</span>; // <span class="number">1920</span> / <span class="number">24</span> = <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、字体颜色渐变"><a href="#5、字体颜色渐变" class="headerlink" title="5、字体颜色渐变"></a>5、字体颜色渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> class=&quot;title&quot;&gt;新建告警&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, white, <span class="number">#C7D9EF</span>, <span class="number">#83CDFF</span>);</span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">32px</span> <span class="number">36px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Source Han Sans&#x27;</span>;</span><br><span class="line">    // <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、边框阴影"><a href="#6、边框阴影" class="headerlink" title="6、边框阴影"></a>6、边框阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myWarp</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="number">0</span> <span class="number">#176c9d4d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0a1032</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、改变element单选框的样式"><a href="#7、改变element单选框的样式" class="headerlink" title="7、改变element单选框的样式"></a>7、改变element单选框的样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 圆的改成方的</span><br><span class="line">::v-deep .el-radio__inner &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">// 文字和单选之间的距离</span><br><span class="line">::v-deep .el-radio__label &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 选中状态改变成对钩</span><br><span class="line">::v-deep .el-radio__input.is-checked .el-radio__inner::after &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">border-top</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: transparent;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、vue的动画效果"><a href="#8、vue的动画效果" class="headerlink" title="8、vue的动画效果"></a>8、vue的动画效果</h3><p>（1）传统手写动画样式  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;!-- 如果没有name属性，下面css样式（hello-enter-active）默认为v-enter-active --&gt;</span><br><span class="line">    &lt;!-- appear属性表示页面第一次加载也有动画 --&gt;</span><br><span class="line">    &lt;!-- 单个的 --&gt;</span><br><span class="line">    &lt;transition name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 多个的 --&gt;</span><br><span class="line">    &lt;transition -group name=&quot;hello&quot; appear&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;我好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Demo&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isShow: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* ---------------第一种方法---------------- */</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.hello-enter-active &#123;</span><br><span class="line">  animation: test 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">.hello-leave-active&#123;</span><br><span class="line">  animation: test 1s reverse; /* reverse 取反 */</span><br><span class="line">&#125;</span><br><span class="line">/* 从左到右显示淡入淡出动画 */</span><br><span class="line">@keyframes test &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    transform: translateX(-100%);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    transform: translateX(0px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*-------------------------------------------*/</span><br><span class="line"></span><br><span class="line">/* ---------------第二种方法---------------- */</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">/* vue提供的class，进入的起点、离开的终点 */</span><br><span class="line">.hello-enter, .hello-leave-to &#123;</span><br><span class="line">  transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line">/* vue提供的class，进入时候的过程、离开时候的过程 */</span><br><span class="line">.hello-enter-active, .hello-leave-active &#123;</span><br><span class="line">  transition: 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">/* vue提供的class，进入的终点、离开的起点 */</span><br><span class="line">.hello-enter-to, .hello-leave &#123;</span><br><span class="line">  transform: translateX(0);</span><br><span class="line">&#125;</span><br><span class="line">/*-------------------------------------------*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>（2）使用第三方动画库（<code>animate.css</code>）<br>安装<code>npm install animate.css --save</code>或者<code>yarn animate.css</code>。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">      name=&quot;animate__animated animate__bounce&quot; </span><br><span class="line">      appear</span><br><span class="line">      enter-active-class=&quot;animate__swing&quot;</span><br><span class="line">      leave-active-class=&quot;animate__swing&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 导入animate.css</span><br><span class="line">  import &#x27;animate.css&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Demo&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isShow: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9、弹性布局"><a href="#9、弹性布局" class="headerlink" title="9、弹性布局"></a>9、弹性布局</h3><p><code>flex</code>：弹性布局，适用于响应式页面结构。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure>

<h3 id="10、网格布局"><a href="#10、网格布局" class="headerlink" title="10、网格布局"></a>10、网格布局</h3><p><code>grid</code>：网格布局，适合复杂二维布局。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure>

<h3 id="11、粘性定位"><a href="#11、粘性定位" class="headerlink" title="11、粘性定位"></a>11、粘性定位</h3><p>粘性定位，用于固定滚动元素。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: sticky;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="12、网格-弹性布局间距控制"><a href="#12、网格-弹性布局间距控制" class="headerlink" title="12、网格&#x2F;弹性布局间距控制"></a>12、网格&#x2F;弹性布局间距控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">gap</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="13、文字排版方向控制"><a href="#13、文字排版方向控制" class="headerlink" title="13、文字排版方向控制"></a>13、文字排版方向控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">writing-mode</span>: vertical-rl;</span><br></pre></td></tr></table></figure>

<h3 id="14、元素变形（旋转-缩放-位移）"><a href="#14、元素变形（旋转-缩放-位移）" class="headerlink" title="14、元素变形（旋转&#x2F;缩放&#x2F;位移）"></a>14、元素变形（旋转&#x2F;缩放&#x2F;位移）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="15、元素裁剪"><a href="#15、元素裁剪" class="headerlink" title="15、元素裁剪"></a>15、元素裁剪</h3><p>元素裁剪，创建不规则形状。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="16、控制替换元素"><a href="#16、控制替换元素" class="headerlink" title="16、控制替换元素"></a>16、控制替换元素</h3><p>控制替换元素（如图片）的填充方式。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">object-fit</span>: cover;</span><br></pre></td></tr></table></figure>

<h3 id="17、背景模糊"><a href="#17、背景模糊" class="headerlink" title="17、背景模糊"></a>17、背景模糊</h3><p>背景模糊效果（毛玻璃效果）。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="18、平滑滚动效果"><a href="#18、平滑滚动效果" class="headerlink" title="18、平滑滚动效果"></a>18、平滑滚动效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">scroll-behavior: smooth;</span><br></pre></td></tr></table></figure>

<h3 id="19、固定元素宽高比"><a href="#19、固定元素宽高比" class="headerlink" title="19、固定元素宽高比"></a>19、固定元素宽高比</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">aspect-ratio: <span class="number">16</span> / <span class="number">9</span>;</span><br></pre></td></tr></table></figure>

<h3 id="20、属性变化过渡动画"><a href="#20、属性变化过渡动画" class="headerlink" title="20、属性变化过渡动画"></a>20、属性变化过渡动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br></pre></td></tr></table></figure>

<h3 id="21、定义复杂动画序列"><a href="#21、定义复杂动画序列" class="headerlink" title="21、定义复杂动画序列"></a>21、定义复杂动画序列</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slide &#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;</span><br><span class="line">		<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">to</span> &#123;</span><br><span class="line">		<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="22、元素阴影效果"><a href="#22、元素阴影效果" class="headerlink" title="22、元素阴影效果"></a>22、元素阴影效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="23、字体阴影效果"><a href="#23、字体阴影效果" class="headerlink" title="23、字体阴影效果"></a>23、字体阴影效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#000</span>;</span><br></pre></td></tr></table></figure>
<p>1、3D文字阴影效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">    <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">    <span class="number">4px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、渐变+浮雕效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#1E90FF</span>, <span class="number">#0066CC</span>);</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>),</span><br><span class="line">    <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、立体凸起效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1E90FF</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#c9c9c9</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#b9b9b9</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">6px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、立体凹陷效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1E90FF</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、金属质感立体效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1E90FF</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">#fff</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、动态悬浮立体效果  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1E90FF</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: fadeIn <span class="number">0.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">text-shadow</span>: </span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#c9c9c9</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#b9b9b9</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">6px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">text-shadow</span>: </span><br><span class="line">      <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">      <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#c9c9c9</span>,</span><br><span class="line">      <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">      <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">#b9b9b9</span>,</span><br><span class="line">      <span class="number">0</span> <span class="number">7px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">      <span class="number">0</span> <span class="number">8px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">      <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">      <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">      <span class="number">0</span> <span class="number">5px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">      <span class="number">0</span> <span class="number">8px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24、线性渐变背景"><a href="#24、线性渐变背景" class="headerlink" title="24、线性渐变背景"></a>24、线性渐变背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ff0000</span>, <span class="number">#00ff00</span>);</span><br></pre></td></tr></table></figure>

<h3 id="25、元素混合模式"><a href="#25、元素混合模式" class="headerlink" title="25、元素混合模式"></a>25、元素混合模式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mix-blend-mode</span>: multiply;</span><br></pre></td></tr></table></figure>

<h3 id="26、隐藏溢出内容"><a href="#26、隐藏溢出内容" class="headerlink" title="26、隐藏溢出内容"></a>26、隐藏溢出内容</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>

<h3 id="27、控制元素堆叠顺序"><a href="#27、控制元素堆叠顺序" class="headerlink" title="27、控制元素堆叠顺序"></a>27、控制元素堆叠顺序</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br></pre></td></tr></table></figure>

<h3 id="28、创建前置伪元素"><a href="#28、创建前置伪元素" class="headerlink" title="28、创建前置伪元素"></a>28、创建前置伪元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="29、创建后置伪元素"><a href="#29、创建后置伪元素" class="headerlink" title="29、创建后置伪元素"></a>29、创建后置伪元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30、圆角效果"><a href="#30、圆角效果" class="headerlink" title="30、圆角效果"></a>30、圆角效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="31、元素透明度控制"><a href="#31、元素透明度控制" class="headerlink" title="31、元素透明度控制"></a>31、元素透明度控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>

<h3 id="32、控制元素可见性"><a href="#32、控制元素可见性" class="headerlink" title="32、控制元素可见性"></a>32、控制元素可见性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: hidden;</span><br></pre></td></tr></table></figure>

<h3 id="33、鼠标指针样式设置"><a href="#33、鼠标指针样式设置" class="headerlink" title="33、鼠标指针样式设置"></a>33、鼠标指针样式设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: pointer;</span><br></pre></td></tr></table></figure>

<h3 id="34、允许用户调整元素尺寸"><a href="#34、允许用户调整元素尺寸" class="headerlink" title="34、允许用户调整元素尺寸"></a>34、允许用户调整元素尺寸</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">resize</span>: both;</span><br></pre></td></tr></table></figure>

<h3 id="35、控制文本选择行为"><a href="#35、控制文本选择行为" class="headerlink" title="35、控制文本选择行为"></a>35、控制文本选择行为</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">user-select: none;</span><br></pre></td></tr></table></figure>

<h3 id="36、控制鼠标事件响应"><a href="#36、控制鼠标事件响应" class="headerlink" title="36、控制鼠标事件响应"></a>36、控制鼠标事件响应</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pointer-events</span>: none;</span><br></pre></td></tr></table></figure>

<h3 id="37、视觉滤镜效果"><a href="#37、视觉滤镜效果" class="headerlink" title="37、视觉滤镜效果"></a>37、视觉滤镜效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>) <span class="built_in">grayscale</span>(<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="38、控制3D翻转时的背面可见性"><a href="#38、控制3D翻转时的背面可见性" class="headerlink" title="38、控制3D翻转时的背面可见性"></a>38、控制3D翻转时的背面可见性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">backface-visibility</span>: hidden;</span><br></pre></td></tr></table></figure>

<h3 id="39、3D透视效果设置"><a href="#39、3D透视效果设置" class="headerlink" title="39、3D透视效果设置"></a>39、3D透视效果设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="40、预声明变化属性优化渲染"><a href="#40、预声明变化属性优化渲染" class="headerlink" title="40、预声明变化属性优化渲染"></a>40、预声明变化属性优化渲染</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">will-change</span>: transform;</span><br></pre></td></tr></table></figure>

<h3 id="41、限制浏览器重绘范围"><a href="#41、限制浏览器重绘范围" class="headerlink" title="41、限制浏览器重绘范围"></a>41、限制浏览器重绘范围</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contain</span>: strict;</span><br></pre></td></tr></table></figure>

<h3 id="42、控制字体加载期间的显示策略"><a href="#42、控制字体加载期间的显示策略" class="headerlink" title="42、控制字体加载期间的显示策略"></a>42、控制字体加载期间的显示策略</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-display</span>: swap;</span><br></pre></td></tr></table></figure>

<h3 id="43、文本溢出处理"><a href="#43、文本溢出处理" class="headerlink" title="43、文本溢出处理"></a>43、文本溢出处理</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>

<h3 id="44、多行文本截断"><a href="#44、多行文本截断" class="headerlink" title="44、多行文本截断"></a>44、多行文本截断</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<h3 id="45、控制文本换行方式"><a href="#45、控制文本换行方式" class="headerlink" title="45、控制文本换行方式"></a>45、控制文本换行方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">word-break</span>: break-all;</span><br></pre></td></tr></table></figure>

<h3 id="46、处理元素内的空白字符"><a href="#46、处理元素内的空白字符" class="headerlink" title="46、处理元素内的空白字符"></a>46、处理元素内的空白字符</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-wrap;</span><br></pre></td></tr></table></figure>

<h3 id="47、最后一行文本对齐方式"><a href="#47、最后一行文本对齐方式" class="headerlink" title="47、最后一行文本对齐方式"></a>47、最后一行文本对齐方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align-last</span>: justify;</span><br></pre></td></tr></table></figure>

<h3 id="48、文本装饰样式"><a href="#48、文本装饰样式" class="headerlink" title="48、文本装饰样式"></a>48、文本装饰样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: underline wavy red;</span><br></pre></td></tr></table></figure>

<h3 id="49、文本大小写转换"><a href="#49、文本大小写转换" class="headerlink" title="49、文本大小写转换"></a>49、文本大小写转换</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-transform</span>: uppercase;</span><br></pre></td></tr></table></figure>

<h3 id="50、文本方向设置"><a href="#50、文本方向设置" class="headerlink" title="50、文本方向设置"></a>50、文本方向设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">direction</span>: rtl;</span><br></pre></td></tr></table></figure>

<h3 id="51、自动断字功能"><a href="#51、自动断字功能" class="headerlink" title="51、自动断字功能"></a>51、自动断字功能</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hyphens</span>: auto;</span><br></pre></td></tr></table></figure>

<h3 id="52、多列布局"><a href="#52、多列布局" class="headerlink" title="52、多列布局"></a>52、多列布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cloumns: <span class="number">2</span> <span class="number">300px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="53、控制多列布局中的内容分割"><a href="#53、控制多列布局中的内容分割" class="headerlink" title="53、控制多列布局中的内容分割"></a>53、控制多列布局中的内容分割</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">break-inside</span>: avoid;</span><br></pre></td></tr></table></figure>

<h3 id="54、定义文本环绕形状"><a href="#54、定义文本环绕形状" class="headerlink" title="54、定义文本环绕形状"></a>54、定义文本环绕形状</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">shape-outside</span>: <span class="built_in">circle</span>(<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="55、元素遮罩效果"><a href="#55、元素遮罩效果" class="headerlink" title="55、元素遮罩效果"></a>55、元素遮罩效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mask-image</span>: <span class="built_in">linear-gradient</span>(black <span class="number">50%</span>, transparent <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="56、继承当前文字颜色"><a href="#56、继承当前文字颜色" class="headerlink" title="56、继承当前文字颜色"></a>56、继承当前文字颜色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid currentColor;</span><br></pre></td></tr></table></figure>

<h3 id="57、CSS自定义变量使用"><a href="#57、CSS自定义变量使用" class="headerlink" title="57、CSS自定义变量使用"></a>57、CSS自定义变量使用</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span><br></pre></td></tr></table></figure>

<h3 id="58、动态计算数值"><a href="#58、动态计算数值" class="headerlink" title="58、动态计算数值"></a>58、动态计算数值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">60px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="59、动态取值函数"><a href="#59、动态取值函数" class="headerlink" title="59、动态取值函数"></a>59、动态取值函数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">300px</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">300px</span>, <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="60、响应式取值函数"><a href="#60、响应式取值函数" class="headerlink" title="60、响应式取值函数"></a>60、响应式取值函数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">2.5vw</span>, <span class="number">2rem</span>);</span><br></pre></td></tr></table></figure>

<h3 id="61、鼠标悬停状态"><a href="#61、鼠标悬停状态" class="headerlink" title="61、鼠标悬停状态"></a>61、鼠标悬停状态</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="62、元素获取焦点状态"><a href="#62、元素获取焦点状态" class="headerlink" title="62、元素获取焦点状态"></a>62、元素获取焦点状态</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="63、元素激活状态"><a href="#63、元素激活状态" class="headerlink" title="63、元素激活状态"></a>63、元素激活状态</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="64、选择第一个子元素"><a href="#64、选择第一个子元素" class="headerlink" title="64、选择第一个子元素"></a>64、选择第一个子元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="65、选择特定序列的子元素"><a href="#65、选择特定序列的子元素" class="headerlink" title="65、选择特定序列的子元素"></a>65、选择特定序列的子元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="66、反向选择器"><a href="#66、反向选择器" class="headerlink" title="66、反向选择器"></a>66、反向选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.a</span>) &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="67、响应式媒体查询"><a href="#67、响应式媒体查询" class="headerlink" title="67、响应式媒体查询"></a>67、响应式媒体查询</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span>(max-width: <span class="number">768px</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="68、特性检测查询"><a href="#68、特性检测查询" class="headerlink" title="68、特性检测查询"></a>68、特性检测查询</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@supports</span> (<span class="attribute">display</span>: <span class="attribute">grid</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="69、滚动定位对齐"><a href="#69、滚动定位对齐" class="headerlink" title="69、滚动定位对齐"></a>69、滚动定位对齐</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scroll-snap-type</span>: y mandatory;</span><br></pre></td></tr></table></figure>

<h3 id="70、滚动子元素对齐点"><a href="#70、滚动子元素对齐点" class="headerlink" title="70、滚动子元素对齐点"></a>70、滚动子元素对齐点</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scroll-snap-align</span>: start;</span><br></pre></td></tr></table></figure>

<h3 id="71、控制滚动到边界的表现"><a href="#71、控制滚动到边界的表现" class="headerlink" title="71、控制滚动到边界的表现"></a>71、控制滚动到边界的表现</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">overscroll-behavior: contain;</span><br></pre></td></tr></table></figure>

<h3 id="72、表单控件主题色设置"><a href="#72、表单控件主题色设置" class="headerlink" title="72、表单控件主题色设置"></a>72、表单控件主题色设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">accent-<span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br></pre></td></tr></table></figure>

<h3 id="73、输入光标颜色设置"><a href="#73、输入光标颜色设置" class="headerlink" title="73、输入光标颜色设置"></a>73、输入光标颜色设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">caret-color</span>: <span class="number">#00ff00</span>;</span><br></pre></td></tr></table></figure>

<h3 id="74、创建新的层叠上下文"><a href="#74、创建新的层叠上下文" class="headerlink" title="74、创建新的层叠上下文"></a>74、创建新的层叠上下文</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">isolation</span>: isolate;</span><br></pre></td></tr></table></figure>

<h3 id="75、重置所有属性"><a href="#75、重置所有属性" class="headerlink" title="75、重置所有属性"></a>75、重置所有属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">all</span>: unset;</span><br></pre></td></tr></table></figure>

<h3 id="76、CSS计数器初始化"><a href="#76、CSS计数器初始化" class="headerlink" title="76、CSS计数器初始化"></a>76、CSS计数器初始化</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">counter-reset</span>: section;</span><br></pre></td></tr></table></figure>

<h3 id="77、CSS计数器递增"><a href="#77、CSS计数器递增" class="headerlink" title="77、CSS计数器递增"></a>77、CSS计数器递增</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">counter-increment</span>: section;</span><br></pre></td></tr></table></figure>

<h3 id="78、自定义引号样式"><a href="#78、自定义引号样式" class="headerlink" title="78、自定义引号样式"></a>78、自定义引号样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">quotes</span>: <span class="string">&#x27;&lt;&lt;&#x27;</span> <span class="string">&#x27;&gt;&gt;&#x27;</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="string">&#x27;&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="79、伪元素内容生成"><a href="#79、伪元素内容生成" class="headerlink" title="79、伪元素内容生成"></a>79、伪元素内容生成</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">content</span>: <span class="built_in">attr</span>(data-label);</span><br></pre></td></tr></table></figure>

<h3 id="80、背景混合模式"><a href="#80、背景混合模式" class="headerlink" title="80、背景混合模式"></a>80、背景混合模式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-blend-mode</span>: overlay;</span><br></pre></td></tr></table></figure>

<h3 id="81、控制触摸操作行为"><a href="#81、控制触摸操作行为" class="headerlink" title="81、控制触摸操作行为"></a>81、控制触摸操作行为</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">touch-action: pan-y;</span><br></pre></td></tr></table></figure>

<h3 id="82、自定义滚动条宽度"><a href="#82、自定义滚动条宽度" class="headerlink" title="82、自定义滚动条宽度"></a>82、自定义滚动条宽度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scrollbar-width</span>: thin;</span><br></pre></td></tr></table></figure>

<h3 id="83、OpenType字体特性控制"><a href="#83、OpenType字体特性控制" class="headerlink" title="83、OpenType字体特性控制"></a>83、OpenType字体特性控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-feature-settings</span>: <span class="string">&#x27;liga&#x27;</span> off;</span><br></pre></td></tr></table></figure>

<h3 id="84、自定义字体加载"><a href="#84、自定义字体加载" class="headerlink" title="84、自定义字体加载"></a>84、自定义字体加载</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&#x27;my font&#x27;</span>;</span><br><span class="line">	<span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;font.woff2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="85、列表样式设置"><a href="#85、列表样式设置" class="headerlink" title="85、列表样式设置"></a>85、列表样式设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list-style</span>: square inside;</span><br></pre></td></tr></table></figure>

<h3 id="86、元素轮廓样式"><a href="#86、元素轮廓样式" class="headerlink" title="86、元素轮廓样式"></a>86、元素轮廓样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span>: <span class="number">2px</span> dashed <span class="number">#f00</span>;</span><br></pre></td></tr></table></figure>

<h3 id="87、移除原生组件样式"><a href="#87、移除原生组件样式" class="headerlink" title="87、移除原生组件样式"></a>87、移除原生组件样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">appearance: none;</span><br></pre></td></tr></table></figure>

<h3 id="88、背景模糊效果"><a href="#88、背景模糊效果" class="headerlink" title="88、背景模糊效果"></a>88、背景模糊效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="89、Grid-Flex布局快捷对齐"><a href="#89、Grid-Flex布局快捷对齐" class="headerlink" title="89、Grid&#x2F;Flex布局快捷对齐"></a>89、Grid&#x2F;Flex布局快捷对齐</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-items: center stretch;</span><br></pre></td></tr></table></figure>

<h3 id="90、布局间隙控制"><a href="#90、布局间隙控制" class="headerlink" title="90、布局间隙控制"></a>90、布局间隙控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br></pre></td></tr></table></figure>

<h3 id="91、首行文本缩进"><a href="#91、首行文本缩进" class="headerlink" title="91、首行文本缩进"></a>91、首行文本缩进</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br></pre></td></tr></table></figure>

<h3 id="92、垂直对齐方式"><a href="#92、垂直对齐方式" class="headerlink" title="92、垂直对齐方式"></a>92、垂直对齐方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure>

<h3 id="93、元素断行处的样式处理"><a href="#93、元素断行处的样式处理" class="headerlink" title="93、元素断行处的样式处理"></a>93、元素断行处的样式处理</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-decoration-break</span>: clone;</span><br></pre></td></tr></table></figure>

<h3 id="94、长单词换行处理"><a href="#94、长单词换行处理" class="headerlink" title="94、长单词换行处理"></a>94、长单词换行处理</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow-wrap</span>: break-word;</span><br></pre></td></tr></table></figure>

<h3 id="95、字体变体设置"><a href="#95、字体变体设置" class="headerlink" title="95、字体变体设置"></a>95、字体变体设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-variant</span>: small-caps;</span><br></pre></td></tr></table></figure>

<h3 id="96、竖排文本方向控制"><a href="#96、竖排文本方向控制" class="headerlink" title="96、竖排文本方向控制"></a>96、竖排文本方向控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-orientation</span>: upright;</span><br></pre></td></tr></table></figure>

<h3 id="97、文本渲染优化设置"><a href="#97、文本渲染优化设置" class="headerlink" title="97、文本渲染优化设置"></a>97、文本渲染优化设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-rendering</span>: optimizeLegibility;</span><br></pre></td></tr></table></figure>

<h3 id="98、图像渲染质量控制"><a href="#98、图像渲染质量控制" class="headerlink" title="98、图像渲染质量控制"></a>98、图像渲染质量控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">image-rendering</span>: crisp-edges;</span><br></pre></td></tr></table></figure>

<h3 id="99、字体文件字符范围限制"><a href="#99、字体文件字符范围限制" class="headerlink" title="99、字体文件字符范围限制"></a>99、字体文件字符范围限制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">unicode-range: U+<span class="number">000</span>-<span class="number">5</span>FF;</span><br></pre></td></tr></table></figure>

<h3 id="100、保持字族视觉尺寸一致性"><a href="#100、保持字族视觉尺寸一致性" class="headerlink" title="100、保持字族视觉尺寸一致性"></a>100、保持字族视觉尺寸一致性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size-adjust</span>: <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>

<h3 id="101、定义运动路径"><a href="#101、定义运动路径" class="headerlink" title="101、定义运动路径"></a>101、定义运动路径</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">offset-path: <span class="built_in">path</span>(<span class="string">&#x27;M0 0 L100 100&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="102、控制滚动边界行为"><a href="#102、控制滚动边界行为" class="headerlink" title="102、控制滚动边界行为"></a>102、控制滚动边界行为</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">overscroll-behavior: none;</span><br></pre></td></tr></table></figure>

<h3 id="103、控制字体合成样式"><a href="#103、控制字体合成样式" class="headerlink" title="103、控制字体合成样式"></a>103、控制字体合成样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-synthesis</span>: none;</span><br></pre></td></tr></table></figure>

<h3 id="104、字体光学尺寸调整"><a href="#104、字体光学尺寸调整" class="headerlink" title="104、字体光学尺寸调整"></a>104、字体光学尺寸调整</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>-optical-sizing: auto;</span><br></pre></td></tr></table></figure>

<h3 id="105、高对比度模式调整"><a href="#105、高对比度模式调整" class="headerlink" title="105、高对比度模式调整"></a>105、高对比度模式调整</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">forced-<span class="attribute">color</span>-adjust: none;</span><br></pre></td></tr></table></figure>

<h3 id="106、声明支持的颜色方案"><a href="#106、声明支持的颜色方案" class="headerlink" title="106、声明支持的颜色方案"></a>106、声明支持的颜色方案</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>-scheme: dark light;</span><br></pre></td></tr></table></figure>

<h3 id="107、优化内容占位尺寸"><a href="#107、优化内容占位尺寸" class="headerlink" title="107、优化内容占位尺寸"></a>107、优化内容占位尺寸</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contain</span>-intrinsic-size: <span class="number">300px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="108、控制打印分页"><a href="#108、控制打印分页" class="headerlink" title="108、控制打印分页"></a>108、控制打印分页</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">page-break-inside</span>: avoid;</span><br></pre></td></tr></table></figure>

<h3 id="109、打印颜色调整"><a href="#109、打印颜色调整" class="headerlink" title="109、打印颜色调整"></a>109、打印颜色调整</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">print-<span class="attribute">color</span>-adjust: exact;</span><br></pre></td></tr></table></figure>

<h3 id="110、打印页面尺寸设置"><a href="#110、打印页面尺寸设置" class="headerlink" title="110、打印页面尺寸设置"></a>110、打印页面尺寸设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">	size: A4 landscape;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="111、控制段落末行行数"><a href="#111、控制段落末行行数" class="headerlink" title="111、控制段落末行行数"></a>111、控制段落末行行数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">widows</span>: <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="112、控制段落首行行数"><a href="#112、控制段落首行行数" class="headerlink" title="112、控制段落首行行数"></a>112、控制段落首行行数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">orphans</span>: <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="113、下划线位置控制"><a href="#113、下划线位置控制" class="headerlink" title="113、下划线位置控制"></a>113、下划线位置控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-underline-position</span>: under;</span><br></pre></td></tr></table></figure>

<h3 id="114、文字强调装饰"><a href="#114、文字强调装饰" class="headerlink" title="114、文字强调装饰"></a>114、文字强调装饰</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-emphasis</span>: filled circle red;</span><br></pre></td></tr></table></figure>

<h3 id="115、数字样式变体"><a href="#115、数字样式变体" class="headerlink" title="115、数字样式变体"></a>115、数字样式变体</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-variant-numeric</span>: oldstyle-nums;</span><br></pre></td></tr></table></figure>

<h3 id="116、字母大小写变体"><a href="#116、字母大小写变体" class="headerlink" title="116、字母大小写变体"></a>116、字母大小写变体</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-variant-caps</span>: small-caps;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>端口被占用解决办法</title>
    <url>/2024/04/02/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<br/>


<hr>
<br/>

<p>1、<code>开始----&gt;运行----&gt;cmd</code>，或者是<code>window+R</code>组合键，调出命令窗口；<br>2、输入命令：<code>netstat -ano</code>，列出所有端口的情况。在列表中我们观察被占用的端口，比如是<code>8082</code>，首先找到它；<br>3、查看被占用端口对应的<code>PID</code>，输入命令：<code>netstat -aon|findstr &quot;8082&quot;</code>，回车，记下最后一位数字，即<code>PID</code>；<br>4、继续输入<code>tasklist|findstr &quot;8082的PID&quot;</code>，回车，查看是哪个进程或者程序占用了端口；<br>5、然后执行<code>taskkill -f -pid &quot;8082的PID&quot;</code>，杀掉即可。<br>6、或者我们打开任务管理器，切换到进程选项卡，在<code>PID</code>一列查看<code>8082的PID</code>对应的进程是谁，如果看不到<code>PID</code>这一列，点击查看—&gt;选择列，将<code>PID</code>(进程标示符)前面的勾打上，点击确定，看看端口有没有被占用，有的话结束进程。<br>7、简化操作为：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr 1099</span><br><span class="line">taskkill -f -pid &quot;1099的PID&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 锁学习笔记</title>
    <url>/2024/02/26/Java-%E9%94%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、概念解释"><a href="#一、概念解释" class="headerlink" title="一、概念解释"></a>一、概念解释</h1><p>1、可重入锁：一般运用在递归，就是一个线程获取锁之后，又请求获取这个锁时，不会导致死锁。<br>2、不可重入锁：和可重入锁相反，就是一个线程获取锁之后，又请求获取这个锁时，会阻塞，直到锁被释放，然后因为锁已经被自己获取到，自己又请求获取锁，就会产生死锁。<br>3、公平锁：很公平，每个线程必须遵循先来后到原则，排队获取锁。<br>4、非公平锁：不公平，线程不必遵循先来后到原则，不必排队。  </p>
<br/>


<hr>
<br/>


<h1 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h1><p>1、<code>synchronized</code>：可重入锁，非公平的。<br>2、<code>lock</code>：可重入锁，默认非公平（可以自己设置）  </p>
<br/>


<hr>
<br/>


<h1 id="三、synchronized和lock的区别"><a href="#三、synchronized和lock的区别" class="headerlink" title="三、synchronized和lock的区别"></a>三、synchronized和lock的区别</h1><p>1、<code>synchronized</code>是java内置关键字，<code>lock</code>是一个java接口；<br>2、<code>syncronized</code>无法判断获取锁的标志，<code>lock</code>可以判断是否获取到了锁；<br>3、<code>synchronized</code>会自动释放锁，<code>lock</code>必须要手动释放锁，如果不释放锁，会死锁；<br>4、使用<code>synchronized</code>时，线程1获取到锁，线程2就得一直等待锁的释放，使用<code>lock</code>锁就不一定会等待下去；<br>5、<code>synchronized</code>是可重入锁，不可以中断，非公平的，<code>lock</code>是可重入锁，可以判断锁，默认非公平（可以自己设置）;<br>6、<code>synchronized</code>适合锁少量的代码同步问题，<code>lock</code>适合锁大量的同步代码。  </p>
<br/>


<hr>
<br/>



<h1 id="四、线程状态"><a href="#四、线程状态" class="headerlink" title="四、线程状态"></a>四、线程状态</h1><img src="/2024/02/26/Java-%E9%94%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class=""> 



<br/>


<hr>
<br/>



<h1 id="五、一些问题"><a href="#五、一些问题" class="headerlink" title="五、一些问题"></a>五、一些问题</h1><h3 id="1、synchronized使用问题"><a href="#1、synchronized使用问题" class="headerlink" title="1、synchronized使用问题"></a>1、synchronized使用问题</h3><p>1、说明：生产者和消费者的问题，只有两个线程A（生产者）和B（消费者）的情况下，A和B操作同一个变量n，当n为0时，A生产（n + 1）；当A生产好之后（n为1），B消费（n - 1），这是没有问题的。但是，如果是两个生产者（A、B）和两个消费者（C、D）的情况下，就会出现问题（n的值可能出现2、3、4等等的情况）。<br>2、例子  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建demoService 对象</span></span><br><span class="line">        <span class="type">DemoService</span> <span class="variable">demoService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoService</span>();</span><br><span class="line">        <span class="comment">//  A线程 +操作 </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    demoService.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="comment">// B线程 + 操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    demoService.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="comment">// C线程 - 操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    demoService.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="comment">// D线程 -操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    demoService.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// + 操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        n ++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + n);</span><br><span class="line">        <span class="comment">// 通知其它线程，notifyAll方法必须放在synchronized代码块里</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// - 操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        n --;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + n);</span><br><span class="line">        <span class="comment">// notifyAll方法必须放在synchronized代码块里</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）上面的例子会产生问题，原因：<br>我们在方法上使用<code>synchronized</code>，表示我们锁住的是<code>demoService</code>对象的方法，当两个线程执行同一个方法，线程A进入<code>increment</code>方法，<code>++</code>后释放，线程B进入<code>increment</code>方法，此时n为1，!&#x3D; 0，所以线程B执行<code>wait</code>方法等待，并释放锁；此时线程C进入<code>decrement</code>方法，<code>--</code>后释放，释放的瞬间线程A拿到了锁，进入后<code>++</code>，线程B从<code>wait</code>中被唤醒获取锁，向下执行后<code>++</code>，就产生了问题。<br>（2）解决办法：<br>因为if只执行一次，将if改为while就可以了。<br>（3）为什么是因为if只执行一次？<br>因为当n不为0时，当线程A进入increment方法，执行if判断，n不为0，线程A等待释放锁，此时线程B获取到锁，进入increment方法（线程C和D还没执行–操作），n还是不为0，线程B也等待释放锁，然后当线程C执行完–操作，执行唤醒其它线程操作，线程A和B被唤醒，线程A获取到锁，因为if判断只执行一次，所以线程A直接向下执行++操作，n变为1之后线程A释放锁，然后B获取到锁，也是因为if判断只执行一次，所以线程B也直接向下执行++操作，n就变为了2。如果将if换成while，当线程C执行完–操作之后唤醒其它线程，线程A和B被唤醒，线程A获取到锁，此时if变为了while，需要先进行while条件判断，因为此时n为0，不满足while条件，直接结束while循环，向下执行++操作，n变为1之后线程A释放锁，然后线程B获取到锁，因为是while循环判断，n为1，满足条件，线程B继续wait等待。  </p>
<h3 id="2、线程等待唤醒之后执行逻辑"><a href="#2、线程等待唤醒之后执行逻辑" class="headerlink" title="2、线程等待唤醒之后执行逻辑"></a>2、线程等待唤醒之后执行逻辑</h3><p>线程执行<code>wait</code>方法等待，然后被唤醒，并不是从头执行，而是从<code>wait</code>方法处往下执行。</p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 和传统虚拟机的区别</title>
    <url>/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h3 id="1、物理服务器是什么？"><a href="#1、物理服务器是什么？" class="headerlink" title="1、物理服务器是什么？"></a>1、物理服务器是什么？</h3><p>我的柜子里有一台大学时候用的废弃电脑，自带 cpu、 内存等硬件和操作系统，根据一些教程视频，是可以做成服务器的。<br>像这样一台看得见摸得着的机器，其实就是云厂商页面里提到的物理服务器或物理机。不同厂商叫法不同，有的厂商叫它独立服务器。<br>跟家里电脑不一样的是，云厂商的机器性能更好，核数更高，还有专业的机房和空调伺候着。那既然这样，是不是就不需要买云厂商的服务器呢？<br>糊涂啊，一台家用电脑跑起来 50 瓦，一年下来电费都好几百，还得花精力伺候着不让它关机，还真不如买别人家的划算。<br>但问题又来了，云厂商的物理服务器一般都是核数较高，很多时候我们根本不需要这么高配的机器。怎么办呢？这一点云厂商当然也考虑到了。  </p>
<h3 id="2、vps是什么？"><a href="#2、vps是什么？" class="headerlink" title="2、vps是什么？"></a>2、vps是什么？</h3><p>云厂商一般会将一台物理服务器分割成多个虚拟机。它跟我们在 windows 用 VMware, VirtualBox 建的虚拟机其实是一回事。每个虚拟机都拥有独立的操作系统、资源（比如 CPU、内存、存储空间）和公网 IP 地址。然后对外出售，这样的虚拟机就是所谓的 VPS（Virtual Private Server，虚拟专用服务器）。  </p>
<img src="/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" class="">  

<h3 id="3、ecs是什么？"><a href="#3、ecs是什么？" class="headerlink" title="3、ecs是什么？"></a>3、ecs是什么？</h3><p>但传统 VPS 有个缺点，不支持用户自主升降级，它的资源是预先分配的，不易动态调整。举个例子，假设你买了 1c1g 的服务器，想在页面上点点两下升级成 2c2g，这在传统 VPS 里是不支持的。如果给 VPS 加入自主升降级的功能，那它就成了 ECS（Elastic Compute Service，弹性计算服务）。  </p>
  
<p>用户可以根据需要随时调整 CPU、内存、磁盘和带宽，主打一个弹性。我们可以利用 ecs 学习 linux 命令，部署个人博客，做私人云盘存储，甚至可以将自己做的游戏部署到 ecs 上邀请朋友来玩。  </p>
<h3 id="4、docker-容器-是什么？"><a href="#4、docker-容器-是什么？" class="headerlink" title="4、docker 容器 是什么？"></a>4、docker 容器 是什么？</h3><p>买了 ecs 后，我们一般会开始部署自己的软件应用。机器少的时候手动部署问题不大，机器多了后各种问题就来了，其中最明显的就是，ecs 之间，如果底层操作系统不同，比如有些是 ubuntu，有些是 centos，部署应用的时候就会有各种环境问题。如果能让软件带着操作系统环境一起去部署就好了，最简单的方案是将软件和操作系统一起打包成虚拟机部署在 ecs 中。但这样就成了在 ECS（也就是虚拟机）中再运行一个完整的虚拟机，太重了。有解法吗？  </p>
<img src="/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/3.jpg" class="">虚拟机上再运行一个虚拟机  
<p>有。既然多加一个操作系统太重，那我就只打包软件和系统依赖库加配置就好了。然后将这部分系统文件挂到 ecs 的操作系统下，利用一个叫 Namespace 的能力让它看起来就像是一个独立操作系统一样。再利用一个叫 Cgroup 的能力限制它能使用的计算资源。这就省掉了一层笨重的操作系统，同时还让软件轻松跑在各类操作系统上。这就是我们常说的 Docker 容器技术。  </p>
<img src="/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/4.jpg" class="">  
<p>总的来说就是，物理服务器上跑 ecs，ecs 跑 Docker 容器。多个 Docker 容器共享一个 ecs 实例 操作系统内核。  </p>
<img src="/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/5.png" class="">  

<h3 id="5、服务器怎么选？"><a href="#5、服务器怎么选？" class="headerlink" title="5、服务器怎么选？"></a>5、服务器怎么选？</h3><p>现在我们了解完他们的区别了，但服务器款式那么多，我们怎么选？如果你是小公司老板或个体创业者，想要好一点的物理机又不想自建机房，那可以考虑买独立服务器。<br>如果你是像我一样的个人开发者，或者是学生，那无脑冲云服务器 ecs。有了它，我们可以很方便的在上面部署 docker 容器，平时做做实验，部署博客，完全够用了。  </p>
<img src="/2024/05/10/docker-%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB/6.png" class="">  
<p>这时候问题很多的小明就要问了，为什么不选择大厂商的云服务器？是用不起吗？喂喂喂，怎么说话呢？ 不是大厂云服务器用不起，而是小厂商的更有性价比。就以同样是香港 1 核 1g 的 ecs 为例，小厂商一个月只要 1 碗红烧牛肉面。大厂商则要 3 碗。<br>同样是 24 核物理服务器，小厂商千把块搞定，大厂商就是它的好几倍。<br>这省下来的钱，能买多少份 19 块 9 5条的南极人内裤？<br>这时候问题很多的小明就又要问了，为什么要选香港服务器？大陆的不是更便宜吗？<br>那是因为香港服务器没有备案的烦恼，而且大陆也能轻松访问，有时候一些热点技术一出来，比如时下火热的 ai 技术，网站越快上线就能越早拿到搜索引擎排名，备案得等个把月，这一等就白白错失了很多成为下一个马总的机会。</p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习笔记</title>
    <url>/2024/05/26/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、JDBC概述"><a href="#一、JDBC概述" class="headerlink" title="一、JDBC概述"></a>一、JDBC概述</h1><p>1、JDBC（Java DataBase Connectivity），就是使用java语言操作关系型数据库的一套API（Application Programming Interface，应用程序编程接口）。<br>2、本质：官方（sun公司）定义的一套操作所有关系型数据库的规则（接口），然后各个数据库厂商去实现这套接口，提供数据库驱动<code>jar</code>包，我们可以使用这套接口（<code>JDBC</code>）编程，真正执行的代码是驱动<code>jar</code>包中的实现类。<br>3、好处：各数据库厂商使用相同的接口，Java程序员一套代码就可以访问所有数据库，也就是说，想更换数据库的话直接更换数据库驱动，不用去修改代码。<br>4、图解：  </p>
<img src="/2024/05/26/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">



<br/>


<hr>
<br/>



<h1 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h1><p>1、导入驱动jar包，<code>mysql-connector-java-5.1.37.jar</code>；<br>2、代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">		<span class="comment">// 如果连接的是本机mysql并且端口是默认的3306，url可以简写为：</span></span><br><span class="line">        <span class="comment">// String url = &quot;jdbc:mysql:///test&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象，代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//4.执行SQL的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//5.执行SQL的对象去执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = 500 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>



<h1 id="三、JDBC-API介绍"><a href="#三、JDBC-API介绍" class="headerlink" title="三、JDBC API介绍"></a>三、JDBC API介绍</h1><p>都是位于<code>java.sql</code>包下的。  </p>
<h3 id="1、DriverManager（驱动管理类）"><a href="#1、DriverManager（驱动管理类）" class="headerlink" title="1、DriverManager（驱动管理类）"></a>1、DriverManager（驱动管理类）</h3><p>1、作用<br>（1）注册驱动；<br>（2）获取数据库连接。<br>2、分析<br>（1）注册驱动  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>是执行上面这行代码进行注册驱动的，为什么这段代码可以注册驱动呢？<br>我们查看这个<code>com.mysql.jdbc.Driver</code>类查看源码，发现它实现了<code>java.sql.Driver</code>接口，然后有一个静态代码块，在静态代码块中，执行了<code>DriverManager.registerDriver(new Driver());</code>，也就是说，<code>com.mysql.jdbc.Driver</code>类在加载的时候，会执行静态代码块中的代码，然后就注册了驱动。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//DriverManager 是 java.sql包下的类</span></span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>mysql 5</code>以后的驱动包，可以不用写<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>这行代码了，因为在jar包中<code>META-INF/services/java.sql.Driver</code>文件中，它帮我们写好了<code>com.mysql.jdbc.Driver</code>，会自动帮我们加载。<br>（2）获取数据库连接  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果连接的是本机mysql并且端口是默认的3306，url可以简写为：</span></span><br><span class="line"><span class="comment">// String url = &quot;jdbc:mysql:///test&quot;;</span></span><br><span class="line"><span class="comment">// 配置 useSSL=false 参数，禁用安全连接方式，可以解决警告提示：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="comment">//获取数据库连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>

<h3 id="2、Connection（数据库连接对象）"><a href="#2、Connection（数据库连接对象）" class="headerlink" title="2、Connection（数据库连接对象）"></a>2、Connection（数据库连接对象）</h3><p>1、作用<br>（1）获取执行sql的对象；<br>（2）管理事务。<br>2、分析<br>（1）获取执行sql的对象<br><code>Statement</code>：普通执行sql对象，无法防止sql注入；<br><code>PreparedStatement</code>：预编译sql对象，防止sql注入，效率更高；<br><code>CallableStatement</code>：执行存储过程的sql对象。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数据库连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">// 获取执行SQL的对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">// 执行SQL的对象去执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = 500 where id = 1&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br></pre></td></tr></table></figure>
<p>（2）管理事务  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设已经获取了连接对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">// 这里需要 try...catch 捕获异常，因为开启事务之后，如果捕获到异常就回滚</span></span><br><span class="line">	<span class="comment">// 开启事务</span></span><br><span class="line">	conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">// 执行sql1</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">	statement.executeUpdate(sql1);</span><br><span class="line">	<span class="comment">// 执行sql2</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line">	statement.executeUpdate(sql2);</span><br><span class="line">	<span class="comment">// 提交事务</span></span><br><span class="line">	conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">	<span class="comment">// 回滚事务</span></span><br><span class="line">	conn.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="comment">// 关闭资源</span></span><br><span class="line">	statement.close();</span><br><span class="line">	conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、Statement（执行sql的对象）"><a href="#3、Statement（执行sql的对象）" class="headerlink" title="3、Statement（执行sql的对象）"></a>3、Statement（执行sql的对象）</h3><p>1、作用<br>（1）使用<code>int executeUpdate(sql)</code>执行<code>DML</code>、<code>DDL</code>语句；<br>（2）使用<code>ResultSet executeQuery(sql)</code>执行<code>DQL</code>语句。<br>2、分析  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// executeUpdate：执行新增、删除、修改语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">statement.executeUpdate(sql1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// executeQuery：执行查询语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql2);</span><br></pre></td></tr></table></figure>
<p><code>PreparedStatement</code>使用方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account where username = ? and id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pst.setString(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">pst.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br></pre></td></tr></table></figure>

<h3 id="4、ResultSet（结果集对象）"><a href="#4、ResultSet（结果集对象）" class="headerlink" title="4、ResultSet（结果集对象）"></a>4、ResultSet（结果集对象）</h3><p>1、作用<br>封装了<code>select</code>查询语句的结果集。<br><code>boolean next()</code>：跳转到下一行数据，判断当前行是否有数据，下面为图解：  </p>
<img src="/2024/05/26/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">
<p>2、分析  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">		<span class="comment">// 如果连接的是本机mysql并且端口是默认的3306，url可以简写为：</span></span><br><span class="line">        <span class="comment">// String url = &quot;jdbc:mysql:///test&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象，代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//4.执行SQL的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//5.执行SQL的对象去执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql2);</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">			<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">			<span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">			<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">			System.out.println(id + <span class="string">&quot;---&quot;</span> + name + <span class="string">&quot;---&quot;</span> + sex + <span class="string">&quot;---&quot;</span> + age);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">		rs.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>



<h1 id="四、数据库连接池"><a href="#四、数据库连接池" class="headerlink" title="四、数据库连接池"></a>四、数据库连接池</h1><h3 id="1、Driud"><a href="#1、Driud" class="headerlink" title="1、Driud"></a>1、Driud</h3><p>1、导入<code>druid-1.1.12.jar</code>包<br>2、配置文件<br>创建一个文件，名字叫做：<code>db.properties</code>。  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">6000</span></span><br></pre></td></tr></table></figure>
<p>3、代码测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 加载配置文件</span></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		pro.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;项目名称/src/db.properties&quot;</span>));</span><br><span class="line">		<span class="comment">// 获取连接池对象</span></span><br><span class="line">		<span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">		<span class="comment">// 获取连接对象</span></span><br><span class="line">		<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2020.3.3 x64激活方法</title>
    <url>/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、激活工具和注册码"><a href="#一、激活工具和注册码" class="headerlink" title="一、激活工具和注册码"></a>一、激活工具和注册码</h1><p>链接：<a href="https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g">https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g</a><br>提取码：eool<br>软件请到官网下载2020.3版本：<br><a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a><br><strong>注意：<br>Ultimate版本：用于web和企业开发<br>Community版本：用于JVM和Android开发</strong><br><br/></p>
<hr>
<h1 id="二、激活方法"><a href="#二、激活方法" class="headerlink" title="二、激活方法"></a>二、激活方法</h1><p>链接地址：<br><a href="https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code">https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code</a><br><br/></p>
<hr>
<h1 id="三、（以防上面的地址失效弄的激活步骤）"><a href="#三、（以防上面的地址失效弄的激活步骤）" class="headerlink" title="三、（以防上面的地址失效弄的激活步骤）"></a>三、（以防上面的地址失效弄的激活步骤）</h1><p>1.打开已经安装好的 IDEA, 我们选择 30 天免费试用。<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/1.jpg" class=""><br><strong>(注意，如果没有弹出上面的界面，可执行重置30天试用期脚本，脚本网盘地址下面可获取)</strong><img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/2.jpg" class=""><br><br/><br>2. 进入 IDEA 中， 先随便建个 Java 工程， 然后将网盘中最新的 IDEA 破解补丁 BetterIntelliJ.zip拖入 IDEA 界面中，如下图所示：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/3.jpg" class=""><br>   <strong>(注意:<br>   zip 补丁包无需解压 ~ 无需解压 ~ 无需解压 ~<br>   激活后补丁不要移动，不要删除~<br>   补丁安装成功后，需要输入激活补丁key.txt里面的激活码，两个步骤缺一不可，否则会激活失败~)</strong><br><br/><br>3. 如果拖动的方式不成功，还可以通过磁盘安装插件，点击菜单 File -&gt; Settings -&gt; Install Plugin From Disk，图文步骤如下：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/4.jpg" class=""><br>   <strong>(注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!)<br>   PS: 如果重启一次还是提示 key is invaild, 请再重启一次试试 ！本人就是第一次没效果，再重启一次，再输入 激活补丁key.txt里面的激活码就ok了。</strong><br><br/><br>4. 检查插件是否安装成功<br>   插件安装完成后，建议检查一下是否安装成功，点击菜单：Help -&gt; Edit Custom VM Options…，如果成功，会自动生成<br>   -javaagent:C:\Users\Public.BetterIntelliJ\BetterIntelliJ-版本号.jar<br>   <strong>（如果有其它多余的-javaagent，请删除）</strong><br><br/><br>5. 输入 激活补丁key.txt里面的激活码<br>   重启成功后，点击菜单 Help -&gt; Register -&gt; Add New License ， 如下图所示:<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/5.jpg" class=""><br>   复制网盘中的 激活补丁key.txt文件中的激活码，拷贝到输入框中，然后点击 Activate 按钮激活：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/6.jpg" class=""><br><br/><br>到这里， IDEA 就已经激活成功了 ~  </p>
<br/>


<hr>
<br/>


<h1 id="四、更换idea创建spring项目时的镜像"><a href="#四、更换idea创建spring项目时的镜像" class="headerlink" title="四、更换idea创建spring项目时的镜像"></a>四、更换idea创建spring项目时的镜像</h1><p>最新版本的idea不支持创建jdk8，需要手动修改。<br>spring官方镜像地址：<code>https://start.spring.io</code>；<br>阿里云镜像地址：<code>https://start.aliyun.com/</code>。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA 2020.3.3 x64激活方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2023/09/25/Git/</url>
    <content><![CDATA[<hr>
<h1 id="一、图标含义"><a href="#一、图标含义" class="headerlink" title="一、图标含义"></a>一、图标含义</h1><h3 id="1、简单说明"><a href="#1、简单说明" class="headerlink" title="1、简单说明"></a>1、简单说明</h3><p>（1）<a href="https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>
<h3 id="2、日常更新上传的步骤："><a href="#2、日常更新上传的步骤：" class="headerlink" title="2、日常更新上传的步骤："></a>2、日常更新上传的步骤：</h3><ul>
<li>git add</li>
<li>git commit</li>
<li>git pull</li>
<li>git push</li>
</ul>
<h3 id="3、关于IDEA集成字体颜色"><a href="#3、关于IDEA集成字体颜色" class="headerlink" title="3、关于IDEA集成字体颜色"></a>3、关于IDEA集成字体颜色</h3><ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
<h3 id="4、分支说明："><a href="#4、分支说明：" class="headerlink" title="4、分支说明："></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。  </p>
<img src="/2023/09/25/Git/1.jpg" class="">  
<p>（1）分支：使用分支意味着你把工作从开发主线上分离出来，避免影响开发主线，多线程开发，可以同时开启多个人物的开发，多个任务之间互不影响；<br>（2）master主分支（主干）：永远存放可用的稳定版本，不推荐直接在<code>master</code>分支上开发，防止多个程序员在编写不同的功能模块时，其中一个程序员模块出现问题导致其他人的功能模块在版本回退时受到影响；  </p>
<br/>

<hr>
<br/>

<h1 id="二、Git-常用命令"><a href="#二、Git-常用命令" class="headerlink" title="二、Git 常用命令"></a>二、Git 常用命令</h1><h3 id="1、设置全局变量"><a href="#1、设置全局变量" class="headerlink" title="1、设置全局变量"></a>1、设置全局变量</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置系统级别，对应整个计算机，文件在 D:\Git\mingw64\etc\.gitconfig（64位机）</span></span><br><span class="line">git <span class="keyword">config</span> --system</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置用户级别，对应着Windows用户，文件在 C:\Users\我的用户\.gitconfig</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;zjy&quot;</span> <span class="comment">// 这个和账号没关系，只是一个用户签名</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;xxxx@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置项目级别</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">local</span></span><br></pre></td></tr></table></figure>
<h3 id="2、常用操作"><a href="#2、常用操作" class="headerlink" title="2、常用操作"></a>2、常用操作</h3><h6 id="（1）初始化（git-init）"><a href="#（1）初始化（git-init）" class="headerlink" title="（1）初始化（git init）"></a>（1）初始化（git init）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class="line">git init </span><br></pre></td></tr></table></figure>
<h6 id="（2）下载项目（git-clone）"><a href="#（2）下载项目（git-clone）" class="headerlink" title="（2）下载项目（git clone）"></a>（2）下载项目（git clone）</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 【url】</span><br></pre></td></tr></table></figure>
<h6 id="（3）查看所有提交跟踪状态（git-status）"><a href="#（3）查看所有提交跟踪状态（git-status）" class="headerlink" title="（3）查看所有提交跟踪状态（git status）"></a>（3）查看所有提交跟踪状态（git status）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">// 单个文件查看</span><br><span class="line">git status 文件名</span><br></pre></td></tr></table></figure>
<h6 id="（4）加入到暂存区（git-add）"><a href="#（4）加入到暂存区（git-add）" class="headerlink" title="（4）加入到暂存区（git add）"></a>（4）加入到暂存区（git add）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br><span class="line"></span><br><span class="line">// 添加所有文件到暂存区</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h6 id="（5）提交暂存区的文件到本地仓库（git-commit）"><a href="#（5）提交暂存区的文件到本地仓库（git-commit）" class="headerlink" title="（5）提交暂存区的文件到本地仓库（git commit）"></a>（5）提交暂存区的文件到本地仓库（git commit）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m 【提交的备注信息】</span><br><span class="line"></span><br><span class="line">// add和commit一起执行，第一次提交的时候不能用</span><br><span class="line">git commit -am 【提交的备注信息】</span><br><span class="line"></span><br><span class="line">// 只修改提交注释</span><br><span class="line">git commit --amend -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>
<h6 id="（6）创建公钥密钥"><a href="#（6）创建公钥密钥" class="headerlink" title="（6）创建公钥密钥"></a>（6）创建公钥密钥</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>
<h6 id="（7）列出所有分支（git-branch）"><a href="#（7）列出所有分支（git-branch）" class="headerlink" title="（7）列出所有分支（git branch）"></a>（7）列出所有分支（git branch）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 列出所有本地分支 </span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">// 列出所有本地分支和分支信息</span><br><span class="line">git branch -v</span><br><span class="line"></span><br><span class="line">// 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line">// 列出所有本地分支和追踪分支：origin/master（追踪分支）</span><br><span class="line">git branch -av</span><br></pre></td></tr></table></figure>
<h6 id="（8）分支重命名（git-branch-m）"><a href="#（8）分支重命名（git-branch-m）" class="headerlink" title="（8）分支重命名（git branch -m）"></a>（8）分支重命名（git branch -m）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 分支重命名</span><br><span class="line">git branch -m 【旧的分支名】 【新的分支名】</span><br></pre></td></tr></table></figure>
<h6 id="（9）新建一个分支，但依然停留在当前分支"><a href="#（9）新建一个分支，但依然停留在当前分支" class="headerlink" title="（9）新建一个分支，但依然停留在当前分支"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch 【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（10）新建一个分支，并切换到该分支"><a href="#（10）新建一个分支，并切换到该分支" class="headerlink" title="（10）新建一个分支，并切换到该分支"></a>（10）新建一个分支，并切换到该分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 【分支名字】</span><br><span class="line"></span><br><span class="line">// 远程有dev分支，本地没有，已经使用git pull命令将dev分支拉到追踪分支（origin/dev），但是本地还没有dev分支，需要执行下面命令</span><br><span class="line">git checkout -b dev origin/dev // 说明：在本地创建一个dev分支，并切换到dev分支，并把dev分支和追踪分支关联</span><br><span class="line"></span><br><span class="line">// 新建本地分支，并将他关联到远程同名分支，用于本地分支名和远程分支名不一致</span><br><span class="line">git checkout --track origin/branch_name  </span><br></pre></td></tr></table></figure>
<h6 id="（11）切换分支（git-checkout）"><a href="#（11）切换分支（git-checkout）" class="headerlink" title="（11）切换分支（git checkout）"></a>（11）切换分支（git checkout）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 只切换分支</span><br><span class="line">git checkout 【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（12）合并指定分支到当前分支"><a href="#（12）合并指定分支到当前分支" class="headerlink" title="（12）合并指定分支到当前分支"></a>（12）合并指定分支到当前分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 在分支1使用该命令，分支2合并到分支1</span><br><span class="line">// 例如：在分支1使用，git merge 分支2，将分支2合并到分支1</span><br><span class="line">git merge 【要合并的分支名字】（默认是不使用--no-ff模式）</span><br><span class="line">/* 说明：  </span><br><span class="line"> * 1、--no-ff模式：有两个分支dev、test，两个分支提交点都是一样的，dev开发，提交了两次，这样就比test多了两个提交，使用--no-ff模式将dev合并到test，在test分支上使用git merge dev --no-ff，首先test分支会在dev分支最新节点前新建一个新的节点，然后再将test的head指针指向这个节点（注意：此时dev分支最新节点和此节点中间没有箭头或者线条连接，相当于dev还未合并到test，需要在dev分支在执行git merge test）；  </span><br><span class="line"> * 2、默认模式：dev合并到test，在test分支上使用git merge dev，直接将test的head指针指向dev最新的节点；  </span><br><span class="line"> * 3、两个模式的区别：相当于--no-ff模式比默认模式多了一个节点，并且--no-ff模式需要执行两次合并才是真正合并。  </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 在分支1使用该命令，将分支1合并到分支2（将自己写的代码提到最前面）</span><br><span class="line">// 例如：在分支1使用，git rebase 分支2，将分支1合并到分支2</span><br><span class="line">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（12）删除分支"><a href="#（12）删除分支" class="headerlink" title="（12）删除分支"></a>（12）删除分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d 【分支名字】</span><br><span class="line"></span><br><span class="line">// 删除远程分支方法一：git push origin --delete dev（删除远程dev分支）</span><br><span class="line">git push origin --delete 【分支名字】</span><br><span class="line">// 删除远程分支方法二：git branch -dr origin/dev（删除远程dev分支），origin指代远程</span><br><span class="line">git branch -dr 【remote/branch】</span><br><span class="line">// 删除远程分支方法三：git push origin :dev（删除远程dev分支）</span><br><span class="line">git push origin :【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（13）强制移动HEAD"><a href="#（13）强制移动HEAD" class="headerlink" title="（13）强制移动HEAD"></a>（13）强制移动HEAD</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 将master向上移动3个节点</span><br><span class="line">git branch -f master HEAD~3</span><br></pre></td></tr></table></figure>
<h6 id="（14）查看日志信息"><a href="#（14）查看日志信息" class="headerlink" title="（14）查看日志信息"></a>（14）查看日志信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h6 id="（15）查看详细信息"><a href="#（15）查看详细信息" class="headerlink" title="（15）查看详细信息"></a>（15）查看详细信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">// 图形界面</span><br><span class="line">git log --graph</span><br><span class="line"></span><br><span class="line">// 信息更详细简略</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<h6 id="（16）回退到某个版本"><a href="#（16）回退到某个版本" class="headerlink" title="（16）回退到某个版本"></a>（16）回退到某个版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 版本号从日志信息里查看</span><br><span class="line">git reset --hard 【版本号（sha1值）】</span><br><span class="line"></span><br><span class="line">// 回退到上个版本</span><br><span class="line">git reset --hard HEAD^（也可以 git reset --hard HEAD~1）</span><br><span class="line"></span><br><span class="line">// 通过sha1值回退，先git log查看sha1值</span><br><span class="line">git reset --hard HEAD 【sha1值】</span><br></pre></td></tr></table></figure>
<h6 id="（17）查看远程库所有别名"><a href="#（17）查看远程库所有别名" class="headerlink" title="（17）查看远程库所有别名"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h6 id="（18）将本地项目与远程仓库建立连接"><a href="#（18）将本地项目与远程仓库建立连接" class="headerlink" title="（18）将本地项目与远程仓库建立连接"></a>（18）将本地项目与远程仓库建立连接</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin 【远程仓库地址】</span><br></pre></td></tr></table></figure>
<h6 id="（19）推送本地库的代码到远程库"><a href="#（19）推送本地库的代码到远程库" class="headerlink" title="（19）推送本地库的代码到远程库"></a>（19）推送本地库的代码到远程库</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push （别名） 【分支名】</span><br><span class="line"></span><br><span class="line">// 在本地dev分支，远程没有dev分支，需要将本地dev分支推送到远程，说明：origin dev表示远程的dev；</span><br><span class="line">git push -u origin dev</span><br><span class="line">git push --set-upstream origin dev // 也可以用这个</span><br></pre></td></tr></table></figure>
<h6 id="（20）拉取远程库的代码到本地库"><a href="#（20）拉取远程库的代码到本地库" class="headerlink" title="（20）拉取远程库的代码到本地库"></a>（20）拉取远程库的代码到本地库</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull （别名） 【分支名】</span><br><span class="line"></span><br><span class="line">// 将远程origin的dev分支拉取到本地dev分支：git pull origin dev:dev，如果远程分支名和本地分支名相同，可以省略为：git pull origin dev</span><br><span class="line">git pull 【远程主机名（origin）】 【远程分支名】:【本地分支名】// 相当于 git pull + git checkout -b 【本地分支名】 【远程主机名（origin）】/【远程分支名】</span><br></pre></td></tr></table></figure>
<h6 id="（21）添加别名"><a href="#（21）添加别名" class="headerlink" title="（21）添加别名"></a>（21）添加别名</h6><p>说明：添加别名后，clone的时候就不用赋值https或者ssh链接来下载，直接使用别名。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 查看所有别名</span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line">// 添加别名</span><br><span class="line">git remote add 【别名】 【链接地址】</span><br></pre></td></tr></table></figure>
<h6 id="（22）临时保存（暂存）"><a href="#（22）临时保存（暂存）" class="headerlink" title="（22）临时保存（暂存）"></a>（22）临时保存（暂存）</h6><p>说明：如果在dev分支上开发的功能还未完成，就突然要求去test分支处理新的需求，此时就需要临时保存dev上的代码。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 临时保存</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">// 查看有多少个临时保存点</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">// 如果只有一个临时保存点，想要恢复</span><br><span class="line">git stash pop // 将临时保存点删除并还原</span><br><span class="line">git stash apply // 不删除临时保存点并还原，如果执行之后想要删除，就执行：git stash drop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】</span><br><span class="line"></span><br><span class="line">// 如果有多个临时保存点</span><br><span class="line">git stash pop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】// 如果不指定，默认还原最近一次（第一个）</span><br></pre></td></tr></table></figure>
<h6 id="（23）检测无效的追踪分支"><a href="#（23）检测无效的追踪分支" class="headerlink" title="（23）检测无效的追踪分支"></a>（23）检测无效的追踪分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote prune origin --dry-run</span><br></pre></td></tr></table></figure>
<h6 id="（24）删除无效的追踪分支"><a href="#（24）删除无效的追踪分支" class="headerlink" title="（24）删除无效的追踪分支"></a>（24）删除无效的追踪分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>
<h6 id="（25）标签"><a href="#（25）标签" class="headerlink" title="（25）标签"></a>（25）标签</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 创建标签（简单创建）：git tag v1.0（创建v1.0标签）</span><br><span class="line">git tag 【标签名】</span><br><span class="line">// 创建带有说明的标签（详细创建）</span><br><span class="line">git tag -a v1.0 -m &quot;version 1.0 released&quot;</span><br><span class="line"></span><br><span class="line">// 推送标签</span><br><span class="line">git push origin v1.0</span><br><span class="line">// 推送标签完成写法，第一个v1.0是远程，第二个是本地</span><br><span class="line">git push origin refs/tags/v1.0:refs/tags/v1.0</span><br><span class="line">// 推送多个标签</span><br><span class="line">git push origin v1.0 v2.0</span><br><span class="line">// 推送所有标签</span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line">// 拉取远程所有标签</span><br><span class="line">git fetch origin --tags</span><br><span class="line">// 拉取远程某个标签</span><br><span class="line">git fetch origin tag v1.0</span><br><span class="line"></span><br><span class="line">// 删除本地标签</span><br><span class="line">git tag -d v1.0</span><br><span class="line">// 删除远程标签</span><br><span class="line">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure>
<h6 id="（26）删除远程仓库（不是分支，是仓库！）"><a href="#（26）删除远程仓库（不是分支，是仓库！）" class="headerlink" title="（26）删除远程仓库（不是分支，是仓库！）"></a>（26）删除远程仓库（不是分支，是仓库！）</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 执行这条指令之后，Git就会将已经添加的名为“origin”的远程仓库删除</span><br><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<h6 id="（27）在A项目引入B项目"><a href="#（27）在A项目引入B项目" class="headerlink" title="（27）在A项目引入B项目"></a>（27）在A项目引入B项目</h6><p>说明：当A项目需要B项目时，传统的做法是将B项目打包成依赖，引入A项目；但是如果B项目还没完成，在编写过程中，不可能每次都打包成依赖放到A项目，这个时候我们需要实时地将B项目引入A项目。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 在A项目中执行命令，针对的是本地，远程需要推送之后才会有</span><br><span class="line">git submodule add 【B项目远程仓库的地址】</span><br><span class="line"></span><br><span class="line">// clone一个包含子模块的项目</span><br><span class="line">git clone 【项目地址】 --recurse-submodules</span><br><span class="line">git clone 【项目地址】 --recursive // 也可以</span><br><span class="line">// 忘记加参数的clone</span><br><span class="line">git submodule update --init // 相当于git submodule init + git submodule update</span><br><span class="line">// 要拉取所有层层嵌套的子模块</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">// 命令默认拉取主分支（master），想要修改这个默认拉取分支可以修改 .gitmodules 文件中子模块对应的 branch 值，或者执行：</span><br><span class="line">git config submodule.xxx.branch dev // xxx指代仓库名</span><br><span class="line">// 或者执行同时将配置写入文件，这样其他人拉取父项目也会获取该配置：</span><br><span class="line">git config -f .gitmodules submodule.xxx.branch dev</span><br><span class="line"></span><br><span class="line">// 更新A项目中引入的B项目</span><br><span class="line">// 方法一：进入A项目中的B项目执行：</span><br><span class="line">git pull</span><br><span class="line">// 方法二：在A项目中执行：</span><br><span class="line">git submodule update --remote</span><br><span class="line">// 方法三：在A项目中执行：</span><br><span class="line">git submodule foreach git pull</span><br><span class="line"></span><br><span class="line">// 删除A项目中的B项目</span><br><span class="line">// 第一步：删除暂存区</span><br><span class="line">git rm --cached B</span><br><span class="line">// 第二步：删除B项目</span><br><span class="line">rm -rf B</span><br><span class="line">// 第三步：删除远程的</span><br><span class="line">git add . // 先执行</span><br><span class="line">git commit -m &quot;delete B&quot; // 再执行</span><br><span class="line">git push // 最后执行</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>

<h1 id="三、git用法图解"><a href="#三、git用法图解" class="headerlink" title="三、git用法图解"></a>三、git用法图解</h1><img src="/2023/09/25/Git/2.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="四、Git流程说明"><a href="#四、Git流程说明" class="headerlink" title="四、Git流程说明"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>
<br/>

<hr>
<br/>

<h1 id="五、Git集成IDEA"><a href="#五、Git集成IDEA" class="headerlink" title="五、Git集成IDEA"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \ ”</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">    <span class="attr">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>
<p>2、IDEA配置Git</p>
<img src="/2023/09/25/Git/3.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes"><a href="#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes" class="headerlink" title="六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖成a的，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>
<br/>

<hr>
<br/>

<h1 id="七、IDEA上面使用Git怎么回退"><a href="#七、IDEA上面使用Git怎么回退" class="headerlink" title="七、IDEA上面使用Git怎么回退"></a>七、IDEA上面使用Git怎么回退</h1><h3 id="1、提交到暂存区"><a href="#1、提交到暂存区" class="headerlink" title="1、提交到暂存区"></a>1、提交到暂存区</h3><p>说明：将文件<code>add</code>到暂存区，进行版本控制；如果将错误的文件<code>add</code>到暂存区，想要回退，直接右键选中需要回退的文件，点击<code>git</code> -》<code>rollback</code>就可以回退了。</p>
<h3 id="2、提交到本地仓库"><a href="#2、提交到本地仓库" class="headerlink" title="2、提交到本地仓库"></a>2、提交到本地仓库</h3><p>说明：将暂存区的文件<code>commit</code>到本地仓库，如果提交到本地仓库的文件想要回退：<br>1、使用<code>IDEA</code>操作<br>（1）右键选中需要回退的文件，点击git</p>
<img src="/2023/09/25/Git/4.png" class="">
<p>（2）使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>
<img src="/2023/09/25/Git/5.jpg" class="">
<p>（3）回退</p>
<img src="/2023/09/25/Git/6.jpg" class="">
<p>（4）如远程仓库也需要回退，本地仓库回退之后直接执行<code>git push -f</code>，强制推送远程仓库。<br>2、使用<code>git</code>命令：<br>（1）查看上面第二大点中的回退命令即可；<br>（2）如果回退之后想要撤回：先执行<code>git reflog</code>，查看所有日志，复制要撤回到的sha1值，再执行<code>git reset --hard 【sha1值】</code>进行撤回。</p>
<br/>

<hr>
<br/>


<h1 id="八、Git提交规范（fix、feat等字段含义）"><a href="#八、Git提交规范（fix、feat等字段含义）" class="headerlink" title="八、Git提交规范（fix、feat等字段含义）"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成<br>idea上下载插件：<code>Git Commit Message Helper</code>，使用如下：  </p>
<img src="/2023/09/25/Git/9.jpg" class="">  
<p>（1）作用模块：一般是修改的什么模块或者是什么功能，如【xx模块】&#x2F;【xx功能】；<br>（2）简介描述：一般是5-10各自简单描述做的任务，如【xx模块加入消息队列】。<br>完整的示例：  </p>
<img src="/2023/09/25/Git/10.jpg" class="">
<img src="/2023/09/25/Git/11.jpg" class="">  

<br/>

<hr>
<br/>

<h1 id="九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）"><a href="#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）" class="headerlink" title="九、git merge和git rebase使用方法（都是针对本地来进行合并的）"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支<code>master、dev、test</code>：<br>（1）A在<code>dev</code>上开发功能，完成功能开发，先得在<code>dev</code>分支提交开发的功能模块，然后推送到远程服务器，然后<code>git checkout master</code>切换到本地的<code>master</code>分支，使用<code>git merge dev</code>将在<code>dev</code>分支上开发的功能合并到本地的<code>master</code>分支，然后推送到远程服务器；<br>（2）B在本地切换到<code>master</code>分支，更新代码，在本地<code>git checkout test</code>切换到<code>test</code>分支，在使用<code>git rebase master</code>，以刚更新下来的<code>master</code>代码为基准，把<code>test</code>分支上的代码添加到<code>master</code>分支后面，分支还是在<code>test</code>上（实际就是把<code>master</code>分支和<code>test</code>分支所有节点重新排序，把test分支上的节点添加在master分支节点后面，覆盖原来test分支的节点）。<br><strong>再说明：</strong><br>有一个分支<code>master</code>：<br>（1）A、B开发人员分别在<code>master</code>分支上切两个分支：<code>dev、test</code>（此时<code>master、dev、test</code>分支的节点都是一样的；<br>（2）A在<code>dev</code>分支上开发，B在<code>test</code>分支上开发，A和B同时开发；<br>（3）A先开发完成了，先提交代码到远程的<code>dev</code>分支上，然后更新<code>master</code>分支上的代码（保证<code>master</code>分支上的代码是最新的），然后在<code>dev</code>分支上执行<code>git merge master</code>，将<code>master</code>分支合并到<code>dev</code>上，再把<code>dev</code>分支提交到远程的<code>dev</code>分支上，然后请求<code>pull request</code>进行合并（或者将<code>master</code>分支代码更新下来后，在<code>master</code>分支上执行<code>git merge dev</code>，直接将最新的<code>dev</code>分支代码合并到<code>master</code>分支上，然后推送到远程<code>master</code>分支）；<br>（4）B开发完成了，将<code>test</code>分支上的代码推送到远程<code>test</code>分支上，然后更新<code>master</code>分支上的代码，在<code>test</code>分支上执行<code>git rebase master</code>，此时会在<code>test</code>分支上，将<code>test</code>分支上新的提交记录给重新取过来，添加到<code>master</code>分支提交记录后面，然后把新排序好的记录覆盖之前<code>test</code>分支上的记录，此时它会提示再更新<code>test</code>分支或者强制推送，注意再更新时，不要把远程旧的没有更改过的代码覆盖了本地最新的已经修改过的代码）。<br><strong>特别注意：</strong>如果你的分支已经是公开的提交对象，并且已经有人基于你的这些提交对象开展了后续的开发工作，那你之后就不能再使用git rebase了，因为git rebase会破坏掉后续开发人员的提交记录，导致后续开发人员的工作无法进行。</p>
<br/>

<hr>
<br/>

<h1 id="十、分支的使用"><a href="#十、分支的使用" class="headerlink" title="十、分支的使用"></a>十、分支的使用</h1><p>1、创建分支</p>
<img src="/2023/09/25/Git/Git8.jpg" class="">
<p>2、创建名称</p>
<img src="/2023/09/25/Git/Git9.jpg" class="">
<p>3、查看版本分支</p>
<img src="/2023/09/25/Git/Git10.jpg" class="">
<p>4、切换分支</p>
<img src="/2023/09/25/Git/Git11.jpg" class="">
<p>5、将开发好的分支合并到主分支<br>（1）首先将分支切换到主分支；<br>（2）然后在目录下鼠标右键，按照下图所示选择：</p>
<img src="/2023/09/25/Git/Git12.jpg" class="">
<p>6、删除分支<br>说明：当被删分支合并之后被删除，不会影响合并结果。<br>打开查看版本分支（看<code>3、</code>），选中需要删除的分支，右键：</p>
<img src="/2023/09/25/Git/Git13.jpg" class="">


<br/>

<hr>
<br/>



<h1 id="十一、Git常见的问题"><a href="#十一、Git常见的问题" class="headerlink" title="十一、Git常见的问题"></a>十一、Git常见的问题</h1><h3 id="1、error-remote-origin-already-exists"><a href="#1、error-remote-origin-already-exists" class="headerlink" title="1、error: remote origin already exists."></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>
<h3 id="2、怎么将本地仓库和远程仓库关联"><a href="#2、怎么将本地仓库和远程仓库关联" class="headerlink" title="2、怎么将本地仓库和远程仓库关联"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>
<img src="/2023/09/25/Git/7.jpg" class="">  
<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>

<h3 id="3、error-failed-to-push-some-refs-to’xxxx’"><a href="#3、error-failed-to-push-some-refs-to’xxxx’" class="headerlink" title="3、error: failed to push some refs to’xxxx’"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>
<ol>
<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>
<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>
</ol>
<h3 id="4、Hexo主题themes-文件夹无法提交到GitHub的解决方法"><a href="#4、Hexo主题themes-文件夹无法提交到GitHub的解决方法" class="headerlink" title="4、Hexo主题themes-文件夹无法提交到GitHub的解决方法"></a>4、Hexo主题themes-文件夹无法提交到GitHub的解决方法</h3><p><strong>说明：</strong>因为themes&#x2F;zhaoo也是从仓库里拉取下来的 他关联到了作者的git仓库所以提交不上去。<br><strong>解决办法：</strong><br>（1）将<code>.git</code>文件夹删除或者移动到别的地方；<br>（2）进入到themes文件夹下，执行命令<code>git rm --cache 主题文件名</code>，从暂存区删除该文件夹；<br>比如：我的主题名为：zhaoo，我就在themes目录下执行<code>git rm --cache zhaoo</code>。<br>（3）然后执行命令：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add themes&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>（4）如果<code>.git</code>文件夹没有删除就移回去。  </p>
<h3 id="5、git提交错了？别慌，直接删除提交记录"><a href="#5、git提交错了？别慌，直接删除提交记录" class="headerlink" title="5、git提交错了？别慌，直接删除提交记录"></a>5、git提交错了？别慌，直接删除提交记录</h3><p>1、场景<br>不小心将错误代码或者错误的信息提交到了远程仓库，想要删除这条提交记录以及历史记录。<br>2、说明<br><code>git revert</code>和<code>git reset</code>这两个命令都有撤销操作。<br>3、使用<code>git revert</code>撤销提交<br>用于撤销一个或多个提交，但是会保留历史提交记录。<br>（1）语法<br><code>git revert &lt;commit-hash&gt;</code>：撤销单个提交（这会创建一个新的提交，用于撤销指定的提交的更改）。<br><code>git revert &lt;commit-hash1&gt; &lt;commit-hash2&gt;...</code>：撤销多个提交。<br><code>git revert HEAD</code>：撤销最近的提交。<br><code>git revert &lt;commit-hash1&gt;^..&lt;commit-hash2&gt;</code>：撤销某个范围内的提交（这会撤销从不包括到包括范围内的所有提交）。<br>（2）实操  </p>
<ul>
<li>先用<code>git log</code>查看提交记录，找到要撤销的提交记录的commit-hash，然后执行<code>git revert &lt;commit-hash&gt;</code>，例如：<code>b1b56b50a0859556623283946972e495d4a42fc1</code>；  </li>
<li>然后，执行单个文件撤销命令<code>git revert b1b56b50a0859556623283946972e495d4a42fc1</code>或者直接执行<code>git revert HEAD</code>，撤销最近的一次提交；  </li>
<li>执行命令后，会让我们为本次更改提交说明；  </li>
<li>执行成功后，代码内容已经回退了，但是git的推送历史记录还是存在。</li>
</ul>
<p>4、使用<code>git reset</code>撤销提交<br>用于撤销一个或多个提交，也会删除历史提交记录。<br>（1）语法<br><code>git reset --soft HEAD~1</code>：撤销提交，保留修改（这会将 HEAD 指向的分支的最新提交撤销掉，并保留所有更改在工作目录中，这样你就可以重新提交，并修改提交信息）。<br><code>git reset HEAD~1</code>：撤销提交，取消暂存的文件（这会将 HEAD 指向的分支的最新提交撤销掉，并将暂存区的文件取消暂存，但保留在工作目录中。这样你可以重新选择要暂存的文件）。<br><code>git reset --hard HEAD~1</code>：撤销提交，丢弃修改（这会将 HEAD 指向的分支的最新提交撤销掉，并丢弃所有更改，包括暂存区和工作目录中的文件。这样你就可以完全回到上一个提交的状态）。<br><code>git reset --hard &lt;commit-hash&gt;</code>：将 HEAD 指针移动到指定的提交（这会将 HEAD 指针移动到指定的提交，并丢弃所有更改。这可以用来回滚到历史提交状态）。<br>（2）实操<br>如果本地没有其他修改，暂存区也没有文件，那么可以直接使用<code>git reset HEAD~1</code>回退到指定提交，例如：<br>执行<code>git reset HEAD~1</code>，然后执行<code>git push --force</code>，强制推送，这样就可以删除提交历史记录。<br><strong>注意：</strong><br>使用<code>--force</code>选项将覆盖远程仓库的提交历史，这意味着远程仓库的历史将会变为你本地仓库的历史。这是非常危险 的操作！！一定要确保本地代码和远程代码是相关的！！一定要谨慎操作！！  </p>
<br/>

<hr>
<br/>


<h1 id="十二、IDEA上git的提交图解"><a href="#十二、IDEA上git的提交图解" class="headerlink" title="十二、IDEA上git的提交图解"></a>十二、IDEA上git的提交图解</h1><img src="/2023/09/25/Git/Git14.jpg" class="">
<p>1、黄色标签：<code>head</code>指针，用来表示当前分支位置；<br>2、绿色标签：表示本地分支，如果有两个绿色标签，表示本地有两个分支；<br>3、紫色标签：表示远程分支，如果有两个紫色标签，表示远程有两个分支；  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>版本控制</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Spring学习笔记</title>
    <url>/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><p><code>spring</code>是一个轻量级的开发框架，为什么是轻量级，因为它所需jar包小，本身的大小也小，并且可以和其他任何框架集成。  </p>
<br/>

<hr>
<br/>


<h1 id="二、SpringBean的生命周期"><a href="#二、SpringBean的生命周期" class="headerlink" title="二、SpringBean的生命周期"></a>二、SpringBean的生命周期</h1><p><strong>图解：</strong>  </p>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" class="">  
<p><strong>1、实例化</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>createBeanInstance</code>方法中，根据反射的原理实例化bean对象。<br>（1）<code>createBeanInstance</code>方法中第一行是获取<code>Class</code>对象；<br>（2）在<code>instantiateBean</code>方法中，有一行为<code>beanInstance=getInstantiationStrategy（）.instantiate(mbd,beanName,this)</code>；<br>（3）在<code>instantiate</code>方法中的<code>constructorToUse=clazz.getDeclaredConstructor()</code>，这个是使用<code>Class</code>对象获取这个对象的构造器；<br>（4）在<code>instantiateClass</code>方法中的<code>ctor.newInstance(argsWithDefaultValues)</code>，根据构造器获取这个对象的实例。  </p>
<p><strong>2、初始化（自定义属性赋值）</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>populateBean</code>方法中，使用<code>set</code>方法完成赋值。（使用 PropertyValue 实体类的 set 方法完成赋值 setPropertyValue(pv.getName(), pv.getValue())；  </p>
<p><strong>3、检查<code>Aware</code>相关接口并设置依赖（容器对象属性赋值）</strong><br>（1）<code>Aware</code>接口是用来干什么的？<br><code>Aware</code>接口相当于是一个标识作用，比如下面的例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(object <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> BeanFactory) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> ApplicationContext) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg" class="">  
<p>上图说明：<br>相当于有多个接口去继承<code>Aware</code>接口，然后有多个类去实现那些接口，在<code>spring</code>容器启动的时候，会分别判断这些类的实例化对象<code>bean</code>属于哪个接口，然后按照那个接口的<code>set</code>方法去赋值。<br>（下面4到7步，每个<code>bean</code>对象都会执行，意思就是：每个<code>bean</code>对象在初始化好之后，都会执行前置处理，然后执行<code>invokeInitMethods</code>方法去判断这个<code>bean</code>对象是否实现了<code>InitializingBean</code>接口，有没有扩展点，如果实现了，就执行<code>afterPropertiesSet</code>方法，这个方法相当于一个扩展点，相当于给这个<code>bean</code>对象增强，最后执行后置处理。）  </p>
<p>4、<code>BeanPostProcessor</code>前置处理  </p>
<p>5、检查<code>bean</code>对象实现了<code>InitializingBean</code>接口（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>6、检查是否配置有自定义的<code>init-method</code>（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>7、<code>BeanPostProcessor</code>后置处理</p>
<br/>

<hr>
<br/>


<h1 id="三、Spring三大核心"><a href="#三、Spring三大核心" class="headerlink" title="三、Spring三大核心"></a>三、Spring三大核心</h1><h3 id="1、spring-IOC（控制反转）和spring-DI（依赖注入）"><a href="#1、spring-IOC（控制反转）和spring-DI（依赖注入）" class="headerlink" title="1、spring IOC（控制反转）和spring DI（依赖注入）"></a>1、spring IOC（控制反转）和spring DI（依赖注入）</h3><p><strong>1、什么是<code>IOC</code>控制反转和<code>DI</code>依赖注入？</strong><br>之前我们创建对象，是使用<code>new</code>，<code>new</code>一个对象，但是在<code>spring</code>中，我们不用创建对象，由<code>spring</code>帮我们创建，<code>spring</code>相当于一个容器，我们把对象当成<code>bean</code>，将<code>bean</code>注入（依赖注入）到<code>spring</code>容器中，由<code>spring</code>容器自己帮我们创建和管理对象，在需要使用这个对象的地方使用反射（控制反转）来使用这个对象。<br>例如：<br>（1）以前传统方式创建一个对象：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑狗&quot;</span>, <span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        System.out.println(dog.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）现在<code>spring</code>帮我们创建，去<code>xml</code>配置文件中配置<code>bean</code>对象：（也可以使用注解的方式，请查看<code>springboot</code>学习笔记）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性id的值，相当于给这个实例一个变量名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性class的值，就是Dog实体类的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Dog&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置property就相当于给对应的属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑狗&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑色&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述配置就相当于在java中的下述代码，差别就是这是写在配置文件中，不会造成程序的耦合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">apple.setName(<span class="string">&quot;小黑狗&quot;</span>);</span><br><span class="line">apple.setColor(<span class="string">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 通过ClassPathXmlApplicationContext加载dog.xml配置文件，路径是target目录下的相对路径</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">dogContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:dog.xml&quot;</span>);</span><br><span class="line">	<span class="comment">// 通过反射获取dog实例对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> dogContext.getBean(<span class="string">&quot;dog&quot;</span>, Dog.class);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、有参构造创建对象的例子（这里只列xml方式）</strong><br>（1）有一个<code>student</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cn.zuo.pojo</span><br><span class="line"></span><br><span class="line">Student&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentOne</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;StudentOne&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>student.xml</code>文件中：<br>第一种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaogang&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;27&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaohong&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、bean的自动注入方法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//输入autowire=&quot;byName&quot; 就实现自动装配了。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">calss</span>=<span class="string">&quot;com.cn.zuo.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">说明：</span><br><span class="line">    byname，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致。</span><br><span class="line">    bytype，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</span><br></pre></td></tr></table></figure>

<h3 id="2、spring-AOP（面向切面）"><a href="#2、spring-AOP（面向切面）" class="headerlink" title="2、spring AOP（面向切面）"></a>2、spring AOP（面向切面）</h3><p><strong>说明：</strong>需要导入依赖包 org.aspectj（AspectJ是早期的AOP实现的框架，SpringAop借用了AspectJ中的Aop注解，所以需要导入），还需要导入spring和aspectj整合的包，Aop是用来处理那些和业务没有关系的功能和逻辑模块，比如日志、权限等。<br>Aop 是 IOC 整体流程中的一个扩展点。<br>因为整合包中已经导入了 org.aspectj，所以不需要再导入了。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果导入了spring-context就不用再导入了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个是整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1、<code>SpringAop</code>专业术语</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    add();</span><br><span class="line">    update();</span><br><span class="line">    select();</span><br><span class="line">    delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）<code>连接点</code>：<code>User</code>类中可以被增强的方法都是连接点，比如上面的<code>add</code>、<code>update</code>、<code>select</code>、<code>delete</code>方法。<br>（2）<code>切入点</code>：实际上被增强的方法叫切入点，比如上面的四个方法中，我增强了<code>add</code>方法、<code>add</code>方法就是切入点。<br>（3）<code>通知（增强）</code>：增强的部分，比如我在<code>add</code>方法中增加一个日志输出，这个日志输出就是通知。通知的类型有：<br>    - 前置通知（BeforeAdvice）：在目标执行之前被调用，对应接口<code>BeforeAdvice</code>。<br>    - 后置通知（AfterReturning）：在目标方法执行之后调用（抛出异常不会执行），对应接口<code>AfterReturnAdvice</code>。<br>    - 环绕通知（前后通知Around）：在目标方法执行前后被调用，对应接口<code>MethodInterceptor</code>。<br>    - 异常通知（AfterThrowingAdvice）：在目标方法抛出异常后调用，对应接口<code>ThrowAdvice</code>。<br>    - 最终通知（相当于fially，After）：在目标方法执行之后被调用（抛出异常也会执行）。<br>（4）<code>切面</code>：把通知切入到切入点的过程。  </p>
<p>2、通过继承类实现<br>（1）<code>BeforeAdvice</code>类<br>    - 会在目标对象的方法之前被调用<br>    - 通过实现<code>MethodBeforeAdvice</code>接口来实现<br>    - 该接口中定义了一个方法即<code>before</code>方法，该方法会在目标对象<code>target</code>之前执行<br>（2）<code>AfterAdvice</code>类<br>    - 在目标对象的方法执行之后调用<br>    - 通过实现<code>AfterReturningAdvice</code>接口实现<br><strong>例子：</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DemoOneService业务一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoOneService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoOne</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoOne...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoTwo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoTwo...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoThree</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoThree...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DemoTwoService业务二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTwoService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f()...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增一个MyAfterAdvice类去实现AfterReturningAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o,Method method,Object[] objects,object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行后发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个MyBeforeAdvice类去实现MethodBeforeAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method,Object[] objects,Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行前发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Spring</code>核心配置文件<code>applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mybefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyBeforeAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;after&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyAfterAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* xxx.xxx.demo.*.*(...))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;after&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;mybefore&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoOneService&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoTwoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoTwoService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">DemoOneService</span> <span class="variable">do</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		<span class="keyword">do</span>.demoOne();</span><br><span class="line">		<span class="keyword">do</span>.demoTwo();</span><br><span class="line">		<span class="keyword">do</span>.demoThree();</span><br><span class="line">		<span class="type">DemoTwoService</span> <span class="variable">dt</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		dt.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、通过xml方式实现<br>（1）第一种（设置切入点）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    先注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.BeforeLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.AfterLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）第二种（设置切入面）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diyLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.diy.DiyLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置切入面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diyLog&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- method里面的before是增强类中的方法 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、通过注解配置切面<br>（1）创建一个<code>User</code>类和一个增强类<code>UserProxy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成增强类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个spring配置文件bean.xml（使用config类来配置请看第<code>(4)</code>点）  </p>
<ol>
<li>在配置文件头部声明中加入context、aop声明，开启注解扫描；</li>
<li>开启Aspect生成代理对象。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>（3）在需要增强的方法上增加不同通知的注解<br>比如我在上面增强类UserProxy中before方法上增加前置通知：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@before(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 环绕通知</span></span><br><span class="line"><span class="meta">@Around(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line">    p.proceed(); <span class="comment">// 执行User类中add方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）使用Config类来代替xml配置文件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zuo&quot;&#125;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">// 相当于xml中 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、关于Spring中的一些用法"><a href="#四、关于Spring中的一些用法" class="headerlink" title="四、关于Spring中的一些用法"></a>四、关于Spring中的一些用法</h1><h3 id="1、在xml中配置Spring扫描包"><a href="#1、在xml中配置Spring扫描包" class="headerlink" title="1、在xml中配置Spring扫描包"></a>1、在<code>xml</code>中配置<code>Spring</code>扫描包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是默认配置扫描包，会通过默认的 Filter ,扫描到需要的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例一</span></span><br><span class="line"><span class="comment">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置filter </span></span><br><span class="line"><span class="comment">context:include-filter 设置扫描哪些内容，下面的意思是扫描注解，只扫描带Controller注解的类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例二</span></span><br><span class="line"><span class="comment">context:exclude-filter 设置不扫描哪些内容，下面的意思是不扫描带Controller注解的类，其他在zuo包下的都扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、开启事物管理和注解"><a href="#2、开启事物管理和注解" class="headerlink" title="2、开启事物管理和注解"></a>2、开启事物管理和注解</h3><p>（一般在service层加）<br>1、基于注解<br>（1）载入spring-tx依赖，在spring配置文件中加入头部声明，将<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>的“xsi”改成“tx”，将<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</code>的<code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>的“beans”改成“tx”。<br>（2）加入事物管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）开启事物注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启事务注解 </span></span><br><span class="line"><span class="comment">transaction-manager=&quot;transactionManager&quot;对应上面事务管理器中的id，这个属性的意思是指明开启的是哪个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）在service层的实现类上或者方法上加@Transactional  </p>
<p>2、基于xml<br>同上面<code>1、</code>操作，不要（3）<br>加入通知配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;随便取&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;需要配置事务的方法&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;对应上面随便取的id&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、完全基于注解<br>（1）创建一个配置类，对比spring配置文件来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.zuo&quot;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span> <span class="params">()</span>&#123;</span><br><span class="line">          <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span> ();</span><br><span class="line">          dataSource.setDriverClassName(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUrl(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUsername(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setPassword(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> dataSource;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 同理创建JdbcTemplate</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span>  JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">          <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">          <span class="comment">//jdbcTemplate.setDataSource(getDruidDataSource ()); </span></span><br><span class="line">         <span class="comment">//可以直接调用上面这个方法，但是会重新创建，我们需要用的是spring容器中已经存在的dataSource，</span></span><br><span class="line">        <span class="comment">//所以直接在这个方法里增加一个参数DataSource dataSource，这个dataSource是spring容器中已经存在的。</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="3、新特性之单元测试框架"><a href="#3、新特性之单元测试框架" class="headerlink" title="3、新特性之单元测试框架"></a>3、新特性之单元测试框架</h3><p>1、JUnit5<br>（1）引入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring对junit的支持相关依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- junit5测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- log4j2的依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）创建spring配置文件<br>bean.xml：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">	   </span><br><span class="line">    <span class="comment">&lt;!-- 开启组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xxx.xxx.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）测试<br>创建一个<code>TestService</code>类，并使用<code>@Component</code>注解，在测试类中注入<code>TestService</code>，并调用<code>test()</code>方法。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建测试类。<br>写法一：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置文件使用：locations</span></span><br><span class="line"><span class="comment">// 配置类使用：value，例子：@SpringJUnitConfig(value = Config.class)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        testService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写法二：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        testService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、JUnit4<br>（1）引入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）创建测试类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        testService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4、手写SpringIOC原理"><a href="#4、手写SpringIOC原理" class="headerlink" title="4、手写SpringIOC原理"></a>4、手写SpringIOC原理</h3><p>1、创建两个注解<code>@Bean</code>和<code>@Di</code><br>（1）<code>@Bean</code>注解  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）<code>@Di</code>注解  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Di &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、创建dao层接口和实现类<br>（1）<code>TestDao</code>接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）<code>TestDaoImpl</code>实现类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、创建service层接口和实现类<br>（1）<code>TestService</code>接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）<code>TestServiceImpl</code>实现类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">	<span class="meta">@Di</span></span><br><span class="line">    <span class="keyword">private</span> TestDao testDao;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        testDao.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建容器接口和容器实现类<br>（1）创建<code>ApplicationContext</code>接口<br><code>ApplicationContext</code>接口相当于spring容器。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建<code>AnnotationApplicationContext</code>实现类<br><code>AnnotationApplicationContext</code>实现类相当于spring容器接口的一个实现类，因为它有多个实现类，比如针对xml的实现类或者针对注解的实现类等。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AnnotationApplicationContext <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建map集合，放bean对象</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 定义目录根路径</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 构造方法，传入包路径，设置包扫描规则</span></span><br><span class="line">	<span class="comment">// 就是扫描当前包及其子包，哪个类有@Bean注解，把这个类通过反射实例化</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// basePackage格式为：xxx.xxx.xxx</span></span><br><span class="line">			<span class="comment">// 我们需要根据路径 xxx\xxx\xxx 去编译出来的文件夹中（例如：target）根据路径去扫描.class文件</span></span><br><span class="line">			<span class="comment">// 所以我们这里需要将basePackage的格式.换成\</span></span><br><span class="line">			<span class="comment">// 1、将 . 换成 \</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">packagePath</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 通过Thread.currentThread()获取当前线程</span></span><br><span class="line">			<span class="comment">// getContextClassLoader()获取类加载器</span></span><br><span class="line">			<span class="comment">// 2、获取包绝对路径</span></span><br><span class="line">			Enumeration&lt;URL&gt; urls = Thread.currentThread().getContextClassLoader().getResources(packagePath);</span><br><span class="line">			<span class="comment">// 得到的urls是所有的</span></span><br><span class="line">			<span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">				<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">				<span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;url-8&quot;</span>);</span><br><span class="line">				<span class="comment">// 获取包前面路径部分</span></span><br><span class="line">				rootPath = filePath.substring(<span class="number">0</span>, filePath.length() - packagePath.length());</span><br><span class="line">				</span><br><span class="line">				<span class="comment">// 3、递归扫描包中的所有类</span></span><br><span class="line">				loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeExcception</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 属性注入</span></span><br><span class="line">		loadDi();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 属性注入</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDi</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 1、遍历beanFactory集合中所有bean对象</span></span><br><span class="line">		Set&lt;Map.Entry&lt;Class, Object&gt;&gt; entries = beanFactory.entrySet();</span><br><span class="line">		<span class="keyword">for</span> (Map.Entry&lt;Class, Object&gt; entry : entries) &#123;</span><br><span class="line">			<span class="comment">// 2、获取每个bean对象</span></span><br><span class="line">			<span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">			<span class="comment">// 3、获取bean对象所有属性</span></span><br><span class="line">			Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line">			<span class="comment">// 4、遍历属性</span></span><br><span class="line">			<span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">				<span class="comment">// 5、判断属性是否有@Di注解</span></span><br><span class="line">				<span class="type">Di</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Di.class);</span><br><span class="line">				<span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 因为属性可能存在私有，如果是私有属性，需要设置一下权限</span></span><br><span class="line">					field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">					<span class="comment">// 6、如果有@Di注解，就进行注入</span></span><br><span class="line">					field.set(bean, beanFactory.get(field.getType()));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 包扫描过程，实例化</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File file)</span> &#123;</span><br><span class="line">		<span class="comment">// 1、判断当前是否是文件夹</span></span><br><span class="line">		<span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">			<span class="comment">// 2、如果是文件夹，获取所有内容</span></span><br><span class="line">			File[] childrenFiles = file.listFiles();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 3、判断文件夹里面为空，直接返回</span></span><br><span class="line">			<span class="keyword">if</span> (childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 4、如果文件夹不为空，遍历文件夹中的所有内容</span></span><br><span class="line">			<span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">				<span class="comment">// 5、遍历得到的每个File对象，继续判断，如果还是文件夹，递归</span></span><br><span class="line">				<span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">					loadBean(child);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// 6、如果是文件，获取包路径</span></span><br><span class="line">					<span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPatn.length - <span class="number">1</span>);</span><br><span class="line">					<span class="comment">// 7、判断当前文件类型是否是.class</span></span><br><span class="line">					<span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">						<span class="comment">// 8、如果是.class文件，把路径\替换成.，并把.class后缀去掉，获取类名</span></span><br><span class="line">						<span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">						<span class="comment">// 9、获取类的class</span></span><br><span class="line">						<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">						<span class="comment">// 这里需要判断这个clazz对象是不是接口，我们只扫描不是接口的clazz对象</span></span><br><span class="line">						<span class="comment">// 10、判断是否是接口</span></span><br><span class="line">						<span class="keyword">if</span> (!clazz.isInterface()) &#123;</span><br><span class="line">							<span class="comment">// 11、如果不是接口在判断是否有@Bean注解标注</span></span><br><span class="line">							<span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(Bean.class);</span><br><span class="line">							<span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">								<span class="comment">// 12、如果有@Bean注解，将类名放进beanFactory中</span></span><br><span class="line">								<span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">								<span class="comment">// 因为有些类是通过接口实现的</span></span><br><span class="line">								<span class="comment">// 然后如果是通过接口实现的类，把对象实例化之后，让接口作为beanFactory的key</span></span><br><span class="line">								<span class="comment">// 如果不是通过接口实现的类，把对象实例化之后，就直接将类名作为beanFactory的key</span></span><br><span class="line">								<span class="comment">// 13、判断是否有接口</span></span><br><span class="line">								<span class="keyword">if</span> (clazz.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">									beanFactory.put(clazz.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">								&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">									beanFactory.put(clazz, instance);</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回bean对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="5、Spring的校验"><a href="#5、Spring的校验" class="headerlink" title="5、Spring的校验"></a>5、Spring的校验</h3><p>1、第一种方式（通过Validator接口实现）<br>说明：通过实现<code>org.springframework.validation.Validator</code>接口。<br>（1）引入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）创建<code>Persion</code>类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建<code>PersionValidator</code>类，实现<code>org.springframework.validation.Validator</code>接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersionValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line">	<span class="comment">// 用来表示此校验用在哪个类型上</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">		<span class="comment">// 表示对Persion类做校验</span></span><br><span class="line">		<span class="keyword">return</span> Persion.class.equals(clazz);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 具体的校验逻辑</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object obj, Errors errors)</span> &#123;</span><br><span class="line">		<span class="comment">// name不能为空</span></span><br><span class="line">		ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>, <span class="string">&quot;name不能为空&quot;</span>);</span><br><span class="line">		<span class="comment">// age不能小于18</span></span><br><span class="line">		<span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> (Persion) obj;</span><br><span class="line">		<span class="keyword">if</span> (persion.getAge() &lt; <span class="number">18</span>) &#123;</span><br><span class="line">			errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;age不能小于18&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 创建persion对象</span></span><br><span class="line">		<span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">		<span class="comment">// persion.setName(&quot;张三&quot;); 测试一</span></span><br><span class="line">		<span class="comment">// persion.setAge(17); 测试二</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建persion对应的databinder</span></span><br><span class="line">		DataBinder binder <span class="keyword">new</span> <span class="title class_">DataBinder</span>(persion);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 设置校验器</span></span><br><span class="line">		binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersionValidator</span>());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 执行校验</span></span><br><span class="line">		binder.validate();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取校验结果</span></span><br><span class="line">		<span class="type">BindingResult</span> <span class="variable">result</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">		System.out.println(result.getAllErrors());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、第二种方式（Bean Validation注解实现）<br>说明：使用这种方式需要使用<code>javax.validation.ValidatorFactory</code>和<code>javax.validation.Validator</code>，然后spring默认有一个类<code>LocalValidatorFactoryBean</code>已经实现了上面的接口，所以可以直接配置这个类，将这个类注入到spring容器中就可以了。<br>（1）创建配置类，配置<code>LocalValidatorFactoryBean</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置@ComponentScan是需要扫描spring容器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建<code>Persion</code>类，使用注解进行校验  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常用注解：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@NotNull</span>：不能为null，但可以为空字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@NotEmpty</span>：不能为null，也不能为空字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@NotBlank</span>：不能为null，也不能为空字符串，而且字符串中不能有空格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Size</span>(max, min)：限制字符串长度必须在min到max之间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Min</span>(value)：限制必须为一个不小于指定值的数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Max</span>(value)：限制必须为一个不大于指定值的数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Pattern</span>(value)：限制必须符合指定的正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>：指定字符串的格式为邮箱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">	<span class="meta">@NotEmpty(message = &quot;name不能为空&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@Min(value = 18, message = &quot;age不能小于18&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）通过原生的校验器校验，创建service类，然后进行测试<br>说明：这个<code>Validator</code>是原生的<code>jakarta.validation.Validator</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersionService</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Validator validator;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validatorByPersion</span><span class="params">(Persion persion)</span> &#123;</span><br><span class="line">		Set&lt;ConstraintViolation&lt;Persion&gt;&gt; set = validator.validate(persion);</span><br><span class="line">		<span class="keyword">return</span> set.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">		<span class="type">PersionService</span> <span class="variable">persionService</span> <span class="operator">=</span> context.getBean(PersionService.class);</span><br><span class="line">		<span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">		persion.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		persion.setAge(<span class="number">17</span>);</span><br><span class="line">		System.out.println(persionService.validatorByPersion(persion));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）通过spring的校验器校验，创建service类，然后进行测试<br>说明：这个<code>Validator</code>是spring的<code>org.springframework.validation.Validator</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersionService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Validator validator;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validatorByPersion</span><span class="params">(Persion persion)</span> &#123;</span><br><span class="line">		<span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(persion, persion.getName());</span><br><span class="line">		validator.validate(persion, bindException);</span><br><span class="line">		<span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">		<span class="type">PersionService</span> <span class="variable">persionService</span> <span class="operator">=</span> context.getBean(PersionService.class);</span><br><span class="line">		<span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">		persion.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		persion.setAge(<span class="number">17</span>);</span><br><span class="line">		System.out.println(persionService.validatorByPersion(persion));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、第三种方式（基于方法实现校验）<br>（1）创建一个配置类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">	<span class="meta">@NotNull(message = &quot;name不能为空&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Min(value = 18, message = &quot;age不能小于18&quot;)</span></span><br><span class="line">	<span class="meta">@Max(value = 60, message = &quot;age不能大于60&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;, message = &quot;手机号格式不对&quot;)</span></span><br><span class="line">	<span class="meta">@NotBlank(message = &quot;手机号不能为空&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String phone;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建一个service类，并使用<code>@Validated</code>注解，然后进行校验  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersionService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validatorByPersion</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> Persion persion)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">		<span class="type">PersionService</span> <span class="variable">persionService</span> <span class="operator">=</span> context.getBean(PersionService.class);</span><br><span class="line">		<span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line">		persion.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		persion.setAge(<span class="number">17</span>);</span><br><span class="line">		System.out.println(persionService.validatorByPersion(persion));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、自定义校验<br>（1）创建一个自定义校验注解，校验不能有空格（仿照@NotNull注解创建）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidation.class&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">	String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能有空格&quot;</span>;</span><br><span class="line">	Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 指定多个就用这个</span></span><br><span class="line">	<span class="meta">@Target(&#123;ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">	<span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">	<span class="meta">@Documented</span></span><br><span class="line">	<span class="keyword">public</span> <span class="meta">@interface</span> List &#123;</span><br><span class="line">		CannotBlank[] value();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个自定义校验器  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConstraintValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (value != <span class="literal">null</span> || value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 获取默认提示信息</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">messageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">			<span class="comment">// 禁用默认提示信息</span></span><br><span class="line">			context.disableDefaultConstraintViolation();</span><br><span class="line">			<span class="comment">// 设置提示信息</span></span><br><span class="line">			context.buildConstraintViolationWithTemplate(messageTemplate).addConstraintViolation();</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="6、PropertyEditor属性编辑器"><a href="#6、PropertyEditor属性编辑器" class="headerlink" title="6、PropertyEditor属性编辑器"></a>6、PropertyEditor属性编辑器</h3><p>1、说明<br>将外部输入的数据，处理之后对应到程序可识别的类属性上，如将字符串转换为日期类型，将字符串转换为枚举类型等。<br>2、使用<br>有一个properties文件，内容如下：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">company.name</span>=<span class="string">xxx # 可以转换</span></span><br><span class="line"><span class="attr">company.web</span>=<span class="string">www.xxx.com # 可以转换</span></span><br><span class="line"><span class="attr">company.address</span>=<span class="string">中国-云南-昆明 # 不可以转换，因为这里对应的是Address实体类中的三个属性，详情看下面</span></span><br></pre></td></tr></table></figure>
<p>（1）创建一个Address实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">	<span class="comment">// 国家</span></span><br><span class="line">	<span class="keyword">private</span> String country;</span><br><span class="line">	<span class="comment">// 省份</span></span><br><span class="line">	<span class="keyword">private</span> String province;</span><br><span class="line">	<span class="comment">// 城市</span></span><br><span class="line">	<span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个Company实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">	<span class="comment">// 公司名称</span></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;company.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">// 公司网址</span></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;company.web&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String web;</span><br><span class="line">	<span class="comment">// 公司地址，</span></span><br><span class="line">	<span class="comment">// 这里如果直接使用@Value注解是无法实现的，</span></span><br><span class="line">	<span class="comment">// 因为@Value注解只能处理基本数据类型，</span></span><br><span class="line">	<span class="comment">// 不能处理实体类，所以这里使用PropertyEditor属性编辑器</span></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;company.address&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）所以需要自定义属性编辑器，去实现实体类的映射，必须使用到PropertyEditor属性编辑器（它是接口），一般推荐继承它的实现类<code>PropertyEditorSupport</code>!<br>创建一个自定义属性编辑器：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressPropertyEditor</span> <span class="keyword">extends</span> <span class="title class_">PropertyEditorSupport</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">		<span class="comment">// 这里是获取配置文件中的地址信息，然后进行拆分，然后封装到Address实体类中</span></span><br><span class="line">		String[] split = text.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		<span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">		address.setCountry(split[<span class="number">0</span>]);</span><br><span class="line">		address.setProvince(split[<span class="number">1</span>]);</span><br><span class="line">		address.setCity(split[<span class="number">2</span>]);</span><br><span class="line">		<span class="built_in">super</span>.setValue(address);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）要想上面的自定义属性编辑器生效，还得创建它的注册管理器<br>创建一个自定义属性编辑器注册管理器：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title class_">PropertyEditorRegistrar</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 注册自定义属性编辑器</span></span><br><span class="line">		registry.registerCustomEditor(Address.class, <span class="keyword">new</span> <span class="title class_">AddressPropertyEditor</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）最后在配置类中，将自定义属性编辑器注册管理器注册到容器中，并将properties文件引入  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:company.properties&quot;)</span> <span class="comment">// 资源引入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> CustomEditorConfigurer <span class="title function_">customEditorConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">CustomEditorConfigurer</span> <span class="variable">customEditorConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomEditorConfigurer</span>();</span><br><span class="line">		<span class="comment">// 注册自定义属性编辑器注册管理器</span></span><br><span class="line">		customEditorConfigurer.setPropertyEditorRegistrars(<span class="keyword">new</span> <span class="title class_">PropertyEditorRegistrar</span>[] &#123; </span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">AddressPropertyEditorRegistrar</span>()</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> customEditorConfigurer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（6）测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 方式一，直接使用注解</span></span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">		<span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> context.getBean(Company.class);</span><br><span class="line">		System.out.println(company);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 方式二，使用扫描器</span></span><br><span class="line">		<span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">		context.scan(<span class="string">&quot;配置类所在包路径（xxx.xxx.xxx）&quot;</span>); <span class="comment">// 扫描包配置</span></span><br><span class="line">		context.refresh(); <span class="comment">// 容器刷新</span></span><br><span class="line">		<span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> context.getBean(Company.class);</span><br><span class="line">		System.out.println(company);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>关于springMVC学习笔记</title>
    <url>/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、SpringMVC相关知识整理"><a href="#一、SpringMVC相关知识整理" class="headerlink" title="一、SpringMVC相关知识整理"></a>一、SpringMVC相关知识整理</h1><h3 id="1、springMVC支持ant风格的路径"><a href="#1、springMVC支持ant风格的路径" class="headerlink" title="1、springMVC支持ant风格的路径"></a>1、springMVC支持ant风格的路径</h3><p>?：表示任意单个字符<br>*：表示任意的0个或多个字符<br>**：表示任意的一层或多层目录<br>注意：在使用 ** 时，只能使用 &#x2F;**&#x2F;xxx 的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/aaa/hello 或者 localhost:8080/a:a/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/a?a/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/aaa/hello 或者 localhost:8080/aaaaa/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/a*a/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/a/b/hello 或者 localhost:8080/a/b/c/d/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/**/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、SpringMVC常用组件"><a href="#2、SpringMVC常用组件" class="headerlink" title="2、SpringMVC常用组件"></a>2、SpringMVC常用组件</h3><p>1、<code>DispatcherServlet</code>：<br><strong>前端控制器</strong>，不需要工程师开发，由框架提供，作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求。<br>2、<code>HandlerMapping</code>：<br><strong>处理器映射器</strong>，不需要工程师开发，由框架提供，作用：根据请求的<code>url</code>、<code>method</code>等信息查找<code>Handler</code>，即控制器方法。<br>（1）<code>Handler</code>：<strong>处理器</strong>，需要工程师开发，作用：在<code>DispatcherServlet</code>的控制下，<code>Handler</code>对具体的用户请求进行处理。<br>（2）<code>HandlerAdapter</code>：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供，作用：通过<code>HandlerAdapter</code>对处理器（控制器方法）进行执行。<br>（3）<code>ViewResolver</code>：<strong>视图解析器</strong>，不需要工程师开发，由框架提供，作用：进行视图解析，得到相应的视图，例如：<code>ThymeleafView</code>、<code>InternalResourceView</code>、<code>RedirectView</code>。<br>（4）<code>View</code>：<strong>视图</strong>，不需要工程师开发，由框架或视图技术提供，作用：将模型数据通过页面展示给用户。</p>
<h3 id="3、SpringMVC执行流程"><a href="#3、SpringMVC执行流程" class="headerlink" title="3、SpringMVC执行流程"></a>3、SpringMVC执行流程</h3><img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC12.png" class="">
<p>说明：Handler就是Controller。<br>1、用户向服务器发送请求，请求被<code>springMVC</code>前端控制器<code>DispatcherServlet</code>捕获；<br>2、<code>DispatcherServlet</code>对请求<code>url</code>进行解析，得到请求资源标识符<code>uri</code>，判断请求<code>uri</code>对应的映射；（<strong>特别说明：</strong><code>&lt;mvc:default-servler-handler/&gt;</code>的作用，如果没有配置，那么<code>springMVC</code>会把所有请求当作后端控制器<code>controller</code>的映射请求，如果请求地址没有映射到<code>controller</code>的，都会404，比如静态资源的请求。而配置上后，<code>springMVC</code>会解析所有请求，将后端控制器有的请求映射给<code>controller</code>，把控制器没有映射的请求交给默认的<code>servlet</code>）<br>3、根据<code>uri</code>，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关对象（包括<code>Handler</code>对象以及对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回；<br>4、<code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>；<br>5、如果成功获得<code>HandlerAdapter</code>，此时将开始执行拦截器的<code>preHandler</code>方法；<br>6、提取<code>Request</code>中的模型数据，填充<code>Handler</code>入参，开始执行<code>Handler</code>方法，处理请求；在填充<code>Handler</code>的入参过程中，根据配置，<code>spring</code>将做一些额外的工作：<br>（1）<code>HttpMessageConveter</code>：将请求消息（如<code>json</code>）转换成一个对象，将对象转换为指定的响应信息。<br>（2）数据转换：对请求消息进行数据转换，如<code>string</code>类型转换成<code>Integer</code>。<br>（3）数据格式化：对请求消息进行数据格式化，如将字符串转换成格式化数字或格式化日期等。<br>（4）数据验证：验证数据的有效性（长度、格式等）。<br>7、<code>Handler</code>执行完成后，向<code>DispatcherServlet</code>返回一个<code>ModelAndView</code>对象；<br>8、此时将开始执行拦截器的<code>postHandler</code>方法；<br>9、根据返回的<code>ModelAndView</code>（此时会判断是否存在异常，如果存在异常，则执行<code>HandlerExceptionResolver</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>，来渲染视图页面；<br>10、渲染视图完毕执行拦截器的<code>afterCompletion</code>方法；<br>11、将渲染结果返回给客户端。</p>
<br/>

<hr>
<br/>


<h1 id="二、springMVC项目搭建（旧）"><a href="#二、springMVC项目搭建（旧）" class="headerlink" title="二、springMVC项目搭建（旧）"></a>二、springMVC项目搭建（旧）</h1><p>1、创建<code>Maven</code>工程项目</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC1.jpg" class="">

<p>2、项目结构</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC2.jpg" class="">
<p>如果没有web文件夹，我们就新建一个web文件夹，然后点击菜单栏 <code>File</code> -&gt; <code>Project Structure</code>，然后根据下图所示创建：</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC3.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC4.jpg" class="">

<p>3、添加pom文件需要的依赖，刷新maven<br><strong>特别注意：</strong>springMVC项目的依赖和springboot的不同，springMVC依赖还需要手动去web目录下创建lib包，并把所需的依赖手动添加到lib包中才能生效！！！添加方法下面会讲到。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis依赖包中有,是test的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mybatis-spring依赖包中有是provided，只有在编译和测试的时候使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--        springMVC依赖包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- jackson，帮助进行json转换 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- tomcat启动器插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、在java包下创建<code>controller</code>包（xxx.xx.controller），并且新建<code>MyController</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Controller:创建控制器（处理器）对象</span></span><br><span class="line"><span class="comment">*   控制器：后端控制器，自定义的类处理请求</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping:请求映射</span></span><br><span class="line"><span class="comment">    *   属性：value 请求中的url地址，唯一值，以“/”开头</span></span><br><span class="line"><span class="comment">    *   位置：1、在方法的上面（必须的） 2、在类的上面（可选）</span></span><br><span class="line"><span class="comment">    *   作用：把指定的请求，交给指定的方法处理，等同于url-pattern</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/some.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">(ModelAndView model)</span>&#123;</span><br><span class="line">        <span class="comment">//存放数据</span></span><br><span class="line">        model.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        model.addObject(<span class="string">&quot;fun&quot;</span>,<span class="string">&quot;2222&quot;</span>);</span><br><span class="line">        <span class="comment">//要返回的前端界面</span></span><br><span class="line">        model.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当框架调用完doSome()方法后，得到返回中ModelAndView</span></span><br><span class="line"><span class="comment">     * 框架会在后续的处理逻辑值，处理mv多选里面的数据和视图</span></span><br><span class="line"><span class="comment">     * 对数据执行request.setAttribute(&quot;msg&quot;,&quot;处理了some.do请求&quot;)；把数据放入到request作用域</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、在resources文件夹下创建<code>spring-mvc.xml</code>、<code>applicationContext.xml</code>：<br>（1）<code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动，如果要使用阿里巴巴的fastjson，再导入依赖包之后就使用下面被注释的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot; id=&quot;fastJsonHttpMessageConverter&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;property name=&quot;supportedMediaTypes&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                    &lt;list&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                        &lt;value&gt;application/json&lt;/value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                    &lt;/list&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/mvc:message-converters&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包：controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- value值里面的jsp要和创建的文件夹名字一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）<code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将spring导入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;import resource=&quot;classpath:spring-dao.xml&quot;&gt;&lt;/import&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;import resource=&quot;classpath:spring-service.xml&quot;&gt;&lt;/import&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、在<code>web/WEB-INF</code>文件夹下创建jsp文件夹（文件夹名字自定义，要和<code>spring-mvc.xml</code>中视图解析器里的一致），然后在jsp文件夹下创建<code>show.jsp</code></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: <span class="number">86182</span></span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">10</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">13</span>:<span class="number">45</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello world!</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">$&#123;fun&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>将下面代码复制粘贴进<code>web.xml</code>中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatchServlet--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">             下面的init-param标签是用来初始化applicationContext.xml的路径，默认配置是可以不用配置init-param标签的，</span></span><br><span class="line"><span class="comment">             如果不配置，它的路径就是 /WEB-INFO 文件夹下，并且配置文件名字后缀还要默认加上 -servlet.xml ，</span></span><br><span class="line"><span class="comment">             完整名字就是 springMVC-servlet.xml </span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 设置的话，这个servlet会提前到服务器启动时启动 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /:不处理.jsp，/*:处理所有请求，包括.jsp --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /：处理路径，不处理页面请求，比如处理：http://localhost:8080/hello；不处理：http://localhost:8080/hello.jsp。</span></span><br><span class="line"><span class="comment">               /*：处理所有的文件夹，不包含子文件夹 </span></span><br><span class="line"><span class="comment">              /**： 是处理所有的文件夹及里面的子文件夹</span></span><br><span class="line"><span class="comment">			  *.do：处理所有以.do结尾的请求</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>（1）tomcat配置中默认有两个servlet，一个是jsp，一个是default，jsp的servlet-mapping配置的处理.jsp结尾的请求，default的servlet-mapping配置的是<code>/</code>，只处理静态资源请求。例如：发送一个<code>/index.html</code>请求，会被default处理，去寻找静态资源，如果发送<code>/index</code>请求，这个请求不会到controller，只会去到静态资源，如果静态资源没有index文件，就会404。<br>（2）然后我们在web.xml中配置了<code>DispatcherServlet</code>，并把它的servlet-mapping配置为<code>/</code>，这样<code>DispatcherServlet</code>就会把default覆盖了，此后只要发送<code>/index</code>这种请求，它就会帮我们转发到controller；发送<code>/index.jsp</code>会被tomcat中jsp的servlet-mapping处理；发送<code>/index.html</code>，如果<code>springMVC.xml</code>配置文件没有配置静态资源处理，就会404。<br>（3）如果我们将<code>DispatcherServlet</code>配置为<code>*.do</code>，那么它就没有覆盖default，不过发送<code>/index</code>请求，就会404，除非发送<code>/index.do</code>，这样就会帮我们转发到controller，同理发送<code>/index.jsp</code>是由jsp处理，发送<code>/index.html</code>就会由default处理（不管<code>springMVC</code>配置文件中有没有配置静态资源处理都会处理）。<br>（4）如果我们将<code>DispatcherServlet</code>配置为<code>/*</code>，那么所有请求都会由<code>DispatcherServlet</code>来处理（包括jsp请求）。  </p>
<p>7、设置lib依赖包，点击菜单栏 <code>File</code> -&gt; <code>Project Structure</code>，然后根据下图所示创建：</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC5.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC6.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC7.jpg" class="">

<p>8、项目启动配置</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC8.png" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC9.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC10.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC11.jpg" class="">
<p>启动项目之后，在弹出的页面地址栏url后面加some.do访问成功！<br>至此，简单的springMVC项目搭建成功，没有包含数据库连接，下面继续讲解包含数据库连接的搭建。  </p>
<br/>

<p>9、在<code>mysql</code>数据库中新建表，这个大家自定义，这里不讲解。  </p>
<p>10、在<code>pom.xml</code>中加入数据库连接所需要的依赖，并且刷新maven<br><strong>注意：</strong>因为springMVC项目还需要手动去lib包下添加依赖，所以还需要去项目结构那在lib包下添加项目所需依赖，添加方法上面有讲到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果出现<br><code>java.lang.AbstractMethodError: org.mybatis.spring.transaction.SpringManagedTransaction.getTimeout()Ljava/lang/Integer</code><br>异常，表示<code>mybatis</code>依赖包和<code>mybatis-spring</code>依赖包版本不兼容，可以查询版本兼容问题。  </p>
<p>11、在java包下创建<code>dao、service、pojo</code>包（xxx.xx.dao、xxx.xx.service、xxx.xx.pojo），并且新建<code>MyServiceImpl、MyPojo</code>类，<code>MyDao</code>接口：<br>（1）<code>MyPojo</code>（对应数据库中的表，属性对应数据库中的字段）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyPojo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPojo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（2）<code>MyServiceImpl</code>（用来处理业务的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.MyDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyServiceImpl</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDao myDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果spring-service.xml中实现set注入的方式，就使用这个，并把上面@Service和@Autowired注解注释</span></span><br><span class="line"><span class="comment">//    public void setMyDao(MyDao loginDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.loginDao = loginDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;MyPojo&gt; <span class="title function_">findUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myDao.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（3）<code>MyDao</code>（用来处理数据库查询的接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyDao</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;MyPojo&gt; <span class="title function_">findUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>12、在<code>resources</code>目录下新建<code>mapper</code>文件夹、<code>jdbc.properties、mybatis-config.xml、spring-dao.xml、spring-service.xml</code>，在<code>mapper</code>目录下新建<code>MyMapper.xml</code>：<br>（1）<code>MyMapper.xml</code>（用于写sql增删改查的）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace：要对应你的dao接口的包路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao.MyDao&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- id：对应MyDao接口中的方法名；resultType：对应方法返回值，这里因为返回MyPojo，所以是MyPojo类的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.MyPojo&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（2）<code>spring-service.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描service包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将我们所有业务注入到spring中，上面配置了扫描包，在serviceImpl加了@service注解，就不用配置了--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 因为我们使用的是注解@Autowired，所以我们在bean标签中使用自动注入的方式注入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;myServiceImpl&quot; class=&quot;service.MyServiceImpl&quot; autowire=&quot;byType&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 这种方式是通过set注入，需要在MyServiceImpl类添加set方法 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    &lt;bean id=&quot;myServiceImpl&quot; class=&quot;service.MyServiceImpl&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name=&quot;myDao&quot; ref=&quot;myDao&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明式事务配置,需要导入 spring-jdbc依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（3）<code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里mysql数据库用的是5的版本就用这个连接</span></span><br><span class="line"><span class="comment">#driverClassName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql数据库用的是8的版本用这个连接</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注意改下 3306/ 后面数据库的名字</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://root@localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>（4）<code>mybatis-config.xml</code>（用来配置mybatis的各种配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将mapper注册到mybatis配置中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（5）<code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件jdbc.properties 方法一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 关联数据库配置文件jdbc.properties 方法二 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot; id=&quot;propertyPlaceholderConfigurer&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;location&quot; value=&quot;classpath:jdbc.properties&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- org.apache.commons.dbcp.BasicDataSource需要 commons-dbcp依赖包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  destroy-method=”close”的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 下面四个value要对应jdbc.properties中的四个值，如果jdbc.properties中是jdbc.url，下面就要改成jdbc.url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 如果没有在mybatis-config.xml配置mappers就使用这个 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置dao接口扫描包，动态的实现dao接口注入spring中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- value对应上面SqlSessionFactoryBean的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>13、将<code>applicationContext.xml</code>中的注释打开，在<code>MyController</code>类中增加下面的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> MyServiceImpl myService;</span><br></pre></td></tr></table></figure>
<p>并且在<code>doSome</code>方法中增加下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MyPojo&gt; users = myService.findUsers();</span><br><span class="line">model.addObject(<span class="string">&quot;users&quot;</span>,users.toString());</span><br></pre></td></tr></table></figure>

<p>14、在<code>show.jsp</code>增加<code>$&#123;users&#125;</code>，启动项目，成功！</p>
<br/>

<hr>
<br/>

<h1 id="三、SpringMVC下载和上传"><a href="#三、SpringMVC下载和上传" class="headerlink" title="三、SpringMVC下载和上传"></a>三、SpringMVC下载和上传</h1><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">// 获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">// 获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    System.out.println(realPath);</span><br><span class="line">    <span class="comment">// 创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">// 创建字节数组，is.available()方法是流的所有大小</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">// 将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">// 创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String,String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">// 设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.ok;</span><br><span class="line">    <span class="comment">// 创建ResponseEntity对象，这个对象是返回包括了响应头和响应体</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes,headers,statusCode);</span><br><span class="line">    <span class="comment">// 关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下载工具类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownLoadUtil</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downLoadFile</span><span class="params">(String filePath, ServletContext context, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> context.getRealPath(filePath);</span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">		<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">		<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">		<span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> context.getMimeType(fileName);</span><br><span class="line">		response.setHeader(<span class="string">&quot;content-type&quot;</span>, mimeType);</span><br><span class="line">		<span class="type">String</span> <span class="variable">fName</span> <span class="operator">=</span> URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fName + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;filename*=utf-8&#x27;&#x27;&quot;</span> + fName);</span><br><span class="line">		<span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">		<span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> ((len = fis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			sos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		sos.close();</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDown</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		DownLoadUtil.downLoadFile(<span class="string">&quot;/static/img/1.jpg&quot;</span>, request.getServletContext(), response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、上传"><a href="#2、上传" class="headerlink" title="2、上传"></a>2、上传</h3><p>（需要导入上传依赖）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">froupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifaciId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1、需要在前端<code>form</code>表单<code>form</code>标签设置<code>enctype</code>属性为：<code>multipart/form-data</code>，这个值表示上传功能，默认值是：<code>application/x-www-form-urlencoded</code>，表示form表单值以：<code>username=xxx&amp;password=xxxx</code>形式传给后端。<br>2、在springMVC配置文件中配置：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件上传解析器，将上传的文件封装为MultipartFile --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：id必须为multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置默认编码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置一次请求上传的文件的总大小的最大值，单位是字节，这里是100mb --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*100&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置上传文件大小的最大值，单位是字节，这里是50mb --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*50&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span> <span class="comment">// 上传是使用post方式</span></span><br><span class="line"><span class="comment">// MultipartFile 是springMVC封装好的上传对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取上传文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 获取文件名的后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="comment">// 将uuid和后缀名拼接后的结果作为最终的文件名，以防止文件上传重复，然后导致文件被覆盖</span></span><br><span class="line">    fileName = UUID.randomUUID().toString.replace(<span class="string">&quot;-&quot;</span>) + suffixName;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="comment">// 判断filePath所对应路径是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> filePath + File.separator + fileName;</span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>

<h1 id="四、springMVC项目搭建（新）"><a href="#四、springMVC项目搭建（新）" class="headerlink" title="四、springMVC项目搭建（新）"></a>四、springMVC项目搭建（新）</h1><p>1、导入相关依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- springIOC相关依赖 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在springMVC6 中，servlet-api迁移到了jakarta ee api了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、创建controller  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span> <span class="comment">// 代表向浏览器直接返回数据，而不是返回视图</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello springMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、创建一个配置类<br>说明：如果在配置类上使用了<code>@EnableWebMvc</code>注解，等同于在xml中配置了<code>&lt;mvc:annotation-driven /&gt;</code>标签，并且自动帮我们配置了HandlerMapping和HandlerAdapter，还帮我们加了json处理器。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.xxx&quot;)</span> <span class="comment">// 配置扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 配置HandlerMapping进spring容器</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">handlerMapping</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 配置HandlerAdapter进spring容器</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">handlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>@EnableWebMvc</code>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WebMvcConfigurer：是springMVC提供的配置接口，里面有很多方法，可以重写这些方法，实现自己的配置</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.xxx&quot;)</span> <span class="comment">// 配置扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 开启静态资源访问</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">		configurer.enable();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、创建一个springMVC环境（相当于<code>web.xml</code>）<br>说明：这个环境需要初始化，使上面的配置类生效，创建了这个类，就不需要<code>web.xml</code>了。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AbstractAnnotationConfigDispatcherServletInitializer实现的WebApplicationInitializer接口中，</span></span><br><span class="line"><span class="comment"> * 有一个onStartup方法，当项目启动时，会调用该方法，</span></span><br><span class="line"><span class="comment"> * 而该方法会调用getRootConfigClasses、getServletConfigClasses和getServletMappings方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">	<span class="comment">// 指定service / mapper层的配置类</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定springmvc的配置类</span></span><br><span class="line">    <span class="comment">// 设置项目对应的配置类</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;MvcConfig.class&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置dispatchServlet的处理路径，一般情况为 / ，代表处理所有请求</span></span><br><span class="line">	<span class="comment">// 设置springmvc内部自带的访问路径</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、启动项目，访问<code>http://localhost:8080/hello</code>，即可看到控制台输出<code>hello springMVC</code>，说明springMVC项目搭建成功。  </p>
<br/>


<hr>
<br/>


<h1 id="五、使用过程中的问题"><a href="#五、使用过程中的问题" class="headerlink" title="五、使用过程中的问题"></a>五、使用过程中的问题</h1><h3 id="1、自定义类型转化器"><a href="#1、自定义类型转化器" class="headerlink" title="1、自定义类型转化器"></a>1、自定义类型转化器</h3><p>1、创建一个类去实现<code>Converter</code>接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将前端的传的字符串转换成Date类型</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">		<span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在<code>springMVC.xml</code>配置文件中配置  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;myConversionService&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 解决响应乱码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myConversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">		    <span class="comment">&lt;!-- 将我们上面写的自定义转换器配置进去 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.StringToDateConverter&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果是针对上面的情况字符串转换成时间的场景，推荐使用下面的方法：<br>使用注解<code>@DateTimeFormat()</code>来进行转换。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, <span class="meta">@RequestParam(&quot;birthday&quot;)</span> <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date birthday)</span> &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(birthday);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2、获取请求头信息"><a href="#2、获取请求头信息" class="headerlink" title="2、获取请求头信息"></a>2、获取请求头信息</h3><p>1、使用注解<code>@RequestHeader</code>获取请求头信息  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent)</span> &#123;</span><br><span class="line">		System.out.println(userAgent);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、使用注解<code>@CookieValue</code>获取cookie信息  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String sessionId)</span> &#123;</span><br><span class="line">		System.out.println(sessionId);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库学习笔记</title>
    <url>/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、名词介绍"><a href="#一、名词介绍" class="headerlink" title="一、名词介绍"></a>一、名词介绍</h1><p>1、<code>DML</code>：数据操作语言，用来对数据库中的数据进行增删改操作，包含以下三个指令：<code>insert</code>、<code>delete</code>、<code>update</code>。<br>2、<code>DDL</code>：数据定义语言，用来定义数据库对象：数据库、数据表、视图、索引等，包含以下三个指令：<code>create</code>、<code>drop</code>、<code>alter</code>。<br>3、<code>DCL</code>：数据控制语言，用来定义数据库的访问权限和安全级别，以及创建用户，授予或回收权限等，包含以下三个指令：<code>grant</code>、<code>revoke</code>、<code>commit</code>。<br>4、<code>DQL</code>：数据查询语言，用来查询数据库中表的记录，使用最多，包含以下三个指令：<code>select</code>、<code>distinct</code>、<code>where</code>。<br>5、事务隔离级别<br>（1）说明：数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。<br>（2）读未提交（Read Uncommitied）：事务可以读取未被提交的数据，容易产生脏读（一个事务读取了另一个事务未提交的数据，是真正的错误）、不可重复读（一个事务读取了另一个事务提交的修改数据）和幻读（一个事务读取了另一个事务提交的插入数据）等问题。<br>（3）读已提交（Read Commitied）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。<br>（4）可重复度（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改，可以避免脏读和不可重复读，但仍有幻读的问题。（Mysql默认使用级别）<br>（5）串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务，可以避免以上所有问题，但效率较低，不适用于高并发场景。  </p>
<br/>


<hr>
<br/>



<h1 id="二、Mysql操作命令"><a href="#二、Mysql操作命令" class="headerlink" title="二、Mysql操作命令"></a>二、Mysql操作命令</h1><h3 id="1、连接mysql"><a href="#1、连接mysql" class="headerlink" title="1、连接mysql"></a>1、连接mysql</h3><p>在Dos（cmd）命令中执行：<code>mysql -u 【mysql用户名】 -p</code>，然后输入密码，比如：<code>mysql -u root -p root</code>。</p>
<h3 id="2、查看数据库"><a href="#2、查看数据库" class="headerlink" title="2、查看数据库"></a>2、查看数据库</h3><p>连接mysql之后，执行命令：<code>show databases;</code>（别忘记分号），查看数据库有几个。</p>
<h3 id="3、选择要使用哪个数据库"><a href="#3、选择要使用哪个数据库" class="headerlink" title="3、选择要使用哪个数据库"></a>3、选择要使用哪个数据库</h3><p><code>use test;</code>：选择使用test数据库。</p>
<h3 id="4、查看数据库里有几个表"><a href="#4、查看数据库里有几个表" class="headerlink" title="4、查看数据库里有几个表"></a>4、查看数据库里有几个表</h3><p><code>show tables;</code>：查看tables数据库有几个表。</p>
<h3 id="5、创建表"><a href="#5、创建表" class="headerlink" title="5、创建表"></a>5、创建表</h3><p>在mysql命令行输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>sex <span class="type">char</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="6、查看表结构"><a href="#6、查看表结构" class="headerlink" title="6、查看表结构"></a>6、查看表结构</h3><p><code>desc student;</code>：查看student表结构。</p>
<h3 id="7、设置中文乱码问题"><a href="#7、设置中文乱码问题" class="headerlink" title="7、设置中文乱码问题"></a>7、设置中文乱码问题</h3><p>1、查看编码<br><code>show variables like &#39;char%&#39;;</code><br>2、更改编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> character_set_results<span class="operator">=</span>gbk; #结果显示乱码问题</span><br><span class="line"><span class="keyword">set</span> character_set_client<span class="operator">=</span>gbk; #数据写入报错</span><br></pre></td></tr></table></figure>

<h3 id="8、插入多个数据"><a href="#8、插入多个数据" class="headerlink" title="8、插入多个数据"></a>8、插入多个数据</h3><p><code>insert into student(name,sex) values (&#39;张三&#39;,&#39;男&#39;),(&#39;李四&#39;,&#39;女&#39;);</code></p>
<h3 id="9、删除数据"><a href="#9、删除数据" class="headerlink" title="9、删除数据"></a>9、删除数据</h3><p><code>delete from student where name = &#39;张三&#39;;</code></p>
<h3 id="10、更改数据"><a href="#10、更改数据" class="headerlink" title="10、更改数据"></a>10、更改数据</h3><p><code>update student set name=&#39;张三&#39; where name=&#39;李四&#39;;</code>：把李四改成张三。</p>
<h3 id="11、删除表"><a href="#11、删除表" class="headerlink" title="11、删除表"></a>11、删除表</h3><p><code>drop table student;</code></p>
<h3 id="12、表中新增一列属性"><a href="#12、表中新增一列属性" class="headerlink" title="12、表中新增一列属性"></a>12、表中新增一列属性</h3><p>语法：<code>alter table 【表名】 add 【列名】 【列类型】;</code><br>例子：<code>alter table table_name add col_name char(5);</code>（向table_name表新增一列col_name属性，类型为char）<br>如果我们希望添加在指定的一列，可以用：<br><code>alter table table_name add column_name varchar(255) not null after name;</code><br>注意，上面这个命令的意思是说添加新列到某一列后面。如果想添加到第一列的话，可以用：<br><code>alter table table_name add column column_name varchar(255) not null first;</code></p>
<h3 id="13、添加外键"><a href="#13、添加外键" class="headerlink" title="13、添加外键"></a>13、添加外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="operator">/</span><span class="operator">/</span>student</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> (main_id_con)<span class="operator">/</span><span class="operator">/</span>外键 student里的tid</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">FOREIGN</span> KEY (main_id)<span class="operator">/</span><span class="operator">/</span>从表外键字段(tid)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">REFERENCES</span>  主表(id); <span class="operator">/</span><span class="operator">/</span>teacher</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="14、多表查询"><a href="#14、多表查询" class="headerlink" title="14、多表查询"></a>14、多表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">distinct</span> t1.AGENT_ZONE <span class="keyword">as</span> agentzone,   #<span class="keyword">distinct</span> : 去重</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> t1.G_CORP_NAME) <span class="keyword">as</span> unitcount,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> t1.BATCHNO) <span class="keyword">as</span> batchno,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GBA_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> bpnums,  </span><br><span class="line">#<span class="keyword">case</span> <span class="keyword">when</span>:当t1.GAB_BANK_F为<span class="number">2</span>的时候等于<span class="number">1</span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> bcount,</span><br><span class="line">#<span class="keyword">case</span> <span class="keyword">when</span>:当t1.GAB_BANK_F为<span class="number">2</span>的时候等于G_AMOUNT 的值</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> t1.G_AMOUNT <span class="keyword">end</span>) <span class="keyword">as</span> bamount,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GBA_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> tpnums,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> tcount,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> t1.G_AMOUNT <span class="keyword">end</span>) <span class="keyword">as</span> tamount</span><br><span class="line"><span class="keyword">from</span> GJT_WAGES_DETAIL t1</span><br><span class="line"># <span class="keyword">left</span> join...on ：连接查询，即使右表中没有匹配，也从左表返回所有的行</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> GJT_WAGES_SUMMARY t2 </span><br><span class="line"><span class="keyword">on</span> t1.BATCHNO <span class="operator">=</span> t2.BATCHNO</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> WORKDATE <span class="keyword">between</span> <span class="string">&#x27;2020-04-11&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2021-09-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.AGENT_ZONE # 以t1.AGENT_ZONE分组  ，分组后如果还要使用<span class="keyword">where</span>条件，就用<span class="keyword">having</span>代替<span class="keyword">where</span></span><br></pre></td></tr></table></figure>

<h3 id="15、修改某一列的字段属性"><a href="#15、修改某一列的字段属性" class="headerlink" title="15、修改某一列的字段属性"></a>15、修改某一列的字段属性</h3><p><code>alter table user modify column sex varchar(50);</code></p>
<h3 id="16、创建一个新表和某一旧表一样"><a href="#16、创建一个新表和某一旧表一样" class="headerlink" title="16、创建一个新表和某一旧表一样"></a>16、创建一个新表和某一旧表一样</h3><p><code>create table 【新表名】 like 【旧表名】;</code></p>
<h3 id="17、修改某一列的列名"><a href="#17、修改某一列的列名" class="headerlink" title="17、修改某一列的列名"></a>17、修改某一列的列名</h3><p><code>alter table 【表名】 change 【旧列名】 【新列名】 【新列名类型】;</code></p>
<h3 id="18、删除某一列"><a href="#18、删除某一列" class="headerlink" title="18、删除某一列"></a>18、删除某一列</h3><p><code>alter table 【表名】 drop 【列名】;</code></p>
<h3 id="19、修改表名"><a href="#19、修改表名" class="headerlink" title="19、修改表名"></a>19、修改表名</h3><p><code>rename table 【旧表名】 to 【新表名】;</code></p>
<h3 id="20、蠕虫复制"><a href="#20、蠕虫复制" class="headerlink" title="20、蠕虫复制"></a>20、蠕虫复制</h3><p><code>insert into 【新表】 select * from 【旧表】;</code><br>如果只想复制某几个字段：<br><code>insert into 【新表】(name,sex) select (name,sex) from 【旧表】;</code></p>
<h3 id="21、单个升序、降序查询"><a href="#21、单个升序、降序查询" class="headerlink" title="21、单个升序、降序查询"></a>21、单个升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【根据什么字段】 【ASC/DESC】;</code>(ASC：升序。DESC：降序)</p>
<h3 id="22、多个字段升序、降序查询"><a href="#22、多个字段升序、降序查询" class="headerlink" title="22、多个字段升序、降序查询"></a>22、多个字段升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【字段1】 【ASC/DESC】,【字段2】 【ASC/DESC】;</code>（ASC：升序。DESC：降序）<br>（1）想要将null值的数据往后就：（默认）<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls last;</code><br>（2）想要将null值的数据往前排就：<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls first;</code></p>
<h3 id="23、分页"><a href="#23、分页" class="headerlink" title="23、分页"></a>23、分页</h3><p><code>limit</code>：跳过几条，当前页显示几条。<br>例如：<br>（1）<code>limit 0,5</code>：跳过0条，从第1条数据开始，显示5条，当前页面显示5条，相当于第一页，查找了5条；<br>（2）<code>limit 5,5</code>：跳过5条，从第6条数据开始，显示5条，当前页面显示5条，相当于第二页，查找了5条；<br>（3）<code>limit 2,5</code>：跳过2条，从第3条数据开始，显示5条，查找出第3、4、5、6、7五条数据显示在当前页面。</p>
<h3 id="24、连接查询"><a href="#24、连接查询" class="headerlink" title="24、连接查询"></a>24、连接查询</h3><p>1、<code>left join...on...</code>：表1左连接表2，以左为主，表示以表1为主，关联上表2的数据；<br>2、<code>right join...on...</code>：右连接查询，和左连接查询相反；<br>3、<code>inner join...on...</code>：内连接查询，表示以两个表的交集为主，查询出来的数据是两个表交集的部分，其余没有关联的就不额外显示。<br><a href="https://segmentfault.com/a/1190000017369618">具体使用方法请点击</a></p>
<h3 id="25、将数据库中的两个字段拼接"><a href="#25、将数据库中的两个字段拼接" class="headerlink" title="25、将数据库中的两个字段拼接"></a>25、将数据库中的两个字段拼接</h3><p><code>select id,concat(concat(student_no,&quot;--&quot;),name) as name,class_id from student;</code>：将学生的学号和姓名拼接起来表示（001–小明）。</p>
<h3 id="26、视图"><a href="#26、视图" class="headerlink" title="26、视图"></a>26、视图</h3><p><strong>说明：</strong>对视图进行增删改操作，也会同步到表，只不过视图中没有的属性列，对应表中的属性列值为null。<br>1、创建视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code>：创建一个视图，如果已经存在视图就替换覆盖，从学生表查询id小于等于10的所有学生作为视图中的数据。<br>2、修改视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code><br>或者<br><code>alter view stu_view as select id,name from student where id &lt;= 10;</code><br>3、删除视图<br><code>drop view if exists view_stu;</code><br>4、视图检查<br><strong>说明：</strong>如果在创建视图的时候加上 with cascaded（或者是local） check option，那么对视图进行增、删、改操作的时候，必须满足where条件才能成功，不然就失败。<br>（1）<code>cascaded</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 例子二  </span><br><span class="line"># 创建视图一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 创建试图二</span><br><span class="line"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，</span><br><span class="line"># 视图一也会默认加上 <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option来进行视图检查。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> stu_view_1 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">25</span>大于<span class="number">10</span>可以插入，但是在视图一中，<span class="number">25</span>不小于等于<span class="number">20</span>，所以插入失败。</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">25</span>,<span class="string">&#x27;zxc&#x27;</span>); </span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">15</span>大于<span class="number">10</span>可以插入，在视图一中，<span class="number">15</span>小于<span class="number">20</span>，所以插入成功。</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>（2）<code>local</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 例子一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">local</span> <span class="keyword">check</span> option;</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 例子二</span><br><span class="line"># 创建视图一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 创建视图二</span><br><span class="line"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，视图一按它自己所规定的来进行。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> stu_view_1 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">25</span>大于<span class="number">10</span>可以插入，在视图一中，视图一没有设置视图检查，所以插入成功。</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">25</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">8</span>不大于<span class="number">10</span>，所以插入失败。 </span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>5、视图更新<br>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：<br>（1）聚合函数或窗口函数（sum、min、max、count等）；<br>（2）distinct；<br>（3）group by；<br>（4）having；<br>（5）union 或 unionall  </p>
<h3 id="27、存储过程"><a href="#27、存储过程" class="headerlink" title="27、存储过程"></a>27、存储过程</h3><p><strong>说明：</strong>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，可以接收参数，也可以返回数据。（也就是数据库SQL语言层面的代码封装与重用）<br>1、创建  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([参数列表])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- SQL 语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 例子：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。<br>例如：<br>（1）先在命令行执行：<code>delimiter $$</code>（这里表示使用$$符号为结束符）；<br>（2）然后再执行创建语句：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span>$$</span><br></pre></td></tr></table></figure>
<p>2、调用  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> 名称([参数]);</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line"><span class="keyword">call</span> p1();</span><br></pre></td></tr></table></figure>
<p>3、查看  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询指定数据库的存储过程及状态信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查询某个存储过程的定义</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure>
<p>4、删除  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程名称;</span><br></pre></td></tr></table></figure>
<p>5、变量<br>（1）系统变量  </p>
<ol>
<li>查看系统变量<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看所有系统变量，下面 [] 的意思是二选一</span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables;</span><br><span class="line"></span><br><span class="line"># 可以通过 <span class="keyword">like</span> 模糊匹配方式查找变量</span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables <span class="keyword">like</span> <span class="string">&#x27;xxx变量名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看指定变量的值，两个@表示系统变量</span><br><span class="line"><span class="keyword">select</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名;</span><br></pre></td></tr></table></figure></li>
<li>设置系统变量<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">set</span> [session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">set</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>（2）用户自定义变量<br><strong>说明：</strong>不用提前声明，在用的时候直接用“@变量名” 使用就可以了。（两个@是系统变量，一个@是用户自定义变量）  </p>
<ol>
<li>赋值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用<span class="keyword">set</span>赋值</span><br><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> <span class="operator">=</span> expr [,<span class="variable">@var_name</span> <span class="operator">=</span> expr]...;</span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [,<span class="variable">@var_name</span> :<span class="operator">=</span> expr]...;</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">select</span>赋值</span><br><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [,<span class="variable">@var_name</span> :<span class="operator">=</span> expr]...;</span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> <span class="variable">@var_name</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li>
<li>使用<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>（3）局部变量<br><strong>说明：</strong>是根据需要定义在局部生效的变量，访问之前，需要 declare 声明，可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 begin…end 块。  </p>
<ol>
<li>声明<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 变量类型就是数据库字段类型</span><br><span class="line"><span class="keyword">declare</span> 变量名 变量类型;</span><br></pre></td></tr></table></figure></li>
<li>赋值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">set</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表名...;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>6、<code>if</code>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">    ......</span><br><span class="line">elseif 条件<span class="number">2</span> <span class="keyword">then</span>      <span class="comment">-- 可选</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>                   <span class="comment">-- 可选</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据定义的分数score变量，判定当前分数对应的分数等级</span><br><span class="line"># score <span class="operator">&gt;=</span> <span class="number">85</span>分，等级为优秀</span><br><span class="line"># score <span class="operator">&gt;=</span> <span class="number">60</span>分且 score <span class="operator">&lt;</span> <span class="number">85</span>分为及格</span><br><span class="line"># score <span class="operator">&lt;</span> <span class="number">60</span>分为不及格</span><br><span class="line"># 无参</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> score <span class="type">int</span> <span class="keyword">default</span> <span class="number">58</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> varcher(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    if  score  <span class="operator">&gt;=</span>  <span class="number">85</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">    elseif  score  <span class="operator">&gt;=</span>  <span class="number">60</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">result</span>; # 将结果查询出来</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 有参（是需要将结果返回）</span><br><span class="line"># 下面参数说明：<span class="keyword">in</span>表示入参，<span class="keyword">out</span>表示返回结果的参数</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p2(<span class="keyword">in</span> score <span class="type">int</span>,<span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">    if  score  <span class="operator">&gt;=</span>  <span class="number">85</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">    elseif  score  <span class="operator">&gt;=</span>  <span class="number">60</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用，<span class="variable">@result</span>表示 用用户自定义变量接收p2的返回值</span><br><span class="line"><span class="keyword">call</span> p2(<span class="number">68</span>,<span class="variable">@result</span>);</span><br></pre></td></tr></table></figure>
<p>7、<code>case</code>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法格式</span><br><span class="line"># 语法一，如果search_condition1成立，则执行statement_list1</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_list1</span><br><span class="line">    [<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2]...</span><br><span class="line">    [<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"></span><br><span class="line"># 语法二，说明：case_value是表达式，如果表达式的结果为 search_condition1，就执行 search_condition1后的 <span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> case_value</span><br><span class="line">    <span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_list1</span><br><span class="line">    [<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2]...</span><br><span class="line">    [<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据传入的月份，判定月份所属的季节</span><br><span class="line"># <span class="number">1</span><span class="number">-3</span>月份，为第一季度</span><br><span class="line"># <span class="number">4</span><span class="number">-6</span>月份，为第二季度</span><br><span class="line"># <span class="number">7</span><span class="number">-9</span>月份，为第三季度</span><br><span class="line"># <span class="number">10</span><span class="number">-12</span>月份，为第四季度</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(<span class="keyword">in</span> <span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第一季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第二季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第三季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第四季度&quot;;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;非法参数&quot;;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">	# 查询展示，相当于println输出</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为：&#x27;</span>,<span class="keyword">month</span>,<span class="string">&#x27;,所有的季度为：&#x27;</span>,<span class="keyword">result</span>);  </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p1(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>8、<code>while</code>语法<br><strong>说明：</strong>满足条件后再执行循环体中的SQL语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法，先判定条件，如果条件为<span class="literal">true</span>，则执行逻辑，否则不执行</span><br><span class="line">while 条件 do</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    while n <span class="operator">&gt;</span> <span class="number">0</span> do</span><br><span class="line">        <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>9、<code>repeat</code>语法<br><strong>说明：</strong>当满足条件的时候退出循环。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法，先执行一次逻辑，然后判断逻辑是否满足，</span><br><span class="line"># 如果满足就退出；如果不满足就继续循环</span><br><span class="line">repeat</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line">    until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    repeat </span><br><span class="line">        <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    until n <span class="operator">&lt;=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>10、<code>loop</code>语法<br><strong>说明：</strong>简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环。loop配合下面两个语句使用：<br>（1）leave：配合循环使用，退出循环；<br>（2）iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一个循环。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">[begin_label]:loop</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> loop [end_label];</span><br><span class="line"></span><br><span class="line"># 退出两个语句的使用</span><br><span class="line">leavel label; # 退出指定标记的循环体，label为上面begin_label</span><br><span class="line">iterate label; # 直接进入下一次循环</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    sum:loop </span><br><span class="line">        if n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            leave sum;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">            <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">            <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> loop sum;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>11、游标<code>cursor</code><br><strong>说明：</strong>用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。游标的使用包括游标的声明、open、fetch和close。<br>（1）声明游标<br><code>declare 游标名称 cursor for 查询语句;</code><br>（2）打开游标<br><code>open 游标名称;</code><br>（3）获取游标记录<br><code>fetch 游标名称 into 变量[,变量];</code><br>（4）关闭游标<br><code>close 游标名称;</code><br>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据传入的参数 uage，来查询用户表 tb_user 中</span><br><span class="line"># 所有的用户年龄小于等于 uage 的用户姓名和专业</span><br><span class="line"># 并将用户的姓名和专业插入到所创建的一张新表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> uage <span class="type">int</span>) # 创建存储过程</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    # 注意：游标的声明必须在普通的声明之后</span><br><span class="line">    # 声明两个变量uname、upro</span><br><span class="line">    <span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line">    # 声明一个游标，并把查询结果集赋值给这个游标</span><br><span class="line">    <span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line">    # 声明一个条件处理程序，如果满足状态<span class="number">02000</span>就关闭游标</span><br><span class="line">    <span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor</span><br><span class="line">     </span><br><span class="line">    # 如果表 tb_user_pro 存在就删除</span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line">    # 如果表 tb_user_pro 不存在就创建</span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">        profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    # 开启游标</span><br><span class="line">    <span class="keyword">open</span> u_cursor;</span><br><span class="line">    # 循环遍历游标，将游标中的name和profession的值分别赋值给上面声明的uname和upro</span><br><span class="line">    #  将uanme和upro插入新创建的表 tb_user_pro 中</span><br><span class="line">    while <span class="literal">true</span> do</span><br><span class="line">        <span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname,upro;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span>(<span class="keyword">null</span>,uname,upro);</span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line">    # 关闭游标</span><br><span class="line">    <span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">40</span>);</span><br></pre></td></tr></table></figure>
<p>12、条件处理程序<code>handler</code><br><strong>说明：</strong>用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># handler_action说明：continue:继续执行当前程序  exit:终止执行当前程序</span><br><span class="line"># condition_value说明：<span class="keyword">SQLSTATE</span> sqlstate_value:状态码</span><br><span class="line"><span class="keyword">declare</span> handler_action handler <span class="keyword">for</span> condition_value[,condition_value]... statement;</span><br><span class="line"></span><br><span class="line"># 例子在<span class="number">11</span>例子中</span><br></pre></td></tr></table></figure>

<h3 id="28、触发器"><a href="#28、触发器" class="headerlink" title="28、触发器"></a>28、触发器</h3><p><strong>说明：</strong>可以在insert、update和delete之前或者之后，触发并执行触发器中定义的SQL语句的集合。<br>使用两个 old 和 new 来引用触发器中发生的变化内容：<br>（1）insert型触发器（只有new）<br>new表示将要或者已经新增的数据。<br>（2）update型触发器（有 old 也有 new ）<br>old表示修改之前的数据，new表示将要或已经修改后的数据<br>（3）delete型触发器（只有old）<br>old表示将要或者已经删除的数据<br>1、语法<br>（1）创建  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># trigger_name：触发器名称</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"># 选择是之前还是之后，是插入、更新还是删除</span><br><span class="line">before<span class="operator">/</span>after  <span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"># table_name：表名。<span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>：行级触发器（mysql中只支持行级）</span><br><span class="line"><span class="keyword">on</span> table_name <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    trigger_content; # 触发器的逻辑</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>（2）查看<br><code>show triggers;</code><br>（3）删除  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 如果没有指定 schema_name，默认为当前数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure>
<p>2、例子<br>想要在插入用户表之后，把信息也插入到 tb_user 表中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 说明：new.id：插入到用户表的id；new.name：插入到用户表的姓名</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id,operation,operate_time,operate_id,operate_name) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;insert&#x27;</span>,now(),new.id,new.name);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="29、去重"><a href="#29、去重" class="headerlink" title="29、去重"></a>29、去重</h3><p>1、使用<code>distinct</code><br>说明：<code>distinct</code>关键词用于返回唯一不同的值，放在查询语句中的第一个字段前使用，且作用于主句所有列。<br>（1）单例去重<br>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">slect <span class="keyword">distinct</span> column_name <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<p>例如：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">age</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>（2）多列去重<br>说明：<code>distinct</code>多列去重，是根据指定的去重列信息来进行，即只有所有指定的列信息都相同，才会被认为是重复的信息。<br>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> column1,column2 <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<p>例子：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sex,age <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">sex    <span class="operator">|</span>   age</span><br><span class="line"><span class="comment">-------+-------</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">10</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">12</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">11</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="keyword">null</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>如果我只想对多列中的某个列去重，怎么做呢？<br>解决办法一：<br>使用<code>group_concat函数</code>（查看group_concant函数教程）  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(<span class="keyword">distinct</span> sex) <span class="keyword">as</span> sex,age <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">sex    <span class="operator">|</span>   age</span><br><span class="line"><span class="comment">-------+-------</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">10</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>解决办法二：<br>使用<code>group by</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,age <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">sex    <span class="operator">|</span>   age</span><br><span class="line"><span class="comment">-------+-------</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">10</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>（3）针对null处理<br><code>distinct</code>不会过滤null值，返回结果会包含null值，比如在多列去重的第一个例子中。<br>所以一般结合<code>count()</code>函数来使用，因为<code>count()</code>函数会过滤掉null项。<br>例如：<br>单使用<code>distinct</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">age</span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>结合<code>count()</code>函数使用  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> age) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 输出，实际将<span class="keyword">null</span>过滤掉了</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> age)</span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>2、使用<code>group by</code><br>（1）单列去重<br>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> columns <span class="keyword">from</span> table_name <span class="keyword">group</span> <span class="keyword">by</span> columns;</span><br></pre></td></tr></table></figure>
<p>例子：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">age</span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>（2）多列去重<br>例子：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,age <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex,age;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">sex    <span class="operator">|</span>   age</span><br><span class="line"><span class="comment">-------+-------</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">10</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">12</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">11</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="keyword">null</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">11</span></span><br></pre></td></tr></table></figure>

<p>3、两者的区别<br>（1）<code>group by</code>可以在多列去重中进行单列去重，而<code>distinct</code>需要借助其它方式来进行。<code>group by</code>的原理是先对结果进行分组排序，然后返回每组中的第一条数据，且是根据<code>group by</code>的后接字段进行去重的。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,age <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">sex    <span class="operator">|</span>   age</span><br><span class="line"><span class="comment">-------+-------</span></span><br><span class="line">male   <span class="operator">|</span>   <span class="number">10</span></span><br><span class="line">female <span class="operator">|</span>   <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>（2）在语义相同，有索引的情况下，<code>group by</code>和<code>distinct</code>都能使用索引，效率相同，因为<code>group by</code>和<code>distinct</code>近乎等价，<code>distinct</code>可以被看做特殊的<code>group by</code>；<br>（3）在语义相同，无索引的情况下，<code>distinct</code>效率高于<code>group by</code>，原因是<code>distinct</code>和<code>group by</code>都会进行分组操作，但<code>group by</code>在Mysql8.0之前会进行隐式排序，导致触发filesort，sql执行效率低下，但从Mysql8.0开始，Mysql就删除了隐式排序，所以，此时在语义相同，无索引的情况下，<code>group by</code>和<code>distinct</code>的执行效率也是近乎等价的。<br>（4）推荐使用<code>group by</code>，因为<code>group by</code>语义更为清晰，可对数据进行更为复杂的一些处理，相比于<code>distinct</code>来说，<code>group by</code>的语义明确，且由于<code>distinct</code>关键字会对所有字段生效，在进行复合业务处理时，<code>group by</code>的使用灵活性更高，<code>group by</code>能根据分组情况，对数据进行更为复杂的处理，例如通过<code>having</code>对数据进行过滤，或通过聚合函数对数据进行运输。  </p>
<h3 id="30、更新数据库"><a href="#30、更新数据库" class="headerlink" title="30、更新数据库"></a>30、更新数据库</h3><p>1、方法一（不需要登录mysql客户端）<br>根据mysql命令执行sql脚本文件：<br><code>mysql -u username -p database_name【数据库名】 &lt; path/to/your/script.sql</code>。<br>注意：<br>（1）不能有中文；<br>（2）是<code>/</code>。  </p>
<p>2、方法二<br>（1）使用<code>cmd</code>或者直接使用mysqlShell登录到mysql客户端；<br>（2）使用<code>use database_name【数据库名】;</code>；<br>（3）使用<code>source /path/to/your/demo.sql;</code>。  </p>
<h3 id="31、导出数据（不含表结构）"><a href="#31、导出数据（不含表结构）" class="headerlink" title="31、导出数据（不含表结构）"></a>31、导出数据（不含表结构）</h3><p>可以使用<code>mysqldump</code>命令，在mysql的<code>bin</code>目录下查看是否有<code>mysqldump.exe</code>文件，如果有路径，使用绝对路径。<br>1、使用方法：<br><code>mysqldump -u 用户名 -p --no-create-info 数据库名 表名 &gt; 导出文件名.sql</code>。<br>参数说明：<br>（1）<code>-u</code>：指定用户名；<br>（2）<code>-p</code>：指定密码；<br>（3）<code>--no-create-info</code>：不导出表结构；<br>（4）<code>数据库名</code>：要导出的数据库名；<br>（5）<code>表名</code>：要导出的表名；<br>（6）<code>&gt; 导出文件名.sql</code>：将输出重定向到指定文件。<br>注意：如果数据包含中文或特殊字符，添加<code>--default-character-set=utf8mb4</code>指定编码，如下：<br><code>mysqldump -u root -p --no-create-info --default-character-set=utf8mb4 mydb mytable &gt; data.sql</code>。  </p>
<p>2、扩展用法<br>（1）导出多张表的数据<br><code>mysqldump -u root -p --no-create-info mydb table1 table2 &gt; tables_data.sql</code>。<br>（2）导出时筛选数据（按条件导出）<br><code>mysqldump -u root -p --no-create-info --where=&quot;id &lt; 100&quot; mydb mytable &gt; filtered_data.sql</code>。<br>（3）导出为CSV格式<br><code>mysqldump</code>默认生成sql文件，但可以通过下面命令导出CSV格式：<br><code>mysql -u root -p -e &quot;SELECT * FROM mydb.mytable&quot; -B | sed &quot;s/&#39;/\&#39;/;s/\t/\&quot;,\&quot;/g;s/^/\&quot;/;s/$/\&quot;/;s/\n//g&quot; &gt; data.csv</code>。<br>参数说明：<br><code>-e &quot;SELECT * FROM mydb.mytable&quot;</code>：直接执行 SQL 查询；<br><code>-B</code>：禁用表格格式化；<br><code>sed</code>：命令用于将结果转换为CSV格式。  </p>
<br/>


<hr>
<br/>


<h1 id="三、使用Mysql遇到的问题"><a href="#三、使用Mysql遇到的问题" class="headerlink" title="三、使用Mysql遇到的问题"></a>三、使用Mysql遇到的问题</h1><h3 id="1、如何解决错误-“public-key-retrieval-is-not-allowed”"><a href="#1、如何解决错误-“public-key-retrieval-is-not-allowed”" class="headerlink" title="1、如何解决错误 “public key retrieval is not allowed”"></a>1、如何解决错误 “public key retrieval is not allowed”</h3><p>1、说明<br>在使用<code>MySQL</code>数据库时，你可能会遇到一个错误，即<code>public key retrieval is not allowed</code>。这个错误通常出现在尝试连接或访问数据库时，而且可能会导致一些功能无法正常使用。<br>2、错误原因<br><code>public key retrieval is not allowed</code>错误通常是由于<code>MySQL</code>服务器配置的安全设置所导致的。默认情况下，<code>MySQL</code>服务器禁用了<code>public key</code>的检索功能，这是为了增加服务器的安全性而采取的一种措施。在某些情况下，这种设置会导致特定的功能无法正常工作，比如 SSL 连接或使用加密的用户密码。<br>3、解决办法<br>（1）修改<code>MySQL</code>服务器的配置文件以允许<code>public key</code>的检索功能。以下是具体步骤：  </p>
<ul>
<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>
<li>在 [mysqld] 部分添加或修改以下行：  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 这个选项将允许所有用户以任意密码连接到 MySQL 服务器。</span><br><span class="line">skip-grant-tables </span><br></pre></td></tr></table></figure></li>
<li>保存并关闭配置文件；  </li>
<li>重新启动 MySQL 服务器。</li>
</ul>
<p><strong>注意：</strong>这种方法会降低<code>MySQL</code>服务器的安全性，因为所有用户都可以以任意密码连接到服务器。因此，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（2）在连接数据库时使用命令行选项来允许 public key 的检索功能。以下是具体步骤：  </p>
<ul>
<li>打开命令行终端；  </li>
<li>输入以下命令连接到 MySQL 服务器：  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> 这个命令将以禁用 SSL 连接的模式连接到 MySQL 服务器，从而允许 public key 的检索功能</span><br><span class="line">mysql <span class="params">--ssl-mode=DISABLED</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> 如果是springboot yml配置文件，需要添加 allowPublicKeyRetrieval=<span class="literal">true</span></span><br><span class="line">url: jdbc<span class="function">:mysql</span>:<span class="string">//localhost</span><span class="function">:3306</span>/cloud_user?useSSL=<span class="literal">false</span>&amp;allowPublicKeyRetrieval=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>输入用户名和密码以登录到 MySQL 服务器。</li>
</ul>
<p>请注意，这种方法也会降低连接的安全性，因为禁用了 SSL 连接。同样地，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（3）使用正式的<code>SSL</code>证书<br>如果你需要在生产环境中使用<code>SSL</code>连接，并且遇到了<code>public key retrieval is not allowed</code>错误，那么你应该考虑使用有效的<code>SSL</code>证书。以下是具体步骤：  </p>
<ul>
<li>获取一个有效的 SSL 证书，并确保其配置了正确的公钥；  </li>
<li>将 SSL 证书和密钥文件放置在指定目录（比如 &#x2F;etc&#x2F;mysql&#x2F;ssl&#x2F;）；  </li>
<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>
<li>在 [mysqld] 部分添加或修改以下行：  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 这些选项将告诉 MySQL 服务器使用指定的 SSL 证书和密钥文件。</span><br><span class="line">ssl-ca=<span class="regexp">/etc/my</span>sql<span class="regexp">/ssl/</span>ca-cert.pem</span><br><span class="line">ssl-cert=<span class="regexp">/etc/my</span>sql<span class="regexp">/ssl/</span>server-cert.pem</span><br><span class="line">ssl-key=<span class="regexp">/etc/my</span>sql<span class="regexp">/ssl/</span>server-key.pem</span><br></pre></td></tr></table></figure></li>
<li>保存并关闭配置文件；  </li>
<li>重新启动 MySQL 服务器。</li>
</ul>
<h3 id="2、先排序再分组问题"><a href="#2、先排序再分组问题" class="headerlink" title="2、先排序再分组问题"></a>2、先排序再分组问题</h3><p>1、说明<br>在执行包含了分组、排序的sql时，会先执行<code>group by</code>分组，再执行<code>order by</code>排序，导致排序失效，如果想先排序再分组，解决办法在下面。<br>2、场景<br>拥有一张包含活动信息的数据表，其中涵盖活动名词、开始时间、类型等字段。我的任务是，根据开始时间先排序，然后在每个类型中选择最新的那条记录。<br>3、方法一（针对<code>5.7版本</code>）<br>在子查询中首先对数据进行排序，然后在外部查询中使用分组操作（<strong>注意：</strong>此处子查询必须添加<code>limit</code>，值根据实际情况调整），添加<code>limit</code>可以保留排序后的顺序。<br><code>order by</code>：<code>desc</code>为倒叙（大到小），<code>asc</code>：为正序（小到大）。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> start_time limit <span class="number">100000</span>)t1 <span class="keyword">group</span> <span class="keyword">by</span> type <span class="keyword">order</span> <span class="keyword">by</span> type;</span><br></pre></td></tr></table></figure>
<p>这个查询首先将整个表按照开始时间降序排序，然后在外部查询中按类别进行分组，由于已经排序，每个类型中的第一行即为最新的记录。<br>4、方法二（针对<code>8.0版本</code>）<br>通过使用窗口函数（如<code>row_number()</code>）在内部查询中为每一行分配一个行号，然后在外部查询中筛选行号为1的记录。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span>,</span><br><span class="line">  <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> type <span class="keyword">order</span> <span class="keyword">by</span> start_time <span class="keyword">desc</span>) <span class="keyword">as</span> rn</span><br><span class="line">  <span class="keyword">from</span> test</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">where</span> t1.rn <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><code>row_number()</code>：为每一行添加行号；<br><code>partition by type</code>：按照类别分组；<br><code>order by start_time desc</code>：按照开始时间倒叙排序。<br>这个查询首先为每个类型中的每一行分配一个行号，然后在外部查询中筛选行号为1的记录，这些记录即为每个类型中开始时间最新的记录。  </p>
<br/>


<hr>
<br/>


<h1 id="四、Mysql函数使用"><a href="#四、Mysql函数使用" class="headerlink" title="四、Mysql函数使用"></a>四、Mysql函数使用</h1><h3 id="1、group-concat函数"><a href="#1、group-concat函数" class="headerlink" title="1、group_concat函数"></a>1、group_concat函数</h3><p>1、有一张表结构test  </p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">   id   </span>|<span class="string">   age   </span>|</span><br><span class="line">|<span class="string">   1    </span>|<span class="string">   20    </span>|</span><br><span class="line">|<span class="string">   1    </span>|<span class="string">   20    </span>|</span><br><span class="line">|<span class="string">   1    </span>|<span class="string">   10    </span>|</span><br><span class="line">|<span class="string">   3    </span>|<span class="string">   30    </span>|</span><br><span class="line">|<span class="string">   3    </span>|<span class="string">   40    </span>|</span><br><span class="line">|<span class="string">   3    </span>|<span class="string">   40    </span>|</span><br><span class="line">|<span class="string">   4    </span>|<span class="string">   50    </span>|</span><br><span class="line">|<span class="string">   4    </span>|<span class="string">   60    </span>|<span class="string">  </span></span><br></pre></td></tr></table></figure>
<p>2、以id分组，将age字段的值拼成一行，逗号分隔（默认）  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,group_concat(age) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> id;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">id   <span class="operator">|</span>   group_concat(age)</span><br><span class="line"><span class="number">1</span>    <span class="operator">|</span>   <span class="number">20</span>,<span class="number">20</span>,<span class="number">10</span></span><br><span class="line"><span class="number">3</span>    <span class="operator">|</span>   <span class="number">30</span>,<span class="number">40</span>,<span class="number">40</span></span><br><span class="line"><span class="number">4</span>    <span class="operator">|</span>   <span class="number">50</span>,<span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>3、以id分组，将age字段的值拼成一行，分号分隔  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,group_concat(age separator <span class="string">&#x27;;&#x27;</span>) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> id;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">id   <span class="operator">|</span>   group_concat(age separator <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="number">1</span>    <span class="operator">|</span>   <span class="number">20</span>;<span class="number">20</span>;<span class="number">10</span></span><br><span class="line"><span class="number">3</span>    <span class="operator">|</span>   <span class="number">30</span>;<span class="number">40</span>;<span class="number">40</span></span><br><span class="line"><span class="number">4</span>    <span class="operator">|</span>   <span class="number">50</span>;<span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>4、以id分组，去除重复的age值  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,group_concat(<span class="keyword">distinct</span> age) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> id;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">id   <span class="operator">|</span>   group_concat(<span class="keyword">distinct</span> age)</span><br><span class="line"><span class="number">1</span>    <span class="operator">|</span>   <span class="number">20</span>,<span class="number">10</span></span><br><span class="line"><span class="number">3</span>    <span class="operator">|</span>   <span class="number">30</span>,<span class="number">40</span></span><br><span class="line"><span class="number">4</span>    <span class="operator">|</span>   <span class="number">50</span>,<span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>5、以id分组，将age字段的值拼成一行，逗号分隔，并按age排序（<code>desc倒序</code>）  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,group_concat(age <span class="keyword">order</span> <span class="keyword">by</span> age) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> id;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">id   <span class="operator">|</span>   group_concat(age <span class="keyword">order</span> <span class="keyword">by</span> age)</span><br><span class="line"><span class="number">1</span>    <span class="operator">|</span>   <span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span></span><br><span class="line"><span class="number">3</span>    <span class="operator">|</span>   <span class="number">30</span>,<span class="number">40</span>,<span class="number">40</span></span><br><span class="line"><span class="number">4</span>    <span class="operator">|</span>   <span class="number">50</span>,<span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>6、设置group_concat函数长度限制<br>临时设置法：<br>在命令行输入  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session group_concat_max_len <span class="operator">=</span> <span class="number">18446744073709551615</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet <span class="operator">=</span> <span class="number">2</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>永久设置法：<br>在mysql配置文件中添加  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_allowed_packet <span class="operator">=</span> <span class="number">20</span>M</span><br><span class="line">group_concat_max_len <span class="operator">=</span> <span class="number">18446744073709551615</span></span><br></pre></td></tr></table></figure>
<p>重启mysql服务。  </p>
<h3 id="2、concat-ws函数"><a href="#2、concat-ws函数" class="headerlink" title="2、concat_ws函数"></a>2、concat_ws函数</h3><p>可以用来将一列的值进行拼接，也可以实现多个字段的拼接。<br>1、有一张test表  </p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">   id   </span>|<span class="string">   name   </span>|<span class="string">   age   </span>|<span class="string">   gender   </span>|</span><br><span class="line">|<span class="string">   1    </span>|<span class="string">   Alice  </span>|<span class="string">   25    </span>|<span class="string">   female   </span>|</span><br><span class="line">|<span class="string">   2    </span>|<span class="string">   Bob    </span>|<span class="string">   30    </span>|<span class="string">   male     </span>|</span><br><span class="line">|<span class="string">   3    </span>|<span class="string">   Alice  </span>|<span class="string">   25    </span>|<span class="string">   female   </span>|</span><br><span class="line">|<span class="string">   4    </span>|<span class="string">   Alice  </span>|<span class="string">   30    </span>|<span class="string">   female   </span>|</span><br></pre></td></tr></table></figure>
<p>2、例子  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,name,age) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> name,age;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">Alice,<span class="number">25</span></span><br><span class="line">Alice,<span class="number">30</span></span><br><span class="line">Bob,<span class="number">30</span></span><br></pre></td></tr></table></figure>


<h3 id="3、with-rollup"><a href="#3、with-rollup" class="headerlink" title="3、with rollup"></a>3、with rollup</h3><p>1、说明<br>可以实现在分组统计数据基础上再进行相同的统计。<br>2、例子<br>例如我们按名字进行分组，再统计每个人登录的次数：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">sum</span>(sign_num) <span class="keyword">as</span> sign_num <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"><span class="operator">|</span>   name   <span class="operator">|</span>   sign_num   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小丽   <span class="operator">|</span>          <span class="number">2</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小明   <span class="operator">|</span>          <span class="number">7</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小王   <span class="operator">|</span>          <span class="number">7</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="keyword">null</span>   <span class="operator">|</span>          <span class="number">16</span>   <span class="operator">|</span></span><br></pre></td></tr></table></figure>
<p>其中记录null表示所有人的登录次数，我们可以使用<code>coalesce</code>来设置一个可以取代null的名称，<code>coalesce</code>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> coalescec(a,b,c);</span><br></pre></td></tr></table></figure>
<p>参数说明：如果a&#x3D;&#x3D;null，则选择b；如果b&#x3D;&#x3D;null，则选择c；如果a!&#x3D;null，则选择a；如果a，b，c都为null，则返回null。<br>修改上面例子：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">coalesce</span>(name,<span class="string">&#x27;总数&#x27;</span>),<span class="built_in">sum</span>(sign_num) <span class="keyword">as</span> sign_num <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"><span class="operator">|</span>   name   <span class="operator">|</span>   sign_num   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小丽   <span class="operator">|</span>          <span class="number">2</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小明   <span class="operator">|</span>          <span class="number">7</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   小王   <span class="operator">|</span>          <span class="number">7</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   总数   <span class="operator">|</span>         <span class="number">16</span>   <span class="operator">|</span></span><br></pre></td></tr></table></figure>


<h3 id="4、coalesce函数"><a href="#4、coalesce函数" class="headerlink" title="4、coalesce函数"></a>4、coalesce函数</h3><p><code>coalesce</code>函数接受多个参数，返回参数列表中的第一个非null值：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">coalesce</span>(age, <span class="number">0</span>) <span class="keyword">as</span> age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p>以上sql语句中，如果age为null，则coalesce函数返回0。  </p>
<h3 id="5、ifnull函数"><a href="#5、ifnull函数" class="headerlink" title="5、ifnull函数"></a>5、ifnull函数</h3><p>是<code>coalesce</code>函数特定版本，它接受两个参数，如果第一个参数为null，则返回第二个参数。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,ifnull(age, <span class="number">0</span>) <span class="keyword">as</span> age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>


<h3 id="6、find-in-set函数"><a href="#6、find-in-set函数" class="headerlink" title="6、find_in_set函数"></a>6、find_in_set函数</h3><p>1、说明<br><code>find_in_set(str,strlist)</code>：查询表中的字段（strlist）中包含（str）的结果，返回结果为记录或null。<br>str：要查询的字符串；<br>strlist：表中的字段名，该字段值要是以<code>,</code>分隔的字符串。<br>2、例子1  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> find_in_set(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a,b,c,d&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>结果为：2。<br>说明：strlist中下标从1开始，然后b在strlist中下标位置为第二个，所以返回2。<br>3、例子2  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> find_in_set(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1,2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>结果为：0。<br>说明：因为6不在strlist中，所以返回0。<br>4、例子3<br>sys_dept表为：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dept_id</span>  ancestors</span><br><span class="line"><span class="attribute">101</span>        <span class="number">0</span>,<span class="number">100</span></span><br><span class="line"><span class="attribute">201</span>        <span class="number">0</span>,<span class="number">100</span></span><br><span class="line"><span class="attribute">202</span>        <span class="number">0</span>,<span class="number">100</span>,<span class="number">201</span></span><br><span class="line"><span class="attribute">203</span>        <span class="number">0</span>,<span class="number">100</span>,<span class="number">201</span></span><br><span class="line"><span class="attribute">204</span>        <span class="number">0</span>,<span class="number">100</span>,<span class="number">201</span></span><br></pre></td></tr></table></figure>
<p>查询语句为：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_id <span class="keyword">from</span> sys_dept <span class="keyword">where</span> find_in_set(<span class="string">&#x27;201&#x27;</span>,ancestors);</span><br></pre></td></tr></table></figure>
<p>结果为：  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td></tr></table></figure>
<p>说明：从<code>sys_dept</code>表中查询，ancestors字段中含有201的数据，并只返回dept_id列，如果要查询201根目录和所有子目录数据，比如204，就是：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_id <span class="keyword">from</span> sys_dept <span class="keyword">where</span> find_in_set(<span class="string">&#x27;201&#x27;</span>,ancestors) <span class="keyword">or</span> dept_id <span class="operator">=</span> <span class="string">&#x27;201&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>结果为：  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td></tr></table></figure>
<p>5、和<code>in</code>的区别<br>弄个测试表：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `llist` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(`id`)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test` <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test` <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test` <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;name3&#x27;</span>,<span class="string">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>原来以为mysql可以这样查询：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="string">&#x27;daodao&#x27;</span> <span class="keyword">in</span> (list); </span><br></pre></td></tr></table></figure>
<p>上面这样查是查不到的数据的，会为null；只有将list改为：’daodao’,’xiaohe’,’xiaoqin’才能查询到数据，因为list是变量，而’daodao’,’xiaohe’,’xiaoqin’是常量，所以只有改成下面这样才能查询到数据：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="string">&#x27;daodao&#x27;</span> <span class="keyword">in</span> (<span class="string">&#x27;daodao&#x27;</span>,<span class="string">&#x27;xiaohe&#x27;</span>,<span class="string">&#x27;xiaoqin&#x27;</span>); </span><br></pre></td></tr></table></figure>
<p>或者使用<code>find_in_set()</code>：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> find_in_set(<span class="string">&#x27;daodao&#x27;</span>,list); </span><br></pre></td></tr></table></figure>
<p>总结：所以如果list是常量，则可以直接用<code>IN</code>， 否则要用<code>find_in_set()</code>函数。  </p>
<h3 id="7、field函数"><a href="#7、field函数" class="headerlink" title="7、field函数"></a>7、field函数</h3><p>1、使用场景<br>在日常开发过程中，排序是经常用到的，有时候有这样的需求，需要在查询结果中根据某个字段的具体值来排序，比如：有张用户表，想按照‘seiki’、‘iris’来排序。<br>2、例子<br>（1）正序  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># field(str, str1, str2 ,str3.....)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> field(name,<span class="string">&#x27;seiki&#x27;</span>,<span class="string">&#x27;iris&#x27;</span>,<span class="string">&#x27;xut&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">id		name	age</span><br><span class="line"># 这里还有很多记录，不在str1，str2，str3中的记录，然后会把这些记录放在前面</span><br><span class="line"># 把在str1，str2，str3中的记录放在后面，str值相同的按照主键的顺序排列</span><br><span class="line">......（前面还有很多记录，这里省略）</span><br><span class="line"><span class="number">3</span>		seiki	<span class="number">33</span></span><br><span class="line"><span class="number">4</span>		seiki	<span class="number">21</span></span><br><span class="line"><span class="number">1</span>		iris	<span class="number">34</span></span><br><span class="line"><span class="number">2</span>		iris	<span class="number">45</span></span><br><span class="line"><span class="number">6</span>		xut		<span class="number">12</span></span><br><span class="line"><span class="number">12</span>		xut		<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>（2）倒叙  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> field(name,<span class="string">&#x27;seiki&#x27;</span>,<span class="string">&#x27;iris&#x27;</span>,<span class="string">&#x27;xut&#x27;</span>) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>


<h3 id="8、char-length函数"><a href="#8、char-length函数" class="headerlink" title="8、char_length函数"></a>8、char_length函数</h3><p>char_length(str)：返回字符串str的字符数。  </p>
<h3 id="9、concat-ws函数"><a href="#9、concat-ws函数" class="headerlink" title="9、concat_ws函数"></a>9、concat_ws函数</h3><p>concat_ws(s, s1, s2….sn)：将s1，s2……sn用s连起来。  </p>
<h3 id="10、format函数"><a href="#10、format函数" class="headerlink" title="10、format函数"></a>10、format函数</h3><p>format(x, n)：将数字x按照“x,xxx.xx”格式返回，n为x保留的小数点位数，最后一位四舍五入。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> format(<span class="number">250500.5634</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"><span class="number">250</span>,<span class="number">500.56</span></span><br></pre></td></tr></table></figure>


<h3 id="11、insert函数"><a href="#11、insert函数" class="headerlink" title="11、insert函数"></a>11、insert函数</h3><p>insert(str1, x, len, str2)：将str1第x位开始，长度为len的字符串替换为str2。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;google.com&#x27;</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="string">&#x27;runoob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 输出，将<span class="string">&#x27;google.com&#x27;</span>从第<span class="number">1</span>位开始，长度为<span class="number">6</span>的字符串替换为<span class="string">&#x27;runoob&#x27;</span></span><br><span class="line">runoob.com</span><br></pre></td></tr></table></figure>


<h3 id="12、locate函数"><a href="#12、locate函数" class="headerlink" title="12、locate函数"></a>12、locate函数</h3><p>locate(str1, str2)：返回str2在str1中第一次出现的位置，如果str2不在str1中，则返回0。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> locate(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>


<h3 id="13、lcase函数、lower函数"><a href="#13、lcase函数、lower函数" class="headerlink" title="13、lcase函数、lower函数"></a>13、lcase函数、lower函数</h3><p>lcase(str)：将字符串str中的字母全部转换为小写。<br>lower(str)：将字符串str中的字母全部转换为小写。  </p>
<h3 id="14、left函数"><a href="#14、left函数" class="headerlink" title="14、left函数"></a>14、left函数</h3><p>left(str, len)：返回字符串str的前len个字符。  </p>
<h3 id="15、ltrim函数"><a href="#15、ltrim函数" class="headerlink" title="15、ltrim函数"></a>15、ltrim函数</h3><p>ltrim(str)：删除字符串str左侧的空格。  </p>
<h3 id="16、position函数"><a href="#16、position函数" class="headerlink" title="16、position函数"></a>16、position函数</h3><p>position(str1 in s)：从字符串s中获取str1的开始位置。  </p>
<h3 id="17、repeat函数"><a href="#17、repeat函数" class="headerlink" title="17、repeat函数"></a>17、repeat函数</h3><p>repeat(str, n)：将字符串str重复n次。  </p>
<h3 id="18、replace函数"><a href="#18、replace函数" class="headerlink" title="18、replace函数"></a>18、replace函数</h3><p>replace(s, s1, s2)：将s中的s1替换为s2。  </p>
<h3 id="19、reverse函数"><a href="#19、reverse函数" class="headerlink" title="19、reverse函数"></a>19、reverse函数</h3><p>reverse(str)：将字符串str的顺序反过来。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql学习笔记</title>
    <url>/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Postgresql在linux（虚拟环境中）中安装教程"><a href="#一、Postgresql在linux（虚拟环境中）中安装教程" class="headerlink" title="一、Postgresql在linux（虚拟环境中）中安装教程"></a>一、Postgresql在linux（虚拟环境中）中安装教程</h1><p>1、官网下载地址：<br><a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a></p>
<img src="/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/postgresql1.jpg" class="">

<p><strong>注意</strong>：Postgresql15的版本，navicat连接不了，会报错误，原因自查。  </p>
<p>2、安装教程官网会给出  </p>
<img src="/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/postgresql2.jpg" class="">
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 下载安装rpm仓库（sudo表示使用root用户权限来进行操作）</span><br><span class="line">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-<span class="number">7</span>-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"># 安装</span><br><span class="line">sudo yum install -y postgresql14-server</span><br><span class="line"># 初始化数据库</span><br><span class="line">sudo /usr/pgsql-<span class="number">15</span>/bin/postgresql-<span class="number">14</span>-setup initdb</span><br><span class="line"># 允许自启</span><br><span class="line">sudo systemctl enable postgresql-<span class="number">14</span></span><br><span class="line"># 启动服务</span><br><span class="line">sudo systemctl <span class="built_in">start</span> postgresql-<span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>3、初始化（初始化后会创建一个用户postgres，我们需要重新给它设置密码）<br><strong>注意</strong>：这里的postgres用户就是linux中的用户，属于PostgreSQL Server的用户组。  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#删除密码</span><br><span class="line">sudo passwd -d postgres</span><br><span class="line">#设置密码</span><br><span class="line">sudo passwd postgres</span><br><span class="line">#切换成postgres用户（如果报权限不够就使用：su -postgres）</span><br><span class="line">su postgres</span><br><span class="line">#进入postgresql client</span><br><span class="line">psql</span><br><span class="line">#或者使用这个命令直接从别的用户进入postgresql client</span><br><span class="line">sudo -u postgres psql</span><br><span class="line">#修改数据库中postgres用户密码</span><br><span class="line">ALTER USER postgres WITH PASSWORD &#x27;root&#x27;;</span><br><span class="line">#退出</span><br><span class="line">\q</span><br></pre></td></tr></table></figure>

<p>4、因为我们想通过本地的navicat来进行连接，所以需要关闭防火墙或者打开5432端口<br><strong>注意</strong>：下面的命令可能会让你输入root密码来进行验证，如果不想可以在命令前面加上 sudo，如果出现“postgres 不在 sudoers 文件中。此事将被报告。”，<a href="https://blog.csdn.net/m0_59133441/article/details/121511380">可点击此处来解决</a>。<br>（1）查看防火墙状态</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--state</span></span><br></pre></td></tr></table></figure>
<p>（2）停止firewall</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<p>（3）禁止firewall开机启动</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>
<p>或者<br>（1）开放指定端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=5432/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>（2）关闭指定端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--remove-port</span>=5672/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>（3）重启防火墙</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--reloadl</span></span><br></pre></td></tr></table></figure>

<p>5、修改配置文件<br>（1）用root用户打开配置文件或者在下面命令前加上 sudo  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 注意先看自己的版本是几，然后把下面路径中的<span class="number">14</span>改为自己的版本</span><br><span class="line">vim <span class="regexp">/var/</span>lib<span class="regexp">/pgsql/</span><span class="number">14</span><span class="regexp">/data/</span>postgresql.conf</span><br></pre></td></tr></table></figure>
<p>在 postgresql.conf 文件中取消注释，修改listen_addresses为’*’表示监听任意地址</p>
<img src="/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/postgresql3.jpg" class="">
<p>（2）同样修改另一个配置文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 注意先看自己的版本是几，然后把下面路径中的<span class="number">14</span>改为自己的版本</span><br><span class="line">vim /var/lib/pgsql/<span class="number">14</span>/data/pg_hba.conf</span><br></pre></td></tr></table></figure>
<p>在 IPv4 local connections下面新增一行：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">host</span>  <span class="literal">all</span>  <span class="literal">all</span> <span class="number">0.0.0.0</span>/<span class="number">0</span> scram-sha-<span class="number">256</span></span><br></pre></td></tr></table></figure>
<img src="/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/postgresql4.jpg" class="">
<p>（3）重启服务（ 需要查看自己的版本号，<a href="https://dandelioncloud.cn/article/details/1597226823283064833">查看方法请点击</a> ）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> systemctl restart postgresql-<span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>6、然后就可以用navicat等工具连接了  </p>
<p>7、卸载Postgresql的方法，<a href="https://www.cnblogs.com/june-/articles/14276416.html">请点击这里。</a></p>
<p>8、注意事项<br>（1）postgresql，它不支持单引号和反引号，只支持双引号，比如关键字在mysql中可以用反引号包裹，但在postgresql中得用双引号包裹；<br>（2）关键字后面的as不能省略；</p>
<br/>

<hr>
<br/>


<h1 id="二、Postgresql使用方法"><a href="#二、Postgresql使用方法" class="headerlink" title="二、Postgresql使用方法"></a>二、Postgresql使用方法</h1><h3 id="1、登录命令"><a href="#1、登录命令" class="headerlink" title="1、登录命令"></a>1、登录命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#连接指定服务器上的数据库</span><br><span class="line">psql <span class="operator">-</span>h IP <span class="operator">-</span>p 端口 <span class="operator">-</span>U 用户名 <span class="operator">-</span>d 数据库名 <span class="operator">-</span>W</span><br></pre></td></tr></table></figure>
<p>说明：<br><code>-h</code>：数据库所在的IP地址；<br><code>-p</code>：（默认5432）数据库的监听端口；<br><code>-U</code>：用户名；<br><code>-d</code>：数据库名称；<br><code>-W</code>：提示输入密码；</p>
<h3 id="2、常用命令说明"><a href="#2、常用命令说明" class="headerlink" title="2、常用命令说明"></a>2、常用命令说明</h3><p><code>\?</code>：所有命令帮助；<br><code>\l</code>：列出所有数据库；<br><code>\d</code>：列出数据库中所有表；<br><code>\dt</code>：列出数据库中所有表；<br><code>\d [table_name]</code>：显示指定表的结构；<br><code>\di</code>：列出数据库中所有 index；<br><code>\dv</code>：列出数据库中所有 view；<br><code>\h</code>：sql命令帮助；<br><code>\q</code>：退出连接；<br><code>\c [database_name]</code>：切换到指定的数据库；<br><code>\c</code>：显示当前数据库名称和用户；<br><code>\conninfo</code>：显示客户端的连接信息；<br><code>\du</code>：显示所有用户；<br><code>\dn</code>：显示数据库中的schema；<br><code>\encoding</code>：显示字符集；<br><code>select version();</code>：显示版本信息；<br><code>\i testdb.sql</code>：执行sql文件；<br><code>\x</code>：扩展展示结果信息，相当于MySQL的\G；<br><code>\o /tmp/test.txt</code>：将下一条sql执行结果导入文件中。</p>
<h3 id="3、关于对表的操作"><a href="#3、关于对表的操作" class="headerlink" title="3、关于对表的操作"></a>3、关于对表的操作</h3><p>1、向表中新增一列属性：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span>  column_name1 data_type;</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>


<h1 id="三、JDBC连接和数据库对应说明"><a href="#三、JDBC连接和数据库对应说明" class="headerlink" title="三、JDBC连接和数据库对应说明"></a>三、JDBC连接和数据库对应说明</h1><p><code>jdbc:postgresql://192.168.126.130:5432/sonarqube?currentSchema=public</code>  </p>
<img src="/2023/10/17/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/postgresql5.png" class="">


<br/>

<hr>
<br/>


<h1 id="四、使用MybatisPlus过程中出现的问题"><a href="#四、使用MybatisPlus过程中出现的问题" class="headerlink" title="四、使用MybatisPlus过程中出现的问题"></a>四、使用MybatisPlus过程中出现的问题</h1><h3 id="1、关于json类型的存储"><a href="#1、关于json类型的存储" class="headerlink" title="1、关于json类型的存储"></a>1、关于json类型的存储</h3><p>1、说明<br>如果<code>java</code>类型是<code>List</code>，怎么存到数据库中，首先将数据库中的属性设为<code>json</code>格式，大小为0。<br>2、操作<br>（1）创建<code>json</code>处理类<code>JsonTypeHandler</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonTypeHandler</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="type">int</span> i, T t, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String jsonString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jsonString = objectMapper.writeValueAsString(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to convert Java object to JSON string&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        preparedStatement.setObject(i, jsonString, Types.OTHER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> deserializeFromDb(resultSet.getString(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> deserializeFromDb(resultSet.getString(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> deserializeFromDb(callableStatement.getString(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="title function_">deserializeFromDb</span><span class="params">(String dbData)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbData == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(dbData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(dbData, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Type <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">super</span>.getType();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to parse JSON data from database&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）将实体类中的<code>List</code>属性上面添加注解<code>@TableField(typeHandler = JsonTypeHandler.class)</code>以及在类上面添加注解<code>@TableName(value = &quot;t_detection_scheme&quot;, autoResultMap = true)</code>，一定要加<code>autoResultMap = true</code>，不然查询的时候<code>List</code>属性会为<code>null</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_detection_scheme&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DetectionScheme</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测方案id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方案名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测语言</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; language;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">deleted</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规则包id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; rulePackageId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String projectId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是规则维护接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;接口区分参数不可为空&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean ruleMaintenance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、【Mybatis-Plus】【PostgreSQL】List＜T＞-类型数据如何存数据库"><a href="#2、【Mybatis-Plus】【PostgreSQL】List＜T＞-类型数据如何存数据库" class="headerlink" title="2、【Mybatis-Plus】【PostgreSQL】List＜T＞ 类型数据如何存数据库"></a>2、【Mybatis-Plus】【PostgreSQL】List＜T＞ 类型数据如何存数据库</h3><p>1、核心原理<br>是将<code>List＜T＞</code>转为<code>JSONArray</code>类型，数据库对应字段为<code>json</code>类型，即可完成存储。<br>2、建表<br>建表<code>sql</code>：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.image_info (</span><br><span class="line">   id serial <span class="keyword">PRIMARY</span> key <span class="keyword">NOT</span> <span class="keyword">null</span>,</span><br><span class="line">   image_address text    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   image_owner text    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   download_times int8  <span class="keyword">default</span> <span class="number">10</span>,</span><br><span class="line">   authorized_user json,</span><br><span class="line">   is_deleted int8 <span class="keyword">NOT</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>id</code>：<br>数据类型为<code>serial</code>，这意味着它是一个自动递增的整数类型。<br>设置为主键<code>（PRIMARY KEY）</code>，这意味着每一行的<code>id</code>值必须是唯一的，不能有重复。<br>设置为<code>NOT NULL</code>，这意味着这一列的值不能为空。  </li>
<li><code>image_address</code>：<br>数据类型为<code>text</code>，这意味着它可以存储任意长度的文本字符串。<br>设置为<code>NOT NULL</code>，这意味着这一列的值不能为空。  </li>
<li><code>image_owner</code>：<br>数据类型为<code>text</code>，这意味着它可以存储任意长度的文本字符串。<br>设置为<code>NOT NULL</code>，这意味着这一列的值不能为空。  </li>
<li><code>download_times</code>：<br>数据类型为<code>int8</code>，这意味着它可以存储<code>8</code>字节的整数。<br>设置了默认值为<code>10（default 10）</code>，这意味着如果插入数据时没有为这一列提供值，那么它的值将默认为<code>10</code>。  </li>
<li><code>authorized_user</code>：<br>数据类型为<code>json</code>，这意味着它可以存储<code>JSON</code>格式的字符串。<br>这一列可以用来存储有权访问该图片的用户信息，这些信息是以<code>JSON</code>格式存储的。  </li>
<li><code>is_deleted</code>：<br>数据类型为<code>int8</code>，这意味着它可以存储<code>8</code>字节的整数。<br>设置为<code>NOT NULL</code>，这意味着这一列的值不能为空。<br>这一列通常用于标记该记录是否已被删除。例如，<code>1</code>可以表示已删除，<code>0</code>可以表示未删除。</li>
</ul>
<p>3、创建<code>List</code>处理器，<code>ArrayTypeHandler.java</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的 MyBatis 类型处理器 ArrayTypeHandler，它继承自 BaseTypeHandler。</span></span><br><span class="line"><span class="comment"> * 这个类型处理器主要用于处理 Java 数组或 List 与数据库中的数组类型（如 PostgreSQL 的 ARRAY 类型）。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@MappedJdbcTypes</span>(JdbcType.ARRAY)：表示这个类型处理器用于处理 JdbcType.ARRAY 类型的数据。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@MappedTypes</span>(Object.class)：表示这个类型处理器可以处理 Object 类型的数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.ARRAY)</span></span><br><span class="line"><span class="meta">@MappedTypes(Object.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_NAME_VARCHAR</span> <span class="operator">=</span> <span class="string">&quot;varchar&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_NAME_INTEGER</span> <span class="operator">=</span> <span class="string">&quot;integer&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_NAME_BOOLEAN</span> <span class="operator">=</span> <span class="string">&quot;boolean&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_NAME_NUMERIC</span> <span class="operator">=</span> <span class="string">&quot;numeric&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_NAME_LONG</span> <span class="operator">=</span> <span class="string">&quot;bigint&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这个方法在插入或更新数据时被调用，将 Java 数组或 List 转换为数据库中的 ARRAY 类型。</span></span><br><span class="line">	<span class="comment">// 首先判断传入的参数 parameter 是 List 还是数组，并将其转换为 Object[] 类型的 arrayObject。</span></span><br><span class="line">	<span class="comment">// 根据 arrayObject[0] 的类型确定数据库中 ARRAY 类型的元素类型，并创建一个对应类型的 Array 对象。</span></span><br><span class="line">	<span class="comment">// 使用 PreparedStatement 的 setArray 方法将 Array 对象设置到 SQL 语句的相应位置。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, Object parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        Object[] arrayObject;</span><br><span class="line">        <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            arrayObject = ((List) parameter).toArray();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arrayObject = (Object[]) parameter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ps.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arrayObject.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> TYPE_NAME_VARCHAR;</span><br><span class="line">            <span class="keyword">if</span> (arrayObject[<span class="number">0</span>] <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                typeName = TYPE_NAME_INTEGER;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayObject[<span class="number">0</span>] <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                typeName = TYPE_NAME_VARCHAR;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayObject[<span class="number">0</span>] <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">                typeName = TYPE_NAME_BOOLEAN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayObject[<span class="number">0</span>] <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line">                typeName = TYPE_NAME_NUMERIC;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayObject[<span class="number">0</span>] <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">                typeName = TYPE_NAME_LONG;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Array</span> <span class="variable">array</span> <span class="operator">=</span> conn.createArrayOf(typeName, arrayObject);</span><br><span class="line">            ps.setArray(i, array);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ps.setArray(i, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这些getNullableResult方法在查询数据时被调用，将数据库中的 ARRAY 类型转换为 Java 数组或 List。</span></span><br><span class="line">	<span class="comment">// 分别针对 ResultSet 和 CallableStatement 提供了三个重载版本的 getNullableResult 方法。</span></span><br><span class="line">	<span class="comment">//所有这些方法都调用了私有方法 getArray，并将返回的数组转换为 List。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> getArray(resultSet.getArray(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> getArray(resultSet.getArray(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> getArray(callableStatement.getArray(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这个私有方法负责从给定的 Array 对象中获取实际的数组数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; <span class="title function_">getArray</span><span class="params">(Array array)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList((Object[]) array.getArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：<br><code>ArrayTypeHandler</code>类主要用于在<code>MyBatis</code>中处理<code>Java</code>数组或<code>List</code>与数据库中的<code>ARRAY</code>类型之间的转换，使得<code>MyBatis</code>能够正确地将数组或<code>List</code>数据存入数据库以及从数据库中读取数组或<code>List</code>数据。<br>4、创建实体类<code>ImageInfo</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;test.image_info &quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;image_address&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String imageAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;image_owner&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String imageOwner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;download_times&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> downloadTimes;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;authorized_user&quot;, typeHandler = ArrayTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> JSON authorizedUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建entity</span></span><br><span class="line">List&lt;String&gt; finalAuthorizedUsers = authorizedUsers;</span><br><span class="line"><span class="type">ImageInfo</span> <span class="variable">imageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageInfo</span>();</span><br><span class="line">imageInfo.setId(<span class="number">0L</span>);</span><br><span class="line">imageInfo.setImageOwner(username);</span><br><span class="line">imageInfo.setAllowDownloadTimes(imageDownloadTimes);</span><br><span class="line">imageInfo.setAuthorizedUser(finalAuthorizedUsers);</span><br><span class="line">imageInfo.setIsDeleted(IsDeletedEnum.NO.getCode());</span><br><span class="line">imageInfo.setCreateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">imageInfo.setCreateUser(username);</span><br><span class="line">imageInfo.setUpdateUser(username)</span><br><span class="line"><span class="comment">// 插入数据库</span></span><br><span class="line"><span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> imageInfoServiceMapper.insert(imageInfo);</span><br></pre></td></tr></table></figure>

<h3 id="3、【Mybatis-Plus】【PostgreSQL】List＜T＞-类型数据如何局部更新"><a href="#3、【Mybatis-Plus】【PostgreSQL】List＜T＞-类型数据如何局部更新" class="headerlink" title="3、【Mybatis-Plus】【PostgreSQL】List＜T＞ 类型数据如何局部更新"></a>3、【Mybatis-Plus】【PostgreSQL】List＜T＞ 类型数据如何局部更新</h3><p><strong>注意</strong>：这里讲解的是更新，上面第<code>2</code>点是插入！<br>1、说明：如果使用的是<code>VO</code>实体类接收前端传的参数，参数中存在<code>List</code>类型属性，直接更新数据库，也需要使用<code>JsonTypeHandler</code>自定义处理类。<br>2、使用方式<br>（1）VO实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageScanningSchemeVO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;镜像扫描方案id不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;镜像扫描方案id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案扫描规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）VO实体类对应的Java实体类，也就是对应的数据库表（这里没有实际意义，只是看下和VO实体类的区别）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_image_scanning_scheme&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageScanningScheme</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 镜像扫描方案扫描规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; rule;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 低危漏洞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">lowNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高危漏洞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">highNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中危漏洞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">mediumNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 严重漏洞数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">criticalNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最近扫描时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime scanningTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;项目不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;项目不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）使用  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;ImageScanningSchemeVO&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> ImageScanningSchemeVO imageScanningSchemeVO)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> imageScanningSchemeService.update(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;ImageScanningScheme&gt;().eq(<span class="string">&quot;id&quot;</span>, imageScanningSchemeVO.getId())</span><br><span class="line">                .set(<span class="string">&quot;name&quot;</span>, imageScanningSchemeVO.getName())</span><br><span class="line">				<span class="comment">// 更新时，必须这样设置，它才能调用类型自定义处理类</span></span><br><span class="line">                .set(<span class="string">&quot;rule&quot;</span>, imageScanningSchemeVO.getRule(), <span class="string">&quot;typeHandler=com.bzhcloud.handler.JsonTypeHandler&quot;</span>)</span><br><span class="line">                .set(<span class="string">&quot;description&quot;</span>, imageScanningSchemeVO.getDescription()));</span><br><span class="line">        IFUtils.isTure(!update).throwMessage(<span class="string">&quot;镜像扫描方案设置失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(imageScanningSchemeVO);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br/>


<hr>
<br/>



<h1 id="五、详细教程"><a href="#五、详细教程" class="headerlink" title="五、详细教程"></a>五、详细教程</h1><p><a href="https://zhuanlan.zhihu.com/p/646946752">请点击跳转</a></p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>数据库</tag>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus学习笔记</title>
    <url>/2023/10/18/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="1、MybatisPlus需要的依赖"><a href="#1、MybatisPlus需要的依赖" class="headerlink" title="1、MybatisPlus需要的依赖"></a>1、MybatisPlus需要的依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码生成器依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br/>

<h1 id="2、各种配置及日志输出"><a href="#2、各种配置及日志输出" class="headerlink" title="2、各种配置及日志输出"></a>2、各种配置及日志输出</h1><p>1、日志  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个默认的日志，输出到控制台，其它的需要导入依赖</span></span><br><span class="line"><span class="string">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>2、配置mapper.xml文件的位置<br>（1）配置  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> <span class="comment"># mybatis-plus的配置</span></span><br><span class="line">  <span class="comment"># 默认位置 private String[] mapperLocations = new String[]&#123;&quot;classpath*:/mapper/**/*.xml&quot;&#125;;    </span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p>（2）自定义mapper方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常自定义方法！</span></span><br><span class="line">    <span class="comment">//可以使用注解@Select或者mapper.xml实现</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）基于mapper.xml实现：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace = 接口的全限定符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、配置实体类映射数据库表名前缀以及主键策略  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 配置MyBatis日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 配置MyBatis-Plus操作表的默认前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">      <span class="comment"># 配置MyBatis-Plus的主键策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<p>4、全局配置逻辑删除  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,这里配置后可以不去实体类中配置@TableLogic)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<br/>

<h1 id="3、实体类中主键以及其他属性配置"><a href="#3、实体类中主键以及其他属性配置" class="headerlink" title="3、实体类中主键以及其他属性配置"></a>3、实体类中主键以及其他属性配置</h1><p>1、主键  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** type的值：</span></span><br><span class="line"><span class="comment">  * ID_WORKER： 全局唯一id，默认方式</span></span><br><span class="line"><span class="comment">  * AUTO： 自增，设置了这个之后，数据库里也一定要设置自增才会生效，不然会报错</span></span><br><span class="line"><span class="comment">  * NONE：  未设置主键</span></span><br><span class="line"><span class="comment">  * INPUT：  手动输入</span></span><br><span class="line"><span class="comment">  * UUID：  全局唯一id，uuid</span></span><br><span class="line"><span class="comment">  * ID_WORKER_STR：  ID_WORKER字符串标识法</span></span><br><span class="line"><span class="comment">  * ASSIGN_ID：分配 D(主键类型为 Number(Long )或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">   <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure>
<p>雪花算法使用场景<br>雪花算法（Snowflake Algorithm）是一种用于生成唯一ID的算法。它由Twitter公司提出，用于解决分布式系统中生成全局唯一ID的需求。<br>在传统的自增ID生成方式中，使用单点数据库生成ID会成为系统的瓶颈，而雪花算法通过在分布式系统中生成唯一ID，避免了单点故障和性能瓶颈的问题。<br>雪花算法生成的ID是一个64位的整数，由以下几个部分组成：<br>（1）时间戳：41位，精确到毫秒级，可以使用69年。<br>（2）节点ID：10位，用于标识分布式系统中的不同节点。<br>（3）序列号：12位，表示在同一毫秒内生成的不同ID的序号。<br>通过将这三个部分组合在一起，雪花算法可以在分布式系统中生成全局唯一的ID，并保证ID的生成顺序性。<br>雪花算法的工作方式如下：<br>（1）当前时间戳从某一固定的起始时间开始计算，可以用于计算ID的时间部分。<br>（2）节点ID是分布式系统中每个节点的唯一标识，可以通过配置或自动分配的方式获得。<br>（3）序列号用于记录在同一毫秒内生成的不同ID的序号，从0开始自增，最多支持4096个ID生成。<br>需要注意的是，雪花算法依赖于系统的时钟，需要确保系统时钟的准确性和单调性，否则可能会导致生成的ID不唯一或不符合预期的顺序。<br>雪花算法是一种简单但有效的生成唯一ID的算法，广泛应用于分布式系统中，如微服务架构、分布式数据库、分布式锁等场景，以满足全局唯一标识的需求。<br> <strong>你需要记住的: 雪花算法生成的数字,需要使用Long 或者 String类型主键!!</strong>  </p>
<p>2、其他属性  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用场景：</span></span><br><span class="line"><span class="comment"> * 1、成员变量名与数据库字段名不一致</span></span><br><span class="line"><span class="comment"> * 2、成员变量名以is开头，且是布尔值</span></span><br><span class="line"><span class="comment"> * 3、成员变量名与数据库关键字冲突</span></span><br><span class="line"><span class="comment"> * 4、成员变量不是数据库字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 成员变量名与数据库字段名不一致</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">// 成员变量名以is开头，且是布尔值</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;is_flag&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Boolean isFlag;</span><br><span class="line"><span class="comment">// 成员变量名与数据库关键字冲突，注意这里使用反引号</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;`order`&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer order;</span><br><span class="line"><span class="comment">// 成员变量不是数据库字段</span></span><br><span class="line"><span class="meta">@TableField(exist=false)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br></pre></td></tr></table></figure>

<br/>

<h1 id="4、自动填充数据"><a href="#4、自动填充数据" class="headerlink" title="4、自动填充数据"></a>4、自动填充数据</h1><p>1、第一种：数据库操作<br>在数据库表中创建两个字段，分别是create_time,update_time，填上默认值：CURRENT_TIMESTAMP （时间戳），然后将更新勾选上，然后需要在实体类中同步这两个属性，在实体类中创建这两个属性。<br>2、第二种：代码级别<br>在数据库和实体类都创建这两个字段，然后添加注解TableField，在创建时间属性上为@TableField(fill &#x3D; FieldFill.INSERT)，在更新时间属性上为@TableField(fill &#x3D; FieldFill.UPDATE)，然后创建一个配置类来处理，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> implement MetaObjectHandler &#123;</span><br><span class="line">    <span class="comment">// 插入时填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时填充</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<h1 id="5、注意版本区别"><a href="#5、注意版本区别" class="headerlink" title="5、注意版本区别"></a>5、注意版本区别</h1><p>（1）mysql 5：驱动不同 com.mysql.jdbc.Driver<br>（2）mysql 8：驱动不同 com.mysql.cj.jdbc.Driver，需要增加时区的配置 serverTimezone&#x3D;GMT</p>
<br/>

<h1 id="6、使用方法"><a href="#6、使用方法" class="headerlink" title="6、使用方法"></a>6、使用方法</h1><p><strong>特别说明：</strong>dao要继承mybatis-plus的BaseMapper<T>，”&lt;&gt;”里的是具体的实体类，这里是什么类，增删改查就会针对这个实体类对应的数据库表来进行操作，如果需要查询其它表的信息，就必须自己在xml中写sql语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询全部</span></span><br><span class="line">List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID更新数据</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> users.get(<span class="number">1</span>); <span class="comment">// 这里要从0开始，意思0对应数据库里的第一条数据</span></span><br><span class="line">user.setAge(<span class="number">28</span>);</span><br><span class="line"><span class="comment">// 它是动态拼接sql更新语句的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.updateById(user);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过ID查询一条数据</span></span><br><span class="line"> <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userDao.selectById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量查询</span></span><br><span class="line"> List&lt;User&gt; users = userDao.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态条件查询</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;左冲&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>); <span class="comment">// 加条件是在sql语句后加 and age=24</span></span><br><span class="line">List&lt;User&gt; users = userDao.selectByMap(map);</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<br/>

<h1 id="7、乐观锁和悲观锁"><a href="#7、乐观锁和悲观锁" class="headerlink" title="7、乐观锁和悲观锁"></a>7、乐观锁和悲观锁</h1><h3 id="1、乐观锁"><a href="#1、乐观锁" class="headerlink" title="1、乐观锁"></a>1、乐观锁</h3><p>1、思想<br>乐观锁的基本思想是，认为并发冲突的概率较低，因此不需要提前加锁，而是在数据更新阶段进行冲突检测和处理。乐观锁的核心思想是”先修改，后校验”。在乐观锁的应用中，线程在读取共享资源时不会加锁，而是记录特定的版本信息。当线程准备更新资源时，会先检查该资源的版本信息是否与之前读取的版本信息一致，如果一致则执行更新操作，否则说明有其他线程修改了该资源，需要进行相应的冲突处理。乐观锁通过避免加锁操作，提高了系统的并发性能和吞吐量，但是在并发冲突较为频繁的情况下，乐观锁会导致较多的冲突处理和重试操作。<br>乐观锁实现方案和技术<br>（1）版本号&#x2F;时间戳：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。<br>（2）CAS（Compare-and-Swap）：使用原子操作比较当前值与旧值是否一致，若一致则进行更新操作，否则重新尝试。<br>（3）无锁数据结构：采用无锁数据结构，如无锁队列、无锁哈希表等，通过使用原子操作实现并发安全。<br>2、介绍<br>A、B两个线程更新一条数据，A取出这条数据获取到的version为1.0，A更新这条数据的同时，B也取出这条数据获取到的version也为1.0，A完成更新，version变为2.0，但是B更新的时候version是1.0，所以B更新失败。<br>3、乐观锁实现方式<br>（1）取出数据，获取当前version<br>（2）更新时，带上这个version<br>（3）执行更新时，set version &#x3D; newVersion where version &#x3D; oldVersion，如果version不对，就更新失败。<br>4、操作<br>（1）在数据库中增加version字段，对应的实体类中也要增加一个属性version，并加上注解@Version。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Vsersion</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
<p>（2）添加配置类<br>之前配置（单独配置）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.zuo.dao&quot;)</span> <span class="comment">// 扫描dao层</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务管理</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在配置（在总的配置类中配置）：<br>可以在<code>MybatisPlusInterceptor</code>这个方法中配置分页等插件。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、悲观锁"><a href="#2、悲观锁" class="headerlink" title="2、悲观锁"></a>2、悲观锁</h3><p>1、思想<br>悲观锁的基本思想是，在整个数据访问过程中，将共享资源锁定，以确保其他线程或进程不能同时访问和修改该资源。悲观锁的核心思想是”先保护，再修改”。在悲观锁的应用中，线程在访问共享资源之前会获取到锁，并在整个操作过程中保持锁的状态，阻塞其他线程的访问。只有当前线程完成操作后，才会释放锁，让其他线程继续操作资源。这种锁机制可以确保资源独占性和数据的一致性，但是在高并发环境下，悲观锁的效率相对较低。<br>悲观锁实现方案和技术：<br>（1）锁机制：使用传统的锁机制，如互斥锁（Mutex Lock）或读写锁（Read-Write Lock）来保证对共享资源的独占访问。<br>（2）数据库锁：在数据库层面使用行级锁或表级锁来控制并发访问。<br>（3）信号量（Semaphore）：使用信号量来限制对资源的并发访问。  </p>
<br/>

<h1 id="8、分页"><a href="#8、分页" class="headerlink" title="8、分页"></a>8、分页</h1><p>1、之前版本<br>（1）需要在配置类中注入分页（新版本不知道需不需要配置）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.zuo.dao&quot;)</span> <span class="comment">// 扫描dao层</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务管理</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）操作  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new Page&lt;&gt;(1,1)：（pageNo, pageSize）</span></span><br><span class="line"><span class="comment">// Page&lt;User&gt;，尖括号里面的实体类是什么就针对对应的表来进行查询分页</span></span><br><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// null：条件查询器，下面会有第9点</span></span><br><span class="line">Page&lt;User&gt; userPage = userDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">System.out.println(userPage);</span><br><span class="line"><span class="comment">// page.getRecords()：是一个数组，它的样子是这样的</span></span><br><span class="line">[</span><br><span class="line">  User&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;左冲&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">28</span>&#125;, </span><br><span class="line">  User&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;李四&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">28</span>&#125;, </span><br><span class="line">  User&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;小明&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">24</span>&#125;</span><br><span class="line">]</span><br><span class="line">System.out.println(page.getRecords());</span><br><span class="line">page.getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>2、现在版本<br>（1）在配置类中加入下面的方法  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 可以使用new PaginationInnerInterceptor(DbType.MYSQL)来配置分页属性，比如：配置分页上限</span></span><br><span class="line"><span class="comment">	 * PaginationInnerInterceptor pageInterceptor = new PaginationInnerInterceptor(DbType.MYSQL);</span></span><br><span class="line"><span class="comment">	 * pageInterceptor.setMaxLimit(500L);</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）操作  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置分页参数一</span></span><br><span class="line"><span class="comment">	 * Page&lt;User&gt; page = Page.of(1, 5);</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">//设置分页参数二</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置排序</span></span><br><span class="line"><span class="comment">	 * 先根据创建时间排序升序，再根据id排序升序</span></span><br><span class="line"><span class="comment">	 * 下面的create_time是数据库中的字段名</span></span><br><span class="line"><span class="comment">	 * true：升序asc</span></span><br><span class="line"><span class="comment">	 * false：降序desc</span></span><br><span class="line"><span class="comment">	 * page.addOrder(new OrderItem(&quot;create_time&quot;, true));</span></span><br><span class="line"><span class="comment">	 * page.addOrder(new OrderItem(&quot;id&quot;, true));</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//获取分页数据</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、自定义的mapper方法使用分页<br>（1）在mapper接口中定义方法  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传入参数携带Ipage接口</span></span><br><span class="line"><span class="comment">//返回结果为IPage</span></span><br><span class="line">IPage&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(IPage&lt;?&gt; page, Integer id)</span>;</span><br></pre></td></tr></table></figure>
<p>（2）在mapper.xml中编写sql  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;xxx.xxx.xxx.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE id &gt; #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.selectPageVo(page,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> page.getCurrent();</span><br><span class="line">    System.out.println(<span class="string">&quot;current = &quot;</span> + current);</span><br><span class="line">    <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> page.getPages();</span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">List</span> <span class="variable">records</span> <span class="operator">=</span> page.getRecords();</span><br><span class="line">    System.out.println(<span class="string">&quot;records = &quot;</span> + records);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>

<h1 id="9、逻辑删除"><a href="#9、逻辑删除" class="headerlink" title="9、逻辑删除"></a>9、逻辑删除</h1><p>1、在实体类中增加字段delFlag字段，并在字段上面使用注解@TableLogic，还需要在数据库中增加一个逻辑删除标识字段del_flag，0：存在，1：删除该数据。<br><strong>说明：</strong>在数据库中添加这个字段之后，执行删除操作的时候，它会自动将删除操作转变为更新操作，将del_flag更改为1，表示删除此数据，再执行查找的时候就查找不到该数据，但是数据库中还是存在该数据。<br>2、在配置类中注入逻辑删除组件，在配置文件中配置，新版本不知道需不需要配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类中配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogicSqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用的是单一指定逻辑删除，全局指定逻辑删除查看第<code>2</code>点各种配置。<br>3、操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteById(<span class="number">2</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line">List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<br/>

<h1 id="10、条件构造器的使用"><a href="#10、条件构造器的使用" class="headerlink" title="10、条件构造器的使用"></a>10、条件构造器的使用</h1><h3 id="1、方法说明"><a href="#1、方法说明" class="headerlink" title="1、方法说明"></a>1、方法说明</h3><img src="/2023/10/18/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">

<h3 id="2、QueryWrapper查询器"><a href="#2、QueryWrapper查询器" class="headerlink" title="2、QueryWrapper查询器"></a>2、QueryWrapper查询器</h3><p>1、组装查询条件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、组装排序条件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//按年龄降序查询用户，如果年龄相同则按id升序排列</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">            .orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、组装删除条件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//删除email为空的用户</span></span><br><span class="line">    <span class="comment">//DELETE FROM t_user WHERE (email IS NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="comment">//条件构造器也可以构建删除语句的条件</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、and和or关键字使用(修改)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE username LIKE ? AND age &gt; ? OR email IS NULL)</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">            .or()</span><br><span class="line">            .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、指定列映射查询  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询用户信息的username和age字段</span></span><br><span class="line">    <span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、condition判断组织条件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick3</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">int</span>    <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//判断条件拼接</span></span><br><span class="line">    <span class="comment">//当name不为null拼接等于, age &gt; 1 拼接等于判断</span></span><br><span class="line">    <span class="comment">//方案1: 手动判断</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(name))&#123;</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方案2: 拼接condition判断</span></span><br><span class="line">    <span class="comment">//每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件!</span></span><br><span class="line">    <span class="comment">//eq(condition,列名,值)</span></span><br><span class="line">    queryWrapper.eq(!StringUtils.isEmpty(name),<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line">            .eq(age&gt;<span class="number">1</span>,<span class="string">&quot;age&quot;</span>,age);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、UpdateWrapper更新器"><a href="#3、UpdateWrapper更新器" class="headerlink" title="3、UpdateWrapper更新器"></a>3、UpdateWrapper更新器</h3><p>特别说明：<br>（1）更新数据库时不仅可以用<code>UpdateWrapper</code>，也可以用<code>queryWrapper</code>，具体操作可以查看第<code>11</code>点；<br>（2）使用queryWrapper + 实体类形式可以实现修改，但是无法将列值修改为null值；<br>（3）使用updateWrapper可以随意设置列的值。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将id = 3 的email设置为null, age = 18</span></span><br><span class="line">    updateWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>)</span><br><span class="line">            .set(<span class="string">&quot;email&quot;</span>,<span class="literal">null</span>)  <span class="comment">// set 指定列和结果</span></span><br><span class="line">            .set(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//如果使用updateWrapper 实体对象写null即可!</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<h1 id="11、更新时需要注意的问题"><a href="#11、更新时需要注意的问题" class="headerlink" title="11、更新时需要注意的问题"></a>11、更新时需要注意的问题</h1><p>更新指定字段：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UpdateWrapper&lt;xxx&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper.eq(<span class="string">&quot;id&quot;</span>,id); <span class="comment">// 根据id去判断更新那条数据</span></span><br><span class="line">updateWrapper.set(<span class="string">&quot;state&quot;</span>, <span class="number">2</span>); <span class="comment">// .set 就是去更改的字段，第一个参数为字段名， 第二个参数为更改的值</span></span><br><span class="line">xxxMapper.update(<span class="literal">null</span>, updateWrapper);</span><br></pre></td></tr></table></figure>
<p>1、使用<code>QueryWrapper</code>修改需要注意<br>（1）需要new一个需要修改的实体类数据，比如下面例子中的User；<br>（2）它不能修改为null的数据，如果属性为null的，它不修改。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改</span></span><br><span class="line"><span class="comment">// 下面代码转为sql：update user set age=?,email=? where name like &#x27;a&#x27; and age&gt;20 or email is null</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">			.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">			.or()</span><br><span class="line">			.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setAge(<span class="number">88</span>);</span><br><span class="line">user.setEmail(<span class="literal">null</span>); <span class="comment">// 注意：这里是不能修改为null的</span></span><br><span class="line">userMapper.update(user, queryWrapper);</span><br></pre></td></tr></table></figure>
<p>2、使用<code>UpdateWrapper</code>修改<br>（1）不需要new实体类，直接使用<code>set</code>方法修改;<br>（2）可以将数据修改为null。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面等同于：update user set age=99,email=null where name like &#x27;a&#x27; and age&gt;20 or email is null</span></span><br><span class="line">UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">			.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">			.or()</span><br><span class="line">			.isNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">			.set(<span class="string">&quot;email&quot;</span>, <span class="literal">null</span>)</span><br><span class="line">			.set(<span class="string">&quot;age&quot;</span>, <span class="number">99</span>);</span><br><span class="line"><span class="comment">// 下面第一个参数必须为null</span></span><br><span class="line">userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br></pre></td></tr></table></figure>

<br/>



<h1 id="12、批量插入"><a href="#12、批量插入" class="headerlink" title="12、批量插入"></a>12、批量插入</h1><p>两种方法：<br>1、第一种方法，调用<code>service</code>自带的<code>saveBatch</code>方法，底层也是通过<code>for</code>来完成，默认是一个事务一次提交1000条数据，点击进入<code>saveBatch</code>可以看到， 也可以自定义每次提交多少条；<br>2、<code>insertBatchSomeColumn</code><br>（1）自定义SQL注入器  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.methods.InsertBatchSomeColumn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertBatchSqlInjector</span> <span class="keyword">extends</span> <span class="title class_">DefaultSqlInjector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> &#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="built_in">super</span>.getMethodList(mapperClass);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> <span class="title class_">InsertBatchSomeColumn</span>()); <span class="comment">//添加InsertBatchSomeColumn方法</span></span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）把SQL注入器交给Spring  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> InsertBatchSqlInjector <span class="title function_">easySqlInjector</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InsertBatchSqlInjector</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此定义完毕，在<code>Mapper</code>中生成<code>insertBatchSomeColumn</code>（必须是这个方法名）方法，你就可以撒手不管了，直接调用就行，或者直接在<code>ServiceImpl</code>通过<code>Mapper</code>调用<code>insertBatchSomeColumn</code>，然后<code>ALT+回车</code>生成此方法。<br>测试代码，调用<code>insertBatchSomeColumn</code>方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserStudyMapper userStudyMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *批量插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greatMany</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;UserStudy&gt; userStudyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    userStudyList.add(userStudy1);</span><br><span class="line">    userStudyList.add(userStudy2);</span><br><span class="line">    <span class="comment">//调用insertBatchSomeColumn方法</span></span><br><span class="line">    userStudyMapper.insertBatchSomeColumn(userStudyList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：SQL有语句长度限制，在MySQL中被参数<code>max_allowed_packet</code>限制，默认为1M，如果拼接长度超过此限制就会报错，两种解决方式，一个是调整MySQL的<code>max_allowed_packet</code>限制，另一个则是通过代码控制每次的提交数量。<br>通过代码控制每次提交数量，模拟造五条数据，每次提交两条数据：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *批量插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greatMany</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;UserStudy&gt; userStudyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy3.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy4.setName(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    <span class="type">UserStudy</span> <span class="variable">userStudy5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserStudy</span>();</span><br><span class="line">    userStudy5.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    userStudyList.add(userStudy1);</span><br><span class="line">    userStudyList.add(userStudy2);</span><br><span class="line">    userStudyList.add(userStudy3);</span><br><span class="line">    userStudyList.add(userStudy4);</span><br><span class="line">    userStudyList.add(userStudy5);</span><br><span class="line">    <span class="comment">//创建入库的list</span></span><br><span class="line">    List&lt;UserStudy&gt; userStudyCount = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userStudyList.size(); i++) &#123;</span><br><span class="line">        <span class="comment">//调用insertBatchSomeColumn方法</span></span><br><span class="line">        userStudyCount.add(userStudyList.get(i));</span><br><span class="line">        <span class="comment">//控制每次提交数量</span></span><br><span class="line">        <span class="keyword">if</span>(userStudyCount.size()==<span class="number">2</span>)&#123;</span><br><span class="line">            userStudyMapper.insertBatchSomeColumn(userStudyCount);</span><br><span class="line">            <span class="comment">//将入库的list清空重新新增</span></span><br><span class="line">            userStudyCount.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将list中size不够2的数据在此处新增</span></span><br><span class="line">    userStudyMapper.insertBatchSomeColumn(userStudyCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>




<h1 id="13、多表联查"><a href="#13、多表联查" class="headerlink" title="13、多表联查"></a>13、多表联查</h1><p>1、方法一：<br>（1）使用<code>QueryWrapper</code>查询器  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;Project&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(<span class="string">&quot;create_by&quot;</span>, LoginInterceptor.threadLocal.get().getId()).or().eq(<span class="string">&quot;user_id&quot;</span>, LoginInterceptor.threadLocal.get().getId());</span><br></pre></td></tr></table></figure>
<p>（2）在<code>mapper</code>接口继承<code>BaseMapper</code>写  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userProjectSql</span> <span class="operator">=</span> <span class="string">&quot;SELECT tp.*,tup.user_id FROM t_project tp LEFT JOIN t_user_project tup ON tp.id = tup.project_id&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pageSql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM ( &quot;</span>+ userProjectSql + <span class="string">&quot; ) AS t $&#123;ew.getCustomSqlSegment()&#125;&quot;</span>;</span><br><span class="line"><span class="comment">// 有分页</span></span><br><span class="line"><span class="meta">@Select(pageSql)</span></span><br><span class="line">IPage&lt;Project&gt; <span class="title function_">getPage</span><span class="params">(IPage&lt;Project&gt; page, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;Project&gt; wrapper)</span>;</span><br><span class="line"><span class="comment">// 没有分页</span></span><br><span class="line"><span class="meta">@Select(pageSql)</span></span><br><span class="line">List&lt;Project&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;Project&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>2、方法二：<br><a href="https://blog.csdn.net/qq_47923467/article/details/132371979">点击链接</a>  </p>
<br/>


<h1 id="14、Mybatis-Plus文档教程"><a href="#14、Mybatis-Plus文档教程" class="headerlink" title="14、Mybatis-Plus文档教程"></a>14、Mybatis-Plus文档教程</h1><p><a href="https://baomidou.com/pages/10c804/#kotlin%E4%BD%BF%E7%94%A8wrapper">点击链接</a>  </p>
<br/>



<h1 id="15、数据权限"><a href="#15、数据权限" class="headerlink" title="15、数据权限"></a>15、数据权限</h1><p>1、MyBatisPlusConfig配置：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.framework.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.framework.datascope.DataScopeInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis Plus 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement(proxyTargetClass = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据权限</span></span><br><span class="line">        interceptor.addInnerInterceptor(dataScopeInterceptor());</span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor());</span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(optimisticLockerInnerInterceptor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件，自动识别数据库类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInnerInterceptor <span class="title function_">paginationInnerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">        <span class="comment">// 设置数据库类型为mysql</span></span><br><span class="line">        paginationInnerInterceptor.setDbType(DbType.MYSQL);</span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        paginationInnerInterceptor.setMaxLimit(-<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">return</span> paginationInnerInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInnerInterceptor <span class="title function_">optimisticLockerInnerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据权限插件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DataScopeInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DataScopeInterceptor <span class="title function_">dataScopeInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataScopeInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、DataScopeInnerInterceptor数据权限拦截器配置  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.framework.datascope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.PluginUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.InnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.Enum.DataScopeTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.data.DataScope;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.domain.entity.SysRole;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.domain.entity.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.domain.model.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.ServletUtils;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.spring.SpringUtils;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.framework.web.service.TokenService;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataScopeInterceptor</span> <span class="keyword">implements</span> <span class="title class_">InnerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeQuery</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span><br><span class="line"><span class="params">                            ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line"></span><br><span class="line">        PluginUtils.<span class="type">MPBoundSql</span> <span class="variable">mpBs</span> <span class="operator">=</span> PluginUtils.mpBoundSql(boundSql);</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalSql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找参数中包含DataScope类型的参数</span></span><br><span class="line">        <span class="type">DataScope</span> <span class="variable">dataScope</span> <span class="operator">=</span> findDataScopeObject(parameterObject);</span><br><span class="line">        <span class="keyword">if</span> (dataScope == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SpringUtils.getBean(TokenService.class).getLoginUser(ServletUtils.getRequest());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotNull(loginUser)) &#123;</span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">            <span class="comment">// 如果是超级管理员，则不过滤数据</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotNull(currentUser) &amp;&amp; !currentUser.isAdmin()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">scopeName</span> <span class="operator">=</span> dataScope.getScopeName();</span><br><span class="line">                List&lt;String&gt; deptIds = dataScope.getDeptIds();</span><br><span class="line"></span><br><span class="line">                dataScopeFilter(currentUser, deptIds);</span><br><span class="line">                <span class="keyword">if</span> (deptIds.isEmpty()) &#123;</span><br><span class="line">                    originalSql = String.format(<span class="string">&quot;SELECT %s FROM (%s) temp_data_scope WHERE 1 = 2&quot;</span>,</span><br><span class="line">                            dataScope.getFunc().getType(), originalSql);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">join</span> <span class="operator">=</span> CollectionUtil.join(deptIds, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    originalSql = String.format(<span class="string">&quot;SELECT %s FROM (%s) temp_data_scope WHERE temp_data_scope.%s IN (%s)&quot;</span>,</span><br><span class="line">                            dataScope.getFunc().getType(), originalSql, scopeName, join);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mpBs.sql(originalSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找参数是否包括DataScope对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterObj 参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DataScope</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DataScope <span class="title function_">findDataScopeObject</span><span class="params">(Object parameterObj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameterObj <span class="keyword">instanceof</span> DataScope) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataScope) parameterObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object val : ((Map&lt;?, ?&gt;) parameterObj).values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val <span class="keyword">instanceof</span> DataScope) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (DataScope) val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dataScopeFilter</span><span class="params">(SysUser user, List&lt;String&gt; deptList)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SysRole role : user.getRoles()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">roleScope</span> <span class="operator">=</span> role.getDataScope();</span><br><span class="line">            <span class="keyword">if</span> (DataScopeTypeEnum.ALL.getType().equals(roleScope)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataScopeTypeEnum.CUSTOM.getType().equals(roleScope)) &#123;</span><br><span class="line">                <span class="comment">//   获取自定义</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataScopeTypeEnum.OWN_CHILD_LEVEL.getType().equals(roleScope)) &#123;</span><br><span class="line">                <span class="comment">// 获取子集</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DataScopeTypeEnum.OWN_LEVEL.getType().equals(roleScope)) &#123;</span><br><span class="line">                deptList.add(user.getDeptId().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.common.core.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.Enum.DataScopeFuncEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据权限查询参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataScope</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限制范围的字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">scopeName</span> <span class="operator">=</span> <span class="string">&quot;dept_id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的数据范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; deptIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否只查询本部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isOnly</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数名称，默认 SELECT * ;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;COUNT(1)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">DataScopeFuncEnum</span> <span class="variable">func</span> <span class="operator">=</span> DataScopeFuncEnum.ALL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.common.Enum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据权限函数类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DataScopeFuncEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部数据 SELECT * FROM (originSql) temp_data_scope WHERE temp_data_scope.dept_id IN</span></span><br><span class="line"><span class="comment">     * (1)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ALL(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;全部&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询函数COUNT SELECT COUNT(1) FROM (originSql) temp_data_scope WHERE</span></span><br><span class="line"><span class="comment">     * temp_data_scope.dept_id IN (1)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    COUNT(<span class="string">&quot;COUNT(1)&quot;</span>, <span class="string">&quot;自定义&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>



<h1 id="16、代码生成器"><a href="#16、代码生成器" class="headerlink" title="16、代码生成器"></a>16、代码生成器</h1><p><strong>说明：</strong>使用代码生成器之前，一定要配置好数据库。<br><a href="https://baomidou.com/guides/new-code-generator/">查看官网使用方法</a></p>
<br/>



<h1 id="17、快速入门"><a href="#17、快速入门" class="headerlink" title="17、快速入门"></a>17、快速入门</h1><p>1、数据库  </p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>email</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Jone</td>
<td>18</td>
<td><a href="mailto:test1@baomidou.com">test1@baomidou.com</a></td>
</tr>
<tr>
<td>2</td>
<td>Jack</td>
<td>20</td>
<td><a href="mailto:test2@baomidou.com">test2@baomidou.com</a></td>
</tr>
<tr>
<td>3</td>
<td>Tom</td>
<td>28</td>
<td><a href="mailto:test3@baomidou.com">test3@baomidou.com</a></td>
</tr>
<tr>
<td>4</td>
<td>Sandy</td>
<td>21</td>
<td><a href="mailto:test4@baomidou.com">test4@baomidou.com</a></td>
</tr>
<tr>
<td>5</td>
<td>Billie</td>
<td>24</td>
<td><a href="mailto:test5@baomidou.com">test5@baomidou.com</a></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、导入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter-mybatis-plus-06<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库相关配置启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、配置文件  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为<code>Druid 1.2.18</code>版本对于springboot3不兼容，还需要进行兼容设置（<code>1.2.20</code>以上版本已经兼容了，不需要进行下面的兼容设置）：<br>（1）在<code>resources</code>资源目录下创建<code>META-INF.spring</code>文件夹，注意：<code>META-INF</code>和<code>spring</code>都是文件夹！<br>（2）在<code>META-INF.spring</code>文件夹下创建<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件（注意：这里全部都是文件名！）<br>（3）文件内容为：<code>com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure</code>。<br>4、启动类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;xxx.xxx.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、Java实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">// 此处使用了Lombok简化代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、Mapper接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承mybatis-plus提供的基础Mapper接口，自带crud方法！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">//springboot下测试环境注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>



<h1 id="18、Service层的设置"><a href="#18、Service层的设置" class="headerlink" title="18、Service层的设置"></a>18、Service层的设置</h1><p>1、接口继承IService接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、类继承ServiceImpl实现类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<h1 id="19、防止全表更新和删除"><a href="#19、防止全表更新和删除" class="headerlink" title="19、防止全表更新和删除"></a>19、防止全表更新和删除</h1><p>1、说明<br>针对 update 和 delete 语句 作用: 阻止恶意的全表更新删除。<br>2、在总的配置类中配置  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">  interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());</span><br><span class="line">  <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick8</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;custom_name&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;xxx@mail.com&quot;</span>);</span><br><span class="line">    <span class="comment">//Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation</span></span><br><span class="line">    <span class="comment">//全局更新,报错</span></span><br><span class="line">    userService.saveOrUpdate(user,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>  



<h1 id="20、MyBatis-Plus代码生成器-MyBatisX插件"><a href="#20、MyBatis-Plus代码生成器-MyBatisX插件" class="headerlink" title="20、MyBatis-Plus代码生成器(MyBatisX插件)"></a>20、MyBatis-Plus代码生成器(MyBatisX插件)</h1><p>1、Mybatisx插件逆向工程<br>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率<br>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。<br>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。  </p>
<img src="/2023/10/18/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<img src="/2023/10/18/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<img src="/2023/10/18/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>2、MyBatisX快速代码生成<br>使用mybatisX插件,自动生成sql语句实现。<br><a href="https://baomidou.com/guides/mybatis-x/">查看官网使用方法</a></p>
<br/>


<h1 id="21、自定义sql"><a href="#21、自定义sql" class="headerlink" title="21、自定义sql"></a>21、自定义sql</h1><p>利用<code>Wrapper</code>来构建复杂的<code>where</code>条件，然后自己定义sql语句中剩下的部分。<br>需求：将id在指定范围的用户（例如1、2、4）的余额扣减指定值。<br>原来使用mybatis时：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceByIds&quot;</span>&gt;</span></span><br><span class="line">  update user</span><br><span class="line">  set balance = balance - #&#123;money&#125;</span><br><span class="line">  where id in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在使用mybatis-plus：<br>第一步：基于<code>Wrapper</code>构建<code>where</code>条件。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().in(User::getId, ids);</span><br><span class="line">userMapper.updateBalanceByIds(wrapper, money);</span><br></pre></td></tr></table></figure>
<p>第二步：在<code>mapper</code>方法参数中用<code>@Param</code>注解声明<code>wrapper</code>变量名称，必须是<code>ew</code>！！！  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Param(&quot;ew&quot;)可以使用@Param(Constants.WRAPPER)来替换</span></span><br><span class="line"><span class="comment">// Constants.WRAPPER是mybatis-plus中定义的常量，值为ew</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> LambdaQueryWrapper&lt;User&gt; wrapper, <span class="meta">@Param(&quot;money&quot;)</span> <span class="type">int</span> money)</span>;</span><br></pre></td></tr></table></figure>
<p>第三步：在<code>xml</code>或者使用注解形式自定义sql语句。<br><code>xml</code>方式：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceByIds&quot;</span>&gt;</span></span><br><span class="line">  update user set balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注解方式：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> LambdaQueryWrapper&lt;User&gt; wrapper, <span class="meta">@Param(&quot;money&quot;)</span> <span class="type">int</span> money)</span>;</span><br></pre></td></tr></table></figure>


<br/>


<h1 id="22、MP提供的Db工具类"><a href="#22、MP提供的Db工具类" class="headerlink" title="22、MP提供的Db工具类"></a>22、MP提供的Db工具类</h1><p>使用场景：当<code>UserService</code>中注入了<code>OrderService</code>，<code>OrderService</code>中注入了<code>UserService</code>，这样会产生循环依赖问题，此时可以使用<code>MybatisPlus</code>提供的<code>Db</code>工具类来避免这个问题。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 根据用户id查询用户</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">		<span class="comment">// 根据用户id查询订单</span></span><br><span class="line">		<span class="comment">// 使用Db，Order为对应数据库的实体类</span></span><br><span class="line">		List&lt;Order&gt; orderList = Db.lambdaQuery(Order.class)</span><br><span class="line">			.eq(Order::getUserId, user.getId())</span><br><span class="line">			.list();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<h1 id="23、枚举处理器"><a href="#23、枚举处理器" class="headerlink" title="23、枚举处理器"></a>23、枚举处理器</h1><p>枚举类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">	NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">	FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此注解的含义是告诉数据库，在插入时，使用被此注解标注的属性入库</span></span><br><span class="line">	<span class="comment">// com.baomidou.mybatisplus.annotation.EnumValue</span></span><br><span class="line">	<span class="meta">@EnumValue</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此注解的含义是返回前端时，使用被此注解标注的属性显示</span></span><br><span class="line">	<span class="comment">// com.fasterxml.jackson.annotation.JsonValue</span></span><br><span class="line">	<span class="meta">@JsonValue</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">	</span><br><span class="line">	UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="comment">// ...其他属性</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 用户状态(1正常，2冻结)</span></span><br><span class="line">	<span class="keyword">private</span> UserStatus status;</span><br><span class="line">	<span class="comment">// ...其他属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要在<code>application.yml</code>中配置枚举处理器：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 枚举处理器</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure>
<p>这样在查询时，数据库中的枚举值会被自动转换为枚举对象。  </p>
<br/>


<h1 id="24、JSON处理器"><a href="#24、JSON处理器" class="headerlink" title="24、JSON处理器"></a>24、JSON处理器</h1><p>使用场景：当mysql中存储json类型的数据，我们查询出来时，json类型的数据在实体类中对应的是string类型，如果我们需要获取json中的某些属性，还得将string类型转换成json再获取，相当麻烦。<br>解决办法：我们可以创建一个实体类，对应json，实体类中的属性对应json中的属性，将使用原来的<code>String json</code>的string类型修改为该实体类，然后再使用JSON处理器。<br>json实体类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库实体类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一定要加autoResultMap = true</span></span><br><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="comment">// ...其他属性</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// json数据，对应数据库中的json类型</span></span><br><span class="line">	<span class="comment">// 原来是：private String jsonDemo;</span></span><br><span class="line">	<span class="comment">// 现在修改为：private JsonDemo jsonDemo;</span></span><br><span class="line">	<span class="comment">// JacksonTypeHandler是mybatis-plus提供的JSON处理器，一共有三个：JacksonTypeHandler、FastjsonTypeHandler、GsonTypeHandler</span></span><br><span class="line">	<span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">	<span class="keyword">private</span> JsonDemo jsonDemo;</span><br><span class="line">	<span class="comment">// ...其他属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在查询时，数据库中的json类型的数据会被自动转换为json实体类对象。  </p>
<br/>


<h1 id="25、批量新增"><a href="#25、批量新增" class="headerlink" title="25、批量新增"></a>25、批量新增</h1><p>在<code>yaml</code>配置文件的连接数据库信息中，添加<code>rewriteBatchedStatements=true</code>（mysql 3.1.13开始就有了这个配置），这样就可以使用批量新增了。  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure>
<p>使用<code>mybatis-plus</code>的批量新增：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 需求：一次性插入10万条数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 我们可以每次批量插入1000条，插入100次</span></span><br><span class="line">	<span class="comment">// 1、准备一个容量为1000的集合</span></span><br><span class="line">	List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">	<span class="comment">// 2、循环100次，每次往集合中添加1000条数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span> + i));</span><br><span class="line">		<span class="comment">// 每1000条批量插入一次</span></span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// 3、批量插入</span></span><br><span class="line">			userService.saveBatch(userList);</span><br><span class="line">			<span class="comment">// 4、清空集合</span></span><br><span class="line">			userList.clear();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>常用注解</title>
    <url>/2024/01/31/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、元注解"><a href="#一、元注解" class="headerlink" title="一、元注解"></a>一、元注解</h1><h3 id="1、-Target"><a href="#1、-Target" class="headerlink" title="1、@Target"></a>1、@Target</h3><p>用于描述注解得使用范围（即：被描述得注解可以用在什么地方）。  </p>
<h3 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a>2、@Retention</h3><p>表示需要在什么级别保存该注释信息，用于描述注解得生命周期，说明白点这个注解表示在什么地方有效（SOURCE&lt;CLASS&lt;RUNTIME)，常用RUNTIME，运行时有效。  </p>
<h3 id="3、-Document"><a href="#3、-Document" class="headerlink" title="3、@Document"></a>3、@Document</h3><p>说明该注解将被包含在javadoc中。  </p>
<h3 id="4、-Inherited"><a href="#4、-Inherited" class="headerlink" title="4、@Inherited"></a>4、@Inherited</h3><p>用于放在注解上，说明子类可以继承父类中得该注解，假如@Inherited放在了注解@A上，类B上注解了@A，类C继承了类B，类C也有注解@A。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> A&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@A</span>  <span class="comment">// 这个是继承了类B的注解A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>



<h1 id="二、注解定义与使用"><a href="#二、注解定义与使用" class="headerlink" title="二、注解定义与使用"></a>二、注解定义与使用</h1><h3 id="1、-RequestMapping"><a href="#1、-RequestMapping" class="headerlink" title="1、@RequestMapping"></a>1、@RequestMapping</h3><p>1、说明：<br><code>@RequestMapping</code>注解是将Web请求与请求处理类中的方法进行映射。<code>SpringMvc</code>和<code>SpringWebFlux</code>都通过<code>RequestMappingHandlerMapping</code>和<code>RequestMappingHandlerAdapter</code>两个类来提供对<code>@RequestMapping</code>注解的支持。<br>2、注解属性：<br>（1）<code>value</code>：映射的请求Url或者其别名；<br>（2）<code>method</code>：兼容HTTP的方法名；<br>（3）<code>params</code>：根据HTTP参数的存在、缺省或值对请求进行过滤；<br>（4）<code>header</code>：根据HTTP Header的存在、缺省或值对请求进行过滤；<br>（5）<code>consume</code>：设定在HTTP请求正文中允许使用的媒体类型；<br>（6）<code>product</code>：在HTTP响应体中允许使用的媒体类型。<br>3、注意：<br>在使用<code>@RequestMapping</code>之前，请求处理类还需要使用<code>@Controller</code>或<code>@RestController</code>注解进行标注。<br>4、示例：<br>（1）示例一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/demo&quot;,method=RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/demo&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问路径：/demo</span></span><br></pre></td></tr></table></figure>
<p>（2）示例二<br>说明：<code>@RequestMapping</code>注解还可以对类进行标记，这样类中的处理方法在映射请求路径时，会自动将类上的<code>@RequestMapping</code>设置的<code>value</code>拼接到方法映射路径之前。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/test&quot;,method=RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/demo&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问路径：/demo/test</span></span><br></pre></td></tr></table></figure>


<h3 id="2、-RequestBody"><a href="#2、-RequestBody" class="headerlink" title="2、@RequestBody"></a>2、@RequestBody</h3><p>1、说明：<br><code>@RequestBody</code>注解在<code>Controller</code>类的方法参数中使用，将请求体的参数绑定到一个对象上，请求体参数通过<code>HttpMessageConverter</code>传递，根据请求体中的参数名与对象的属性名进行匹配并绑定，此外，还可以通过<code>@Valid</code>注解对请求体中的参数进行校验。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// @Valid：是根据User类中属性上的校验规则来校验</span></span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userService.createUser(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3、-GetMapping"><a href="#3、-GetMapping" class="headerlink" title="3、@GetMapping"></a>3、@GetMapping</h3><p>1、说明：<br><code>@GetMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.GET)</code>一样，用于查询数据时，是幂等。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 同 @RequestMapping(value=&quot;/findUsers&quot;,method=RequestMethod.GET)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/findUsers&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUsers</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userService.finUsers();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4、-PostMapping"><a href="#4、-PostMapping" class="headerlink" title="4、@PostMapping"></a>4、@PostMapping</h3><p>1、说明：<br><code>@PostMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.POST)</code>一样，用于新增数据时，是非幂等（多次访问对rest服务产生的结果每次都会有改变），意思就是告诉开发人员，使用<code>@PostMapping</code>注解标注的接口每次请求，都会使数据库中的数据发生改变。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 同 @RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/createUser&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userService.createUser();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="5、-PutMapping"><a href="#5、-PutMapping" class="headerlink" title="5、@PutMapping"></a>5、@PutMapping</h3><p>1、说明：<br><code>@PutMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PUT)</code>一样，用于更新数据时，它是全局更新（替换）,是幂等（多次访问对rest服务产生的结果都不会改变），意思就是告诉开发人员，使用<code>@PutMapping</code>注解标注的接口每次请求，不会使结果改变。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 同 @RequestMapping(value=&quot;/updateUser&quot;,method=RequestMethod.PUT)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> <span class="keyword">throws</span> UserNotFoundException&#123;</span><br><span class="line">		<span class="type">User</span> <span class="variable">userFind</span> <span class="operator">=</span> userService.findById(user.getId)</span><br><span class="line">								.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;没有此用户！&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> Result.ok(userService.updateUser(user));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="6、-DeleteMapping"><a href="#6、-DeleteMapping" class="headerlink" title="6、@DeleteMapping"></a>6、@DeleteMapping</h3><p>1、说明：<br><code>@DeleteMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.DELETE)</code>一样，用于删除数据时，是幂等。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> calss UserController &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>String id)</span> <span class="keyword">throws</span> UserNotFoundException &#123;</span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(id)</span><br><span class="line">								.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;没有此用户！&quot;</span>));</span><br><span class="line">								</span><br><span class="line">		userService.deleteUser(id);</span><br><span class="line">		<span class="keyword">return</span> Result.ok();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="7、-PatchMapping"><a href="#7、-PatchMapping" class="headerlink" title="7、@PatchMapping"></a>7、@PatchMapping</h3><p>1、说明：<br><code>@PatchMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PATCH)</code>一样，用于更新数据时，它是部分更新（只更新部分），是非幂等的。  </p>
<h3 id="8、-ControllerAdvice"><a href="#8、-ControllerAdvice" class="headerlink" title="8、@ControllerAdvice"></a>8、@ControllerAdvice</h3><p>1、说明：<br><code>@ControllerAdvice</code>注解是<code>@Component</code>注解的一个衍生注解，Spring会自动扫描并检测被<code>@ControllerAdvice</code>注解所标注的类；<code>@ControllerAdvice</code>注解需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code>注解搭配使用，主要用来处理控制器所抛出的异常信息。<br>2、使用方法：<br>（1）我们需要定义一个被<code>@ControllerAdvice</code>所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用<code>@ExceptionHandler</code>注解进行标注；<br>（2）在有必要的时候，可以使用<code>@InitBinder</code>注解（使用方法在第9点）在类中进行全局配置，还可以使用<code>@ModelAttribute</code>配置与视图相关的参数；<br>（3）使用<code>@ControllerAdvice</code>注解，可以快速创建统一的、自定义的异常处理类，详细也可以查看第9点。<br>3、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(basePackages=&#123;&quot;com.zjy.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControllerAdvice</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@InitBinder</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">binder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line">		<span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">		format.setLenient(<span class="literal">false</span>);</span><br><span class="line">		binder.registerCustomEditor(Date.class, <span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">CustomDateFormat</span>(format, <span class="literal">true</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ModelAttribute</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modelAttribute</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">		model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;User not found exception.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">userNotFoundExceptionHandler</span><span class="params">(UerNotFoundException ex)</span> &#123;</span><br><span class="line">		<span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">		modelAndView.addObject(<span class="string">&quot;exception&quot;</span>, ex);</span><br><span class="line">		modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="9、-InitBinder"><a href="#9、-InitBinder" class="headerlink" title="9、@InitBinder"></a>9、@InitBinder</h3><p><a href="https://blog.csdn.net/weixin_43888891/article/details/127348918">使用方法链接</a></p>
<h3 id="10、-ExceptionHandler"><a href="#10、-ExceptionHandler" class="headerlink" title="10、@ExceptionHandler"></a>10、@ExceptionHandler</h3><p>1、说明：<br><code>@ExceptionHandler</code>注解用于标注处理特定类型异常类所抛出的异常的方法。当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法。<br>2、用法：<br>用法是统一一个异常接口，比如如果每个方法都有try…catch来弄的话，代码量太多，这个时候统一一个方法，在这个方法上加上这个注解，一旦出现异常就会执行这个方法。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doError</span><span class="params">(Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> ex.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、示例：<br>（1）示例一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Object&gt; <span class="title function_">userNotFoundExceptionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Result.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）示例二<br>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span>&#123;</span><br><span class="line">    <span class="comment">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h3 id="11、-ResponseBody"><a href="#11、-ResponseBody" class="headerlink" title="11、@ResponseBody"></a>11、@ResponseBody</h3><p>1、说明：<br><code>@ResponseBody</code>会自动将控制器中方法的返回值写入到HTTP响应中。注意，<code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标注的类中，如果在被<code>@RestController</code>注解标注的类中，则不必使用<code>@ResponseBody</code>，<code>@restController</code>相当于是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findByUserId</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> userService.findByUserId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="12、-ResponseStatus"><a href="#12、-ResponseStatus" class="headerlink" title="12、@ResponseStatus"></a>12、@ResponseStatus</h3><p>1、说明：<br><code>@ResponseStatus</code>注解可以标注请求处理方法。使用此注解，可以指定响应所需要的HTTP STATUS状态码。特别地，我们可以使用<code>HttpStatus</code>类对该注解的<code>value</code>或者<code>code</code>属性进行赋值。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面示例，如果没有使用<code>@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</code>，返回的状态码是200；使用之后，返回的状态码是500。  </p>
<h3 id="13、-PathVariable和-RequestParam"><a href="#13、-PathVariable和-RequestParam" class="headerlink" title="13、@PathVariable和@RequestParam"></a>13、@PathVariable和@RequestParam</h3><p>1、@PathVariable<br>（1）说明：<br><code>@PathVariable</code>注解是将方法中的参数绑定到请求URL中的模板变量上，通过<code>@RequestMapping</code>注解来指定URL的模板变量，然后使用<code>@PathVariable</code>注解将方法中的参数绑定到模板变量上。<br>（2）示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Role <span class="title function_">getUserRole</span><span class="params">(<span class="meta">@PathVariable(name=&quot;id&quot;)</span>String id, <span class="meta">@PathVariable(value=&quot;roleId&quot;)</span>String roleId)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板变量名需要使用<code>&#123;&#125;</code>进行包裹，如果方法的参数名与URL模板变量名一致，则在<code>@PathVariable</code>中就可以省略别名的定义：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">``` java</span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Role <span class="title function_">getUserRole</span><span class="params">(<span class="meta">@PathVariable</span> String id, <span class="meta">@PathVariable</span> String roleId)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、@RequestParam<br>（1）说明：<br><code>@RequestParam</code>注解用于将方法的参数与Web请求传递的参数进行绑定，使用<code>@RequestParam</code>可以获取请求URL路径中的参数值<br>（2）示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users/roles&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Role <span class="title function_">getUserRole</span><span class="params">(<span class="meta">@RequestParam</span> String id, <span class="meta">@RequestParam</span> String roleId)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、@RequestParam注解和@PathVariable注解的区别<br><a href="https://blog.csdn.net/qq_33355821/article/details/85619692">区别链接详情请点击</a>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/springmvc/hello/101?param1=10&amp;param2=20</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetails</span><span class="params">(<span class="meta">@PathVariable(value=&quot;id&quot;)</span> String id,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value=&quot;param1&quot;, required=true)</span> String param1,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value=&quot;param2&quot;, required=false)</span> String param2)</span>&#123;</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、-ModelAttribute"><a href="#14、-ModelAttribute" class="headerlink" title="14、@ModelAttribute"></a>14、@ModelAttribute</h3><p><a href="https://www.cnblogs.com/youth-man/p/14224652.html">使用方法</a></p>
<h3 id="15、-CrossOrigin"><a href="#15、-CrossOrigin" class="headerlink" title="15、@CrossOrigin"></a>15、@CrossOrigin</h3><p>1、说明：<br><code>@CrossOrigin</code>注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/home&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userDetails</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="16、-ComponentScan"><a href="#16、-ComponentScan" class="headerlink" title="16、@ComponentScan"></a>16、@ComponentScan</h3><p>1、说明：<br><code>@ComponentScan</code>注解用于配置Spring需要扫描的被组件注解注释的类所在的包。可以通过配置其basePackages属性或者value属性来配置需要扫描的包路径。  </p>
<h3 id="17、-Mapper和-Repository"><a href="#17、-Mapper和-Repository" class="headerlink" title="17、@Mapper和@Repository"></a>17、@Mapper和@Repository</h3><p>1、说明：<br><code>@Mapper</code>和<code>@Repository</code>注解是<code>@Component</code>注解的延伸，与<code>@Component</code>注解一样，被此注解标注的类会被Spring自动管理起来，用于标注DAO层的数据持久化类。<br>2、区别：<br>（1）<code>@Mapper</code>不需要配置扫描地址，可以单独使用如果有多个mapper文件的话，可以在项目启动类中加入<code>@MapperScan(“mapper文件所在包”)</code>，这样就不需要每个mapper文件都加<code>@Mapper注解了</code>；<br>（2）<code>@Repository</code>不可以单独使用，否则会报错误找不到bean，这是因为项目启动的时候没有去扫描使用<code>@Repository</code>注解的文件，所以使用<code>@Repository</code>需要配置扫描地址，但在idea中，使用<code>@Repository</code>可以消除在业务层中注入mapper对象时的错误。  </p>
<h3 id="18、-DependsOn"><a href="#18、-DependsOn" class="headerlink" title="18、@DependsOn"></a>18、@DependsOn</h3><p>1、说明：<br><code>@DependsOn</code>注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(&quot;firstBean&quot;)</span></span><br><span class="line">	<span class="meta">@DependsOn(value=&#123;&quot;secondBean&quot;, &quot;thirdBean&quot;&#125;)</span> <span class="comment">// 先初始化这里两个bean对象，再初始化firstBean</span></span><br><span class="line">	<span class="keyword">public</span> FirstBean <span class="title function_">firstBean</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(&quot;secondBean&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> SecondBean <span class="title function_">secondBean</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(&quot;thirdBean&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ThirdBean <span class="title function_">thirdBean</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="19、-PostConstruct与-PreDestroy"><a href="#19、-PostConstruct与-PreDestroy" class="headerlink" title="19、@PostConstruct与@PreDestroy"></a>19、@PostConstruct与@PreDestroy</h3><p>1、说明：<br>（1）<code>@PostConstruct</code>注解用于标注在Bean被Spring初始化之后需要执行的方法。<br>（2）<code>@PreDestroy</code>注解用于标注Bean被销毁前需要执行的方法。<br>2、示例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoComponent</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArraryList</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">		list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PreDestroy</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">		list.clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="20、-RestController"><a href="#20、-RestController" class="headerlink" title="20、@RestController"></a>20、@RestController</h3><p><code>@RestController</code> &#x3D; <code>@ResponseBody</code> + <code>@Controller</code>，JSON对象，不会通过视图解析器。  </p>
<h3 id="21、-Controller"><a href="#21、-Controller" class="headerlink" title="21、@Controller"></a>21、@Controller</h3><p>通过视图解析器返回。  </p>
<h3 id="22、-Scope"><a href="#22、-Scope" class="headerlink" title="22、@Scope"></a>22、@Scope</h3><p>@Scope（“单例&#x2F;原型模式”）。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Scope</span>(scopeName <span class="operator">=</span> ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br></pre></td></tr></table></figure>


<h3 id="23、-PathParam"><a href="#23、-PathParam" class="headerlink" title="23、@PathParam"></a>23、@PathParam</h3><p>这个注解是和spring的pathVariable是一样的，也是基于模板的，但是这个是jboss包下面的一个实现，上面的是spring的一个实现，都要导包。  </p>
<h3 id="24、-Autowired和-Resource"><a href="#24、-Autowired和-Resource" class="headerlink" title="24、@Autowired和@Resource"></a>24、@Autowired和@Resource</h3><p>1、@Autowired<br>自动装配通过类型。（可以不需要set方法）<br>（1）<code>required</code>属性：默认为true，表示必须要有bean赋值给它，不然就报错，为false不报错。<br>（2）如果有多个相同类型的bean，那么会根据名字（成员变量名）进行匹配，如果名字也相同，那么就会报错。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// service实现类1</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOneServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserOneServiceImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// service实现类2</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTwoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserTwoServiceImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userOneServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userTwoServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        userOneServiceImpl.print();</span><br><span class="line">        userTwoServiceImpl.print();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">UserOneServiceImpl</span><br><span class="line">UserTwoServiceImpl</span><br></pre></td></tr></table></figure>

<p>2、@Resource（属于java的注解）<br>自动装配通过名称，等同与@Qualifier(“xxx”)和@Autowired连用的效果。  </p>
<p>3、区别<br><code>@Resource</code>是jdk提供，按照名称注入；<code>@Autowired</code>是spring提供，按照类型注入  </p>
<h3 id="25、-Qualifier"><a href="#25、-Qualifier" class="headerlink" title="25、@Qualifier"></a>25、@Qualifier</h3><p><code>@Qualifier（value=&quot;xxx&quot;)</code>如果属性名字不唯一，可以通过这个注解标记。和<code>@Autowired</code>一起使用，当比如接口UserService接口有很多实现类，单单<code>@Autowired</code>是无法找到是哪一个实现类，所以需要加上<code>@Qualifier（value=&quot;实现类的名字&quot;)</code>，让系统找到指定类。  </p>
<h3 id="26、-Nullable"><a href="#26、-Nullable" class="headerlink" title="26、@Nullable"></a>26、@Nullable</h3><p>字段标记了这个注解，说明这个字段可以为null。  </p>
<h3 id="27、-Primary"><a href="#27、-Primary" class="headerlink" title="27、@Primary"></a>27、@Primary</h3><p>加在service实现类上，代表了如果有两个相同的service同时注入到容器中，使用这个注解可以实现要将哪个类实现调用。  </p>
<h3 id="28、-XmlRootElement"><a href="#28、-XmlRootElement" class="headerlink" title="28、@XmlRootElement"></a>28、@XmlRootElement</h3><p>使标注的类序列化为xml或者json格式，例如：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name=&quot;User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Int age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 序列化为</span></span><br><span class="line"><span class="comment"> * XML格式：</span></span><br><span class="line"><span class="comment"> * &lt;User&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;name&gt; &lt;/name&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;age&gt; &lt;/age&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/User&gt;</span></span><br><span class="line"><span class="comment"> * JSON格式：</span></span><br><span class="line"><span class="comment"> * &#123;&quot;User&quot;:</span></span><br><span class="line"><span class="comment"> *   &#123;</span></span><br><span class="line"><span class="comment"> *    &quot;name&quot;:  ,</span></span><br><span class="line"><span class="comment"> *    &quot;age&quot;:  </span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h3 id="29、-ComponentScan"><a href="#29、-ComponentScan" class="headerlink" title="29、@ComponentScan"></a>29、@ComponentScan</h3><p><a href="https://blog.csdn.net/huangjhai/article/details/104600328">用法链接</a>  </p>
<h3 id="30、-JsonIgnore"><a href="#30、-JsonIgnore" class="headerlink" title="30、@JsonIgnore"></a>30、@JsonIgnore</h3><p>使用在某个属性上，这样在序列化和反序列化的时候都会忽略这个属性，最直接的效果就是返回的JSON属性是没有这个属性的，一般作用于密码这系列的属性。  </p>
<h3 id="31、-JsonInclude"><a href="#31、-JsonInclude" class="headerlink" title="31、@JsonInclude"></a>31、@JsonInclude</h3><p>使用在某个属性上，配合它的属性<code>Value=JsonInclude.Include.NON_NULL</code>，表示的是如果这个属性的属性值为空那么在返回前端的时候不可见。  </p>
<h3 id="32、-JsonProperty"><a href="#32、-JsonProperty" class="headerlink" title="32、@JsonProperty"></a>32、@JsonProperty</h3><p>使用在某个属性上，这个注解有两个作用，第一是修改返回JSON数据的时候key值为value指定值，第二个作用是配合属性access&#x3D;JsonProperty.Access.WRITE_ONLY表示属性只可以进行序列化而不能进行反序列化，直观效果就是返回的数据没有该属性。  </p>
<h3 id="33、-JsonIgnoreProperties"><a href="#33、-JsonIgnoreProperties" class="headerlink" title="33、@JsonIgnoreProperties"></a>33、@JsonIgnoreProperties</h3><p>作用在类声明处，它和<code>@JsonIgnore</code>注解的区别就是可以对多个属性作用，直接在value属性后面使用大括号逗号隔开即可，它的ignoreUnknow属性为true表示忽略未定义的属性。<br>1、<code>ignoreUnknow</code>属性用法：标注在实体类上面，使用场景为：前端传参，后端实体类没有对应属性（会报错），此时后端实体类使用<code>@JsonIgnoreProperties(ignoreUnknown = true)</code>忽略未定义的属性，这样后端实体类就不会报错，而是直接忽略未定义的属性。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_detection_rule&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DetectionRule</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规则id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="34、-RequestHeader"><a href="#34、-RequestHeader" class="headerlink" title="34、@RequestHeader"></a>34、@RequestHeader</h3><p>在后端controller获取前端请求头信息，里面有三个参数：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// value:表示将前端请求头里的Host 赋值给host，</span></span><br><span class="line"><span class="comment">// required：true表示前端请求头必须有Host才能访问此方法</span></span><br><span class="line"><span class="comment">// defaultValue ：表示如果请求头没有value的值，就把defaultValue值赋值给host</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Host&quot;,required = true,defaultValue = &quot;haha&quot;)</span> String host)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="35、-SpringBootConfiguration"><a href="#35、-SpringBootConfiguration" class="headerlink" title="35、@SpringBootConfiguration"></a>35、@SpringBootConfiguration</h3><p>和<code>@Configuration</code>是一样的，都是配置注解，只不过<code>@SpringBootConfiguration</code>是springboot里的注解。  </p>
<h3 id="36、-EnableAutoConfiguration"><a href="#36、-EnableAutoConfiguration" class="headerlink" title="36、@EnableAutoConfiguration"></a>36、@EnableAutoConfiguration</h3><p>表示自动配置。  </p>
<h3 id="37、-ConfigurationProperties"><a href="#37、-ConfigurationProperties" class="headerlink" title="37、@ConfigurationProperties"></a>37、@ConfigurationProperties</h3><p>想将配置文件中的数据提取出来，使用这个注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;xxx&quot;)</span> <span class="comment">//xxx 表示配置文件里的前缀</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">配置文件application.properties的内容如下：</span><br><span class="line">xxx.name=zjy <span class="comment">//xxx 就是配置文件里的前缀</span></span><br></pre></td></tr></table></figure>


<h3 id="38、-ConditionalOnMissingBean"><a href="#38、-ConditionalOnMissingBean" class="headerlink" title="38、@ConditionalOnMissingBean"></a>38、@ConditionalOnMissingBean</h3><p><code>@ConditionalOnMissingBean(xxx.class)</code>容器中没有xxx.class才生效。  </p>
<h3 id="39、-ConditionalOnClass"><a href="#39、-ConditionalOnClass" class="headerlink" title="39、@ConditionalOnClass"></a>39、@ConditionalOnClass</h3><p><code>@ConditionalOnClass(&#123;xxx.class,xxx.class,xxx.class&#125;)</code>容器中存在{xxx.class,xxx.class,xxx.class}这些才生效。  </p>
<h3 id="40、-AutoConfiguration"><a href="#40、-AutoConfiguration" class="headerlink" title="40、@AutoConfiguration"></a>40、@AutoConfiguration</h3><p><code>@AutoConfiguration(after = &#123;xxx.class,xxx.class&#125;)</code>after的意思是 在 {xxx.class,xxx.class} 这些自动配置类配置之后再配置。  </p>
<h3 id="41、-Order"><a href="#41、-Order" class="headerlink" title="41、@Order"></a>41、@Order</h3><p><code>@Order（1）</code>存在多个增强类对同一个类中的同一个方法进行增强，设置增强类执行的优先级。标注在增强类上，括号里面数字越小，优先级越高，越高的前置类型的方法先执行，后置后执行。  </p>
<h3 id="42、-Transactional事务注解"><a href="#42、-Transactional事务注解" class="headerlink" title="42、@Transactional事务注解"></a>42、@Transactional事务注解</h3><p>1、<code>rollbackFor</code><br>默认情况下，只有出现<code>RuntimeException</code>才回滚异常，<code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务。<br>2、<code>propagation</code>传播行为<br>（1）<code>PROPAGATION_REQUIRED</code>（<code>@Transactional</code>默认的事务传播行为）<br>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。更确切地意思是：  </p>
<ul>
<li>如果外部方法没有开启事务的话，Propagation.REQUIRED 修饰的内部方法会开启自己的事务，且开启的事务相互独立，互不干扰；  </li>
<li>如果外部方法开启事务并且是 Propagation.REQUIRED 的话，所有 Propagation.REQUIRED 修饰的内部方法和外部方法均属于同一事务 ，只要一个方法回滚，整个事务都需要回滚。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class A &#123;</span><br><span class="line">	<span class="meta">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">		<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		b.bMethod();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class B &#123;</span><br><span class="line">	<span class="meta">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>aMethod</code>调用了<code>bMethod</code>，只要其中一个方法回滚，整个事务均回滚。<br>（2）<code>PROPAGATION_REQUIRES_NEW</code><br>创建一个新事物，并在新事务中执行；如果当前存在事务，则挂起当前事务，即便新事务抛出异常，也不会影响当前事务。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class A &#123;</span><br><span class="line">	<span class="meta">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">		<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		b.bMethod();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class B &#123;</span><br><span class="line">	<span class="meta">@Transactional(propagation=Propagation.REQUIRES_NEW)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果<code>aMethod</code>发生异常回滚，<code>bMethod</code>不会跟着回滚，因为<code>bMethod</code>开启了独立的事务。但是，如果<code>bMethod</code>抛出了未被捕获的异常并且这个异常满足事务回滚规则的话，<code>aMethod</code>同样也会回滚。<br>（3）<code>PROPAGATION_NESTED</code><br>如果当前存在事务，就在当前事务内执行；否则，就执行与<code>PROPAGATION_REQUIRED</code>类似的操作。<br>（4）<code>PROPAGATION_MANDATORY</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。<br>（5）<code>PROPAGATION_SUPPORTS</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。<br>（6）<code>PROPAGATION_NOT_SUPPORTED</code><br>以非事务方式运行，如果当前存在事务，则把当前事务挂起。<br>（7）<code>PROPAGATION_NEVER</code><br>以非事务方式运行，如果当前存在事务，则抛出异常。<br>（3、4、5、6、7 这 5 种事务传播方式不常用，了解即可。）</li>
</ul>
<h3 id="43、-Import"><a href="#43、-Import" class="headerlink" title="43、@Import"></a>43、@Import</h3><p><code>@Import</code>注解用于导入一个或多个配置类，可以导入Spring的配置类，也可以导入第三方库的配置类。<br>配置类A：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigA</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将配置类A导入到配置类B中：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigB</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="44、-JsonFormat"><a href="#44、-JsonFormat" class="headerlink" title="44、@JsonFormat"></a>44、@JsonFormat</h3><p>1、用途：用于定义 Java 对象的字段在序列化和反序列化为 JSON 时的格式。常用于日期、时间、数字等字段的格式化。<br>2、用法：可以指定格式模式（如日期格式），时区等。它常用于日期时间字段，以便将 Java Date 或 LocalDateTime 格式化为特定的字符串格式，或将字符串解析回特定格式的日期对象。<br>3、常见属性<br>（1）<code>pattern</code>：定义格式化的模式（如<code>yyyy-MM-dd HH:mm:ss</code>）；<br>（2）<code>timezone</code>：指定时区；<br>（3）<code>shape</code>：指定数据的序列化形状（如<code>JsonFormat.Shape.STRING</code>）。<br>4、示例  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime registrationDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter and Setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：<br>（1）<code>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</code>：指定<code>registrationDate</code>字段在序列化为JSON时的格式为”yyyy-MM-dd HH:mm:ss”，并使用UTC时区。<br>（2）在序列化过程中，LocalDateTime对象将被转换为指定的字符串格式。在反序列化过程中，符合该格式的字符串也将被正确解析为 LocalDateTime对象。  </p>
<h3 id="45、-JsonUnwrapped"><a href="#45、-JsonUnwrapped" class="headerlink" title="45、@JsonUnwrapped"></a>45、@JsonUnwrapped</h3><p>1、用途：<code>@JsonUnwrapped</code>用于将Java对象的嵌套属性“展开”到JSON中，使得嵌套对象的字段直接在父级对象中显示，而不是嵌套为子对象。它主要用于消除JSON嵌套，使得JSON结构更加平坦（扁平化）。<br>2、用法：<code>@JsonUnwrapped</code>常用于那些包含另一个对象的 Java 对象，将嵌套对象的字段直接合并到父级对象的JSON表示中。<br>3、常见属性<br>（1）<code>prefix</code>：为展开的字段添加前缀。<br>（2）<code>suffix</code>：为展开的字段添加后缀。<br>4、示例  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter and Setter methods</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonUnwrapped</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter and Setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：<code>@JsonUnwrapped</code>注解在<code>address</code>字段上。序列化时，<code>address</code>中的字段将直接展开为<code>User</code>的JSON 字段，而不是作为一个嵌套的对象。  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123 Main St&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果没有<code>@JsonUnwrapped</code>注解，默认的JSON输出将是：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123 Main St&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="46、-JsonTypeInfo和-JsonSubTypes"><a href="#46、-JsonTypeInfo和-JsonSubTypes" class="headerlink" title="46、@JsonTypeInfo和@JsonSubTypes"></a>46、@JsonTypeInfo和@JsonSubTypes</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1、应用场景<br>jackson可以将多态类型JSON序列化. 但在反序列化时会因为找不到具体的类而失败。<br>（1）举例<br>创建4个POJO类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTarget</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HiveTarget</span> <span class="keyword">extends</span> <span class="title class_">AbstractTarget</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String schema;</span><br><span class="line">    <span class="keyword">private</span> String table;</span><br><span class="line">    <span class="keyword">private</span> String column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HBaseTarget</span> <span class="keyword">extends</span> <span class="title class_">AbstractTarget</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line">    <span class="keyword">private</span> String table;</span><br><span class="line">    <span class="keyword">private</span> String columnFamily;</span><br><span class="line">    <span class="keyword">private</span> String column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Statistics</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractTarget&gt; targets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeserialize</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">Statistics</span> <span class="variable">statistics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Statistics</span>();</span><br><span class="line">    List&lt;AbstractTarget&gt; targets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    statistics.setTargets(targets);</span><br><span class="line"></span><br><span class="line">    <span class="type">HiveTarget</span> <span class="variable">hiveTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiveTarget</span>();</span><br><span class="line">    hiveTarget.setSchema(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">    hiveTarget.setTable(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    hiveTarget.setColumn(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">    targets.add(hiveTarget);</span><br><span class="line"></span><br><span class="line">    HBaseTarget hBaseTarget= <span class="keyword">new</span> <span class="title class_">HBaseTarget</span>();</span><br><span class="line">    hBaseTarget.setNamespace(<span class="string">&quot;ns2&quot;</span>);</span><br><span class="line">    hBaseTarget.setTable(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    hBaseTarget.setColumnFamily(<span class="string">&quot;cf2&quot;</span>);</span><br><span class="line">    hBaseTarget.setColumn(<span class="string">&quot;c2&quot;</span>);</span><br><span class="line">    targets.add(hBaseTarget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">statisticsStr</span> <span class="operator">=</span> mapper.writeValueAsString(statistics);</span><br><span class="line">    System.out.println(statisticsStr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="type">Statistics</span> <span class="variable">parsedStatistics</span> <span class="operator">=</span> mapper.readValue(statisticsStr, Statistics.class);</span><br><span class="line">    System.out.println(parsedStatistics);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;table&quot;</span><span class="punctuation">:</span><span class="string">&quot;t1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;column&quot;</span><span class="punctuation">:</span><span class="string">&quot;c1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span><span class="string">&quot;ns2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;table&quot;</span><span class="punctuation">:</span><span class="string">&quot;t2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;columnFamily&quot;</span><span class="punctuation">:</span><span class="string">&quot;cf2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;column&quot;</span><span class="punctuation">:</span><span class="string">&quot;c2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.fasterxml.jackson.databind.exc.InvalidDefinitionException<span class="punctuation">:</span> Cannot construct instance of `fresh.json.AbstractTarget` (no Creators<span class="punctuation">,</span> like default constructor<span class="punctuation">,</span> exist)<span class="punctuation">:</span> abstract types either need to be mapped to concrete types<span class="punctuation">,</span> have custom deserializer<span class="punctuation">,</span> or contain additional type information</span><br><span class="line"> at <span class="punctuation">[</span>Source<span class="punctuation">:</span> (String)<span class="string">&quot;&#123;&quot;</span>targets<span class="string">&quot;:[&#123;&quot;</span>schema<span class="string">&quot;:&quot;</span>s1<span class="string">&quot;,&quot;</span>table<span class="string">&quot;:&quot;</span>t1<span class="string">&quot;,&quot;</span>column<span class="string">&quot;:&quot;</span>c1<span class="string">&quot;&#125;,&#123;&quot;</span>namespace<span class="string">&quot;:&quot;</span>ns2<span class="string">&quot;,&quot;</span>table<span class="string">&quot;:&quot;</span>t2<span class="string">&quot;,&quot;</span>columnFamily<span class="string">&quot;:&quot;</span>cf2<span class="string">&quot;,&quot;</span>column<span class="string">&quot;:&quot;</span>c2<span class="string">&quot;&#125;]&#125;&quot;</span>; line<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> column<span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">]</span> (through reference chain<span class="punctuation">:</span> fresh.json.Statistics<span class="punctuation">[</span><span class="string">&quot;targets&quot;</span><span class="punctuation">]</span>-&gt;java.util.ArrayList<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>因此若要正确的反序列化，需要指定具体子类的标识。<br>要想解决该办法，可以使用<code>@JsonTypeInfo</code>和<code>@JsonSubTypes</code>注解。<br>2、解决方式<br>（1）方式一：使用类名作为标识<br>如下：使用类名作为标识符，并将标识符作为属性序列化，属性名称指定为”@class”。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,</span></span><br><span class="line"><span class="meta">        include = JsonTypeInfo.As.PROPERTY, 	</span></span><br><span class="line"><span class="meta">        property = &quot;@class&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">//等于@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS), 另外两个为类名作为标识的默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTarget</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，序列化结果时会自动生成一个“@class”属性，反序列化时就会根据“@class”找到具体的类。  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fresh.json.HiveTarget&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fresh.json.HBaseTarget&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ns2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;columnFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cf2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c2&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>实测发现当直接使用List序列化时（targets）会丢失”@class”属性，嵌套的列表和单独对象都没有这个问题：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">System.out.println(<span class="string">&quot;serializing nested array-------&quot;</span>);</span><br><span class="line">System.out.println(mapper.writeValueAsString(statistics));</span><br><span class="line">System.out.println(<span class="string">&quot;serializing object-------------&quot;</span>);</span><br><span class="line">System.out.println(mapper.writeValueAsString(hiveTarget));</span><br><span class="line">System.out.println(<span class="string">&quot;serializing array--------------&quot;</span>);</span><br><span class="line">System.out.println(mapper.writeValueAsString(targets));</span><br></pre></td></tr></table></figure>
<p>输出结果：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">serializing nested array-------</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fresh.json.HiveTarget&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fresh.json.HBaseTarget&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ns2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;columnFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cf2&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c2&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">serializing object-------------</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;fresh.json.HiveTarget&quot;</span><span class="punctuation">,</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;table&quot;</span><span class="punctuation">:</span><span class="string">&quot;t1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;column&quot;</span><span class="punctuation">:</span><span class="string">&quot;c1&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">serializing array--------------</span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s1&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t1&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ns2&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t2&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;columnFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cf2&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>（2）方式二：使用属性值作为标识<br>使用属性值做为标识，配置较为繁琐，适合类中已经存在标识属性的情况。<br>如下：AbstractTarget存在type属性，并且在两个子类中设置了固定且不同的值，使用@JsonTypeInfo指定type属性作为”类标识“，同时需要使用@JsonSubTypes指定 具体类 和 type属性值 的关系。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,</span></span><br><span class="line"><span class="meta">        include = JsonTypeInfo.As.EXISTING_PROPERTY,</span></span><br><span class="line"><span class="meta">        property = &quot;type&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@JsonSubTypes(&#123;</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(value = HiveTarget.class, name = HiveTarget.TYPE),</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(value = HBaseTarget.class, name = HBaseTarget.TYPE)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTarget</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HiveTarget</span> <span class="keyword">extends</span> <span class="title class_">AbstractTarget</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String schema;</span><br><span class="line">    <span class="keyword">private</span> String table;</span><br><span class="line">    <span class="keyword">private</span> String column;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE</span> <span class="operator">=</span> <span class="string">&quot;hive&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HiveTarget</span><span class="params">()</span>&#123;</span><br><span class="line">        setType(TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HBaseTarget</span> <span class="keyword">extends</span> <span class="title class_">AbstractTarget</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line">    <span class="keyword">private</span> String table;</span><br><span class="line">    <span class="keyword">private</span> String columnFamily;</span><br><span class="line">    <span class="keyword">private</span> String column;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE</span> <span class="operator">=</span> <span class="string">&quot;hbase&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HBaseTarget</span><span class="params">()</span>&#123;</span><br><span class="line">        setType(TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<br/>


<hr>
<br/>



<h1 id="三、Java提供的注解"><a href="#三、Java提供的注解" class="headerlink" title="三、Java提供的注解"></a>三、Java提供的注解</h1><h3 id="1、JSR-175"><a href="#1、JSR-175" class="headerlink" title="1、JSR-175"></a>1、JSR-175</h3><p>这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解，主要包含以下几种标准注解：<br>1、<code>@Deprecated</code>：标识一个程序元素（如：类、方法或字段）已过时，并且在将来的版本中可能会被删除。<br>2、<code>@Override</code>：标识一个方法重写了父类中的方法。<br>3、<code>@SuppressWarnings</code>：抑制编译时产生的警告消息。<br>4、<code>@SafeVarargs</code>：标识一个有安全性警告的可变参数方法。<br>5、<code>@FunctionalInterface</code>：标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。  </p>
<h3 id="2、JSR-250"><a href="#2、JSR-250" class="headerlink" title="2、JSR-250"></a>2、JSR-250</h3><p>这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注释，包括：<br>1、<code>@Resource</code>：标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。<br>2、<code>@PostConstruce</code>：标识一个方法作为初始化方法。<br>3、<code>@PreDestroy</code>：标识一个方法作为销毁方法。<br>4、<code>@Resource.AuthenticationType</code>：标识注入的资源的身份验证类型。<br>5、<code>@RolesAllowed</code>：标识授权角色。<br>6、<code>@RermitAll</code>：标识一个活动无需进行身份验证。<br>7、<code>@DenyAll</code>：标识不提供针对该方法的访问控制。<br>8、<code>@DeclareRoles</code>：声明安全角色。  </p>
<h3 id="3、JSR-269"><a href="#3、JSR-269" class="headerlink" title="3、JSR-269"></a>3、JSR-269</h3><p>这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：<br>1、<code>@SupportedAnnotationTypes</code>：标识注解处理器所处理的注解类型。<br>2、<code>@SupportedSourceVersion</code>：标识注解处理器支持的Java源码版本。  </p>
<h3 id="4、JSR-330"><a href="#4、JSR-330" class="headerlink" title="4、JSR-330"></a>4、JSR-330</h3><p>该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准。<br>1、<code>@Named</code>：标识一个被依赖注入的组件的名词。<br>2、<code>@Inject</code>：标识一个需要被注入的依赖组件。<br>3、<code>@Singleton</code>：标识一个组件的生命周期只有一个唯一的实例。  </p>
<br/>


<hr>
<br/>


<h1 id="四、Spring提供的注解"><a href="#四、Spring提供的注解" class="headerlink" title="四、Spring提供的注解"></a>四、Spring提供的注解</h1><h3 id="1、-Component"><a href="#1、-Component" class="headerlink" title="1、@Component"></a>1、@Component</h3><p>将类声明为Spring组件。  </p>
<h3 id="2、-Controller"><a href="#2、-Controller" class="headerlink" title="2、@Controller"></a>2、@Controller</h3><p><code>@Component</code>衍生注解，用在controller类。  </p>
<h3 id="3、-Service"><a href="#3、-Service" class="headerlink" title="3、@Service"></a>3、@Service</h3><p><code>@Component</code>衍生注解，用在service类。  </p>
<h3 id="4、-Repository"><a href="#4、-Repository" class="headerlink" title="4、@Repository"></a>4、@Repository</h3><p><code>@Component</code>衍生注解，用在dao类。  </p>
<h3 id="5、-Autowired"><a href="#5、-Autowired" class="headerlink" title="5、@Autowired"></a>5、@Autowired</h3><p>按照类型自动注入。  </p>
<h3 id="6、-Qualifier"><a href="#6、-Qualifier" class="headerlink" title="6、@Qualifier"></a>6、@Qualifier</h3><p>与@Autowired一起使用，用于指定注入的bean的名称。  </p>
<h3 id="7、-Resource"><a href="#7、-Resource" class="headerlink" title="7、@Resource"></a>7、@Resource</h3><p>自动注入，支持按名称注入，等于<code>@Autowired</code>和<code>@Qualifier</code>一起使用。  </p>
<h3 id="8、-Value"><a href="#8、-Value" class="headerlink" title="8、@Value"></a>8、@Value</h3><p>用于注入基本类型、String类型和配置文件中的属性值。<br>1、用法<br>（1）注入String类型，直接为字段赋值，无需依赖配置文件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;Hello, World!&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String greeting;</span><br></pre></td></tr></table></figure>
<p>（2）从配置文件注入属性值<br>注意：如果同名属性在多个配置源中存在（如环境变量、配置文件），Spring 会按优先级选择值（如环境变量 &gt; application.yml）。<br>application.properties文件：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.welcomeMessage</span>=<span class="string">Welcome to Spring!</span></span><br></pre></td></tr></table></figure>
<p>或者application.yml文件：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">welcomeMessage:</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Spring!</span></span><br></pre></td></tr></table></figure>
<p>java类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// :号后为默认值</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;app.welcomeMessage:Default Value&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String welcomeMessage;</span><br></pre></td></tr></table></figure>
<p>（3）注入系统环境变量<br>直接读取操作系统环境变量：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemEnvironment[&#x27;JAVA_HOME&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String javaHome;</span><br></pre></td></tr></table></figure>
<p>（4）注入集合类型<br>application.properties文件：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.colors</span>=<span class="string">red,blue,green</span></span><br><span class="line"><span class="attr">app.config</span>=<span class="string">&#123;key1=value1, key2=value2&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;$&#123;app.colors&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span> <span class="comment">// 转换为 List&lt;String&gt;</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; colors;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;$&#123;app.config&#125;&#125;&quot;)</span> <span class="comment">// 转换为 Map&lt;String, String&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>application.yml文件：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表（List/Array）</span></span><br><span class="line"><span class="attr">myapp1:</span></span><br><span class="line">  <span class="attr">hobbies:</span> [<span class="string">爬山</span>, <span class="string">羽毛球</span>, <span class="string">篮球</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射（Map）  </span></span><br><span class="line"><span class="attr">myapp2:</span></span><br><span class="line">  <span class="attr">colors:</span></span><br><span class="line">    <span class="attr">red:</span> <span class="string">&quot;#FF0000&quot;</span></span><br><span class="line">    <span class="attr">blue:</span> <span class="string">&quot;#0000FF&quot;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># 嵌套集合</span></span><br><span class="line"><span class="attr">myapp3:</span></span><br><span class="line">  <span class="attr">nested:</span></span><br><span class="line">    <span class="attr">list:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">item1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">item2</span></span><br><span class="line">    <span class="attr">map:</span></span><br><span class="line">      <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">      <span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="comment">// 从 YAML 注入列表</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;$&#123;myapp1.hobbies&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span>  <span class="comment">// 将逗号分隔的字符串转换为 List</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;$&#123;myapp2.colors&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; colors;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;#&#123;$&#123;myapp3.nested.list&#125;&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; nestedList;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;#&#123;$&#123;myapp3.nested.map&#125;&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, String&gt; nestedMap;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如果 YAML 中未定义某个属性，可以通过 : 指定默认值</span></span><br><span class="line">	<span class="meta">@Value(&quot;#&#123;T(java.util.Collections).emptyList() ?: $&#123;myapp.emptyList&#125;&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; emptyList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）使用SpEL表达式<br>通过SpEL动态计算值：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、SpEL 表达式可能影响性能：复杂的表达式会增加运行时开销。</span></span><br><span class="line"><span class="comment"> * 2、避免过度依赖 SpEL：对于简单场景，优先使用直接属性注入。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="comment">// 引用其他 Bean 的属性</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;someBean.someValue * 2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> doubleValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机数生成</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> randomValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（6）静态字段注入  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigApp</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;greeting:Hello&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String greeting;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// @Value 不支持直接注入静态字段，因为 Spring 容器管理的是 Bean 实例而非类本身。解决方法：</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStaticGreeting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ConfigApp.greeting; <span class="comment">// 通过非静态字段间接获取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、-Scope"><a href="#9、-Scope" class="headerlink" title="9、@Scope"></a>9、@Scope</h3><p>用于指定Spring Bean的作用域。<br>1、<code>@Scope(&quot;singleton&quot;)</code>：默认值，单例模式，整个应用程序中只有一个实例。<br>2、<code>@Scope(&quot;prototype&quot;)</code>：每次请求都会创建一个新的实例。<br>3、<code>@Scope(&quot;request&quot;)</code>：在Web应用中，每个HTTP请求都会创建一个新的实例。<br>4、<code>@Scope(&quot;session&quot;)</code>：在Web应用中，每个HTTP会话都会创建一个新的实例。<br>5、<code>@Scope(&quot;application&quot;)</code>：在Web应用中，整个Web应用程序中只有一个实例。  </p>
<h3 id="10、-PreDestroy"><a href="#10、-PreDestroy" class="headerlink" title="10、@PreDestroy"></a>10、@PreDestroy</h3><p>标识一个方法在Bean销毁之前执行。  </p>
<h3 id="11、-PostConstruct"><a href="#11、-PostConstruct" class="headerlink" title="11、@PostConstruct"></a>11、@PostConstruct</h3><p>标识一个方法在Bean初始化之后执行。  </p>
<h3 id="12、-Configuration"><a href="#12、-Configuration" class="headerlink" title="12、@Configuration"></a>12、@Configuration</h3><p>声明一个类为配置类，示例在<code>@PropertySource</code>中查看。  </p>
<h3 id="13、-ComponentScan"><a href="#13、-ComponentScan" class="headerlink" title="13、@ComponentScan"></a>13、@ComponentScan</h3><p>指定Spring在创建容器时，要扫描的包路径，示例在<code>@PropertySource</code>中查看。  </p>
<h3 id="14、-Bean"><a href="#14、-Bean" class="headerlink" title="14、@Bean"></a>14、@Bean</h3><p>用于把当前方法的返回值作为bean对象存入Spring的IOC容器中，示例在<code>@PropertySource</code>中查看。  </p>
<h3 id="15、-Import"><a href="#15、-Import" class="headerlink" title="15、@Import"></a>15、@Import</h3><p>用于导入其他配置类，当我们使用了Import注解后，有Import注解的类就是主配置类，而被导入的都是子配置类，示例在<code>@PropertySource</code>中查看。  </p>
<h3 id="16、-PropertySource"><a href="#16、-PropertySource" class="headerlink" title="16、@PropertySource"></a>16、@PropertySource</h3><p>用于指定properties配置文件的位置。<br>示例：<br>jdbcConfig.properties配置文件：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p>JdbcConfig配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String driver;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">		dataSource.setDriverClassName(driver);</span><br><span class="line">		dataSource.setUrl(url);</span><br><span class="line">		dataSource.setUsername(username);</span><br><span class="line">		dataSource.setPassword(password);</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 指定当前类为配置文件类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.demo&quot;)</span> <span class="comment">// 指定Spring在创建容器的时候，扫描的包</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span> <span class="comment">// 引入其他配置类</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span> <span class="comment">// 指定properties配置文件的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="comment">// 这里面暂时什么都还没配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO、文件流</title>
    <url>/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h1><h3 id="1、概念解释"><a href="#1、概念解释" class="headerlink" title="1、概念解释"></a>1、概念解释</h3><p><code>File</code>是<code>java.io</code>包下的类，File类创建的对象代表操作系统中的文件或文件夹，只能操作文件或者文件夹，例如：<br>（1）新建一个文件或者文件夹；<br>（2）复制粘贴文件或者文件夹；<br>（3）删除文件或者空文件夹；<br>（4）获取文件信息；<br>（5）判断文件类型等等。<br><strong>注意：</strong><br><code>File</code>类是不能对文件里面的内容进行操作的（读或写）！想要操作文件里面的内容就得使用<code>io</code>流！  </p>
<h3 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 创建一个 File 对象，代表某个文件</span></span><br><span class="line">		<span class="comment">// 使用绝对路径创建，在 D 盘下的 fileOne 文件夹下创建一个 fileOne.txt 文件</span></span><br><span class="line">		<span class="comment">// windows中默认识别是\，linux和mac是/</span></span><br><span class="line">		<span class="comment">// 使用正斜杠方式</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileOne1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/fileOne/fileOne1.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 使用反斜杠方式</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileOne2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\fileOne\\fileOne2.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 使用系统变量方式</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileOne3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;fileOne&quot;</span> + File.separator + <span class="string">&quot;fileOne3.txt&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断文件是否存在</span></span><br><span class="line">		fileOne1.exists();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取文件大小，如果 fileOne1 为文件夹，返回的大小是文件夹自身的大小（不包含文件夹里面所有文件的大小）</span></span><br><span class="line">		fileOne1.length();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 如果项目名称为 demo，文件所在目录为：D:/a/b/demo/src/file.txt（demo就是项目）</span></span><br><span class="line">		<span class="comment">// 使用绝对路径获取 file.txt 文件对象</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileTwo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/a/b/demo/src/file.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 使用相对路径获取 file.txt 文件对象</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileTwo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/file.txt&quot;</span>);</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">		 * 注意：</span></span><br><span class="line"><span class="comment">		 * 1、在使用相对路径之前，必须先查看自己的工作目录；</span></span><br><span class="line"><span class="comment">		 * 2、使用 System.getProperty(&quot;user.dir&quot;) 查看工作目录；</span></span><br><span class="line"><span class="comment">		 * 3、如果工作目录不包含项目名称，使用相对路径的时候就在 src 前面加上项目名称；</span></span><br><span class="line"><span class="comment">		 * 4、如果工作目录包含了项目名称，就直接从 src 开始，例如上面的例子改成：src/file.txt</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断当前文件对象是否是文件</span></span><br><span class="line">		fileOne1.isFile();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断当前文件对象是否是文件夹</span></span><br><span class="line">		fileOne1.isDirectory();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取文件名称（包含后缀）</span></span><br><span class="line">		fileOne1.getName();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取文件最后修改时间（时间戳）</span></span><br><span class="line">		fileOne1.lastModified();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取创建文件对象时，使用的路径</span></span><br><span class="line">		fileOne1.getPath();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取文件绝对路径</span></span><br><span class="line">		fileOne1.getAbsolutePath();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建一个新的文件，创建成功返回 true</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileThree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/fileThree.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 如果文件已经存在，创建失败，返回 false</span></span><br><span class="line">		fileThree.createNewFile();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建文件夹，只创建一级文件夹</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileDirOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/fileDirOne&quot;</span>);</span><br><span class="line">		<span class="comment">// 如果文件夹已经存在，则不会创建，如果上级文件夹也不存在，也不会创建，返回false</span></span><br><span class="line">		fileDirOne.mkdir(); <span class="comment">// 创建单级目录</span></span><br><span class="line">		<span class="comment">// 如果 test 目录不存在，会创建失败</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileDirTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/test/fileDirTwo&quot;</span>);</span><br><span class="line">		fileDirTwo.mkdir();</span><br><span class="line">		<span class="comment">// 如果想要成功，就使用，意思就是会将demo、src、test、fileDirThree都创建出来</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileDirThree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/test/fileDirThree&quot;</span>);</span><br><span class="line">		fileDirThree.mkdirs(); <span class="comment">// 创建多级目录</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 删除文件或者空文件夹</span></span><br><span class="line">		fileOne1.delete();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取当前目录下所有的一级文件名</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">fileSrc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src&quot;</span>);</span><br><span class="line">		<span class="comment">// 下面是返回 src 目录下的所有一级文件的文件名</span></span><br><span class="line">		String[] fileSrcNames = fileSrc.list();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取当前目录下所有的一级文件对象</span></span><br><span class="line">		File[] fileSrcFiles = fileSrc.listFiles();</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 使用 listFiles 方法时的注意事项：</span></span><br><span class="line"><span class="comment">		 * 1、当调用 listFiles 方法的对象是文件或者路径不存在时，返回 null；</span></span><br><span class="line"><span class="comment">		 * 2、当调用的对象是空文件夹，返回一个长度为 0 的数组；</span></span><br><span class="line"><span class="comment">		 * 3、当调用的对象是非空文件夹，并且存在隐藏文件，隐藏文件也会返回；</span></span><br><span class="line"><span class="comment">		 * 4、当调用的对象是非空文件夹，但是没有权限访问该文件夹时，会返回 null。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、案例"><a href="#3、案例" class="headerlink" title="3、案例"></a>3、案例</h3><p>1、文件搜索（使用递归）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 测试</span></span><br><span class="line">		searchFile(<span class="string">&quot;D:/&quot;</span>, <span class="string">&quot;xxx.txt&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * dir：要搜索的路径</span></span><br><span class="line"><span class="comment">	 * fileName：要搜索的文件名</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchFile</span><span class="params">(File dir, String fileName)</span> &#123;</span><br><span class="line">		<span class="comment">// 处理非法路径</span></span><br><span class="line">		<span class="keyword">if</span> (dir == <span class="literal">null</span> || !dir.exists() || dir.isFile()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 获取当前目录下的所有一级文件对象</span></span><br><span class="line">		File[] files = dir.listFiles();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断当前目录是否是空目录</span></span><br><span class="line">		<span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// 遍历所有一级文件对象</span></span><br><span class="line">			<span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">				<span class="comment">// 判断当前文件对象是文件还是文件夹</span></span><br><span class="line">				<span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">					<span class="comment">// 判断当前文件是否是我们要搜索的文件</span></span><br><span class="line">					<span class="keyword">if</span> (f.getName().contains(fileName)) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;找到了！&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// 当前文件对象为文件夹，递归调用</span></span><br><span class="line">					searchFile(f, fileName);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、文件复制  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制照片</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="comment">// 需要复制的照片地址</span></span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/resource/xxx.png&quot;</span>);</span><br><span class="line">			<span class="comment">// 需要粘贴的照片地址</span></span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/data/xxx.png&quot;</span>);</span><br><span class="line">		) &#123;</span><br><span class="line">			<span class="comment">// 创建一个字节数组，用来一次性读取多个字节</span></span><br><span class="line">			<span class="comment">// 一次性读取1024个字节，相当于1KB的字节</span></span><br><span class="line">			<span class="type">byte</span>[] buffer <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="comment">// 定义 len 代表读取的字节长度</span></span><br><span class="line">			<span class="type">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;复制完成！&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h1><h3 id="1、概念解释-1"><a href="#1、概念解释-1" class="headerlink" title="1、概念解释"></a>1、概念解释</h3><p>1、字符集<br>（1）标准的ASCII使用1个字节存储一个字符，字节第一位为0，例如：a、A、1……，总共可表示128个字符，对英文使用者已经够用了，但是对于中文是远远不够的。<br>例如：“abc”的字节表示：<code>0xxxxxxx(a) 0xxxxxxx(b) 0xxxxxxx(c)</code>。<br>（2）GBK（汉字编码字符集），包含了2万多个汉字等字符，一个中文字符编码成两个字节存储，并且规定汉字的第一个字节的第一位必须是1，兼容了ASCII字符集。<br>例如：“我a你”的字节表示：<code>1xxxxxxx xxxxxxxx(我) 0xxxxxxx(a) 1xxxxxxx xxxxxxxx(你)</code>。<br>（3）Unicode（统一码字符集），是国际组织制定的，可以容纳世界上所有文字、符号的字符集。  </p>
<ul>
<li>UTF-32，四个字节表示一个字符，例如：“a”本来只需一个字节<code>0xxxxxxx</code>，这里需要<code>00000000 00000000 00000000 0xxxxxxx</code>，占存储空间，通信效率低；  </li>
<li>UTF-8，可变编码方案，共分四个长度区：1个字节、2个字节、3个字节、4个字节。英文字符、数字等只占1个字节，汉字字符占3个字节。<br>UTF-8编码方式：<br>1个字节：0xxxxxxx；<br>2个字节：110xxxxx 10xxxxxx；<br>3个字节：1110xxxx 10xxxxxx 10xxxxxx；<br>4个字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。<br>例如：a我m（01100001 1110xxxx 10xxxxxx 10xxxxxx 01101101）<br>a：01100001（97），我：110 001000 010001（25105），m：01101101（109）<br>它会将“我”中的前三位“110”填入“1110xxxx”中变为“11100110”，将“001000”填入“10xxxxxx”中变为“10001000”，将“010001”填入“10xxxxxx”中变为“10010001”。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a我b&quot;</span>;</span><br><span class="line">		<span class="comment">// 默认使用 utf8 </span></span><br><span class="line">		<span class="type">byte</span>[] bytes = s1.getBytes();</span><br><span class="line">		System.out.println(Arrays.toString(bytes));</span><br><span class="line">		<span class="comment">// 输出 [97, -26, -120, -111, 98]，为什么中间三个为负数，因为3个字节第一个都是1，1在二进制中为负</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 解码</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">		System.out.println(s2);</span><br><span class="line">		<span class="comment">// 输出 a我b</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
2、IO流<br>用于读写数据的（可以读写文件、网络中的数据……）。  <img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/1.png" class="">  
<code>输入流</code>：数据从数据源（文件）到程序（内存）的路径。<br><code>输出流</code>：数据从程序（内存）到数据源（文件）的路径。<br>例如：把程序（内存）当作自己大脑，把数据源（文件）当作书本，看书就是学习知识，输入到自己大脑，写作就是输出到书本上。<br>（1）IO流的分类  <img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/2.png" class="">
（2）IO流体系<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/3.png" class=""></li>
</ul>
<h3 id="2、FileInputStream（文件字节输入流）"><a href="#2、FileInputStream（文件字节输入流）" class="headerlink" title="2、FileInputStream（文件字节输入流）"></a>2、FileInputStream（文件字节输入流）</h3><p>1、作用：将磁盘文件中的数据以字节的形式读入到内存中去。  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/4.png" class="">  
<p>2、代码<br>（1）一个字节一个字节读取  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 第一种方式创建文件字节输入流管道</span></span><br><span class="line">		<span class="comment">// 在使用相对路径之前先查看工作目录，详细查看上面 File 章节</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 这里运用了多态的特性，向上转型</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">isOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 第二种创建方式，第一种方式的简化版</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">isTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 第三种创建方式是最简化形式，推荐</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">		<span class="comment">// 假如 test.txt 文件内容为 abc</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> is.read();</span><br><span class="line">		System.out.println(a); <span class="comment">// 输出 97</span></span><br><span class="line">		System.out.println((<span class="type">char</span>) a) <span class="comment">// 输出 a</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 继续读取 b</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> is <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">		System.out.println((<span class="type">char</span>) b) <span class="comment">// 输出 b</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 继续读取 c</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> is <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">		System.out.println((<span class="type">char</span>) c) <span class="comment">// 输出 c</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 继续读取</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> is.read();</span><br><span class="line">		System.out.println(i) <span class="comment">// 输出 -1</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 关闭流</span></span><br><span class="line">		is.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：上面代码如果test文件内容有很多个，那就得写很多行读取代码，不可取，修改简化代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 这是 java7 新出的特性，将需要关闭的写入括号中，会自动执行关闭方法，就不用再 finally 处关闭了</span></span><br><span class="line">		<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 定义 i 用来接收读取的返回值，如果读取的返回值不为 -1，说明还有内容</span></span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			<span class="keyword">while</span>((i = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">				System.out.println((<span class="type">char</span>) i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：上面代码虽然改造完成了，但是还是存在问题，因为它是一个字节一个字节的读取，读取性能很差，以及不能读取汉字文本！<br>（2）一次性读取多个字节<br>本来是一个字节一个字节的读取，现在我们可以使用<code>byte</code>数组来增加读取的字节数。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 定义 byte 数组，来增加读取的字节数，本来是一个，下面变成三个三个的读取</span></span><br><span class="line">			<span class="type">byte</span>[] buffer <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">			<span class="comment">// 定义 len 用来表示读取的字节长度</span></span><br><span class="line">			<span class="type">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：上面的代码性能得到了提升，但是依然不能读取汉字文本（注意：上面3个字节3个字节读取汉字文本没有出现乱码，是因为巧合，因为汉字是三个字节表示的，而我们刚好使用3个字节读取，正好把汉字读取出来了）！<br>（3）一次性读取全部字节<br>第一种方式：（只能读取相对小的文件，如果读取大的文件会有问题）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			<span class="comment">// 获取文件大小</span></span><br><span class="line">			<span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> f.length();</span><br><span class="line">			<span class="comment">// 这里大转小，存在精度问题</span></span><br><span class="line">			<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) size];</span><br><span class="line">			is.read(buffer);</span><br><span class="line">			System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer));</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二种方式：（必须java9以上才能使用）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="type">byte</span>[] buffer = is.readAllBytes();</span><br><span class="line">			is.read(buffer);</span><br><span class="line">			System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer));</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、FileOutputStream（文件字节输出流）"><a href="#3、FileOutputStream（文件字节输出流）" class="headerlink" title="3、FileOutputStream（文件字节输出流）"></a>3、FileOutputStream（文件字节输出流）</h3><p>1、作用：把内存中的数据以字节的形式写出到文件中去。  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/5.png" class="">  
<p>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 默认为覆盖内容</span></span><br><span class="line">		<span class="comment">// 如果想要追加内容形式，就使用下面注释的</span></span><br><span class="line">		<span class="comment">// OutputStream os = new FileOutputStream(&quot;demo/src.test.txt&quot;, true);</span></span><br><span class="line">		<span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 一次只能写入一个字节</span></span><br><span class="line">			os.write(<span class="number">97</span>); <span class="comment">// 写入一个字节，为a</span></span><br><span class="line">			os.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 写入一个字节，为b</span></span><br><span class="line">			<span class="comment">// os.write(&#x27;我&#x27;); // 出现乱码，因为汉字“我”是用三个字节表示的，但是写入只能写入一个字节，所以把“我”的第一个字节写入，成了乱码</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 换行</span></span><br><span class="line">			os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 一次性写入多个字节</span></span><br><span class="line">			<span class="type">byte</span>[] bytes = <span class="string">&quot;wo我爱你abc123&quot;</span>;</span><br><span class="line">			os.write(bytes); <span class="comment">// 直接写入“wo我爱你abc123”</span></span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、FileReader（文件字符输入流）"><a href="#4、FileReader（文件字符输入流）" class="headerlink" title="4、FileReader（文件字符输入流）"></a>4、FileReader（文件字符输入流）</h3><p>可以读取汉字文本。<br>1、作用：可以把文件中的数据以字符的形式输入到内存中去（字符：“ab我爱你1”中“a”、“b”、“我”、“爱”、“你”、“1”都是一个字符）。  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/6.png" class="">  
<p>2、代码<br>（1）每次只读取一个字符  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 定义 i 用来表示读取的字符编码，例如读取a字符，那i就是97</span></span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			<span class="keyword">while</span>((i = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">				System.out.println((<span class="type">char</span>) i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：每次只读取一个字符，性能是很差的！<br>（2）一次性读取多个字符  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 定义 char 数组，增加读取的字符数，注意：这里不是 byte！是 char！</span></span><br><span class="line">			<span class="comment">// 每次读取 3 个字符</span></span><br><span class="line">			<span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">3</span>];</span><br><span class="line">			<span class="type">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = fr.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、FileWriter（文件字符输出流）"><a href="#5、FileWriter（文件字符输出流）" class="headerlink" title="5、FileWriter（文件字符输出流）"></a>5、FileWriter（文件字符输出流）</h3><p>1、作用：把内存中的数据以字符的形式写出到文件中去。  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/7.png" class="">  
<p>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 追加内容请使用下面注释的</span></span><br><span class="line">		<span class="comment">// Writer fw = new FileWriter(&quot;demo/src/test.txt&quot;, true);</span></span><br><span class="line">		<span class="keyword">try</span> (<span class="type">Writer</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			fw.write(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 将字符a写入到test.txt</span></span><br><span class="line">			fw.write(<span class="number">97</span>); <span class="comment">// 将编码为97的字符写入到test.txt</span></span><br><span class="line">			fw.write(<span class="string">&#x27;我&#x27;</span>); <span class="comment">// 将‘我’写入到test.txt</span></span><br><span class="line">			fw.write(<span class="string">&quot;我爱你中国abc&quot;</span>); <span class="comment">// 将“我爱你中国abc”写入到test.txt</span></span><br><span class="line">			fw.write(<span class="string">&quot;我爱你中国abc&quot;</span>, <span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 将“我爱你中国abc”中的前5个字符“我爱你中国”写入到test.txt</span></span><br><span class="line">			</span><br><span class="line">			fw.write(<span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 将buffer数组写入到test.txt</span></span><br><span class="line">			<span class="type">char</span>[] buffer = &#123;<span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>, <span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">			fw.write(buffer);</span><br><span class="line">			fw.write(buffer, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 将buffer数组中下标为0的，长度为3的数组&#123;&#x27;我&#x27;, &#x27;爱&#x27;, &#x27;你&#x27;&#125;写入到test.txt</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：字符输出流写出数据后，必须刷新流，或者关闭流，写出的数据才能生效！！！！<br>原因：因为字符输出流在写入数据时，它会开辟一小块内存，然后每次写入字符时，会先写入到这块内存，等这块内存满了之后再写入文件（这里它会自动执行刷新和关闭）。  </p>
<h3 id="6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）"><a href="#6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）" class="headerlink" title="6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）"></a>6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）</h3><p>1、作用：提高流的读写数据的性能，字节缓冲流默认自带了8KB缓冲池。<br>2、概念解释（为什么要使用字节缓冲流？）<br>（1）没使用字节缓冲流的时候  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/8.png" class="">  
<p>说明：我们需要将D盘的某大小为16KB的文件复制到C盘，我们使用字节输入流，并使用了1KB的byte数组来提高性能，也就是说，输入流每次从16KB读取1KB到字节数组中，然后调用系统将字节数组中的1KB读入到内存，这样需要调用系统16次，同理输出流也要调用系统16次，一共32次。<br>（2）使用了字节缓冲流  </p>
<img src="/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/9.png" class="">  
<p>说明：使用了字节缓冲流之后，我们会将字节输入&#x2F;输出流包装起来，会加一个8KB大小的缓冲区，同样我们使用1KB的byte数组来读取16KB大小的文件，首先输入流会从16KB文件，每次读取1KB，放入8KB的缓冲区，等8KB满了，再调用系统，这样只用调用2次系统，同理输出流也只调用了2次，一共4次，大大提高了系统的性能。<br>3、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			<span class="comment">// 定义字节缓冲输入流</span></span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;demo/src/test_copy.txt&quot;</span>);</span><br><span class="line">			<span class="comment">// 定义字节缓冲输出流</span></span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">		) &#123;</span><br><span class="line">			<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="type">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;复制成功！&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、BufferedReader（字符缓冲输入流）"><a href="#7、BufferedReader（字符缓冲输入流）" class="headerlink" title="7、BufferedReader（字符缓冲输入流）"></a>7、BufferedReader（字符缓冲输入流）</h3><p>原理那些同<code>BufferedInputStream</code>字节缓冲输入流。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 创建一个字符缓冲输入流</span></span><br><span class="line">			<span class="comment">// 注意：这里不能使用向上转型，因为使用了向上转型，就不能使用子类本身的方法（父类中没有，子类有的）</span></span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">		) &#123;</span><br><span class="line">			<span class="comment">// 方式一</span></span><br><span class="line">			<span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="type">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = br.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 方式二</span></span><br><span class="line">			<span class="comment">// 定义 line，用来记住读取的一行数据</span></span><br><span class="line">			String line;</span><br><span class="line">			<span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、BufferedWriter（字符缓冲输出流）"><a href="#8、BufferedWriter（字符缓冲输出流）" class="headerlink" title="8、BufferedWriter（字符缓冲输出流）"></a>8、BufferedWriter（字符缓冲输出流）</h3><p>原理同<code>BufferedOutputStream</code>字节缓冲输出流，注意：字符输出流在输出时也会自己开辟一小块内存，但是这块内存太小了。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="type">Writer</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			<span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">		) &#123;</span><br><span class="line">			bw.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">			bw.write(<span class="number">97</span>);</span><br><span class="line">			bw.write(<span class="string">&#x27;我&#x27;</span>);</span><br><span class="line">			bw.newLine(); <span class="comment">// 换行</span></span><br><span class="line">			bw.write(<span class="string">&quot;我爱你中国abc1&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、InputStreamReader（字符输入转换流）"><a href="#9、InputStreamReader（字符输入转换流）" class="headerlink" title="9、InputStreamReader（字符输入转换流）"></a>9、InputStreamReader（字符输入转换流）</h3><p>1、作用：解决不同编码时，字符流读取文本内容乱码的问题。<br>2、思路：先获取文件的原始字节流（<strong>注意：</strong>是字节流），再将其按真实的字符集编码转成字符输入流，这样字符输入流中的字符就不乱码了。<br>3、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="comment">// 得到文件原始字节流（GBK）编码格式</span></span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			<span class="comment">// 将原始的字节输入流按照指定的字符集编码格式转换成字符输入流</span></span><br><span class="line">			<span class="type">Reader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">			<span class="comment">// 使用缓冲流</span></span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">		) &#123;</span><br><span class="line">			String line;</span><br><span class="line">			<span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10、OutputStreamWriter（字符输出转换流）"><a href="#10、OutputStreamWriter（字符输出转换流）" class="headerlink" title="10、OutputStreamWriter（字符输出转换流）"></a>10、OutputStreamWriter（字符输出转换流）</h3><p>1、作用：可以控制写出去的字符使用什么字符集编码。<br>2、思路：获取字节输出流（<strong>注意：</strong>是字节流），再按照指定的字符集编码将其转换成字符输出流，以后写出去的字符就会用该字符集编码。<br>3、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (</span><br><span class="line">			<span class="comment">// 创建一个文件字节输出流</span></span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>);</span><br><span class="line">			<span class="comment">// 把原始的字节输出流，按照指定的字符集编码转换成字符输出流</span></span><br><span class="line">			<span class="type">Writer</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">			<span class="comment">// 使用缓冲流</span></span><br><span class="line">			<span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">		) &#123;</span><br><span class="line">			bw.write(<span class="string">&quot;我是中国人abc1&quot;</span>);</span><br><span class="line">			bw.write(<span class="string">&quot;我是中国人abc1&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11、PrintStream、PrintWriter（打印流）"><a href="#11、PrintStream、PrintWriter（打印流）" class="headerlink" title="11、PrintStream、PrintWriter（打印流）"></a>11、PrintStream、PrintWriter（打印流）</h3><p>1、作用：实现输出什么就是什么，例如之前输出97到文件中，文件中显示的是a，因为a的字符编码是97，而使用打印流，输出97，就是97。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：打印流自带了缓冲池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// PrintStream 和 PrintWriter 使用是相同的</span></span><br><span class="line">		<span class="comment">// 创建一个以 GBK 编码格式的打印流</span></span><br><span class="line">		<span class="comment">// PrintStream ps = new PrintStream(&quot;demo/src/test.txt&quot;, &quot;GBK&quot;);</span></span><br><span class="line">		<span class="comment">// 默认是覆盖模式，如果想要追加模式，则使用下面的注释</span></span><br><span class="line">		<span class="comment">// PrintStream ps = new PrintStream(new FileInputStream(&quot;demo/src/test.txt&quot;, true));</span></span><br><span class="line">		<span class="keyword">try</span> (<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			ps.println(<span class="number">97</span>); <span class="comment">// 输出到test文件为97</span></span><br><span class="line">			ps.println(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 输出到test文件为a</span></span><br><span class="line">			ps.println(<span class="string">&quot;我爱你中国abc1&quot;</span>); <span class="comment">// 输出到test文件为我爱你中国abc1</span></span><br><span class="line">			ps.println(<span class="literal">true</span>); <span class="comment">// 输出到test文件为true</span></span><br><span class="line">			ps.print(<span class="number">99.5</span>);<span class="comment">// 输出到test文件为99.5</span></span><br><span class="line">			ps.println(); <span class="comment">// 输出到test文件为换行</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 它也可以像输出流一样使用write方法输出</span></span><br><span class="line">			ps.write(<span class="number">97</span>); <span class="comment">// 输出到test文件为a，因为a的字符编码为97</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、PrintStream和PrintWriter的区别<br>（1）打印数据的功能是相同的；<br>（2）PrintStream继承自字节输出流OutputStream，因此支持写字节数据的方法；<br>（3）PrintWriter继承自字符输出流Writer，因此支持写字符数据的方法。<br>4、打印流的应用场景<br>输出语句的重定向，也就是可以把输出语句的打印位置改到某个文件中去，相当于日志的功能。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 下面四行是输出到控制台</span></span><br><span class="line">		System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 我们想把上面四行输出到某个文件查看</span></span><br><span class="line">		<span class="keyword">try</span> (<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 把系统默认的打印流对象设置成自己创建的打印流对象</span></span><br><span class="line">			System.setOut(ps);</span><br><span class="line">			System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">			<span class="comment">// 这样上面四行就会输出到 demo/src/test.txt 文件中</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12、DataOutputStream（数据输出流）"><a href="#12、DataOutputStream（数据输出流）" class="headerlink" title="12、DataOutputStream（数据输出流）"></a>12、DataOutputStream（数据输出流）</h3><p>1、作用：把数据和数据类型一起写出去。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			dos.writeInt(<span class="number">123</span>); <span class="comment">// 写一个int类型的数据</span></span><br><span class="line">			dos.writeDouble(<span class="number">123.45</span>); <span class="comment">// 写一个double类型的数据</span></span><br><span class="line">			dos.writeBoolean(<span class="literal">true</span>); <span class="comment">// 写一个boolean类型的数据</span></span><br><span class="line">			dos.writeUTF(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 写一个字符串类型的数据</span></span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class="line"><span class="comment">			 * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13、DataInputStream（数据输入流）"><a href="#13、DataInputStream（数据输入流）" class="headerlink" title="13、DataInputStream（数据输入流）"></a>13、DataInputStream（数据输入流）</h3><p>1、作用：用于读取数据输出流写出去的数据。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 注意：</span></span><br><span class="line"><span class="comment">			 * 这里读取的数据和写出去的数据的顺序要一致！</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">			<span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> dis.readDouble();</span><br><span class="line">			<span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line">			<span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">			System.out.println(a);</span><br><span class="line">			System.out.println(b);</span><br><span class="line">			System.out.println(c);</span><br><span class="line">			System.out.println(d);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、ObjectOutputStream（对象字节输出流）"><a href="#14、ObjectOutputStream（对象字节输出流）" class="headerlink" title="14、ObjectOutputStream（对象字节输出流）"></a>14、ObjectOutputStream（对象字节输出流）</h3><p>1、作用：可以把java对象进行序列化，将java对象存入到文件中去。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 创建一个java对象，注意这个java对象必须要实现 Serializable 接口！</span></span><br><span class="line">		<span class="comment">// zs123 是密码</span></span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;zs123&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 将 p 对象写入到test.txt文件中</span></span><br><span class="line">			oos.writeObject(p);</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class="line"><span class="comment">			 * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：在序列化java对象时，如果不想对象中某个属性序列化，就在java对象实体类中找到那个属性，在那个属性之前加上关键字<code>transient</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="comment">// 加上 transient 关键字，表示不序列化</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> String pwd;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、问题<br>（1）如果要一次序列化多个对象，怎么办？<br>答：用一个ArrayList集合存储多个对象，然后直接对集合进行序列化就可以（注意：ArrayList集合已经实现了序列化接口）。  </p>
<h3 id="15、ObjectInputStream（对象字节输入流）"><a href="#15、ObjectInputStream（对象字节输入流）" class="headerlink" title="15、ObjectInputStream（对象字节输入流）"></a>15、ObjectInputStream（对象字节输入流）</h3><p>1、作用：可以把java对象进行反序列化，将存储在文件中的java对象读入到内存中来。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="string">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class="line">			<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">			System.out.println(p);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常用api方法</title>
    <url>/2024/01/16/Java-%E5%B8%B8%E7%94%A8api%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号"><a href="#一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号" class="headerlink" title="一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)"></a>一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)</h1><p>这个问题需要考虑以下几个方面：<br>1、获取到当前的年月份；<br>2、要去数据库查询是否存在流水号数据；<br>3、存在就获取最大的那个流水号，实现自增加1的效果；<br>4、不存在就要生成新的流水号，并且存入数据库；<br>实现的代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">generateOddNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newOddNum</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 获取当前时间</span></span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now(); </span><br><span class="line">	</span><br><span class="line">     <span class="comment">// 格式化当前时间</span></span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> now.format(formatter);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前最大的订单号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">maxOddNum</span> <span class="operator">=</span> findMaxOrderNo(prefix); </span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (maxOddNum != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里需要将自增后的数字按照“xxx”的格式，格式化成例如“001”这种</span></span><br><span class="line">        newOddNum = prefix + String.format(<span class="string">&quot;%03d&quot;</span>,(Integer.parseInt(maxOddNum.substring(<span class="number">8</span>)) + <span class="number">1</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newOddNum = prefix + <span class="string">&quot;001&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newOddNum ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="二、身份证显示前3后4中间"><a href="#二、身份证显示前3后4中间" class="headerlink" title="二、身份证显示前3后4中间*"></a>二、身份证显示前3后4中间*</h1><p>方法一：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用密码对称加减密算法</span></span><br><span class="line"><span class="comment"> * 此处还会处理身份证加密，前三后四，输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AESEncyptUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 加密密码，因为后面会替换成国密算法，简单点实现此算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(<span class="string">&quot;qasw@TYU^967/fht&quot;</span>.getBytes(StandardCharsets.UTF_8),<span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ciper非线程安全对象，不能共用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE,keySpec);</span><br><span class="line">            <span class="type">byte</span>[] data = cipher.doFinal(source.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE,keySpec);</span><br><span class="line">            <span class="type">byte</span>[] data = cipher.doFinal(Base64.getDecoder().decode(source));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(data,StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理身份证，保留前三后四，中间全部替换成星号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIdentyCardPartCode</span><span class="params">(String identyCardCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(identyCardCode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前三后四原则</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.&#123;3&#125;)(.*?)(.&#123;4&#125;$)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(identyCardCode);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> matcher.group(<span class="number">3</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            builder.append(s1);</span><br><span class="line">            builder.append(s2.replaceAll(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;*&quot;</span>));</span><br><span class="line">            builder.append(s3);</span><br><span class="line">            <span class="keyword">return</span> builder.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCardUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MASK_CHAR</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_LENGTH</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_LENGTH</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将身份证号码只显示前3后4位，其它用*号来表示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idCard 身份证号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的身份证号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">maskIDCard</span><span class="params">(String idCard)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idCard == <span class="literal">null</span> || idCard.length() &lt; MIN_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> idCard;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(idCard.substring(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; idCard.length() - <span class="number">4</span>; i++) &#123;</span><br><span class="line">            sb.append(MASK_CHAR);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(idCard.substring(idCard.length() - <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将身份证号码完全显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idCard 身份证号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的身份证号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">showIDCard</span><span class="params">(String idCard)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将身份证号码变回*号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idCard 身份证号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的身份证号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hideIDCard</span><span class="params">(String idCard)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maskIDCard(idCard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>



<h1 id="三、Collections-工具类"><a href="#三、Collections-工具类" class="headerlink" title="三、Collections 工具类"></a>三、Collections 工具类</h1><p><code>Collections</code> 是一个操作<code>Set，List，Map</code>等的集合工具类，位于<code>java.util</code>包下（在<code>rt.jar</code>包中）。  </p>
<h3 id="1、将元素添加到list"><a href="#1、将元素添加到list" class="headerlink" title="1、将元素添加到list"></a>1、将元素添加到list</h3><p><code>public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code>：将elements元素添加到c中。<br>1、例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统添加方式</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;元素1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;元素2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;元素3&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;元素4&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;元素5&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用:Collections.addAll()</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(list, <span class="string">&quot;元素1&quot;</span>, <span class="string">&quot;元素2&quot;</span>, <span class="string">&quot;元素3&quot;</span>, <span class="string">&quot;元素4&quot;</span>, <span class="string">&quot;元素5&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组添加到list 中</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;元素1&quot;</span>, <span class="string">&quot;元素2&quot;</span>, <span class="string">&quot;元素3&quot;</span>, <span class="string">&quot;元素4&quot;</span>, <span class="string">&quot;元素5&quot;</span>&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(list, arr);</span><br></pre></td></tr></table></figure>
<p>2、<code>Collections.addAll()</code>和<code>list.addAll()</code>的区别  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Collections.addAll()</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;元素1&quot;</span>, <span class="string">&quot;元素2&quot;</span>, <span class="string">&quot;元素3&quot;</span>, <span class="string">&quot;元素4&quot;</span>, <span class="string">&quot;元素5&quot;</span>&#125;;</span><br><span class="line"> ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> Collections.addAll(list, arr);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// list.addAll()</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;元素1&quot;</span>, <span class="string">&quot;元素2&quot;</span>, <span class="string">&quot;元素3&quot;</span>, <span class="string">&quot;元素4&quot;</span>, <span class="string">&quot;元素5&quot;</span>&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.addAll(Arrays.asList(arr));</span><br></pre></td></tr></table></figure>
<p>可以看出：<br>（1）<code>list.addAll()</code>在添加数组的时候，需要先对数组进行处理转换成<code>list</code>；<br>（2）<code>list.addAll()</code>无法直接添加多个元素，需要将多个元素转换成<code>list</code>；<br>（3）<code>Collections.addAll()</code>是静态方法，<code>list.add()</code>是实例方法。</p>
<h3 id="2、List重排"><a href="#2、List重排" class="headerlink" title="2、List重排"></a>2、List重排</h3><p><code>public static void shuffle(List&lt;?&gt; list)</code>：对<code>list</code>中的所有元素打乱顺序，重排。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建一个List 集合</span></span><br><span class="line">		List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用Collections的addAll()方法</span></span><br><span class="line">		Collections.addAll(numbers, <span class="number">3</span>,<span class="number">34</span>,<span class="number">345</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;原集合：&quot;</span> + numbers);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 重排顺序</span></span><br><span class="line">		Collections.shuffle(numbers);</span><br><span class="line">		System.out.println(<span class="string">&quot;重排顺序之后集合：&quot;</span> + numbers);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、自然排序（升序排序）"><a href="#3、自然排序（升序排序）" class="headerlink" title="3、自然排序（升序排序）"></a>3、自然排序（升序排序）</h3><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：根据元素的自然顺序，对指定列表按升序进行排序。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Person类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;     </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;     </span><br><span class="line">     &#125;      </span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建一个字符串List 集合</span></span><br><span class="line">		List&lt;String&gt; stringDemo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		stringDemo.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">		stringDemo.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		stringDemo.add(<span class="string">&quot;wolrd&quot;</span>);</span><br><span class="line">		stringDemo.add(<span class="string">&quot;all&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;原集合&quot;</span> + stringDemo);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用排序算法</span></span><br><span class="line">		Collections.sort(stringDemo);</span><br><span class="line">		System.out.println(<span class="string">&quot;排序之后&quot;</span>+stringDemo);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建一个自定义类型的List 集合</span></span><br><span class="line">		List&lt;Person&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;秋香&quot;</span>, <span class="number">15</span>)); </span><br><span class="line">		people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;石榴姐&quot;</span>, <span class="number">19</span>)); </span><br><span class="line">		people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;唐伯虎&quot;</span>, <span class="number">12</span>));</span><br><span class="line">		System.out.println(<span class="string">&quot;--&quot;</span> + people);</span><br><span class="line">		<span class="comment">//如果Person类中，这里报错了，为什么呢？ 在这里埋个伏笔，且看下文</span></span><br><span class="line">		Collections.sort(people);</span><br><span class="line">		System.out.println(<span class="string">&quot;----&quot;</span> + people);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、<code>Comparable</code>和<code>Comparator</code><br><strong>说明：</strong>我们上面代码最后一个例子，使用了我们自定义的类型，在使用排序时，给我们报错了？这是为什么呢？整型包装类和字符串类型，和我们的自定义类型有什么区别？<br>通过API文档，查看<code>sort()</code>方法，可以看到根据元素的自然顺序对指定列表按升序进行排序。列表中的所有元素都必须实现<code>Comparable</code>接口。此外，列表中的所有元素都必须是可相互比较的。 而<code>Comparable</code>接口只有一个方法<code>int compareTo(T o)</code>比较此对象与指定对象的顺序。<br>说的白话一些，就是我们使用自定义类型，进行集合排序的时候，需要实现这个<code>Comparable接口</code>，并且重写<code>compareTo(T o)</code>。<br>（1）例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person2</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person2&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person2</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person2 o)</span> &#123;</span><br><span class="line">        <span class="comment">//重写方法如何写呢？</span></span><br><span class="line"><span class="comment">//        return 0; //默认元素都是相同的</span></span><br><span class="line">        <span class="comment">//自定义规则   我们通过person 的年龄进行比较  this 代表本身，而 o 代表传参的person对象</span></span><br><span class="line">        <span class="comment">//这里的比较规则</span></span><br><span class="line">        <span class="comment">//  ==》  升序 自己 - 别人</span></span><br><span class="line">        <span class="comment">//  ==》  降序 别人 - 自己</span></span><br><span class="line"><span class="comment">//        return this.getAge() - o.getAge(); //升</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - <span class="built_in">this</span>.getAge(); <span class="comment">//降</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person2&gt; people2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        people2.add(<span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;秋香&quot;</span>, <span class="number">15</span>));</span><br><span class="line">        people2.add(<span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;石榴姐&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        people2.add(<span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;唐伯虎&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--&quot;</span> + people2);</span><br><span class="line"> </span><br><span class="line">		<span class="comment">// 现在就不会报错了</span></span><br><span class="line">        Collections.sort(people2);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span> + people2);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>但是上面这种使用自定义类去实现<code>Comparable接口</code>，然后直接在类里面重写<code>compareTo(T o)</code>方法不太实际，我们不可能每个自定义类都去干这件事，所以可以使用下面的方法：<br>（2）<code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3Comparator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">        people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;秋香&quot;</span>, <span class="number">15</span>)); </span><br><span class="line">        people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;石榴姐&quot;</span>, <span class="number">19</span>));   </span><br><span class="line">        people.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;唐伯虎&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--&quot;</span> + people);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个参数 采用匿名内部类的方式传参 - 可以复习之前有关内部类的使用</span></span><br><span class="line">        Collections.sort(people, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">                <span class="comment">//这里怎么用呢 自定义按年龄排序</span></span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line"><span class="comment">//                return o1.getAge() - o2.getAge(); //升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getAge() - o1.getAge(); <span class="comment">//降序</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//结论： 前者 -后者  升序 反之，降序</span></span><br><span class="line">                <span class="comment">//这种方式 我们优先使用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后----&quot;</span> + people);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="四、BeanUilts实体类映射工具"><a href="#四、BeanUilts实体类映射工具" class="headerlink" title="四、BeanUilts实体类映射工具"></a>四、BeanUilts实体类映射工具</h1><p>1、说明<br><code>import org.springframework.beans.BeanUtils</code>包下的<code>BeanUilts</code>。<br>2、例子  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 被复制的类，例如：实体类</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制到的类，例如：vo类</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoCopy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;xiaohong&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="keyword">new</span> <span class="title class_">Role</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">        <span class="type">UserInfoCopy</span> <span class="variable">userInfoCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoCopy</span>();</span><br><span class="line">        BeanUtils.copyProperties(userInfo,userInfoCopy);</span><br><span class="line">        System.out.println(userInfo.toString());</span><br><span class="line">        System.out.println(userInfoCopy.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//UserInfo(id=1, username=xiaohong, password=123, phoneNum=123, email=123, role=Role(id=1, roleName=123, description=123))</span></span><br><span class="line"><span class="comment">//UserInfoCopy(id=null, username=xiaohong, password=123, sex=null)</span></span><br></pre></td></tr></table></figure>
<p>4、特别说明<br>（1）<code>BeanUtils.copyProperties(userInfo,userInfoCopy)</code>：第一个参数是被复制的类（实体类），第二个参数是复制到的类（VO类），VO类中必须要有实体类的字段，也可以有实体类中没有的字段，复制之后，类型不同的字段为null，实体类中没有的字段为null。<br>（2）<code>PropertyUtils.copyProperties(VO，实体类)</code>：有自动转换类型功能，上面那个没有，这个功能性差，耗时长。  </p>
<br/>


<hr>
<br/>


<h1 id="五、MapStruct：实体映射最强工具类"><a href="#五、MapStruct：实体映射最强工具类" class="headerlink" title="五、MapStruct：实体映射最强工具类"></a>五、MapStruct：实体映射最强工具类</h1><p><a href="https://www.jianshu.com/p/340245270651">详细教程</a><br>1、说明<br>这个工具用来映射实体类。<br>2、例子<br>从数据库查询出来了一个user对象（包含id，用户名，密码，手机号，邮箱，角色这些字段）和一个对应的角色对象role（包含id，角色名，角色描述这些字段），现在在controller需要用到user对象的id，用户名，和role角色对象的角色名三个属性。<br>一种方式是直接把两个对象传递到controller层，但是这样会多出很多没用的属性。更通用的方式是需要用到的属性封装成一个类(DTO)，通过传输这个类的实例来完成数据传输。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> String phoneNum;  </span><br><span class="line">    <span class="keyword">private</span> String email;  </span><br><span class="line">    <span class="keyword">private</span> Role role;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String roleName;  </span><br><span class="line">    <span class="keyword">private</span> String description;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类就是封装的类</span></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRoleDto</span> &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 用户id  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Long userId;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 用户名  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 角色名  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String roleName;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 模拟从数据库中查出user对象  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Before</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;  </span><br><span class="line">       <span class="type">Role</span> <span class="variable">role</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="number">2L</span>, <span class="string">&quot;administrator&quot;</span>, <span class="string">&quot;超级管理员&quot;</span>);  </span><br><span class="line">       user  = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;17677778888&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, role);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 模拟把user对象转换成UserRoleDto对象  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">UserRoleDto</span> <span class="variable">userRoleDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleDto</span>();  </span><br><span class="line">        userRoleDto.setUserId(user.getId());  </span><br><span class="line">        userRoleDto.setName(user.getUsername());  </span><br><span class="line">        userRoleDto.setRoleName(user.getRole().getRoleName());  </span><br><span class="line">        System.out.println(userRoleDto);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>使用<code>MapStruct</code>解决上述问题：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class="line"><span class="comment"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取该类自动生成的实现类的实例  </span></span><br><span class="line"><span class="comment">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="type">UserRoleMapper</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    UserRoleDto <span class="title function_">toUserRoleDto</span><span class="params">(User user)</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">default</span> UserRoleDto <span class="title function_">defaultConvert</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">UserRoleDto</span> <span class="variable">userRoleDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleDto</span>();  </span><br><span class="line">        userRoleDto.setUserId(<span class="number">0L</span>);  </span><br><span class="line">        userRoleDto.setName(<span class="string">&quot;None&quot;</span>);  </span><br><span class="line">        userRoleDto.setRoleName(<span class="string">&quot;None&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> userRoleDto;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">UserRoleMapper</span> <span class="variable">userRoleMapperInstances</span> <span class="operator">=</span> UserRoleMapper.INSTANCES;  </span><br><span class="line">    <span class="type">UserRoleDto</span> <span class="variable">userRoleDto</span> <span class="operator">=</span> userRoleMapperInstances.defaultConvert();  </span><br><span class="line">    System.out.println(userRoleDto);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用<code>abstract class</code>来代替接口：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class="line"><span class="comment"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UserRoleMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取该类自动生成的实现类的实例  </span></span><br><span class="line"><span class="comment">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">UserRoleMapper</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> UserRoleDto <span class="title function_">toUserRoleDto</span><span class="params">(User user)</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    UserRoleDto <span class="title function_">defaultConvert</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">UserRoleDto</span> <span class="variable">userRoleDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleDto</span>();  </span><br><span class="line">        userRoleDto.setUserId(<span class="number">0L</span>);  </span><br><span class="line">        userRoleDto.setName(<span class="string">&quot;None&quot;</span>);  </span><br><span class="line">        userRoleDto.setRoleName(<span class="string">&quot;None&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> userRoleDto;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>可以使用多个参数：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapstruct.demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class="line"><span class="comment"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取该类自动生成的实现类的实例  </span></span><br><span class="line"><span class="comment">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="type">UserRoleMapper</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    UserRoleDto <span class="title function_">toUserRoleDto</span><span class="params">(User user)</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 多个参数中的值绑定   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 源1  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role 源2  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从源1、2中提取出的结果  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    UserRoleDto <span class="title function_">toUserRoleDto</span><span class="params">(User user, Role role)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接使用参数作为属性值：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapstruct.demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;  </span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class="line"><span class="comment"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取该类自动生成的实现类的实例  </span></span><br><span class="line"><span class="comment">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="type">UserRoleMapper</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 直接使用参数作为值  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> myRoleName  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;myRoleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    UserRoleDto <span class="title function_">useParameter</span><span class="params">(User user, String myRoleName)</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;  </span><br><span class="line">    <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Before</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;  </span><br><span class="line">        role = <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="number">2L</span>, <span class="string">&quot;administrator&quot;</span>, <span class="string">&quot;超级管理员&quot;</span>);  </span><br><span class="line">        user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;17677778888&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, role);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">UserRoleMapper</span> <span class="variable">instances</span> <span class="operator">=</span> UserRoleMapper.INSTANCES;  </span><br><span class="line">        <span class="type">UserRoleDto</span> <span class="variable">userRoleDto</span> <span class="operator">=</span> instances.useParameter(user, <span class="string">&quot;myUserRole&quot;</span>);  </span><br><span class="line">        System.out.println(userRoleDto);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>更新对象属性：<br>在之前的例子中<code>UserRoleDto useParameter(User user, String myRoleName)</code>;都是通过类似上面的方法来生成一个对象。而<code>MapStruct</code>提供了另外一种方式来更新一个对象中的属性。<br><code>@MappingTarget</code>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper1</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">UserRoleMapper1</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(UserRoleMapper1.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;userId&quot;, target = &quot;id&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;name&quot;, target = &quot;username&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;roleName&quot;, target = &quot;role.roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateDto</span><span class="params">(UserRoleDto userRoleDto, <span class="meta">@MappingTarget</span> User user)</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user, <span class="meta">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br><span class="line">  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>通过<code>@MappingTarget</code>来指定目标类是谁（谁的属性需要被更新）。<code>@Mapping</code>还是用来定义属性对应规则。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user, <span class="meta">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br></pre></td></tr></table></figure>
<p><code>@MappingTarget</code>标注的类<code>UserRoleDto</code>为目标类，user类为源类，调用此方法，会把源类中的属性更新到目标类中。更新规则还是由<code>@Mapping</code>指定。<br>使用Spring依赖注入：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDto</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String customerName;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 这里主要是这个componentModel 属性，它的值就是当前要使用的依赖注入的环境  </span></span><br><span class="line"><span class="meta">@Mapper(componentModel = &quot;spring&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;)</span>  </span><br><span class="line">    CustomerDto <span class="title function_">toCustomerDto</span><span class="params">(Customer customer)</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><code>@Mapper(componentModel = &quot;spring&quot;)</code>，表示把当前<code>Mapper</code>类纳入spring容器。可以在其它类中直接注入了：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoMapstructApplication</span> &#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 注入Mapper  </span></span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> CustomerMapper mapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(DemoMapstructApplication.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="number">1L</span>, <span class="string">&quot;zhangsan&quot;</span>);  </span><br><span class="line">        <span class="type">CustomerDto</span> <span class="variable">customerDto</span> <span class="operator">=</span> mapper.toCustomerDto(customer);  </span><br><span class="line">        <span class="keyword">return</span> customerDto.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>自定义类型转换：<br>有时候，在对象转换的时候可能会出现这样一个问题，就是源对象中的类型是Boolean类型，而目标对象类型是String类型，这种情况可以通过@Mapper的uses属性来实现：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Boolean isDisable;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDto</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String customerName;  </span><br><span class="line">    <span class="keyword">private</span> String disable;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义转换规则的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BooleanStrFormat</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toStr</span><span class="params">(Boolean isDisable)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (isDisable) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Y&quot;</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;N&quot;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">toBoolean</span><span class="params">(String str)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (str.equals(<span class="string">&quot;Y&quot;</span>)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Mapper，@Mapper( uses = &#123; BooleanStrFormat.class&#125;)，注意，这里的users属性用于引用之前定义的转换规则的类</span></span><br><span class="line"><span class="meta">@Mapper( uses = &#123; BooleanStrFormat.class&#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">CustomerMapper</span> <span class="variable">INSTANCES</span> <span class="operator">=</span> Mappers.getMapper(CustomerMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Mappings(&#123;  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;),  </span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;isDisable&quot;, target = &quot;disable&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line">    CustomerDto <span class="title function_">toCustomerDto</span><span class="params">(Customer customer)</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>这样子，<code>Customer</code>类中的<code>isDisable</code>属性的<code>true</code>就会转变成<code>CustomerDto</code>中的<code>disable</code>属性的<code>yes</code>。</p>
<br/>


<hr>
<br/>


<h1 id="六、BeanUtils-copyProperties转换List"><a href="#六、BeanUtils-copyProperties转换List" class="headerlink" title="六、BeanUtils.copyProperties转换List"></a>六、BeanUtils.copyProperties转换List</h1><p>说明：<code>BeanUtils.copyProperties</code>只能应用实体类，那<code>List</code>类要怎么使用？可以使用下面的方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个类转换</span></span><br><span class="line"><span class="comment"> * List转换工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConverUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个类转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceObj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">conver</span><span class="params">(Object sourceObj, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceObj == <span class="literal">null</span> || targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">T</span> <span class="variable">targetObj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetObj = targetClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BeanUtils.copyProperties(sourceObj, targetObj);</span><br><span class="line">        <span class="keyword">return</span> targetObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List之间转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">converList</span><span class="params">(List&lt;?&gt; sourceList, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceList) || targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sourceList.stream().map(sourceObj -&gt; conver(sourceObj, targetClass)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br/>


<hr>
<br/>


<h1 id="七、关于处理List-转-List-的问题"><a href="#七、关于处理List-转-List-的问题" class="headerlink" title="七、关于处理List 转 List 的问题"></a>七、关于处理List<LinkedTreeMap> 转 List<T> 的问题</h1><p>1、出现场景<br>当<code>Controller</code>方法使用<code>map</code>万能参数来接收前端传过来的数据，然后如果<code>map</code>中存在<code>List</code>类型时，获取<code>List</code>类型，将<code>List</code>类型循环转成具体的实体类时，就会发生异常报错。<br>2、解决方法  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getList</span><span class="params">(List&lt;T&gt; mList, Class&lt;T[]&gt; aClass)</span>&#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">toJson</span> <span class="operator">=</span> gson.toJson(mList);</span><br><span class="line">        T[] array = gson.fromJson(toJson , (Type) aClass);</span><br><span class="line">        List&lt;T&gt; newList = Arrays.asList(array);</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、使用例子  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json是一个map，其中包含一个List</span></span><br><span class="line">List&lt;DetectionRuleVO&gt; ruleList = (List&lt;DetectionRuleVO&gt;) json.get(<span class="string">&quot;ruleList&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用getList处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class="line">ruleList = ListUtil.getList(ruleList, DetectionRuleVO[].class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用上面getList方法转换，下面会报错</span></span><br><span class="line"><span class="keyword">for</span> (DetectionRuleVO detectionRuleVO: ruleList) &#123;</span><br><span class="line">	<span class="comment">// 处理业务....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>



<hr>
<br/>



<h1 id="八、BigDecimal用法"><a href="#八、BigDecimal用法" class="headerlink" title="八、BigDecimal用法"></a>八、BigDecimal用法</h1><p>1、强烈建议<br>（1）使用<code>BigDecimal</code>构造对象时，优先使用<code>String</code>构造方法来进行构造，例子：<code>BigDecimal a = new BigDecimal(&quot;0.1&quot;)</code>；<br>（2）如果使用<code>double</code>构造方法，请这样操作：先使用<code>Double.toString(double)</code>方法，然后使用<code>BigDecimal(String)</code>构造方法，将<code>double</code>转换为<code>String</code>，要获取该结果，请使用<code>static valueOf(double)</code>方法。<br>2、方法使用<br>（1）<code>BigDecimal</code>大小比较<br>java中对<code>BigDecimal</code>比较大小一般用的是<code>bigdemical</code>的<code>compareTo</code>方法。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> bigdemical.compareTo(bigdemical2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">bigdemica</span>(a).compareTo(<span class="keyword">new</span> <span class="title class_">bigdemical</span>(b)) &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">a = -<span class="number">1</span>,表示bigdemical小于bigdemical2；</span><br><span class="line">a = <span class="number">0</span>,表示bigdemical等于bigdemical2；</span><br><span class="line">a = <span class="number">1</span>,表示bigdemical大于bigdemical2；</span><br></pre></td></tr></table></figure>
<p>（2）<code>BigDecimal</code>格式化<br>由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。<br>以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NumberFormat</span> <span class="variable">currency</span> <span class="operator">=</span> NumberFormat.getCurrencyInstance(); <span class="comment">//建立货币格式化引用</span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">percent</span> <span class="operator">=</span> NumberFormat.getPercentInstance();  <span class="comment">//建立百分比格式化引用</span></span><br><span class="line">percent.setMaximumFractionDigits(<span class="number">3</span>); <span class="comment">//百分比小数点最多3位</span></span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">loanAmount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;15000.48&quot;</span>); <span class="comment">//贷款金额</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interestRate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.008&quot;</span>); <span class="comment">//利率</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interest</span> <span class="operator">=</span> loanAmount.multiply(interestRate); <span class="comment">//相乘</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;贷款金额:\t&quot;</span> + currency.format(loanAmount));</span><br><span class="line">System.out.println(<span class="string">&quot;利率:\t&quot;</span> + percent.format(interestRate));</span><br><span class="line">System.out.println(<span class="string">&quot;利息:\t&quot;</span> + currency.format(interest));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果输出</span></span><br><span class="line">贷款金额: ￥<span class="number">15</span>,<span class="number">000.48</span> 利率: <span class="number">0.8</span>% 利息: ￥<span class="number">120.00</span></span><br></pre></td></tr></table></figure>
<p>BigDecimal格式化保留2为小数，不足则补0：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberFormat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] s)</span>&#123;</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.435&quot;</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.00&quot;</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.001&quot;</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.006&quot;</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.206&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。</span></span><br><span class="line"><span class="comment">     * 2.传入的参数等于0，则直接返回字符串&quot;0.00&quot;</span></span><br><span class="line"><span class="comment">     * 3.大于1的小数，直接格式化返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj传入的小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatToNumber</span><span class="params">(BigDecimal obj)</span> &#123;</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0.00&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class="number">0</span>&amp;&amp;obj.compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1</span>))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>+df.format(obj).toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.format(obj).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">3.44</span></span><br><span class="line"><span class="number">0.00</span></span><br><span class="line"><span class="number">0.00</span></span><br><span class="line"><span class="number">0.00</span></span><br><span class="line"><span class="number">0.01</span></span><br><span class="line"><span class="number">0.21</span></span><br></pre></td></tr></table></figure>
<p>3、<code>BigDecimal</code>常见异常<br>（1）除法的时候出现异常  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原因分析</span></span><br><span class="line"><span class="comment">// 通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="comment">// divide方法设置精确的小数点，如：divide(xxxxx,2)</span></span><br></pre></td></tr></table></figure>
<p>4、工具类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticUtils</span> &#123;</span><br><span class="line">    <span class="comment">//默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEF_DIV_SCALE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">add</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">add</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sub</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">sub</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sub</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">mul</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">mul</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">div</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> v, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v));</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">round</span><span class="params">(String v, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">remainder</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">bj</span> <span class="operator">=</span> b1.compareTo(b2);</span><br><span class="line">        <span class="type">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br/>



<hr>
<br/>



<h1 id="九、Lombok同时使用-Data和-Builder坑"><a href="#九、Lombok同时使用-Data和-Builder坑" class="headerlink" title="九、Lombok同时使用@Data和@Builder坑"></a>九、Lombok同时使用@Data和@Builder坑</h1><p>1、说明<br>（1）使用@Data可以生成无参构造和get、set方法；<br>（2）使用@Builder可以生成有参构造；<br>（3）同时使用时，是不会生成无参构造的，如果手动加上无参构造会造成无参构造器报错，编译不通过。<br>2、解决办法<br>（1）方法一<br>同时使用时，如果要生成无参构造，需要在代码里面手动引入注解@Tolerate，让Lombok在生成类的时候，对指定的构造函数不感知。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Tolerate</span></span><br><span class="line">	Test () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）方法二<br>直接使用无参构造 + 有参构造的方式，@RequiredArgsConstructor来构建有参，@NoArgsConstructor来构建无参。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Camunda 工作流</title>
    <url>/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、Camunda教程"><a href="#一、Camunda教程" class="headerlink" title="一、Camunda教程"></a>一、Camunda教程</h1><p><a href="https://zhuanlan.zhihu.com/p/586479914">请点击此处</a>；<br><a href="https://zhuanlan.zhihu.com/p/642365050">比上面还详细的教程</a>。</p>
<br/>


<hr>
<br/>


<h1 id="二、生成的数据表说明"><a href="#二、生成的数据表说明" class="headerlink" title="二、生成的数据表说明"></a>二、生成的数据表说明</h1><p>一、总介绍<br>1、<code>act_re_*</code>：<code>re</code>表示流程资源存储，这个前缀的表包含了流程定义和流程静态资源（图片，规则等），共5张表。<br>2、<code>act_ru_*</code>：<code>ru</code>表示流程运行时。 这些运行时的表，包含流程实例，任务，变量，Job等运行中的数据。 Camunda只在流程实例执行过程中保存这些数据，在流程结束时就会删除这些记录， 这样运行时表的数据量最小，可以最快运行。共15张表。<br>3、<code>act_id_*</code>：<code>id</code>表示组织用户信息，比如用户，组等，共6张表。<br>4、<code>act_hi_*</code>：<code>hi</code>表示流程历史记录。 这些表包含历史数据，比如历史流程实例，变量，任务等，共18张表。<br>5、<code>act_ge_*</code>：<code>ge</code>表示流程通用数据， 用于不同场景下，共3张表。<br>二、每个表介绍<br>1、流程资源存储类<br>（1）<code>act_re_case_def</code>：CMMN案例管理模型定义表<br>（2）<code>act_re_decision_def</code>：DMN决策模型定义表<br>（3）<code>act_re_decision_req_def</code>：决策需求定义表<br>（4）<code>act_re_deployment</code>：流程部署表<br>（5）<code>act_re_procdef</code>：BPMN流程模型定义表<br>2、流程运行类<br>（1）<code>act_ru_authorization</code>：流程运行时权限授予的表（是否使用与是否开启”camunda.bpm.authorization.enabled” ： “true”  or  “false”有关）<br>（2）<code>act_ru_batch</code>：流程执行批处理表<br>（3）<code>act_ru_case_execution</code>：CMMN案例运行执行表<br>（4）<code>act_ru_case_sentry_part</code>：CMMN案例运行时哨兵部分表<br>（5）<code>act_ru_event_subscr</code>：流程事件订阅表<br>（6）<code>act_ru_execution</code>：BPMN流程运行时记录表（运行时流程执行实例表，与流程实例并不一样）<br>（7）<code>act_ru_ext_task</code>：流程任务消息执行表（运行时外部任务信息表）<br>（8）<code>act_ru_filter</code>：流程定义查询配置表（运行时过滤器表）<br>（9）<code>act_ru_identitylink</code>：运行时流程人员表<br>（10）<code>act_ru_incident</code>：运行时异常事件表（工作流引擎突发事件表）<br>（11）<code>act_ru_job</code>：流程运行时作业表<br>（12）<code>act_ru_jobdef</code>：流程作业定义表<br>（13）<code>act_ru_meter_log</code>：流程运行时度量日志表<br>（14）<code>act_ru_task</code>：流程运行时任务表（最常用的表之一，每一个流程实例开启后，到达的每一个task都会生成在这里，也就是任务实例）<br>（15）<code>act_ru_variable</code>：流程运行时变量表（在开启流程实例或者在流程推进时传入的参数，在流程未结束前，都会存储在这里，但是并不是每个节点的变量变化都在这里，比如一个布尔值的confirm如果多次传入，这里也只会存在一个confirm，但是在act_hi_detail表中会有每个节点中confirm变化的值）<br>3、用户信息类<br>（1）<code>act_id_group</code>：审批组信息表<br>（2）<code>act_id_info</code>：用户扩展信息表<br>（3）<code>act_id_membership</code>：用户和审批组之间的关系的表<br>（4）<code>act_id_tenant</code>：租户信息表<br>（5）<code>act_id_tenant_member</code>：用户租户关系表<br>（6）<code>act_id_user</code>：用户信息表<br>4、流程历史记录类<br>（1）<code>act_hi_actinst</code>：历史的活动实例表<br>（2）<code>act_hi_attachment</code>：历史的流程附件表<br>（3）<code>act_hi_batch</code>：历史的批处理记录表<br>（4）<code>act_hi_caseactinst</code>：历史的CMMN活动实例表<br>（5）<code>act_hi_caseinst</code>：历史的CMMN实例表<br>（6）<code>act_hi_comment</code>：历史的流程审批意见表<br>（7）<code>act_hi_dec_in</code>：历史的DMN变量输入表<br>（8）<code>act_hi_dec_out</code>：历史的DMN变量输出表<br>（9）<code>act_hi_decinst</code>：历史的DMN实例表，包含有关决策的单个评估的信息，包括输入和输出值<br>（10）<code>act_hi_detail</code>：历史的流程运行时变量详情记录表<br>（11）<code>act_hi_ext_task_log</code>：历史的流程任务消息执行表<br>（12）<code>act_hi_identitylink</code>：历史的流程运行过程中用户关系<br>（13）<code>act_hi_incident</code>：历史的流程异常事件记录表<br>（14）<code>act_hi_job_log</code>：历史的流程作业记录表<br>（15）<code>act_hi_op_log</code>：历史的用户操作记录表，包含有关用户执行的操作的信息的日志条目，这用于记录操作，如创建新任务、完成任务等<br>（16）<code>act_hi_procinst</code>：历史的流程实例<br>（17）<code>act_hi_taskinst</code>：历史的任务实例<br>（18）<code>act_hi_varinst</code>：历史的流程变量记录表<br>5、流程通用数据类<br>（1）<code>act_ge_bytearray</code>：流程引擎二进制数据表<br>（2）<code>act_ge_property</code>：流程引擎属性配置表<br>（3）<code>act_ge_schema_log</code>：数据库脚本执行日志表  </p>
<br/>


<hr>
<br/>


<h1 id="三、每个表中字段说明"><a href="#三、每个表中字段说明" class="headerlink" title="三、每个表中字段说明"></a>三、每个表中字段说明</h1><h3 id="1、act-ge-bytearray（流程引擎二进制数据表）"><a href="#1、act-ge-bytearray（流程引擎二进制数据表）" class="headerlink" title="1、act_ge_bytearray（流程引擎二进制数据表）"></a>1、act_ge_bytearray（流程引擎二进制数据表）</h3><p>1、<code>id</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>name_</code>：名称<br>4、<code>deployment_id_</code>：部署id<br>5、<code>bytes_</code>：字节内容<br>6、<code>generated_</code>：是否系统生成（0用户创建，null系统创建）<br>7、<code>tenant_id_</code>：租户id<br>8、<code>type_</code>：类型<br>9、<code>create_time_</code>：创建时间<br>10、<code>root_proc_inst_id_</code>：流程实例根id<br>11、<code>removal_time_</code>：删除时间  </p>
<h3 id="2、act-ge-property（流程引擎属性配置表）"><a href="#2、act-ge-property（流程引擎属性配置表）" class="headerlink" title="2、act_ge_property（流程引擎属性配置表）"></a>2、act_ge_property（流程引擎属性配置表）</h3><p>1、<code>name_</code>：名称<br>2、<code>value_</code>：值<br>3、<code>rev_</code>：版本  </p>
<h3 id="3、act-ge-schema-log（数据库脚本执行日志表）"><a href="#3、act-ge-schema-log（数据库脚本执行日志表）" class="headerlink" title="3、act_ge_schema_log（数据库脚本执行日志表）"></a>3、act_ge_schema_log（数据库脚本执行日志表）</h3><p>1、<code>id_</code>：主键<br>2、<code>timestamp_</code>：时间戳<br>3、<code>version_</code>：版本  </p>
<h3 id="4、act-hi-actinst（历史的活动实例表）"><a href="#4、act-hi-actinst（历史的活动实例表）" class="headerlink" title="4、act_hi_actinst（历史的活动实例表）"></a>4、act_hi_actinst（历史的活动实例表）</h3><p>1、<code>id_</code>：主键<br>2、<code>parent_act_inst_id_</code>：父节点实例id<br>3、<code>proc_def_key_</code>：流程定义key<br>4、<code>proc_def_id_</code>：流程定义id<br>5、<code>root_proc_inst_id_</code>：流程实例根id<br>6、<code>proc_inst_id_</code>：流程实例id<br>7、<code>execution_id_</code>：执行实例id<br>8、<code>act_id_</code>：节点id<br>9、<code>task_id_</code>：任务id<br>10、<code>call_proc_inst_id_</code>：调用外部的流程实例id<br>11、<code>call_case_inst_id_</code>：调用外部的案例实例id<br>12、<code>act_name_</code>：节点名称<br>13、<code>acr_type_</code>：节点类型<br>14、<code>assignee_</code>：办理人<br>15、<code>start_time_</code>：开始时间<br>16、<code>end_time_</code>：结束时间<br>17、<code>duration_</code>：耗时<br>18、<code>act_inst_state_</code>：活动实例状态<br>19、<code>sequence_counter_</code>：序列计数器<br>20、<code>tenant_id_</code>：租户id<br>21、<code>removal_time_</code>：删除时间  </p>
<h3 id="5、act-hi-comment（历史流程审批意见表）"><a href="#5、act-hi-comment（历史流程审批意见表）" class="headerlink" title="5、act_hi_comment（历史流程审批意见表）"></a>5、act_hi_comment（历史流程审批意见表）</h3><p>1、<code>id_</code>：主键<br>2、<code>type_</code>：类型<br>3、<code>time_</code>：时间<br>4、<code>user_id_</code>：处理人id<br>5、<code>task_id_</code>：任务id<br>6、<code>root_proc_inst_id_</code>：流程实例根id<br>7、<code>proc_inst_id_</code>：流程实例id<br>8、<code>action_</code>：行为类型<br>9、<code>messages_</code>：基本内容<br>10、<code>full_msg_</code>：全部内容<br>11、<code>tenant_id_</code>：租户id<br>12、<code>removal_time_</code>：删除时间  </p>
<h3 id="6、act-hi-detail（历史的流程运行详情表）"><a href="#6、act-hi-detail（历史的流程运行详情表）" class="headerlink" title="6、act_hi_detail（历史的流程运行详情表）"></a>6、act_hi_detail（历史的流程运行详情表）</h3><p>1、<code>id</code>：主键<br>2、<code>type_</code>：类型<br>3、<code>proc_def_key_</code>：流程定义key<br>4、<code>proc_def_id_</code>：流程定义id<br>5、<code>root_proc_inst_id_</code>：流程实例根id<br>6、<code>proc_inst_id_</code>：流程实例id<br>7、<code>execution_id_</code>：流程执行id<br>8、<code>case_def_key_</code>：案例定义key<br>9、<code>case_def_id_</code>：案例定义id<br>10、<code>case_inst_id_</code>：案例实例id<br>11、<code>case_execution_id_</code>：案例执行id<br>12、<code>task_id_</code>：任务id<br>13、<code>act_inst_id_</code>：节点实例id<br>14、<code>var_inst_id_</code>：流程变量记录id<br>15、<code>name_</code>：名称<br>16、<code>var_type_</code>：变量类型<br>17、<code>rev_</code>：版本<br>18、<code>time_</code>：时间戳<br>19、<code>bytearray_id_</code>：二进制数据对应id<br>20、<code>double_</code>：double类型值<br>21、<code>long_</code>：long类型值<br>22、<code>text_</code>：文本类型值<br>23、<code>text2_</code>：文本类型值2<br>24、<code>sequence_counter_</code>：序列计数器<br>25、<code>tenant_id_</code>：租户id<br>26、<code>operation_id_</code>：操作id<br>27、<code>removal_time_</code>：删除时间  </p>
<h3 id="7、act-hi-identitylink（历史的流程运行过程中用户表）"><a href="#7、act-hi-identitylink（历史的流程运行过程中用户表）" class="headerlink" title="7、act_hi_identitylink（历史的流程运行过程中用户表）"></a>7、act_hi_identitylink（历史的流程运行过程中用户表）</h3><p>1、<code>id_</code>：主键<br>2、<code>timestamp_</code>：时间戳<br>3、<code>type_</code>：类型<br>4、<code>user_id_</code>：用户id<br>5、<code>group_id_</code>：用户组id<br>6、<code>task_id_</code>：任务id<br>7、<code>root_proc_inst_id_</code>：流程实例根id<br>8、<code>proc_def_id_</code>：流程定义id<br>9、<code>operation_type_</code>：操作类型<br>10、<code>assigner_id_</code>：分配者id<br>11、<code>proc_def_key_</code>：流程定义key<br>12、<code>tenant_id_</code>：租户id<br>13、<code>removal_time_</code>：删除时间  </p>
<h3 id="8、act-hi-procinst（历史的流程实例表）"><a href="#8、act-hi-procinst（历史的流程实例表）" class="headerlink" title="8、act_hi_procinst（历史的流程实例表）"></a>8、act_hi_procinst（历史的流程实例表）</h3><p>1、<code>id_</code>：主键<br>2、<code>proc_inst_id_</code>：流程实例id<br>3、<code>business_key_</code>：业务key<br>4、<code>proc_def_key_</code>：流程定义key<br>5、<code>pro_def_id_</code>：流程定义id<br>6、<code>start_time_</code>：开始时间<br>7、<code>end_time_</code>：结束时间<br>8、<code>removal_time_</code>：删除时间<br>9、<code>duration_</code>：耗时<br>10、<code>start_user_id_</code>：启动人id<br>11、<code>start_act_id_</code>：启动节点id<br>12、<code>end_act_id_</code>：结束节点<br>13、<code>super_process_instance_id_</code>：父流程实例id<br>14、<code>root_proc_inst_id_</code>：流程实例根id<br>15、<code>super_case_instance_id_</code>：父案例实例id<br>16、<code>case_inst_id_</code>：案例实例id<br>17、<code>delete_reason_</code>：删除原因<br>18、<code>tenant_id_</code>：租户id<br>19、<code>state_</code>：状态  </p>
<h3 id="9、act-hi-taskinst（历史的任务实例表）"><a href="#9、act-hi-taskinst（历史的任务实例表）" class="headerlink" title="9、act_hi_taskinst（历史的任务实例表）"></a>9、act_hi_taskinst（历史的任务实例表）</h3><p>1、<code>id_</code>：主键<br>2、<code>task_def_key_</code>：任务定义key<br>3、<code>proc_def_key_</code>：流程定义key<br>4、<code>proc_def_id_</code>：流程定义id<br>5、<code>root_proc_inst_id_</code>：流程实例根id<br>6、<code>proc_inst_id_</code>：流程实例id<br>7、<code>execution_id_</code>：流程执行id<br>8、<code>case_def_key_</code>：案例定义key<br>9、<code>case_def_id_</code>：案例定义id<br>10、<code>case_inst_id_</code>：案例实例id<br>11、<code>case_execution_id_</code>：案例执行id<br>12、<code>act_inst_id_</code>：节点实例id<br>13、<code>name_</code>：名称<br>14、<code>parent_task_id_</code>：父任务id<br>15、<code>description_</code>：描述<br>16、<code>owner_</code>：委托人id<br>17、<code>assignee_</code>：办理人id<br>18、<code>start_time_</code>：开始时间<br>19、<code>end_time_</code>：结束时间<br>20、<code>duration_</code>：耗时<br>21、<code>delete_reason_</code>：删除原因<br>22、<code>priority_</code>：优先级<br>23、<code>due_date_</code>：超时时间<br>24、<code>follow_up_date_</code>：跟踪时间<br>25、<code>tenant_id_</code>：租户id<br>26、<code>removal_time_</code>：删除时间  </p>
<h3 id="10、act-hi-varinst（历史的流程变量表）"><a href="#10、act-hi-varinst（历史的流程变量表）" class="headerlink" title="10、act_hi_varinst（历史的流程变量表）"></a>10、act_hi_varinst（历史的流程变量表）</h3><p>1、<code>id_</code>：主键<br>2、<code>proc_def_key_</code>：流程定义key<br>3、<code>proc_def_id_</code>：流程定义id<br>4、<code>root_proc_inst_id_</code>：流程实例根id<br>5、<code>proc_inst_id</code>：流程实例id<br>6、<code>execution_id_</code>：流程执行id<br>7、<code>act_inst_id</code>：节点实例id<br>8、<code>case_def_key_</code>：案例定义key<br>9、<code>case_def_id_</code>：案例定义id<br>10、<code>case_inst_id_</code>：案例实例id<br>11、<code>case_execution_id_</code>：案例执行id<br>12、<code>task_id_</code>：任务id<br>13、<code>name_</code>：名称<br>14、<code>var_type_</code>：变量类型<br>15、<code>create_time_</code>：创建时间<br>16、<code>rev_</code>：版本<br>17、<code>bytearrary_id_</code>：二进制数据id<br>18、<code>double_</code>：double类型值<br>19、<code>long_</code>：long类型值<br>20、<code>text_</code>：文本类型值<br>21、<code>text2_</code>：文本类型值2<br>22、<code>tenant_id_</code>：租户id<br>23、<code>state_</code>：状态<br>24、<code>removal_time_</code>：删除时间  </p>
<h3 id="11、act-id-user（用户表）"><a href="#11、act-id-user（用户表）" class="headerlink" title="11、act_id_user（用户表）"></a>11、act_id_user（用户表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>first_</code>：姓<br>4、<code>last_</code>：名<br>5、<code>emall_</code>：邮件<br>6、<code>pwd_</code>：密码<br>7、<code>salt_</code>：盐值<br>8、<code>lock_exp_time_</code>：锁定过期时间<br>9、<code>attempts_</code>：尝试次数<br>10、<code>picture_id_</code>：图片id  </p>
<h3 id="12、act-id-group（群组表）"><a href="#12、act-id-group（群组表）" class="headerlink" title="12、act_id_group（群组表）"></a>12、act_id_group（群组表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>name_</code>：组名称<br>4、<code>type_</code>：组类型（SYSTEM系统、WORKFLOW业务）  </p>
<h3 id="13、act-id-membership（用户与群组关系表）"><a href="#13、act-id-membership（用户与群组关系表）" class="headerlink" title="13、act_id_membership（用户与群组关系表）"></a>13、act_id_membership（用户与群组关系表）</h3><p>1、<code>user_id_</code>：用户id<br>2、<code>group_id_</code>：组id  </p>
<h3 id="14、act-re-deployment（流程部署表）"><a href="#14、act-re-deployment（流程部署表）" class="headerlink" title="14、act_re_deployment（流程部署表）"></a>14、act_re_deployment（流程部署表）</h3><p>1、<code>id_</code>：主键<br>2、<code>name_</code>：流程名称<br>3、<code>deploy_time_</code>：部署时间<br>4、<code>source_</code>：来源<br>5、<code>tenant_id_</code>：租户id  </p>
<h3 id="15、act-re-procdef（流程定义表）"><a href="#15、act-re-procdef（流程定义表）" class="headerlink" title="15、act_re_procdef（流程定义表）"></a>15、act_re_procdef（流程定义表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>category_</code>：流程定义的Namespace分类<br>4、<code>name_</code>：流程定义名称<br>5、<code>key_</code>：流程定义key<br>6、<code>version_</code>：流程定义版本号<br>7、<code>deployment_id_</code>：部署id<br>8、<code>resource_name_</code>：资源名称<br>9、<code>dgrm_resource_name_</code>：gram资源名称<br>10、<code>has_start_form_key_</code>：是否有启动表单<br>11、<code>suspension_state_</code>：流程挂起<br>12、<code>tenant_id_</code>：租户id<br>13、<code>version_tag_</code>：版本标签<br>14、<code>startable_</code>：是否是可启动流程  </p>
<h3 id="16、act-ru-event-subscr（流程事件订阅表）"><a href="#16、act-ru-event-subscr（流程事件订阅表）" class="headerlink" title="16、act_ru_event_subscr（流程事件订阅表）"></a>16、act_ru_event_subscr（流程事件订阅表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>event_type_</code>：事件类型<br>4、<code>event_name_</code>：事件名称<br>5、<code>execution_id_</code>：执行id<br>6、<code>pro_inst_id</code>：流程实例id<br>7、<code>activity_id_</code>：节点id<br>8、<code>configuration_</code>：配置<br>9、<code>created_</code>：创建时间<br>10、<code>tenant_id_</code>：租户id  </p>
<h3 id="17、act-ru-execution（流程运行时表）"><a href="#17、act-ru-execution（流程运行时表）" class="headerlink" title="17、act_ru_execution（流程运行时表）"></a>17、act_ru_execution（流程运行时表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>root_proc_inst_id_</code>：流程实例根id<br>4、<code>proc_inst_id_</code>：流程实例id<br>5、<code>business_key_</code>：业务key<br>6、<code>parent_id_</code>：流程父实例id<br>7、<code>proc_def_id_</code>：流程定义id<br>8、<code>super_exec_</code>：父流程实例对应的执行<br>9、<code>super_case_exec_</code>：父案例实例对应的执行<br>10、<code>case_inst_id_</code>：案例实例id<br>11、<code>act_id_</code>：节点id<br>12、<code>act_inst_id</code>：节点实例id<br>13、<code>is_active_</code>：是否激活<br>14、<code>is_concurrent_</code>：是否并行<br>15、<code>is_scope_</code>：是否多实例范围<br>16、<code>is_event_scope_</code>：是否事件多实例范围<br>17、<code>suspension_state_</code>：挂起状态<br>18、<code>cached_ent_state_</code>：缓存状态<br>19、<code>sequence_counter_</code>：序列计数器<br>20、<code>tenant_id_</code>：租户id  </p>
<h3 id="18、act-ru-identitylink（流程运行时表）"><a href="#18、act-ru-identitylink（流程运行时表）" class="headerlink" title="18、act_ru_identitylink（流程运行时表）"></a>18、act_ru_identitylink（流程运行时表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>group_id_</code>：用户组id<br>4、<code>type_</code>：类型<br>5、<code>user_id_</code>：用户id<br>6、<code>task_id_</code>：任务id<br>7、<code>proc_def_id_</code>：流程定义id<br>8、<code>tenant_id_</code>：租户id  </p>
<h3 id="19、act-ru-incident（-运行时异常记录表）"><a href="#19、act-ru-incident（-运行时异常记录表）" class="headerlink" title="19、act_ru_incident（ 运行时异常记录表）"></a>19、act_ru_incident（ 运行时异常记录表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>incident_timestamp_</code>：事件时间戳<br>4、<code>incident_msg_</code>：事件信息<br>5、<code>incident_type_</code>：事件类型<br>6、<code>execution_id_</code>：流程执行id<br>7、<code>activity_id_</code>：节点id<br>8、<code>proc_inst_id_</code>：流程实例id<br>9、<code>proc_def_id_</code>：流程定义id<br>10、<code>cause_incident_id_</code>：事件原因id<br>11、<code>root_cause_incident_id_</code>：事件原因根id<br>12、<code>configuration_</code>：事件配置<br>13、<code>tenant_id_</code>：租户id<br>14、<code>job_def_id_</code>：job定义id  </p>
<h3 id="20、act-ru-job（-流程运行时作业表）"><a href="#20、act-ru-job（-流程运行时作业表）" class="headerlink" title="20、act_ru_job（ 流程运行时作业表）"></a>20、act_ru_job（ 流程运行时作业表）</h3><p>1、<code>id_</code>：主键<br>2、<code>rev_</code>：版本<br>3、<code>type_</code>：类型<br>4、<code>lock_exp_time_</code>：锁定过期时间<br>5、<code>lock_owner_</code>：锁定用户<br>6、<code>exclusive_</code>：独占标识<br>7、<code>execution_id_</code>：执行id<br>8、<code>process_instance_id_</code>：流程实例id<br>9、<code>process_def_id_</code>：流程定义id<br>10、<code>process_def_key_</code>：流程定义key<br>11、<code>retries_</code>：重试次数<br>12、<code>exception_stack_id_</code>：异常堆栈id<br>13、<code>exception_msg_</code>：异常信息<br>14、<code>duedate_</code>：截止时间<br>15、<code>repeat_</code>：重复<br>16、<code>handler_type_</code>：处理类型<br>17、<code>handler_cfg_</code>：处理配置<br>18、<code>deployment_id_</code>：部署id<br>19、<code>suspension_state_</code>：挂起状态<br>20、<code>job_def_id_</code>：作业定义id<br>21、<code>priority_</code>：作业优先级<br>22、<code>sequence_counter_</code>：序列计数器<br>23、<code>tenant_id</code>：租户id<br>24、<code>create_time_</code>：创建时间  </p>
<h3 id="21、act-ru-jobdef（-流程作业定义表）"><a href="#21、act-ru-jobdef（-流程作业定义表）" class="headerlink" title="21、act_ru_jobdef（ 流程作业定义表）"></a>21、act_ru_jobdef（ 流程作业定义表）</h3><p>1、<code>job_type_</code>：job类型<br>2、<code>job_configuration_</code>：job配置<br>3、<code>suspension_state_</code>：挂起状态<br>4、<code>job_priority</code>：优先级  </p>
<h3 id="22、act-ru-task（-流程运行时任务表）"><a href="#22、act-ru-task（-流程运行时任务表）" class="headerlink" title="22、act_ru_task（ 流程运行时任务表）"></a>22、act_ru_task（ 流程运行时任务表）</h3><p>1、<code>execution_id_</code>：流程执行id<br>2、<code>proc_inst_id_</code>：流程实例id<br>3、<code>proc_def_id_</code>：流程定义id<br>4、<code>case_execution_id_</code>：案例执行id<br>5、<code>case_inst_id_</code>：案例实例id<br>6、<code>case_def_id_</code>：案例定义id<br>7、<code>parent_task_id_</code>：父任务id<br>8、<code>description_</code>：描述<br>9、<code>task_def_key_</code>：任务定义key<br>10、<code>owner_</code>：委托人<br>11、<code>assignee_</code>：办理人<br>12、<code>delegation</code>：委托状态<br>13、<code>priority_</code>：优先级<br>14、<code>due_date_</code>：截止时间<br>15、<code>follow_up_date_</code>：跟踪时间<br>16、<code>suspension_state_</code>：挂起状态  </p>
<h3 id="23、act-ru-variable（-流程运行时变量表）"><a href="#23、act-ru-variable（-流程运行时变量表）" class="headerlink" title="23、act_ru_variable（ 流程运行时变量表）"></a>23、act_ru_variable（ 流程运行时变量表）</h3><p>1、<code>execution_id_</code>：流程执行id<br>2、<code>proc_inst_id_</code>：流程实例id<br>3、<code>case_exrcution_id_</code>：案例执行id<br>4、<code>case_inst_id_</code>：案例实例id<br>5、<code>task_id_</code>：任务id<br>6、<code>bytearray_id_</code>：二进制内容id<br>7、<code>double_</code>：double类型值<br>8、<code>long_</code>：long类型值<br>9、<code>text_</code>：文本<br>10、<code>text2</code>：文本2<br>11、<code>var_scope_</code>：变量范围<br>12、<code>sequence_counter_</code>：序列计数器<br>13、<code>is_concurrent_local_</code>：是否并发  </p>
<br/>


<hr>
<br/>


<h1 id="四、springboot集成camunda部署教程以及说明"><a href="#四、springboot集成camunda部署教程以及说明" class="headerlink" title="四、springboot集成camunda部署教程以及说明"></a>四、springboot集成camunda部署教程以及说明</h1><h3 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h3><p>1、创建springboot项目，并且导入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zjy.workflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-springboot-testdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  流程引擎 在Rest服务接口的依赖中有了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.camunda.bpm.springboot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;camunda-bpm-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;7.17.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  Rest服务接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  web界面模块，就是那个驾驶舱登录界面，不需要可以不导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-engine-plugin-spin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.spin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-spin-dataformat-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;version&gt;5.1.47&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--postgresql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、创建application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">camunda-springboot-testdemo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># postgresql</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://192.168.126.130:5432/postgres?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># mysql</span></span><br><span class="line"><span class="comment">#    url: jdbc:mysql://39.103.217.57:3306/camunda2?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;useOldAliasMetadataBehavior=true</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    username: root</span></span><br><span class="line"><span class="comment">#    password: root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">camunda:</span></span><br><span class="line">  <span class="attr">bpm:</span></span><br><span class="line">    <span class="attr">admin-user:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">demo</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">auto-deployment-enabled:</span> <span class="literal">false</span> <span class="comment"># 关闭springboot继承好的自动部署功能</span></span><br></pre></td></tr></table></figure>
<p>3、创建日志输出log4j2.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval属性值（秒数）为一个非零值来让Log4j每隔指定的秒数来重新读取配置文件，可以用来动态应用Log4j配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来自定义一些变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--变量定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;myPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;Property name=&quot;dir_url&quot;&gt;d:/logs&lt;/Property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用Appenders元素可以将日志事件数据写到各种目标位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认打印到控制台 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;ConsoleAppend&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认打印格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;myPattern&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印到日志文件上 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;File name=&quot;FileAppend&quot; fileName=&quot;$&#123;dir_url&#125;/fileLog.log&quot; bufferedIO=&quot;true&quot; immediateFlush=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;PatternLayout&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;pattern&gt;$&#123;myPattern&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/PatternLayout&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/File&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认打印日志级别为 error --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ConsoleAppend&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;FileAppend&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、使用流程设计器，设计一个bpmn流程，并保存到resources目录下  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda1.jpg" class="">  
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda2.jpg" class="">  
<p>（1）预约维修节点  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda3.jpg" class="">  
<p>（2）师傅上门维修节点  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda4.jpg" class="">  
<p>（3）公司电话回访节点  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda5.jpg" class="">  
<p>（4）查看评分节点  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda6.jpg" class="">  
<p>5、创建service<br><strong>说明：</strong><br>我们创建的预约维修节点、师傅上门维修节点、公司电话回访节点和查看评分节点都是业务节点，属于业务节点<code>Implementation</code>选项的说明：如果<code>Type</code>项选择的是<code>Java Class</code>和<code>Delegate expression</code>，代码中类需要实现<code>JavaDelegate接口</code>，例子如下；如果选择的是<code>Expression</code>，不需要实现，只需先在<code>@Service</code>注解中起个别名，根据节点要求写方法，然后在<code>bpmn</code>中将别名和方法填入<code>Expression</code>选项中（格式：#{别名.方法名}，#{telCall.getScore(execution)})<br>（1）预约维修节点  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.delegate.JavaDelegate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 ReserveRepairService</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/20</span></span><br><span class="line"><span class="comment"> * @描述 预约维修</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReserveRepairService</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(ReserveRepairService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;进入到预约家电维修环节~&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentActivityName</span> <span class="operator">=</span> execution.getCurrentActivityName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentActivityId</span> <span class="operator">=</span> execution.getCurrentActivityId();</span><br><span class="line">        logger.info(<span class="string">&quot;当前活动名称：&quot;</span> + currentActivityName + <span class="string">&quot;\n当前活动id：&quot;</span> + currentActivityId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）师傅上门维修节点  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.delegate.JavaDelegate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 DoingRepairService</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/23</span></span><br><span class="line"><span class="comment"> * @描述 师傅上门维修</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;doRepair&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoingRepairService</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(DoingRepairService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;进入到师傅上门维修环节~&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentActivityName</span> <span class="operator">=</span> execution.getCurrentActivityName();</span><br><span class="line">        logger.info(<span class="string">&quot;当前活动名：&quot;</span> + currentActivityName);</span><br><span class="line">        execution.setVariable(<span class="string">&quot;repairName&quot;</span>,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）公司电话回访和查看评分节点  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 TelCallService</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/23</span></span><br><span class="line"><span class="comment"> * @描述 公司电话回访和查看评分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;telCall&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TelCallService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(TelCallService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公司电话回访</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doCall</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;公司电话回访~&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">repairName</span> <span class="operator">=</span> execution.getVariable(<span class="string">&quot;repairName&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;您对&quot;</span> + repairName.toString() + <span class="string">&quot;打了几分？&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;您对&quot;</span> + String.valueOf(repairName) + <span class="string">&quot;打了几分？&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看评分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getScore</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;查看评分~&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(execution.getVariable(<span class="string">&quot;repairName&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">score</span> <span class="operator">=</span> execution.getVariable(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;顾客对&quot;</span> + s + <span class="string">&quot;的评分：&quot;</span> + (<span class="type">int</span>)score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、创建controller  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.RuntimeService;</span><br><span class="line"><span class="keyword">import</span> org.camunda.bpm.engine.repository.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/flow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 说明：springboot项目在依赖camunda-bpm-spring-boot-starter中已经实现了自动部署的功能，</span></span><br><span class="line">    <span class="comment">// 所以我们不用在执行下面的controller方法去手动部署流程了，在启动项目的时候，springboot项目</span></span><br><span class="line">    <span class="comment">// 会自动帮我们部署好resources目录下的所有流程</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deplopy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .name(<span class="string">&quot;部署的第一个流程&quot;</span>) <span class="comment">// 定义部署文件的名称</span></span><br><span class="line">                .addClasspathResource(<span class="string">&quot;LoanApproval.bpmn&quot;</span>) <span class="comment">// 绑定需要部署的流程文件</span></span><br><span class="line">                .deploy();<span class="comment">// 部署流程</span></span><br><span class="line">        <span class="keyword">return</span> deploy.getId() + <span class="string">&quot;:&quot;</span> + deploy.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/startFlow/&#123;processKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startFlow</span><span class="params">(<span class="meta">@PathVariable</span> String processKey)</span> &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(processKey); <span class="comment">// 这里的方法是ByKey！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、启动项目测试。  </p>
<h3 id="2、部署说明"><a href="#2、部署说明" class="headerlink" title="2、部署说明"></a>2、部署说明</h3><p><strong>说明：</strong>有三种部署方式。<br>1、代码方法（手动部署）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deplopy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .name(<span class="string">&quot;部署的第一个流程&quot;</span>) <span class="comment">// 定义部署文件的名称</span></span><br><span class="line">                .addClasspathResource(<span class="string">&quot;LoanApproval.bpmn&quot;</span>) <span class="comment">// 绑定需要部署的流程文件</span></span><br><span class="line">                .deploy();<span class="comment">// 部署流程</span></span><br><span class="line">        <span class="keyword">return</span> deploy.getId() + <span class="string">&quot;:&quot;</span> + deploy.getName();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>2、通过导入依赖camunda-bpm-spring-boot-starter自动部署<br>（1）导入依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）启动项目，就自动将resources目录下的所有流程部署好了<br>（3）可以通过修改配置来关闭自动部署：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">camunda:</span></span><br><span class="line">  <span class="attr">bpm:</span></span><br><span class="line">      <span class="attr">auto-deployment-enabled:</span> <span class="literal">false</span> <span class="comment"># 关闭自动部署</span></span><br></pre></td></tr></table></figure>
<p>3、使用processes.xml配置文件实现自动部署<br>在<code>resources</code>目录下新建<code>META-INF</code>目录，在<code>META-INF</code>目录下新建<code>processes.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process-application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.camunda.org/schema/1.0/ProcessApplication&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">process-archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">process-engine</span>&gt;</span>default<span class="tag">&lt;/<span class="name">process-engine</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认会扫描resource（及其子目录下）的*.bpmn, *.cmmn, *.dmn文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可通过&lt;resource/&gt;指定其他的需要一同部署的资源文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注：formKey中路径需和resource路径一致，如：camunda-forms:deployment:bpmn/payment_confirm.form --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注：通过Modeler作为附件一起部署，formKey格式为：camunda-forms:deployment:payment_confirm.form --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;resource&gt;bpmn/PaymentInitForm.form&lt;/resource&gt;</span></span><br><span class="line"><span class="comment">        &lt;resource&gt;bpmn/PaymentConfirmForm.form&lt;/resource&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;isDeleteUponUndeploy&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;isScanForProcessDefinitions&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process-archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process-application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在项目启动类上使用注解 @EnableProcessApplication，启动项目，也可以把resources目录下的所有流程成功部署。<br><strong>注意：</strong>使用processes.xml配置文件实现自动部署，必须使用注解 @EnableProcessApplication 才能生效，不然不会自动部署。  </p>
<h3 id="3、节点参数介绍"><a href="#3、节点参数介绍" class="headerlink" title="3、节点参数介绍"></a>3、节点参数介绍</h3><p>1、<code>Service Task</code>（自动执行节点）<br>（1）Implementation  </p>
<ul>
<li><code>Java Class</code>：需要实现JavaDelegate接口，并将实现了JavaDelegate接口的类的全路径填写到Java class一栏；  </li>
<li><code>Delegate expression</code>：需要实现JavaDelegate接口，然后将实现了JavaDelegate接口的类使用注解注入到容器中（可以起个别名），然后将类的名字开头变小写填入Delegate expression一栏（如果使用了别名，就填别名），它会自动执行execute的方法；  </li>
<li><code>Expression</code>：将类注入到容器中（可以起个别名），类中方法的参数为DelegateExecution execution，然后在Expression一栏填入类名开头变小写.方法名（execution），Result variable为方法的返回值变量名。</li>
</ul>
<p>2、并行<br>（1）<code>nrOfActiviteInstances</code>：当前活动的实例数量，即还没有完成的实例数量；<br>（2）<code>loopCounter</code>：循环计数器，办理人在列表中的索引；<br>（3）<code>nrOfInstances</code>：多实例任务中总共的实例数；<br>（4）<code>nrOfCompletedInstances</code>：已经完成的实例数量。<br>可以通过设置<code>Completion Condition</code> 为<code>$&#123;nrOfCompletedInstances == 2&#125;</code>表示任意两个人完成审批。<br>3、网关<br>（1）排他网关：相当于if… else if … else。<br>（2）并行网关：多条路径一起执行，并且必须全部执行完才能执行下一步。<br>（3）包含网关：排他网关 + 并行网关。  </p>
<h3 id="4、流程执行过程说明"><a href="#4、流程执行过程说明" class="headerlink" title="4、流程执行过程说明"></a>4、流程执行过程说明</h3><p>每个节点执行时，都会先执行下一个节点的User assignment、Task listeners等，目的是将设置好的数据，比如下一个节点审批人，审批策略等传给前端。  </p>
<h3 id="5、关于历史数据存储配置"><a href="#5、关于历史数据存储配置" class="headerlink" title="5、关于历史数据存储配置"></a>5、关于历史数据存储配置</h3><p><strong>说明：</strong>Camunda工作流的数据都存储在数据库中，历史数据会非常大，可以根据需要，选择存储历史数据的级别来进行存储，camunda支持的级别如下：<br>1、<code>full级别</code>：所有历史数据都会被保存，包括变量的更新；<br>2、<code>audit级别</code>：只有历史的流程实例、活动实例、表单数据等会被保存；<br>3、<code>auto级别</code>：数据之前配置的是什么级别就是用什么级别，如果没有配置则是<code>audit级别</code>；<br>4、<code>none级别</code>：不存储历史数据。  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">camunda:</span> </span><br><span class="line">	<span class="attr">bpm:</span> </span><br><span class="line">		<span class="attr">history-level:</span> <span class="string">full</span> <span class="comment"># 历史数据存储级别</span></span><br></pre></td></tr></table></figure>
<p><strong>建议：</strong>生产环境中建议使用<code>audit级别</code>，开发测试环境可以使用<code>full级别</code>。  </p>
<br/>


<hr>
<br/>


<h1 id="五、外部任务订阅"><a href="#五、外部任务订阅" class="headerlink" title="五、外部任务订阅"></a>五、外部任务订阅</h1><p>1、项目git地址：<a href="https://gitee.com/zuo-junyuan/camunda.git">https://gitee.com/zuo-junyuan/camunda.git</a><br>2、项目介绍<br>（1）<code>bpmn</code>是：<code>RomeInvades.bpmn</code>，在<code>src/main/resources/bpmn/zjy/RomeInvades.bpmn</code>；<br>（2）只实现三个业务节点，最后那个用户节点没有去实现（主要针对的是业务节点的外部任务实现），第一个业务是<code>Decide On Direction of Expansion</code>，是使用<code>nodejs</code>实现的外部任务；  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda7.jpg" class="">  
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda8.jpg" class="">  
<p>（3）启动项目，登录驾驶舱查看，有这个工作流了，启动流程，如果没有外部任务去获取订阅这个启动的流程，流程就会一直卡在第一个Decide On Direction of Expansion节点上，无法往下执行，只有当启动订阅了这个主题的外部任务启动后，才会往下执行。</p>
<br/>


<hr>
<br/>


<h1 id="六、ProcessEngine流程引擎常用API"><a href="#六、ProcessEngine流程引擎常用API" class="headerlink" title="六、ProcessEngine流程引擎常用API"></a>六、ProcessEngine流程引擎常用API</h1><p><strong>说明：</strong>流程引擎（<code>ProcessEngine</code>）是Camunda BPM中用于管理和执行工作流程的核心组件。它提供了一组API，允许开发人员与Camunda BPM进行交互，包括创建、管理和执行流程实例。  </p>
<img src="/2024/01/19/Camunda-%E5%B7%A5%E4%BD%9C%E6%B5%81/Camunda9.jpg" class="">  
<p><strong>说明：</strong>要先获取流程引擎对象，才能获取各sercive使用流程引擎API，默认的流程引擎是通过<code>processes.xml</code>来描述的，Springboot的话不用先获取流程引擎对象，可以直接使用<code>@Autowired</code>注解获取各sercive使用流程引擎API。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取默认流程引擎</span></span><br><span class="line"><span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取仓库的服务（提供对流程定义和部署存储库的访问的服务），比如部署新的流程</span></span><br><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以获取运行中的流程实例</span></span><br><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取任务实例，比如可以对这个任务实例进行开始任务，然后任务变成流程实例</span></span><br><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理用户和组的服务</span></span><br><span class="line">IdentityServiceidentityService = processEngine.getIdentityService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问表单数据和呈现表单，以启动新的流程实例和完成任务</span></span><br><span class="line"><span class="type">FormService</span> <span class="variable">formService</span> <span class="operator">=</span> processEngine.getFormService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开有关正在进行和过去的流程实例的信息的服务，</span></span><br><span class="line"><span class="comment">// 这与运行时信息的不同之处在于，</span></span><br><span class="line"><span class="comment">// 该运行时信息仅包含任何给定时刻的实际运行时状态，</span></span><br><span class="line"><span class="comment">// 并且针对运行时流程执行性能进行了优化。</span></span><br><span class="line"><span class="comment">// 历史信息经过优化，便于查询，并在持久存储中保持永久</span></span><br><span class="line"><span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于流程引擎上的管理和维护操作的服务。这些操作通常不会在工作流驱动的应用程序中使用，但会在例如操作控制台中使用</span></span><br><span class="line"><span class="type">ManagementService</span> <span class="variable">managementService</span> <span class="operator">=</span> processEngine.getManagementService();</span><br><span class="line"></span><br><span class="line"><span class="type">FilterService</span> <span class="variable">filterService</span> <span class="operator">=</span> processEngine.getFilterService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供对ExternalTask实例的访问的服务。外部任务表示在外部独立于流程引擎处理的工作项</span></span><br><span class="line"><span class="type">ExternalTaskService</span> <span class="variable">externalTaskService</span> <span class="operator">=</span> processEngine.getExternalTaskService();</span><br><span class="line"></span><br><span class="line"><span class="type">CaseService</span> <span class="variable">caseService</span> <span class="operator">=</span> processEngine.getCaseService();</span><br><span class="line"></span><br><span class="line"><span class="type">DecisionService</span> <span class="variable">decisionService</span> <span class="operator">=</span> processEngine.getDecisionService();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>工作流</tag>
        <tag>Camunda</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot学习笔记</title>
    <url>/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Springboot基础知识记录"><a href="#一、Springboot基础知识记录" class="headerlink" title="一、Springboot基础知识记录"></a>一、Springboot基础知识记录</h1><h3 id="1、Springboot-IOC和DI注入方式"><a href="#1、Springboot-IOC和DI注入方式" class="headerlink" title="1、Springboot IOC和DI注入方式"></a>1、Springboot IOC和DI注入方式</h3><p>1、按照类型注入（直接在类上使用<code>@Autowired</code>）<br>（1）当只有一个名字相同的类存在：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）当存在多个相同的类名（不在同一个包下）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;a&quot;)</span> <span class="comment">// 使用a声明的service注入</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、按照名称注入<br><strong>说明：</strong>直接在类上使用<code>@Resource</code>（<code>@Resource</code>相当于<code>@Autowired + @Qualifier</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;a&quot;)</span> <span class="comment">// 使用a声明的service注入</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、按照<code>setter</code>方法注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDemoService</span><span class="params">(DemoService demoService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、按照构造器方式注入<br><strong>说明：</strong>构造器注入可以避免<code>Field</code>注入的 循环依赖 问题，比如在<code>Demo1</code>中注入了<code>Demo2</code>，在<code>Demo2</code>中注入了<code>Demo1</code>，使用构造器注入，在项目启动的时候会抛出<code>BeanCurrentlyCreationException</code>提醒循环依赖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoController</span><span class="params">(DemoService demoService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2、Springboot-关于使用-AOP"><a href="#2、Springboot-关于使用-AOP" class="headerlink" title="2、Springboot 关于使用 AOP"></a>2、Springboot 关于使用 AOP</h3><p>1、说明：什么是AOP？<br>AOP就是增强，在没有使用AOP时，对象是原本的对象（比如房东对象），而使用了AOP之后，使用的对象就变成了代理对象，而不是原本的对象（比如中介对象），相当于就是不修改原有的业务逻辑代码的基础上，想要增加额外的逻辑，就是找到原有的代码，切入想要增加的代码，比如日志的记录；<br>2、AOP的工作流程说明<br>（1）Spring容器启动；<br>（2）会去读取被<code>@Aspect</code>和<code>@Component</code>标注的切面类中配置的所有切入点，也就是被<code>@Pointcut</code>标注的方法；<br>（3）初始化所有bean，然后去判断需要被增强的bean对应的类中的方法是否匹配到任意切入点；<br>（4）如果匹配失败，就创建bean对象；<br>（5）如果匹配成功，就创建bean对象的代理对象；<br>（6）获取bean，调用方法并执行，完成操作。<br>3、使用方法<br>（1）导入依赖，在<code>pom.xml</code>中导入AOP的依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）方式一：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 将这个类注入到容器中</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 使用这个注解标注这个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAspect</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在BookDao类的update方法处切入，相当于想增强update方法</span></span><br><span class="line">	<span class="comment">// 在void com.xxx.dao.BookDao.update方法处切入，具体怎么切入看使用的是什么通知类型注解</span></span><br><span class="line">	<span class="meta">@Pointcut(&quot;execution(void com.xxx.dao.BookDao.update())&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将pt这个切入点配置对应到这个方法上</span></span><br><span class="line">	<span class="comment">// 相当于上面AOP工作流程说明中的第3点</span></span><br><span class="line">	<span class="comment">// 如果没有这个，切入点就毫无意义，就会匹配失败</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">		<span class="comment">// 这个方法是在上面 update方法前调用</span></span><br><span class="line">        .... <span class="comment">// 编写需要增强的业务逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在启动类上加<code>@EnableAspectJAutoProxy</code>注解，告诉spring，我以注解的方式使用aop。<br>特别说明：为什么不加<code>@EnableAspectJAutoProxy</code>注解AOP一样也会生效？<br>是因为依赖中如果存在<code>spring-boot-starter-web</code>依赖，而这个依赖中包含了<code>spring-boot-autoconfigure</code>依赖，正是这个依赖（自动装配依赖），它会读取<code>spring.factories</code>文件，这个文件中有一个<code>AopAutoConfiguration</code>类，这个等同于<code>@EnableAspectJAutoProxy</code>注解，我们可以在<code>yml</code>配置文件中将它关闭<code>spring.aop.auto=false</code>，这样AOP就不生效了（在不使用<code>@EnableAspectJAutoProxy</code>注解前提下）。<br>所以为了保险期间请一律加上<code>@EnableAspetJAutoProxy</code>注解。<br>（3）方式二（简写形式，省去了<code>@Pointcut</code>）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 将这个类注入到容器中</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 使用这个注解标注这个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAspect</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 下面的注解的意思是在com.xxx.service.*.*(..)切入</span></span><br><span class="line">    <span class="comment">// 意思就是在com.xxx.service.*.*(..)所有方法前后，都会执行下面recordTime中的逻辑</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.xxx.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint p)</span>&#123;</span><br><span class="line">        p.proceed(); <span class="comment">// 调用原始方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）方式三（注解的形式，灵活）：（比较详细）<br>创建一个注解：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用该注解标注的方法会执行切入类中的方法</span></span><br><span class="line"><span class="comment">// 这样就不用写 execution(* com.xxx.service.*.*(..)) 匹配规则了</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogUserProjectOperation &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;无法获知此用户的操作行为&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建切面类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectProcessRecordAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用注解的方式来定切入点</span></span><br><span class="line">    <span class="comment">// 比如我在xxx方法上使用@LogUserProjectOperation注解标注之后，</span></span><br><span class="line">    <span class="comment">// 当执行到xxx方法时，因为使用的@AfterReturning的形式，</span></span><br><span class="line">    <span class="comment">// 所以会在xxx方法后面执行下面的方法</span></span><br><span class="line">    <span class="comment">// joinPoint参数可以获取到xxx方法的各种值</span></span><br><span class="line">    <span class="comment">// 使用returnValue，必须在注解中声明returning = &quot;returnValue&quot;，这个是获取xxx方法返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;@annotation(LogUserProjectOperation)&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logUserProjectOperation</span><span class="params">(JoinPoint joinPoint, Object returnValue)</span> &#123;</span><br><span class="line">        <span class="comment">// 这个是可以获取@LogUserProjectOperation 注解的参数</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">LogUserProjectOperation</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(LogUserProjectOperation.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> annotation.description();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取xxx</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">// 获取xxx所属的类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取xxx方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式：在需要的方法上使用<code>@LogUserProjectOperation</code>注解  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/projectCheck&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectCheckController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在需要的方法上使用@LogUserProjectOperation注解</span></span><br><span class="line">    <span class="meta">@LogUserProjectOperation</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/approveOperate&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Boolean&gt; <span class="title function_">approveOperate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要想获取http请求的各种参数，比如请求类型（get、post等），使用：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="keyword">if</span> (attributes == <span class="literal">null</span>) &#123;</span><br><span class="line">       log.error(<span class="string">&quot;正常日志获取attributes为空,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">       <span class="keyword">return</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取请求</span></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line"><span class="comment">// 获取响应</span></span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> attributes.getResponse();</span><br><span class="line"><span class="keyword">if</span> (response == <span class="literal">null</span>) &#123;</span><br><span class="line">      log.error(<span class="string">&quot;正常日志获取response失败,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、AOP切入点表达式<br>（1）描述<br>描述一（接口）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行com.xxx.dao包下的BookDao接口中的无参数update方法，void是update的返回类型</span></span><br><span class="line">execution(<span class="keyword">void</span> com.xxx.dao.BookDao.update())</span><br></pre></td></tr></table></figure>
<p>描述二（类）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行com.xxx.dao.impl包下的BookDaoImpl类中的无参数update方法，void是update的返回类型</span></span><br><span class="line">execution(<span class="keyword">void</span> com.xxx.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure>
<p>描述三（<code>*</code>）：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配com.xxx包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</span></span><br><span class="line">execution(<span class="keyword">public</span> * com.xxx.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>
<p>描述四（<code>..</code>）：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</span></span><br><span class="line">execution(<span class="keyword">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure>
<p>描述五（<code>+</code>）：专用于匹配子类类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* *..*Service + .*(..))</span><br></pre></td></tr></table></figure>
<p>（2）表达式格式说明<br>格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口.方法名（参数）异常名）  </p>
<ul>
<li>动作关键字：描述切入点的行为动作，例如<code>execution</code>表示执行到指定切入点。  </li>
<li>访问修饰符：<code>public</code>、<code>private</code>等，可以省略。  </li>
<li>返回值。  </li>
<li>包名。  </li>
<li>类&#x2F;接口名。  </li>
<li>方法名。  </li>
<li>参数。  </li>
<li>异常名：方法定义中抛出指定异常，可以省略。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User com.xxx.service.UserService.findById(<span class="type">int</span>))</span><br></pre></td></tr></table></figure>

<p>4、通知类型<br>（1）<code>@Around</code> 环绕通知（需要传参<code>ProceedingJoinPoint proce</code>自己调用<code>proce.proceed()</code>方法执行原始方法，下面其他的注解不用调用）<br>此注解标注的通知方法在目标方法前、后都被执行。<br>（2）<code>@Before</code> 前置通知<br>此注解标注的通知方法在目标方法前被执行。<br>（3）<code>@After</code> 后置通知<br>此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。<br>（4）<code>@AfterReturning</code> 返回后通知<br>此注解标注的通知方法在目标方法后被执行，有异常不会执行。<br>（5）<code>@AfterThrowing</code> 异常后通知<br>此注解标注的通知方法发生异常后执行。<br>5、通知类型的参数<br>（1）非环绕通知，可以将<code>org.aspectj.lang.JoinPoint</code>作为通知方法的第1个参数，通过这个参数获取被调用方法的信息；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JoinPoint</span> &#123;  </span><br><span class="line">    String <span class="title function_">toString</span><span class="params">()</span>;         <span class="comment">//连接点所在位置的相关信息  </span></span><br><span class="line">    String <span class="title function_">toShortString</span><span class="params">()</span>;     <span class="comment">//连接点所在位置的简短相关信息  </span></span><br><span class="line">    String <span class="title function_">toLongString</span><span class="params">()</span>;     <span class="comment">//连接点所在位置的全部相关信息  </span></span><br><span class="line">    Object <span class="title function_">getThis</span><span class="params">()</span>;         <span class="comment">//返回AOP代理对象</span></span><br><span class="line">    Object <span class="title function_">getTarget</span><span class="params">()</span>;       <span class="comment">//返回目标对象  </span></span><br><span class="line">    Object[] getArgs();       <span class="comment">//返回被通知方法参数列表，也就是目前调用目标方法传入的参数  </span></span><br><span class="line">    Signature <span class="title function_">getSignature</span><span class="params">()</span>;  <span class="comment">//返回当前连接点签名，这个可以用来获取目标方法的详细信息，如方法Method对象等</span></span><br><span class="line">    SourceLocation <span class="title function_">getSourceLocation</span><span class="params">()</span>;<span class="comment">//返回连接点方法所在类文件中的位置  </span></span><br><span class="line">    String <span class="title function_">getKind</span><span class="params">()</span>;        <span class="comment">//连接点类型  </span></span><br><span class="line">    StaticPart <span class="title function_">getStaticPart</span><span class="params">()</span>; <span class="comment">//返回连接点静态部分  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）如果是环绕通知，可以将<code>org.aspectj.lang.ProceedingJoinPoint</code>作为方法的第1个参数，通过这个参数获取被调用方法的信息。  </p>
<h3 id="3、关于-Springboot-配置文件"><a href="#3、关于-Springboot-配置文件" class="headerlink" title="3、关于 Springboot 配置文件"></a>3、关于 Springboot 配置文件</h3><p>1、配置文件加载优先级<br><code>application.properties</code>配置文件 &gt; <code>application.yml</code>配置文件 &gt; <code>application.yaml</code>配置文件。<br>2、<code>properties</code>配置文件名必须是<code>application.properties</code>，如果想更改它的名字，必须在这里配置：</p>
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot1.jpg" class="">
<p>3、不止可以在配置文件中配置，还可以在java属性或者命令行配置<br>（1）idea中设置  </p>
<ul>
<li>java属性配置<br>在idea启动配置里有一项配置：VM options<br>例如：可以在VM options里配置端口号：-Dserver.port&#x3D;8080  </li>
<li>命令行配置<br>同java属性配置，有一项配置：Program arguments<br>例如：在Program arguments里配置端口号：–server.port&#x3D;8080</li>
</ul>
<p>（2）在Dos命令行设置  </p>
<ul>
<li>java属性配置<br>java -Derver.port&#x3D;8080 -jar demo.jar</li>
<li>命令行配置<br>java -jar demo.jar –server.port&#x3D;8080</li>
</ul>
<p><strong>注意优先级：</strong>命令行 &gt; java属性 &gt; 配置文件<br>4、多个.yml文件的使用方法<br>SpringBoot默认加载的是<code>application.yml</code>文件，所以想要引入其他配置的yml文件，就要在<code>application.yml</code>中激活该文件，定义一个<code>application-student.yml</code>文件（注意：必须以application-开头）。<br><code>application.yml</code>中：（注意必须是在<code>application.yml</code>或者<code>.properties</code>)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>                    <span class="comment"># 这个也是用来启动多环境的</span></span><br><span class="line">  <span class="attr">profiles:</span>               <span class="comment"># 如果有开发、测试、生产环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">student</span>      <span class="comment"># 就用这个来启动</span></span><br></pre></td></tr></table></figure>
<p>（1）赋值（如果是xml的话，它是自动完成的）<br><code>application-student.yml</code>配置文件代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">小明</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">27</span></span><br><span class="line">  <span class="attr">sex:</span> <span class="string">男</span></span><br></pre></td></tr></table></figure>
<p>方案一：使用<code>@Value</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;student.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;student.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;student.sex&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果使用<code>application.properties</code>，需要使用<code>@PropertySource(value=&quot;application.properties&quot;)</code>来加载并在属性上使用<code>@Value(&quot;&quot;)</code>使用。<br>方案二：使用<code>@ConfigurationProperties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、springboot集成mybatis需要的依赖"><a href="#4、springboot集成mybatis需要的依赖" class="headerlink" title="4、springboot集成mybatis需要的依赖"></a>4、springboot集成mybatis需要的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span> </span><br><span class="line">       <span class="comment">&lt;!-- 这里这个可以换，比如如果要用druid的就导入druid的 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-----------------或者只需要以下依赖就可以了---------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>application.yml</code>中配置数据源：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名字?serverTimezone=UTC&amp;userUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.mysql.cj.jdbc.MysqlDataSource</span> <span class="comment">#这个依赖导入哪个就用哪个</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">实体类包路径，比如com.cn.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper的路径，比如classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="5、Springboot-bean的管理"><a href="#5、Springboot-bean的管理" class="headerlink" title="5、Springboot bean的管理"></a>5、Springboot bean的管理</h3><p>1、获取bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> ApplicationContext applicationContext;</span><br></pre></td></tr></table></figure>
<p>2、非第三方bean管理<br>我们将一个类注入到<code>spring</code>容器中成为一个<code>bean</code>对象，默认是单例；要想多例只需在该类上加上<code>@Scope(&quot;prototype&quot;)</code>注解，例如：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>3、第三方bean管理<br>第三方bean：比如第三方的jar包，我们无法在第三方jar中某个类上面使用<code>@Component、@Service</code>等注解的情况下，就使用<code>@Bean</code>注解，举个场景：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 我们想使用JSONObject，必须new</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jSONObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个场景，我们不能在<code>JSONObject</code>类上面使用注解<code>@Component、@Service</code>来将它注入到容器中，但是我们可以这样：<br>在<code>springboot</code>启动类里，把<code>JSONObject</code>类注入到<code>spring</code>容器中<strong>（不过在启动类中定义是不推荐的，推荐的是在配置类中定义）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDemo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDemo.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将当前方法的返回值对象交给IOC容器管理，成为IOC容器bean</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">jSONObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、多个<code>bean</code>使用方法<br>概述：<br>通过<code>Spring</code>管理的类,默认是单例模式,但是如果有的类需要使用独立的属性,则需要配置为多例模式的. 但是多例模式不仅仅只是加一个声明,使用<code>@Autowired</code>进行注入,可能并不会是你想要的结果.因为多例模式的类是需要单独调用的。<br>不搞清楚原理直接测试：<br>需要多例的类上加上注解<code>@Scope(“prototype”)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test,current bean is&quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">引用直接使用<span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExampleService exampleService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        exampleService.test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果: 每个request过来的时候,exampleService实例均为同一个实例.</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line">第一种：不使用<span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> org.springframework.beans.factory.BeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ExampleService</span> <span class="variable">exampleService</span> <span class="operator">=</span> beanFactory.getBean(ExampleService.class);</span><br><span class="line">        exampleService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二种：使用bean工厂</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebSocketHandler <span class="title function_">websocketBHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PerConnectionWebSocketHandler</span> <span class="variable">perConnectionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PerConnectionWebSocketHandler</span>(WebSocketBHandler.class);</span><br><span class="line">    perConnectionHandler.setBeanFactory(context.getAutowireCapableBeanFactory());</span><br><span class="line">    <span class="comment">//设置bean工厂，否则bean工厂WebSocketBHandler将不会自动连接</span></span><br><span class="line">    <span class="keyword">return</span> perConnectionHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后使用ApplicationContext进行代理bean工厂</span><br><span class="line"></span><br><span class="line">注入</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext context;</span><br><span class="line">使用</span><br><span class="line"><span class="built_in">this</span>.Bservice = context.getBean(BService.class, <span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6、Springboot自动配置加载流程"><a href="#6、Springboot自动配置加载流程" class="headerlink" title="6、Springboot自动配置加载流程"></a>6、Springboot自动配置加载流程</h3><p>1、说明<br>（1）导入 <code>starter</code> ，就会导入 <code>autoconfigure</code> 包；<br>（2）<code>autoconfigure</code> 包里面有一个文件： <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> ，<br>里面指定的是启动要加载的所有自动配置类；<br>（3）<code>@EnableAutoConfiguration</code> 会自动的把上面文件里面写的所有自动配置类都导入进<code>spring</code>容器；<br>（4）自动配置类中的 <code>xxxAutoConfiguration</code> 是有条件注解，来进行按需加载的；<br>（5）<code>xxxAutoConfiguration</code> 给容器中导入一堆组件，组件都是从 <code>xxxProperties</code> 中提取属性值的；<br>（6）<code>xxxProperties</code> 又是和配置文件进行了绑定。<br>2、<code>springboot</code>默认配置说明<br>（1）包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewRseolver</code> 组件，方便视图解析。<br>（2）默认的静态资源处理机制：静态资源在static文件夹下即可直接访问。<br>（3）自动注册了 <code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> 组件，适配常见数据类型转换和格式化需求。<br>（4）支持 <code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型。<br>（5）自动使用 <code>ConfigurableWebBindingInitializer</code>，实现消息处理、数据绑定、类型转化、数据校验等功能。<br><strong>重要：</strong><br>（1）如果想保持默认配置，并且自定义更多配置，如：<code>interceptors（拦截器）、formatters（格式化器）、viewControllers（视图解析器）</code>等，可以创建一个新类，使用 <code>@Configuration</code> 注解和实现一个 <code>WebMvcConfigurer</code>接口，并且不要标注 <code>@EnableWebMvc</code> 注解。<br>（2）如果想保持默认配置，但要自定义核心组件实例，比如：<code>RequestMappingHandlerMapping，RequestMappingHandlerAdapter，ExceptionHandlerExceptionResolver</code>等，只需给容器中放一个 <code>WebMvcRegistrations</code> 组件即可。<br>（3）如果想全面接管<code>SpringMvc</code>，<code>@Configuration</code>标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现<code>WebMvcConfigurer</code>接口。<br>3、<code>WebMvcConfigurer</code>接口方法说明<br>（1）<code>addArgumentResolvers</code>：参数解析器，用来解析<code>Controller</code>中各方法的参数。<br>（2）<code>addCorsMappings</code>：跨域<br>（3）<code>addFormatters</code>：格式化器，用来处理配置文件中格式化的问题。<br>（4）<code>addInterceptors</code>：拦截器<br>（5）<code>addResourceHandlers</code>：资源处理器，处理静态资源规则。<br>（6）<code>addReturnValueHandlers</code>：返回值处理器，当<code>controller</code>返回一个字符串或者对象等时，是要跳转页面还是返回数据。<br>（7）<code>addViewControllers</code>：视图控制器，如果想发一个请求 <code>/a</code> 直接跳转到<code>xxx.html</code>页面，不用写<code>controller</code>，可以在这里设置。<br>（8）<code>configureAsyncSupport</code>：异步支持<br>（9）<code>configureContentNegotiation</code>：内容协商<br>（10）<code>configureHandlerExceptionResolvers</code>：配置异常处理解析器。<br>（11）<code>configureMessageConverters</code>：配置消息转换器<br>（12）<code>configurePathMatch</code>：路径匹配<br>（13）<code>configureViewResolvers</code>：配置视图解析器  </p>
<h3 id="7、循环依赖问题"><a href="#7、循环依赖问题" class="headerlink" title="7、循环依赖问题"></a>7、循环依赖问题</h3><p>1、三级缓存<br>（1）一级缓存（单例池）：<code>singletonObjects</code>，用来存经历过完整生命周期的bean；<br>（2）二级缓存：<code>earlySingletonObjects</code>，用来存还没有初始化的aop代理对象；<br>（3）三级缓存：<code>singletonFactories</code>。<br>2、代码  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BService bService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AService aService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面产生了循环依赖。<br>3、说明  </p>
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot6.jpg" class="">

<h3 id="8、Springboot源码名词"><a href="#8、Springboot源码名词" class="headerlink" title="8、Springboot源码名词"></a>8、Springboot源码名词</h3><img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>说明一：在springboot源码中用到的<code>ConfigurableApplicationContext</code>是接口，而官网springframework中使用到的<code>GenericApplicationContext</code>是<code>ConfigurableApplicationContext</code>的实现类。<br>说明二：<code>FactoryBean</code>和<code>BeanFactory</code>区别<br>（1）<code>FactoryBean</code>：是Spring中一种特殊的bean，可以在getObject()工厂方法自定义的逻辑创建bean，是一种能够生产其他bean的bean。FactoryBean在容器启动时被创建，而在实际使用时，通过调用getObject()方法来得到其所生产的bean。因此，FactoryBean可以自定义任何所需的初始化逻辑，生产出一些定制化的bean。<br>（2）<code>BeanFactory</code>：是Spring框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期、配置文件的加载和解析、bean的装配和依赖注入等。BeanFactory接口提供了访问bean的方式，例如getBean()方法获取指定的bean实例。它可以从不同的来源（例如Mysql数据库、XML文件、Java配置类等）获取bean定义，并将其转换为bean实例。同时，BeanFactory还包含很多子类（例如ApplicationContext接口）提供了额外的强大功能。<br>1、<code>BeanFactory</code>：是接口，位于<code>org.springframework.beans</code>包下，它是bean的一个工厂，它定义了各种获取bean的方法、判断bean是否存在、判断bean是否单例等针对bean的基础方法；<br>2、<code>ApplicationContext</code>：是接口，位于<code>org.springframework.context</code>包下，它就是springIOC容器，它继承了<code>BeanFactory</code>接口，查看源码可以看到它是先继承了<code>ListableBeanFactory</code>接口，再继承的<code>BeanFactory</code>接口，它负责实例化、配置、组装bean；<br>3、<code>ListableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，扩展了bean的查询方法，例如：根据类型获取beanNames、根据注解获取beanNames、根据bean获取注解；<br>4、<code>AutowireCapableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，提供了bean的创建、配置、注入、销毁等操作（<strong>注意</strong>：有时候我们需要自己手动注入bean的时候，可以考虑通过实现该接口来完成）；<br>5、<code>HierarchicalBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上添加了获取parent beanfactory的方法；<br>6、<code>SingletonBeanRegistry</code>：是接口，定义了对单例bean的定义以及获取方法；<br>7、<code>ConfigurableBeanFactory</code>：是接口，它继承了<code>SingletonBeanRegistry</code>接口和<code>HierarchicalBeanFactory</code>接口，它定义了针对<code>BeanFactory</code>的各种配置以及销毁方法；<br>8、<code>ConfigurableListableBeanFactory</code>：是接口，它继承了<code>ListableBeanFactory</code>接口、<code>AutowireCapableBeanFactory</code>接口和<code>ConfigurableBeanFactory</code>接口，它是<code>BeanFactory</code>的配置清单，这里定义了忽略的类型、接口，通过bean的名词获取BeanDefinition，冻结BeanDefinition等；<br>9、<code>AliasRegistry</code>（alias是别名）：是接口，它定义了对alias的注册、移除、判断以及查询操作；<br>10、<code>SimpleAliasRegistry</code>：是类，它实现了<code>AliasRegistry</code>接口中的所有方法，它还使用ConcurrentHashMap做载体，实现对alias的注册、移除、判断以及查询操作；<br>11、<code>DefaultSingletonBeanRegistry</code>：是类，它继承了<code>SimpleAliasRegistry</code>类，实现了<code>SingletonBeanRegistry</code>接口，这个类基于java中的集合，对<code>SingletonBeanRegistry</code>接口进行了实现；<br>12、<code>FactoryBeanRegistrySupport</code>：是类，继承了<code>DefaultSingletonBeanRegistry</code>类，在<code>DefaultSingletonBeanRegistry</code>的基础上，增加了获取FactoryBean类型、移除FactoryBean缓存的方法等；<br>13、<code>AbstractBeanFactory</code>：是类，继承了<code>FactoryBeanRegistrySupport</code>类，实现了<code>ConfigurableBeanFactory</code>接口；<br>14、<code>AbstractAutowireCapableBeanFactory</code>：是类，它继承了<code>AbstractBeanFactory</code>类，实现了<code>AutowireCapableBeanFactory</code>接口的所有方法；<br>15、<code>BeanDefinitionRegistry</code>：是接口，它继承了<code>AliasRegistry</code>接口，增加了一系列针对<code>BeanDefinition</code>的注册、移除、查询、判断等方法；<br>16、<code>DefaultListableBeanFactory</code>：是类，它继承了<code>AbstractAutowireCapableBeanFactory</code>类，实现了<code>BeanDefinitionRegistry</code>（定义了关于BeanDefinition的注册、移除、查询）、<code>ConfiguraListableBeanFactory</code>和<code>Serializable</code>（序列化接口）接口，它是bean工厂的一个默认实现类，提供了原始的BeanFactory的功能，如：对外提供getBean()方法，这个方法有两种方式获取bean，第一种方式是<code>AbstractBeanFactory</code>中提供的，根据名称获取bean；第二种方式是它自己的，根据类型获取bean（这种方式属于getBean方法的扩展）。<code>beanDefinitionMap</code>属性是beanDefinition信息表；<br>17、<code>InitializingBean</code><br>说明：是spring提供的扩展性接口，<code>InitializingBean</code>接口为bean提供了属性初始化后的处理方法，它只有一个方法，只要实现了该接口的类，所创建出来的bean，在bean初始化后都会执行该方法。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;构造方法执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postConstruct</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;@PostConstruct&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Test <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：输出优先级：构造方法执行 &gt; <span class="doctag">@PostConstruct</span> &gt; afterPropertiesSet &gt; init</span></span><br><span class="line"><span class="comment"> * 构造方法执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PostConstruct</span></span></span><br><span class="line"><span class="comment"> * afterPropertiesSet</span></span><br><span class="line"><span class="comment"> * init</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  说明：</span></span><br><span class="line"><span class="comment"> *  在spring初始化bean的时候，如果该bean实现了InitializingBean接口，</span></span><br><span class="line"><span class="comment"> *  并且同时配置了init-method，系统则是先调用afterPropertieSet()方法，</span></span><br><span class="line"><span class="comment"> *  然后再调用init-method中指定的方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>



<h1 id="二、Springboot使用方法"><a href="#二、Springboot使用方法" class="headerlink" title="二、Springboot使用方法"></a>二、Springboot使用方法</h1><h3 id="1、要想在tomcat中启动项目"><a href="#1、要想在tomcat中启动项目" class="headerlink" title="1、要想在tomcat中启动项目"></a>1、要想在tomcat中启动项目</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要想在tomcat中使用war包启动springboot项目，首先 先继承 SpringBootServletInitializer</span></span><br><span class="line">    <span class="comment">//然后在使用下面的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringbootApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、在配置文件中配置静态资源"><a href="#2、在配置文件中配置静态资源" class="headerlink" title="2、在配置文件中配置静态资源"></a>2、在配置文件中配置静态资源</h3><p>默认的静态资源路径为：<br>1、<code>classpath:/static/</code><br>2、<code>classpath:/public/</code><br>3、<code>classpath:/resources/</code><br>4、<code>classpath:/META-INF/resources/</code>  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">    <span class="attr">mvc:</span> </span><br><span class="line">        <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span>  <span class="comment">#修改静态资源访问路径，项目路径+/res/**</span></span><br><span class="line">    <span class="attr">resources:</span> </span><br><span class="line">        <span class="attr">static-locations:</span> <span class="string">classpath:/zuo</span>  <span class="comment">#修改静态资源存放路径，修改之后只有将静态资源放到zuo目录下才能被访问到。</span></span><br></pre></td></tr></table></figure>

<h3 id="3、springboot各种pom文件需要和学习指南地址"><a href="#3、springboot各种pom文件需要和学习指南地址" class="headerlink" title="3、springboot各种pom文件需要和学习指南地址"></a>3、springboot各种pom文件需要和学习指南地址</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#using-boot-starter">springboot各种pom文件需要和学习指南地址</a></p>
<h3 id="4、Springboot读配置的4种方式"><a href="#4、Springboot读配置的4种方式" class="headerlink" title="4、Springboot读配置的4种方式"></a>4、Springboot读配置的4种方式</h3><p>1、<code>@Value</code>注解<br><strong>使用该注解需要注意：</strong><br>（1）该类必须注入<code>spring</code>容器中，才能使用<code>@Value</code>注解获取配置文件中的数据。<br>（2）配置文件里必须有该属性，不然启动会报异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Value(&quot;$&#123;user.name:默认值&#125;&quot;) 为了不报异常，可以加默认值，如果是：&quot;$&#123;user.name:&#125;&quot;，表示值为&quot;&quot;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 如果属性有static和final关键字的话是无法生效的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、<code>@ConfigurationProperties</code>注解<br>只需要指定配置文件中某一个key的前缀就可以了。例如：<br>（1）配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo:</span></span><br><span class="line">    <span class="attr">userName:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure>
<p>（2）JavaDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;demo&quot;)</span> <span class="comment">// 这里的命名规范：要么全小写，要么小写-小写（xxx-xxx）格式，不能下划线</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用<code>@ConfigurationProperties</code>注解，必须将bean给spring管理。  </p>
<ol>
<li>方法一：在配置类上使用<code>@EnableConfigurationProperties(&#123;Demo.class&#125;)</code>；  </li>
<li>方法二：在实体类上使用<code>@Component</code>注解。</li>
</ol>
<p>3、通过<code>Environment</code>类动态获取（是spring底层提供的API）<br>（1）第一种实现方式，实现<code>EnvironmentAware</code>接口，重写<code>setEnvironment</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">EnvironmentAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.env = e;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">	    <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> env.getProperty(<span class="string">&quot;demo.userName&quot;</span>);</span><br><span class="line">	    System.out.println(<span class="string">&quot;从配置文件获取&quot;</span> + <span class="keyword">var</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）第二种通过自动注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> env.getProperty(<span class="string">&quot;demo.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;从配置文件获取&quot;</span> + <span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>以上三种是获取默认的配置文件，要想获取自定义的配置文件可以通过下面的方法：</strong>  </p>
<ol>
<li>默认的配置文件：<code>application</code>开头  </li>
<li>自定义：<code>demo.properties</code></li>
</ol>
<p>4、<code>@PropertySource</code>注解<br>只能获取<code>properties</code>的配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySources(@PropertySource(value = &quot;classpath:demo.properties&quot;,encoding = &quot;utf-8&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要想获取yml的需要设置配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyYmlConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlacehokderConfigurer <span class="title function_">yamlConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PropertySourcesPlacehokderConfigurer</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertySourcesPlacehokderConfigurer</span>();</span><br><span class="line">        <span class="type">YamlPropertiesFactory</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactory</span>();</span><br><span class="line">        y.setResources(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;demo.yml&quot;</span>));</span><br><span class="line">        p.setProperties(Objects.requireNonNull(y.getObject()));</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就可以通过第一种方式@Value注解获取。  </p>
<h3 id="5、Springboot获取bean对象方法"><a href="#5、Springboot获取bean对象方法" class="headerlink" title="5、Springboot获取bean对象方法"></a>5、Springboot获取bean对象方法</h3><p>1、启动获取<code>ApplicationContext</code><br>在项目启动时先获取 <code>ApplicationContext</code> 对象，然后将其存储在一个地方，以便后续用到时进行使用。<br>这里提供两种场景的获取：<br>（1）基于 <code>xml</code> 配置 <code>bean</code> 的形式，适用于比较古老的项目，已经很少使用了；<br>（2）基于 <code>SpringBoot</code> 启动时获取 <code>ApplicationContext</code> 对象；<br><strong>基于 xml 的形式实现：</strong><br>其中<code>applicationContext.xml</code> 为配置容器的<code>xml</code>，不过现在一般很少使用了。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这里等于直接初始化容器，并且获得容器的引用。这种方式适用于采用 <code>Spring</code> 框架的独立应用程序，需要程序通过配置文件手工初始化 <code>Spring</code> 的情况。目前大多数 <code>Spring</code> 项目已经不再采用 <code>xml</code> 配置，很少使用了。<br><strong>基于 SpringBoot 启动实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动时，保存上下文，并保存为静态</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> SpringApplication.run(ExampleApplication.class, args);</span><br><span class="line">        SpringContextUtil.setApplicationContext(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的 SpringContextUtil 类如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String beanName, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(beanName, clazz);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span>&#123;</span><br><span class="line">        ac = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种方式都是在启动 <code>Spring</code> 项目时，直接获取到 <code>ApplicationContext</code> 的引用，然后将其存储到工具类当中。在使用时，则从工具类中获取 <code>ApplicationContext</code> 容器，进而从中获得 <code>Bean</code> 对象。</p>
<p>2、通过继承<code>ApplicationObjectSupport</code><br>此种方式依旧是先获得 <code>ApplicationContext</code> 容器，然后从中获取 <code>Bean</code> 对象，只不过是基于继承 <code>ApplicationObjectSupport</code> 类实现的，具体实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">extends</span> <span class="title class_">ApplicationObjectSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line">        <span class="keyword">if</span>(ac == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ac.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>这里的 <code>SpringContextUtil</code> 类需要实例化。<br><code>ApplicationObjectSupport</code> 类图，我们看到它实现了 <code>ApplicationContextAware</code> 接口，在 <code>Spring</code> 容器初始化过程中回调方法 <code>setApplicationContext</code> 来完成 <code>ApplicationContext</code> 的赋值。</p>
<p>3、通过继承<code>WebApplicationObjectSupport</code><br><code>WebApplicationObjectSupport</code> 是 <code>ApplicationObjectSupport</code> 的一个实现类，提供了 <code>Web</code> 相关的支持。实现原理与 <code>ApplicationObjectSupport</code> 一样，具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">extends</span> <span class="title class_">WebApplicationObjectSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line">        <span class="keyword">if</span>(ac == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ac.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过类图我们可以看到它是 <code>ApplicationObjectSupport</code> 的实现子类，此方式除了继承对象不同外，没有其他区别，都是基于 <code>getApplicationContext</code> 方法来获取。</p>
<p>4、通过<code>WebApplicationContextUtils</code><br>Spring提供了工具类<code>WebApplicationContextUtils</code>，通过该类可获取<code>WebApplicationContext</code>对象，具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(ServletContext request, String name, Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="comment">// 或者 WebApplicationContext webApplicationContext1 = WebApplicationContextUtils.getWebApplicationContext(request);</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> WebApplicationContextUtils.getRequiredWebApplicationContext(request);</span><br><span class="line">        <span class="comment">// webApplicationContext1.getBean(name, clazz)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">bean</span> <span class="operator">=</span> webApplicationContext.getBean(name, clazz);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法很常见于 <code>SpringMVC</code> 构建的 Web 项目中，适用于 Web 项目的 B&#x2F;S 结构。</p>
<p>5、通过<code>ApplicationContextAware</code><br>通过实现<code>ApplicationContextAware</code>接口，在Spring容器启动时将<code>ApplicationContext</code>注入进去，从而获取<code>ApplicationContext</code>对象，这种方法也是常见的获取Bean的一种方式，推荐使用，具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil3</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        ac = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(clazz);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式与前面通过 <code>BeanFactoryAware</code> 获得 <code>BeanFactory</code> 的思路一致。</p>
<p>6、通过<code>ContextLoader</code><br>使用 <code>ContextLoader</code> 提供的 <code>getCurrentWebApplicationContext</code> 方法，也是常用的获取 <code>WebApplicationContext</code> 的一种方法，具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">wac.getBean(beanID);</span><br></pre></td></tr></table></figure>
<p>该方法常见于 SpringMVC 实现的 Web 项目中。该方式是一种不依赖于 Servlet，不需要注入的方式。但是需要注意一点，在服务器启动时和 Spring 容器初始化时，不能通过该方法获取 Spring 容器。</p>
<p>7、通过<code>BeanFactoryPostProcessor</code><br>Spring 工具类，方便在非 Spring 管理环境中获取 Bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SpringUtils</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Spring应用上下文环境 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException&#123;</span><br><span class="line">        SpringUtilsS.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) beanFactory.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取类型为requiredType的对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clz)</span> <span class="keyword">throws</span> BeansException&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T) beanFactory.getBean(clz);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.containsBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.isSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Class 注册对象的类型</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.getType(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 如果给定的bean名字在bean定义中有别名，则返回这些别名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] getAliases(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.getAliases(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取aop代理对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> invoker</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getAopProxy</span><span class="params">(T invoker)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) AopContext.currentProxy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 ConfigurableListableBeanFactory 接口，也属于 BeanFactory 的子接口。</p>
<h3 id="6、怎么使用好springboot自动配置"><a href="#6、怎么使用好springboot自动配置" class="headerlink" title="6、怎么使用好springboot自动配置"></a>6、怎么使用好springboot自动配置</h3><p>1、选场景：<code>spring-boot-starter-data-redis</code><br>然后找到这个场景的自动配置类 <code>xxxAutoConfiguration</code><br>2、写配置<br>在这个自动配置类中，找到 <code>@EnableConfigurationProperties(xxxProperties.class)</code> 分析开启了哪些属性绑定关系,修改redis相关的配置<br>3、分析组件<br>在 <code>xxxAutoConfiguration</code> 这个自动配置类中分析，因为有两个方法，表示这个自动配置类给容器中放了两个组件，有一个组件（方法）叫 <code>stringRedisTemplate</code> ，然后去业务代码中使用自动装配注解装配这个方法。（使用组件的前提是，知道这个组件是干嘛的）<br>4、定制化（如果不满足需求，需要定制化）<br>自定义组件，自己写一个 <code>stringRedisTemplate</code> 方法，并放到容器中（自动配置类中的 <code>stringRedisTemplate</code> 这个方法上面标注了 <code>@ConditionalOnMissingBean</code>，这个注解的作用就是如果我们自己写了下面的方法，则这个自动配置类就不加载这个方法，容器中使用我们自己自定义的方法。）<br>5、例子：自定义starter启动类<br>（1）步骤：  </p>
<ul>
<li>创建 aliyun-oss-spring-boot-starter 模块。（只负责依赖管理）  </li>
<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块</li>
<li>在 aliyun-oss-spring-boot-autoconfigure 模块中定义自动配置功能，并定义自动配置文件 META-INF&#x2F;spring&#x2F;xxx.imports （老版本的为 META-INF&#x2F;spring.factories）</li>
</ul>
<p>（2）实例（对应上面的步骤）  </p>
<ol>
<li>创建 aliyun-oss-spring-boot-starter 模块：<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot2.jpg" class="">
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot3.jpg" class="">
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot4.jpg" class=""></li>
<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块，pom文件同上：<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot5.jpg" class="">
注意：没有启动类、配置文件、测试类。</li>
</ol>
<ul>
<li>在步骤<code>1.</code>创建的模块pom文件中加入步骤<code>2.</code>创建的模块依赖：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPDHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在步骤<code>2.</code>创建的模块pom文件中引入oss依赖：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在<code>2.</code>模块中创建 <code>AliOSSProperties</code> 类 和 <code>AliOSSUtils</code> 类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get 和 set 方法.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AliOSSProperties aliOSSProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aliOSSProperties 的get方法</span></span><br><span class="line">    <span class="keyword">public</span> AliOSSProperties <span class="title function_">getAliOSSProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> aliOSSProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aliOSSProperties 的set方法</span></span><br><span class="line">    <span class="keyword">public</span> AliOSSProperties <span class="title function_">setAliOSSProperties</span><span class="params">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.aliOSSProperties = aliOSSProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> aliOSSProperties.getEndpoint();</span><br><span class="line">        String accessKeyId= aliOSSProperties.getAccessKeyId();</span><br><span class="line">        String accessKeySecret= aliOSSProperties.getAccessKeySecret();</span><br><span class="line">        String bucketName= aliOSSProperties.getBcketName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传的文件输入流</span></span><br><span class="line">        <span class="type">InputStrem</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 避免文件名重复导致被覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件到OSS</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint,accessKeyId,accessKeySecret);</span><br><span class="line">        ossClient.putObject(bucketName,fileName,inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接文件访问路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)]<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭ossClient</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在<code>2.</code>模块中创建 AliOSSAutoConfiguration 配置类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AliOSSProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AliOSSUtils <span class="title function_">aliOSSUtils</span><span class="params">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class="line">        <span class="type">AliOSSUtils</span> <span class="variable">aliOSSUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AliOSSUtils</span>();</span><br><span class="line">        aliOSSUtils.setAliOSSProperties(aliOSSProperties);</span><br><span class="line">        <span class="keyword">return</span> aliOSSUtils;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>在 <code>aliyun-oss-spring-boot-autoconfigure</code> 模块中定义自动配置功能，并定义自动配置文件 <code>META-INF/spring/xxx.imports</code> （老版本的为 <code>META-INF/spring.factories</code>）</li>
</ol>
<ul>
<li>在<code>2.</code>模块的<code>resource</code>目录下创建文件夹 <code>META-INF</code>，继续在<code>META-INF</code>文件夹下创建<code>spring</code>文件夹，继续在<code>spring</code>文件夹下创建：<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</li>
<li>将 <code>AliOSSAutoConfiguration</code> 类的全类名填入<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中</li>
</ul>
<h3 id="7、springboot多环境配置"><a href="#7、springboot多环境配置" class="headerlink" title="7、springboot多环境配置"></a>7、springboot多环境配置</h3><p>1、<code>properties</code>文件<br>将应用程序的配置参数分离到不同的<code>properties</code>文件中，每个环境对应一个<code>properties</code>文件。例如，可以创建<code>application-dev.properties</code>、<code>application-prod.properties</code>和<code>application-test.properties</code>等文件，在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等，然后在<code>application.properties</code>中通过<code>spring.profiles.active</code>属性指定当前使用的环境，springboot会根据该属性来加载对应环境的<code>properties</code>文件，覆盖默认的配置。<br>2、<code>yml</code>文件<br>同<code>properties</code>文件。<br>3、命令行参数（动态）<br>可以通过命令行参数来指定当前的环境，例如，使用<code>--spring.profiles.active=dev</code>来指定使用开发环境。  </p>
<h3 id="8、springboot打包插件"><a href="#8、springboot打包插件" class="headerlink" title="8、springboot打包插件"></a>8、springboot打包插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<br/>

<hr>
<br/>

<h1 id="三、Springboot其他组件"><a href="#三、Springboot其他组件" class="headerlink" title="三、Springboot其他组件"></a>三、Springboot其他组件</h1><h3 id="1、全局异常处理器"><a href="#1、全局异常处理器" class="headerlink" title="1、全局异常处理器"></a>1、全局异常处理器</h3><p>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span>&#123;</span><br><span class="line">    <span class="comment">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、过滤器和拦截器"><a href="#2、过滤器和拦截器" class="headerlink" title="2、过滤器和拦截器"></a>2、过滤器和拦截器</h3><img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>说明：过滤器是在浏览器发送请求到服务器（<code>DispatchServlet</code>）之前，而拦截器是在<code>handlerAdpater</code>与<code>handler</code>之间，以及视图返回到<code>DispatchServlet</code>之间。<br>1、过滤器<br><code>Filter</code>快速入门（是<code>javax.servlet</code>下的）：<br>（1）定义<code>Filter</code><br>定义一个类，实现<code>Filter</code>接口，并重写其所有方法。<br>（2）配置<code>Filter</code><br><code>Filter</code>类上加<code>@WebFilter</code>注解，配置拦截资源的路径，启动类上加<code>@ServletComponentScan</code>开启<code>Servlet</code>组件支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// urlPatterns ：要拦截什么样的请求，&quot;/*&quot;表示所有</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化方法，Web服务器启动，创建Filter时调用，只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span>&#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拦截到请求时，调用该方法，可调用多次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request,ServletResponse response,FilterChain chain)</span>&#123;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 销毁方法，服务器关闭时调用，只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、拦截器<br><code>Interceptor</code>快速入门：<br>（1）介绍<br><code>HandlerInterceptor</code>是Spring框架中的一个接口，它用于实现拦截器。在Spring框架中，拦截器是一种特殊的中间件，用于在请求处理之前或之后执行一些特定的操作。<code>HandlerInterceptor</code>口定义了三个方法：<code>preHandle()</code>、<code>postHandle()</code>和<code>afterCompletion()</code>，分别用于在请求处理之前、之后以及视图渲染之后执行一些操作。<br>实现<code>HandlerInterceptor</code>接口的类可以用于处理请求和响应，例如：  </p>
<ol>
<li>在请求处理之前执行一些操作，例如权限验证、日志记录等；  </li>
<li>在请求处理之后执行一些操作，例如处理异常、记录日志等；  </li>
<li>在视图渲染之后执行一些操作，例如清理资源、关闭连接等。</li>
</ol>
<p>要使用<code>HandlerInterceptor</code>接口，需要将其实现类注册到Spring容器中。可以通过实现<code>WebMvcConfigurer</code>接口的<code>addInterceptors()</code>方法来注册拦截器。<br>（2）实现方式<br>有两种方式（选择其中之一就可）：  </p>
<ol>
<li>方式一：定义一个类，实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口；  </li>
<li>方式二：定义一个类，继承已实现了<code>HandlerInterceptor</code>接口的类，例如<code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</code>抽象类。</li>
</ol>
<p>然后添加<code>Interceptor</code>拦截器到<code>WebMvcConfigurer</code>配置器中，以前一般继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter</code>类，不过SrpingBoot 2.0以上<code>WebMvcConfigurerAdapter</code>类就过时了。有以下两种替代方法：  </p>
<ul>
<li>第一种方式：直接实现<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurer</code>接口（推荐）；  </li>
<li>第二种方式：继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</code>类，但是继承<code>WebMvcConfigurationSupport</code>会让SpringBoot对mvc的自动配置失效，不过目前大多数项目是前后端分离，并没有对静态资源有自动配置的需求，所以继承<code>WebMvcConfigurationSupport</code>也未尝不可。</li>
</ul>
<p>（3）实现步骤  </p>
<ol>
<li>定义拦截器<br>实现<code>HandlerInterceptor</code>接口，并重写其所有方法。  </li>
<li>注册拦截器  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">    <span class="comment">// 目标资源方法执行前执行，返回true：放行；返回false：不放行</span></span><br><span class="line">	<span class="comment">// 预处理，在业务处理器处理请求之前被调用，可以进行登录拦截，编码处理、安全控制、权限校验等处理；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,Object handler)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标资源方法执行后执行</span></span><br><span class="line">	<span class="comment">// 后处理，在业务处理器处理请求执行完成后，生成视图之前被调用。即调用了Service并返回ModelAndView，</span></span><br><span class="line">	<span class="comment">// 但未进行页面渲染，可以修改ModelAndView，这个比较少用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,Object handler,ModelAndView modelAnd View)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  视图渲染完毕后执行，最后执行</span></span><br><span class="line">	<span class="comment">// 返回处理，在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。已经渲染了页面。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,Object handler,Exception ex)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
例子一：实现<code>HandlerInterceptor</code>接口<br>说明：此拦截器演示了通过注解形式，对用户权限进行拦截校验。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nobody.annotation.UserAuthenticate;</span><br><span class="line"><span class="keyword">import</span> com.nobody.context.UserContext;</span><br><span class="line"><span class="keyword">import</span> com.nobody.context.UserContextManager;</span><br><span class="line"><span class="keyword">import</span> com.nobody.exception.RestAPIError;</span><br><span class="line"><span class="keyword">import</span> com.nobody.exception.RestException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPermissionInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> UserContextManager userContextManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContextManager</span><span class="params">(UserContextManager userContextManager)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userContextManager = userContextManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      Object handler)</span> &#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptor preHandle -- &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">      <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取用户权限校验注解(优先获取方法，无则再从类获取)</span></span><br><span class="line">      <span class="type">UserAuthenticate</span> <span class="variable">userAuthenticate</span> <span class="operator">=</span></span><br><span class="line">          handlerMethod.getMethod().getAnnotation(UserAuthenticate.class);</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> == userAuthenticate) &#123;</span><br><span class="line">        userAuthenticate = handlerMethod.getMethod().getDeclaringClass()</span><br><span class="line">            .getAnnotation(UserAuthenticate.class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (userAuthenticate != <span class="literal">null</span> &amp;&amp; userAuthenticate.permission()) &#123;</span><br><span class="line">        <span class="comment">// 获取用户信息</span></span><br><span class="line">        <span class="type">UserContext</span> <span class="variable">userContext</span> <span class="operator">=</span> userContextManager.getUserContext(request);</span><br><span class="line">        <span class="comment">// 权限校验</span></span><br><span class="line">        <span class="keyword">if</span> (userAuthenticate.type() != userContext.getType()) &#123;</span><br><span class="line">          <span class="comment">// 如若不抛出异常，也可返回false</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">      ModelAndView modelAndView)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptor postHandle -- &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      Object handler, Exception ex)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptor afterCompletion -- &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
例子二：继承<code>HandlerInterceptorAdapter</code>类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPermissionInterceptorAdapter</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      Object handler)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter preHandle -- &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">      ModelAndView modelAndView)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter postHandle -- &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      Object handler, Exception ex)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter afterCompletion -- &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>添加拦截器配置<br>方法一：实现<code>WebMvcConfigurer</code>接口（推荐）  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebWvcConfigure</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span>&#123;</span><br><span class="line">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
方法一例子：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nobody.context.UserContextResolver;</span><br><span class="line"><span class="keyword">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> UserContextResolver userContextResolver;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserPermissionInterceptor</span><span class="params">(UserPermissionInterceptor userPermissionInterceptor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userPermissionInterceptor = userPermissionInterceptor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserPermissionInterceptorAdapter</span><span class="params">(</span></span><br><span class="line"><span class="params">      UserPermissionInterceptorAdapter userPermissionInterceptorAdapter)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userPermissionInterceptorAdapter = userPermissionInterceptorAdapter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserContextResolver</span><span class="params">(UserContextResolver userContextResolver)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userContextResolver = userContextResolver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class="line">    <span class="comment">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class="line">    <span class="comment">// 多个拦截器可以设置order顺序，值越小，preHandle越先执行，postHandle和afterCompletion越后执行</span></span><br><span class="line">    <span class="comment">// order默认的值是0，如果只添加一个拦截器，可以不显示设置order的值</span></span><br><span class="line">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/base/index&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/base/index&quot;).order(1);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">    resolvers.add(userContextResolver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
方法二：继承<code>WebMvcConfigurationSupport</code>类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfigurerSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @Autowired</span></span><br><span class="line">  <span class="comment">// private UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class="line">    <span class="comment">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class="line">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/base/index&quot;</span>);</span><br><span class="line">    <span class="comment">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/base/index&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
（4）其他主要辅助类  </li>
<li>用户上下文类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContext</span> &#123;</span><br><span class="line">  <span class="comment">// 用户名称</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="comment">// 用户ID</span></span><br><span class="line">  <span class="keyword">private</span> String userId;</span><br><span class="line">  <span class="comment">// 用户类型</span></span><br><span class="line">  <span class="keyword">private</span> AuthenticationTypeEnum type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>用户上下文操作类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.nobody.exception.RestAPIError;</span><br><span class="line"><span class="keyword">import</span> com.nobody.exception.RestException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContextManager</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COOKIE_KEY</span> <span class="operator">=</span> <span class="string">&quot;__userToken&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @Autowired</span></span><br><span class="line">  <span class="comment">// private RedisService redisService;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取用户上下文信息</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> UserContext <span class="title function_">getUserContext</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userToken</span> <span class="operator">=</span> getUserToken(request, COOKIE_KEY);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(userToken)) &#123;</span><br><span class="line">      <span class="comment">// 从缓存或者第三方获取用户信息</span></span><br><span class="line">      <span class="comment">// String userContextStr = redisService.getString(userToken);</span></span><br><span class="line">      <span class="comment">// if (!StringUtils.isEmpty(userContextStr)) &#123;</span></span><br><span class="line">      <span class="comment">// return JSON.parseObject(userContextStr, UserContext.class);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// 因为演示，没集成Redis，故简单new对象</span></span><br><span class="line">      <span class="type">UserContext</span> <span class="variable">userContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserContext</span>();</span><br><span class="line">      userContext.setName(<span class="string">&quot;Mr.nobody&quot;</span>);</span><br><span class="line">      userContext.setUserId(<span class="string">&quot;0000001&quot;</span>);</span><br><span class="line">      userContext.setType(AuthenticationTypeEnum.ADMIN);</span><br><span class="line">      <span class="keyword">return</span> userContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUserToken</span><span class="params">(HttpServletRequest request, String cookieKey)</span> &#123;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != cookies) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(cookie.getName(), cookieKey)) &#123;</span><br><span class="line">          <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存用户上下文信息</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> userContextStr</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUserContext</span><span class="params">(HttpServletResponse response, String userContextStr)</span> &#123;</span><br><span class="line">    <span class="comment">// 用户token实际根据自己业务进行生成，此处简单用UUID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">userToken</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">// 设置cookie</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(COOKIE_KEY, userToken);</span><br><span class="line">    cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="comment">// redis缓存</span></span><br><span class="line">    <span class="comment">// redisService.setString(userToken, userContextStr, 3600);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方法参数解析器类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  对有UserContext参数的接口，进行拦截注入用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContextResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserContextManager userContextManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">      NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;&gt;&gt; resolveArgument -- begin...&quot;</span>);</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">    <span class="comment">// 从缓存获取用户信息赋值到接口参数中</span></span><br><span class="line">    <span class="keyword">return</span> userContextManager.getUserContext(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只对UserContext参数进行拦截赋值</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> methodParameter</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter methodParameter)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (methodParameter.getParameterType().equals(UserContext.class)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
（5）拦截路径  </li>
<li><code>/*</code> ：能匹配 <code>/dept、/emps、/login</code>，不能匹配 <code>/dept/list</code>。  </li>
<li><code>/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。  </li>
<li><code>/dept/*</code> ：能匹配 <code>/dept/list</code>，不能匹配 <code>/dept/list/find、/dept</code>。  </li>
<li><code>/dept/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。</li>
</ol>
<p>（6）多个拦截器执行顺序  </p>
<img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>上面这个图是每个拦截器都放行的情况下。<br>如果其中一个拦截器不放行，那所有的<code>postHandle</code>都不会执行，然后不放行的拦截器中的<code>afterCompletion</code>不会执行，其他的拦截器的<code>afterCompletion</code>会执行。例如：拦截器3不放行，那么执行的方法为：<code>拦截器1的preHandle</code>-》<code>拦截器2的preHandle</code>-》<code>拦截器3的preHandle</code>-》<code>拦截器2的afterCompletion</code>-》<code>拦截器1的afterCompletion</code>。<br>总结就是：  </p>
<ol>
<li>只有所有拦截器都放行了，postHandle方法才会执行。  </li>
<li>只有当前拦截器放行了，当前拦截器的afterCompletion方法才会执行。</li>
</ol>
<p>3、过滤器和拦截器的区别<br>（1）执行流程  </p>
<ol>
<li>浏览器发送请求  </li>
<li><code>Filter</code>过滤器  </li>
<li><code>DispatcherServlet</code>  </li>
<li><code>Interceptor</code>拦截器  </li>
<li><code>Controller</code></li>
</ol>
<p>（2）区别  </p>
<ol>
<li>接口规范不同<br><code>Filter</code>过滤器需要实现<code>Filter</code>接口，而拦截器需要实现<code>HandlerInterceptor</code>接口。  </li>
<li>拦截范围不同<br>过滤器<code>Filter</code>会拦截所有的资源，而<code>Interceptor</code>只会拦截spring环境中的资源。  </li>
<li>拦截器是<code>spring</code>中的，只能作用于<code>DispatcherServlet</code>，过滤器是<code>servlet</code>。  </li>
<li>拦截器基于java反射机制，过滤器基于函数回调。  </li>
<li>拦截器只对<code>action</code>请求起作用，过滤器几乎所有请求都起作用。  </li>
<li>拦截器可以多次被调用，过滤器只能在初始化的时候被调用一次。</li>
</ol>
<h3 id="3、热部署"><a href="#3、热部署" class="headerlink" title="3、热部署"></a>3、热部署</h3><p>1、使用 jrebel 插件<br>编写玩代码后，使用 <code>jrebel</code> 这个插件自带的启动按钮启动，然后每次编写玩都按 <code>ctrl + f9</code> 使用热部署。</p>
<p>2、设置IDEA热部署<br>设置后，我们就不用频繁的去手动重启，它会自动刷新。就是写好代码后，在IDEA中按<code>ctrl + F9</code>，再去浏览器刷新。如果不想按<code>ctrl + F9</code>，也可以这样设置，先设置，<code>Settings ---&gt; Build ---&gt; Compiler</code>，设置自动编译（<code>Builed project automatically</code>勾选），然后<code>ctrl + shift + alt + /</code>，点击<code>Registry</code>，勾选<code>compiler.automake.allow.app.running</code>。</p>
<br/>

<hr>
<br/>

<h1 id="四、Springboot使用过程中遇到的问题合集"><a href="#四、Springboot使用过程中遇到的问题合集" class="headerlink" title="四、Springboot使用过程中遇到的问题合集"></a>四、Springboot使用过程中遇到的问题合集</h1><h3 id="1、springboot自动注入问题"><a href="#1、springboot自动注入问题" class="headerlink" title="1、springboot自动注入问题"></a>1、springboot自动注入问题</h3><p>1、使用了<code>@Component</code>注解还是无法获取到<code>bean</code>对象<br>原因：是因为<code>springboot</code>扫描器没有扫描到，默认扫描<code>springboot</code>启动类同级的包。<br>（1）解决方法一：需要到<code>springboot</code>启动类上加上包扫描注解<code>@ComponentScan</code>，而且不止要扫描需要扫描的包，还要扫描原来<code>springboot</code>启动类同级的包：<code>@ComponentScan(&#123;&quot;xxx.xxx.xxx&quot;,&quot;yyy.yyy.yyy&#125;)</code>。<br>（2）解决方法二：在<code>springboot</code>启动类上使用<code>@Import</code>注解，例子：<code>@Import(&#123;Demo1.class,Demo2.class&#125;)</code>，大括号里的<code>class</code>是需要被扫描到的类（不需要使用任何注解的普通类）。<br>（3）解决方法三：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在启动类上使用<code>@Import</code>注解，将这个配置类导入。例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Demo1 <span class="title function_">demo1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Demo2 <span class="title function_">demo2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Demo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@Import(&#123;DemoConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>()&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;.....&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）解决方法四：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在新建一个选择器类实现<code>ImportSelector</code>接口，实现这个接口的方法，在这个方法中，将配置类返回，然后将这个选择器类在启动类上使用<code>@Import</code>注解导入，例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Demo1 <span class="title function_">demo1</span><span class="params">()</span>&#123; <span class="comment">// 需要扫描的类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Demo2 <span class="title function_">demo2</span><span class="params">()</span>&#123; <span class="comment">// 需要扫描的类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Demo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoSelect</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata i)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;xxx.xxx.DemoConfig&quot;</span>&#125;; <span class="comment">// 上面的配置类包路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@Import(&#123;DemoSelect.class&#125;)</span>  <span class="comment">// 将上面选择器类导入</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>()&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;.....&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong><br>上面的方法太繁琐了，一般需要扫描的包中会提供给我们一个注解<code>@EnableXXXX</code>注解，这个注解封装了上面使用到<code>@Import</code>和<code>@ImportSelector</code>注解，我们直接在启动类上使用<code>@EnableXXXX</code>注解就可以了。  </p>
<h3 id="2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常"><a href="#2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常" class="headerlink" title="2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常"></a>2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常</h3><p>1、说明：<br>（1）一个方法中只能有一个<code>@RequestBody</code>注解，因为<code>RequestBody</code>就是<code>request</code>的<code>inputStream</code>，这个流在第一次使用该注解后会关闭，后面的都会报错（stream closed）；<br>（2）默认情况下<code>@RequestBody</code>标注的对象必须包含前台传来的所有字段，如果没有包含前台传来的字段，就会报错：<code>Unrecognized field xxx , not marked as ignorable</code>，这是因为<code>MappingJacksonHttpMessageConverter</code>默认要求必须存在相应的字段，如果没有前台传来的某个字段，就会报错。<br>2、解决前端请求多余字段转换报错问题<br>（1）第一种：后端实体类可以增加一个字段来接收前台传来的这个值。<br>（2）第二种：在前端往后端传值的时候，去掉无用的字段，这样还能减少网络传输的大小。<br>（3）第三种：使用<code>com.fasterxml.jackson</code>提供的json注解  </p>
<ul>
<li><code>@JsonIgnore</code>注解用来忽略某些字段，可以用在Field或者Getter方法上，用在Setter方法时，和Filed效果一样。  </li>
<li><code>@JsonIgnoreProperties(ignoreUnknown = true)</code>，将这个注解写在类上之后，就会忽略类中不存在的字段。  </li>
<li><code>@JsonIgnoreProperties(&#123; &quot;internalId&quot;, &quot;secretKey&quot; &#125;)</code>，指定要忽略的字段，用在类上。<br>例子：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="keyword">public</span> Myclass &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
（4）第四种：重写配置类方式  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//添加此配置</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、有关对象属性中有枚举list怎么传参"><a href="#3、有关对象属性中有枚举list怎么传参" class="headerlink" title="3、有关对象属性中有枚举list怎么传参"></a>3、有关对象属性中有枚举list怎么传参</h3><p>1、实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageScanningScheme</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;ImageScanningRuleEnum&gt; rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ImageScanningRuleEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    LOW(<span class="string">&quot;LOW&quot;</span>, <span class="string">&quot;较低&quot;</span>),</span><br><span class="line">    HIGH(<span class="string">&quot;HIGH&quot;</span>, <span class="string">&quot;高危&quot;</span>),</span><br><span class="line">    MEDIUM(<span class="string">&quot;MEDIUM&quot;</span>, <span class="string">&quot;中危&quot;</span>),</span><br><span class="line">    CRITICAL(<span class="string">&quot;CRITICAL&quot;</span>, <span class="string">&quot;严重&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ImageScanningRuleEnum(String code, String text) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、前端（postman）传参</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;rule&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;LOW&quot;</span><span class="punctuation">,</span> <span class="string">&quot;MEDIUM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;HIGH&quot;</span><span class="punctuation">,</span> <span class="string">&quot;CRITICAL&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、事务失效问题"><a href="#4、事务失效问题" class="headerlink" title="4、事务失效问题"></a>4、事务失效问题</h3><p><a href="https://www.cnblogs.com/likeguang/p/15715702.html">完整详情链接</a><br>1、场景一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> UserService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class="line">		a();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：因为<code>test</code>方法被<code>@Transactional</code>标注，事务又是基于<code>aop</code>实现的，所以<code>UserService</code>的代理类执行<code>test</code>方法，<code>a</code>方法也被<code>@Transactional</code>标注，并且传播方式为：如果已经存在了一个事务就抛出异常；很明显，已经存在一个事务，所以正常情况会抛出异常，但是现在不会，因为事务失效了。<br>原因：<code>test</code>方法中执行<code>a</code>方法，是<code>UserService</code>类本身去调用执行的，并不是它的代理类去调用执行，所以它失效了。<br>解决办法：<br>让它代理类去调用执行<code>a</code>方法，而不是它本身去调用执行。<br>（1）办法一  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> UserService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class="line">		userService.a();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）办法二  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加注解防止报错</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> UserService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class="line">		<span class="comment">// 加入后运行会报个错，需要你设置exposeProxy = true 在该类上加个注解</span></span><br><span class="line">		<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) AopContext.currentProxy();</span><br><span class="line">		userService.a();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">		jdbcTemplate.execute(<span class="string">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）办法三<br>将<code>a</code>方法提出去另一个类（<code>xxxService</code>）中，在由这个类来调用执行。  </p>
<h3 id="5、关于配置类List对象映射到实体类问题"><a href="#5、关于配置类List对象映射到实体类问题" class="headerlink" title="5、关于配置类List对象映射到实体类问题"></a>5、关于配置类List对象映射到实体类问题</h3><p>1、实体类<br>实体类中的属性名称必须对应配置文件中list对象中属性的名称。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DetectionPackageType</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String language;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、实体配置类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;detection-package-type&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DetectionPackageTypeConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// packages必须对应配置文件中名称</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DetectionPackageType&gt; packages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、yaml配置文件  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">detection-package-type:</span></span><br><span class="line">  <span class="attr">packages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Java检测规则包</span></span><br><span class="line">      <span class="attr">code:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">language:</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Css基础检测包</span></span><br><span class="line">      <span class="attr">code:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">language:</span> <span class="string">Css</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JavaScript基础检测包</span></span><br><span class="line">      <span class="attr">code:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">language:</span> <span class="string">JavaScript</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Html基础检测包</span></span><br><span class="line">      <span class="attr">code:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">language:</span> <span class="string">Html</span></span><br></pre></td></tr></table></figure>
<p>4、使用  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：这里注入的是实体配置类！</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DetectionPackageTypeConfig detectionPackageTypeConfig;</span><br></pre></td></tr></table></figure>


<h3 id="6、VO、DTO、BO、PO、DO的区别"><a href="#6、VO、DTO、BO、PO、DO的区别" class="headerlink" title="6、VO、DTO、BO、PO、DO的区别"></a>6、VO、DTO、BO、PO、DO的区别</h3><img src="/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  


<h3 id="7、链式调用"><a href="#7、链式调用" class="headerlink" title="7、链式调用"></a>7、链式调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">		test.test1().test2().test3();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Test <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Test <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Test <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">test1</span></span><br><span class="line">test2</span><br><span class="line">test3</span><br></pre></td></tr></table></figure>


<h3 id="8、替换-Autowired注解的方式"><a href="#8、替换-Autowired注解的方式" class="headerlink" title="8、替换@Autowired注解的方式"></a>8、替换@Autowired注解的方式</h3><p>使用lombok的<code>@RequiredArgsConstructor</code>注解。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">	<span class="comment">// 这里的final必须和@RequiredArgsConstructor一起用</span></span><br><span class="line">    <span class="comment">// 不注入的话就不用加final，要注入才加final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestService testService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Vue-基础知识整理"><a href="#一、Vue-基础知识整理" class="headerlink" title="一、Vue 基础知识整理"></a>一、Vue 基础知识整理</h1><h3 id="1、项目结构说明"><a href="#1、项目结构说明" class="headerlink" title="1、项目结构说明"></a>1、项目结构说明</h3><img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue21.jpg" class="">
<p>1、<code>node_modules</code>：相当于maven仓库，里面是项目所需的各种包。<br>2、<code>public</code>：放静态资源，需要注意：放在<code>public</code>文件夹中的静态资源，webpack进行打包的时候，会原封不动打包到dist文件夹中。<br>3、<code>src</code>：（放项目代码）<br>（1）<code>assets</code>：存放log照片，一般放置多个组件共用的静态资源，需要注意：放置在<code>assets</code>文件夹里面的静态资源，在webpack打包的时候，webpack会把静态资源当作一个模块，打包到js文件里面。<br>（2）<code>componens</code>：放各种组件，一般放置的是非路由组件。<br>（3）<code>router</code>：index.js 放路由（路由的作用相当于ajax里的url，controller里的RequestMapping注解）<br>（4）<code>store</code>：store.js 放共享数据。<br>（5）<code>views</code>：放各种页面和组件（路由组件）。<br>4、<code>App.vue</code>：项目启动之后展示的页面。<br>5、<code>axios.js</code>：作用相当于拦截器、过滤器，比如可以设置：当页面访问失败出现的页面或者异常，成功输出什么，找不到页面输出什么之类。<br>6、<code>main.js</code>：项目的入口，相当于java里main方法，springboot里的启动类。<br>7、<code>package.json</code>：相当于pom.xml。<br>8、<code>mock.js</code>：相当于模拟了一个后端。它的作用就是给前端模拟一个后端，给前端返回后端处理好大的数据。<br>9、<code>globalFun.js</code>：可复用js。<br>10、<code>babel.config.js</code>：配置文件（babel相关）。<br>11、<code>package-lock.json</code>：缓存性文件（可删除）。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// Vue.mixin() 是一种分发 Vue 组件中可复用功能的非常灵活的方式。</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">hasAuth</span>(<span class="params">perm</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> authority = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">menu</span>.<span class="property">permList</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> authority.<span class="title function_">indexOf</span>(perm) &gt; -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、一些基本命令"><a href="#2、一些基本命令" class="headerlink" title="2、一些基本命令"></a>2、一些基本命令</h3><p>1、<code>npm run serve</code>：启动项目，这个可以在 package.json 里查看。<br>2、<code>npm install（简写：npm i）</code>：初始化，拿到项目时，使用这个命令初始化项目所需的各个依赖包。<br>3、<code>npm install xxx --save（简写：-S大写）-dev</code>：xxx 表示某个依赖名字，–save 表示将这个依赖保存进 package.json 依赖标签里，-dev 表示将这个依赖保存进 package.json 开发依赖标签里。<br>4、<code>@</code>：表示src&#x2F;。<br>5、<code>vue inspect &gt; output.js</code>：在项目下使用，将vue项目配置信息输出到output.js文件中。</p>
<h3 id="3、项目文件详情"><a href="#3、项目文件详情" class="headerlink" title="3、项目文件详情"></a>3、项目文件详情</h3><p>1、<code>package.json</code></p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue22.jpg" class="">
<p>2、<code>main.js</code></p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue23.jpg" class="">
<p>（上图中axios是导入自己写的axios.js）<br>补充：axios用法官网查看，这里下载的依赖是原生axios依赖，还有个是集成vue的axios，两个的作用都是通信工具，选择一个就可以了。</p>
<br/>

<hr>
<br/>


<h1 id="二、vue框架搭建和登录"><a href="#二、vue框架搭建和登录" class="headerlink" title="二、vue框架搭建和登录"></a>二、vue框架搭建和登录</h1><h3 id="1、创建vue项目"><a href="#1、创建vue项目" class="headerlink" title="1、创建vue项目"></a>1、创建vue项目</h3><p><strong>说明：</strong>有三种方法：<br>1、通过<code>vue-cli</code>脚手架创建<br>（1）使用<code>npm</code>下载<code>vue-cli</code><br>使用 <code>vue -version</code> 命令检查是否下载完成。如果显示：<code>vue</code>版本号，说明下载完成。<br>（2）<code>vue create 【项目名】</code><br>然后选择需要创建的项目是<code>vue2</code>还是<code>vue3</code>或者手动配置，选择手动配置的话需要手动进入项目中输入<code>npm i</code> 初始化项目。<br>2、通过<code>vue ui</code>界面创建项目<br>输入命令 <code>vue ui</code> 创建项目。<br>选择手动创建  </p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue24.jpg" class="">
<p>其他创建方法请点击：<a href="https://blog.csdn.net/Monsters___/article/details/126552454">这里</a></p>
<h3 id="2、项目搭建"><a href="#2、项目搭建" class="headerlink" title="2、项目搭建"></a>2、项目搭建</h3><p>1、分别在项目中安装 <code>vue-router</code> 和 <code>vuex</code>，<code>elementui</code>。<br>2、在<code>src</code>目录下分别创建两个文件夹<code>router</code>和<code>store</code>，并在两个文件夹分别创建一个<code>index.js</code>。<br><code>router</code>文件夹下的<code>index.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Register</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Register&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title function_">router</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Register&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Register</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Home&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>3、在<code>main.js</code>中添加和挂载依赖和组件：<br><code>main.js：</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxios</span> <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxios</span>,axios)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>4、登录页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login_title&quot;</span>&gt;</span>系统登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;登录账号&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;登录密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;Login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: white;color: cornflowerblue&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toRegister&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Login</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8088/login&#x27;</span>,<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.$message(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;成功登录！&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;success&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&quot;/Home&quot;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toRegister</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&quot;/Register&quot;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.login</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-position</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.login-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-clip</span>: padding-box <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">90px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">35px</span> <span class="number">15px</span> <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eaeaee</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">#cac6c6</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<br/>

<hr>
<br/>


<h1 id="三、Vue-相关组件"><a href="#三、Vue-相关组件" class="headerlink" title="三、Vue 相关组件"></a>三、Vue 相关组件</h1><h3 id="1、父子组件互相传值"><a href="#1、父子组件互相传值" class="headerlink" title="1、父子组件互相传值"></a>1、父子组件互相传值</h3><p><strong>父组件向子组件传值（父 ————》子）</strong><br>1、方法一：通过<code>props</code><br>（1）父组件：<br>步骤：<br>a. 将子组件导入父组件中；<br>b. 使用子组件，并在子组件标签中通过“ : ” + 需要传递的数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:  <span class="string">&#x27;parent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;传给子组件的值&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：<br>步骤：使用props属性来接收父组件传递过来的数据，数据名要和父组件保持一致。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        // 使用从父组件接收过来的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:  <span class="string">&#x27;child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用props接收父组件传递过来的数据 也可以直接写成props: [&quot;name&quot;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>（1）父组件的数据发生了改变，子组件会自动跟着变<br>（2）子组件不能直接修改父组件传递过来的props，会报错<br>（3）父组件给子组件传递的是一个对象的话，子组件可以修改这个对象，因为对象是引用类型  </p>
<p>2、通过<code>$parent</code><br>说明：子组件通过 this.$parent 获取父组件的值或者方法，并可以直接对其值进行修改或直接调用方法。<br>（1）父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;父组件中的值&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        // 显示从父组件获取的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击修改父组件中的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 利用 $parent 获取父组件中的数据或方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 利用 $parent 修改父组件中的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">name</span> = <span class="string">&quot;修改父组件中传递过来的值&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>子组件向父组件传值（子 ————》父）</strong><br>1、方法一：通过<code>props</code><br>说明：子组件通过点击按钮，将子组件的数据传给父组件。<br>a. 父组件内，给组件@自定义事件&#x3D;”父methods函数”；<br>b. 子组件内，使用<code>props</code>接收父组件定义的自定义事件。<br>（1）父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        // 显示子组件传递过来的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        // @自定义事件=&quot;父methods函数&quot;</span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:checkShow</span>=<span class="string">&quot;checkShowFn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">checkShowFn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将子组件传递过来的数据赋值给name值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = value</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击之后将值传递给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>: [<span class="string">&#x27;checkShow&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">checkShow</span>(<span class="string">&#x27;需要传递给父组件的值&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、方法二：通过<code>$emit</code><br>说明：<br>a. 父组件内，给组件@自定义事件&#x3D;”父methods函数”；<br>b. 子组件内，恰当时机 this.$emit(“上面自定义事件名,值)。<br>（1）父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        // 显示子组件传递过来的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        // 方式一：@自定义事件=&quot;父methods函数&quot;</span><br><span class="line">		// native修饰符是让子组件标签能使用原生的事件f</span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> @<span class="attr">checkShow</span>=<span class="string">&quot;checkShowFn&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;f&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		// 方式二：也可以通过这种方式来实现</span><br><span class="line">		<span class="comment">&lt;!-- &lt;child ref=&quot;child&quot;&gt;&lt;/child&gt; --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 在mounted周期函数中使用 this.$refs.child.$on(&#x27;checkShow&#x27;, this.checkShowFn)来触发 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			特别注意：使用$on时，可以直接这样使用 this.$refs.child.$on(&#x27;checkShow&#x27;, () -&gt; &#123;&#125;)，</span></span><br><span class="line"><span class="comment">			第二个参数必须使用箭头函数，因为使用普通函数function()&#123;&#125;时，函数里面的this指向的是子</span></span><br><span class="line"><span class="comment">			组件，不是父组件</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">checkShowFn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将子组件传递过来的数据赋值给name值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = value</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">		f () &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 原生事件</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击之后将值传递给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		//解绑自定义事件</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unbind&quot;</span>&gt;</span>解绑自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;上面自定义事件名,值)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;checkShow&#x27;</span>,<span class="string">&quot;需要传递给父组件的值&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">unbind</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑一个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.$off(<span class="string">&#x27;checkShow&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑多个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// this.$off([&#x27;checkShow&#x27;,&#x27;checkShow2&#x27;])</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑所有自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// this.$off()</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、<a href="https://blog.csdn.net/czjl6886/article/details/121588740">子传父其他方式链接</a>  </p>
<p><strong>当父向子传值 子组件又要修改父组件的值时 用到的方法</strong><br>方法一：<br>1、父组件：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Form</span> <span class="attr">:entityl</span>=<span class="string">&quot;entityl&quot;</span> @<span class="attr">changeCreate</span>=<span class="string">&quot;changeCreate&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Form</span> <span class="keyword">from</span> <span class="string">&#x27;./Form.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> entityl = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建回调</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeCreate</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	entityl.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、子组件：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;dialogVisible&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;创建域名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-close</span>=<span class="string">&quot;handleClose&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;formRef&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm configuration&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">status-icon</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.radio1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>全域名<span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>泛域名<span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;域名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.namespace&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;32&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> /&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;分配集群&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MultipleSelection</span> <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span> <span class="attr">:ruleFormData</span>=<span class="string">&quot;ruleForm.namespaceData&quot;</span> @<span class="attr">multipleSelect</span>=<span class="string">&quot;multipleSelect&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;项目绑定&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MultipleSelection</span> <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span> <span class="attr">:ruleFormData</span>=<span class="string">&quot;ruleForm.namespaceData&quot;</span> @<span class="attr">multipleSelect</span>=<span class="string">&quot;multipleSelect&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClose&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit(formRef)&quot;</span>&gt;</span></span><br><span class="line">          创建</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch, reactive, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MultipleSelection</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/common/MultipleSelection.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;changeCreate&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">entityl</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> options = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">value</span>: <span class="string">&#x27;192.1.1.1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;192.1.1.1&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">value</span>: <span class="string">&#x27;192.1.1.2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;192.1.1.2&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">value</span>: <span class="string">&#x27;192.1.1.3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;192.1.1.3&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formRef = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> ruleForm = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">namespace</span>: <span class="string">&#x27;&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">	<span class="attr">radio1</span>: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">namespaceData</span>: []</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">namespace</span>: [</span></span><br><span class="line"><span class="language-javascript">		&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	],</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">multipleSelect</span> = (<span class="params">b</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	ruleForm.<span class="property">namespaceData</span> = b;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 提交、创建</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = <span class="keyword">async</span>(<span class="params">formEl</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span> (!formEl) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">await</span> formEl.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid, fields</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!&#x27;</span>, fields);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 取消、关闭</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleClose</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	formRef.<span class="property">value</span>.<span class="title function_">resetFields</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">emits</span>(<span class="string">&#x27;changeCreate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">	<span class="function">() =&gt;</span> props.<span class="property">entityl</span>, </span></span><br><span class="line"><span class="language-javascript">	<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		dialogVisible.<span class="property">value</span> = value;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>方法二：<br>1、通过<code>v-model</code> （一个组件只能使用一次）<br>使用技巧：<br>a. 父组件内，在组件上使用 <code>v-model</code>（以下俩句代码是<code>v-model</code>的原理）<br>传递<code>:value=&quot;Show&quot;</code><br>修改<code>@input=&quot;Show= $event&quot;</code>，这个<code>$event</code> 就是子组件传递过来的值。<br>b. 子组件内，在<code>props</code>中默认用<code>value</code>接收传递过来的值；在<code>methods</code>中通过默认的自定义事件名传递要修改的值。<br>（1）父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-model</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child_type&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父组件用 v-model 传值，子组件的props默认只能用 value 命名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>,!<span class="variable language_">this</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.child_type</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong><br>（1）一个组件上只能使用一次 <code>v-model</code>；<br>（2）如果需要修改 <code>v-model</code> 的规则名称，可以通过子组件的 <code>model</code> 属性来配置修改。<br>实例如下：<br>在子组件的<code>model</code>中进行修改，父组件不用变：<br>修改的子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child_type&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">model</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">prop</span>: <span class="string">&quot;isShow&quot;</span>, <span class="comment">// 对应上面v-if中的名称，默认是value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">event</span>: <span class="string">&quot;checkShow&quot;</span> <span class="comment">// 默认是input</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 默认是value，因为改成了isShow了，所以这里也要变成isShow</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isShow</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对应上面model属性中的event，默认是input，因为改成了checkShow了，所以这里也要变成checkShow</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;checkShow&quot;</span>,!<span class="variable language_">this</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.child_type</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>疑问: 如果有多个数据需要实现类似于 <code>v-model</code> 的效果什么实现呐？<br>答案：<code>.sync</code>修饰符  </p>
<p>2、使用属性的 <code>.sync</code> 修饰符<br>使用技巧：<br>父组件内，在组件使用<code>.sync</code>；<br>子组件内，在适当的时机<code>this.$emit(&#39;update:props属性名&#39;，值)</code>。<br>（1）父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:isShow.sync</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/child&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child_type&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父组件用 v-model 传值，子组件的props默认只能用 value 命名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isShow</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 语法：$emit(&quot;update:props属性名&quot;,值)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:isShow&quot;</span>,!<span class="variable language_">this</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.child_type</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、Watch监听"><a href="#2、Watch监听" class="headerlink" title="2、Watch监听"></a>2、Watch监听</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">firstname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">lastname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">fullname</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123; <span class="comment">// 使用这个属性，监听data中指定数据的变化，然后触发这个watch中对应的function函数</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 下面的意思是监听firstname这个属性，如果这个属性发生改变，就触发后面function函数</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//（一般属性带-的才加引号，例如：first-name，必须加引号）</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 简写形式</span></span></span><br><span class="line"><span class="language-javascript">		<span class="string">&#x27;firstname&#x27;</span>: <span class="keyword">function</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// this.fullname = this.firstname + this.lastname 也可以下面</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">fullname</span> = newVal + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="string">&#x27;lastname&#x27;</span>: <span class="keyword">function</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">fullname</span> = <span class="variable language_">this</span>.<span class="property">firstname</span> + newVal</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 简写的另一种写法</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">firstName</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">fullname</span> = newVal + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// watch监听完整写法</span></span></span><br><span class="line"><span class="language-javascript">	<span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">firstName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">fullname</span> = newVal + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 页面一启动就监听</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 还可以这样写（完整写法）</span></span></span><br><span class="line"><span class="language-javascript">  vm.$watch(<span class="string">&#x27;firstname&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">	  <span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">	  	<span class="variable language_">this</span>.<span class="property">fullname</span> = newVal + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">	  &#125;,</span></span><br><span class="line"><span class="language-javascript">	  <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 页面一启动就监听</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 简写</span></span></span><br><span class="line"><span class="language-javascript">  vm.$watch(<span class="string">&#x27;firstname&#x27;</span>, <span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">this</span>.<span class="property">fullname</span> = newVal + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>页面一启动就监听：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子是上面完整写法</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">total</span>: &#123;</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>深度监视：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">total</span>: &#123;</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、Computed计算属性"><a href="#3、Computed计算属性" class="headerlink" title="3、Computed计算属性"></a>3、Computed计算属性</h3><p>1、vue2基本用法（简写形式）：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">firstname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">lastname</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这里的属性，不用在上面data中声明</span></span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;fullname&#x27;</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 计算属性必须得return，而监听不用</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 另一种写法</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		  <span class="comment">// 计算属性必须得return，而监听不用</span></span></span><br><span class="line"><span class="language-javascript">		  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、vue2完整用法：<br>说明：要更改计算属性的时候使用。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里的属性，不用在上面data中声明</span></span><br><span class="line">    <span class="string">&#x27;fullname&#x27;</span>: &#123;</span><br><span class="line">		get () &#123;</span><br><span class="line">			<span class="comment">// 计算属性必须得return，而监听不用</span></span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">		&#125;,</span><br><span class="line">		set (value) &#123;</span><br><span class="line">			<span class="keyword">var</span> names = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">firstname</span> = names[<span class="number">0</span>]</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">lastname</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、vue3基本用法：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种语法get方法 （没有set）</span></span><br><span class="line"><span class="keyword">const</span> 函数名 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> 结果</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第二种语法 get set 方法 带有set参数 可以设置</span></span><br><span class="line"><span class="keyword">const</span> 函数名 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> 结果 &#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params"> val </span>)&#123;  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>4、vue3传参用法：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; selfAge(2025, &#x27;20k&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; selfAge(2027, &#x27;25k&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; selfAge(2030, &#x27;35k&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">const selfAge = computed(() =&gt; &#123;</span><br><span class="line">  return function(a, b) &#123;</span><br><span class="line">    return a + &#x27;年我&#x27; + age.value + &#x27;希望月薪&#x27; + b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4、事件修饰符"><a href="#4、事件修饰符" class="headerlink" title="4、事件修饰符"></a>4、事件修饰符</h3><p>1、<code>prevent</code>：阻止默认事件（常用）；<br>例子：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;goTo&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只会执行goTo方法，不会执行a标签的默认跳转 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、<code>stop</code>：阻止事件冒泡（常用）；<br>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 只会执行btnClick方法，不会执行divClick方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、<code>once</code>：事件只触发一次（常用）；<br>例子：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.once</span>=<span class="string">&quot;goTo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只会执行一次，比如点了第一次执行，后面再点击就不会执行了 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、<code>capture</code>：使用事件的捕获模式；<br>例子：（捕获是从外向里捕获，然后从里向外冒泡）<br>（1）不使用<code>capture</code>，从里向外冒泡执行，先执行里面，再执行外面：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;rootClick&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 先执行divClick，再执行rootClick --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）使用<code>capture</code>，从外向里冒泡执行，先执行外面，再执行里面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;rootClick&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 先执行rootClick，再执行divClick --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、<code>self</code>：只有event.target是当前操作的元素时才触发事件；<br>例子：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.self</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 只会执行button标签的方法，不会执行divClick方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、<code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕；<br>例子：有一个可以滚动的列表，然后有滚动条事件，事件执行顺序是这样的：鼠标滚轮滚动 -》执行事件 -》滚动条滚动；<br>如果事件执行需要花费很长时间，那么滚动条得很长时间之后才会移动位置；加上<code>passive</code>后，鼠标滚轮滚动，滚动条会立即移动位置。<br>7、<code>native</code>：用于子组件标签内，子组件想要使用原生的事件就得使用这个事件修饰符。  </p>
<h3 id="5、特殊事件"><a href="#5、特殊事件" class="headerlink" title="5、特殊事件"></a>5、特殊事件</h3><p>1、<code>@scroll</code>：滚动条事件；（只要滚动条动了就会执行，如果滚动条滚不动了，就不会执行了）<br>2、<code>@wheel</code>：鼠标滚轮事件；（每次滚动鼠标滚轮就会执行一次，滚动两次就执行两次，如果滚动条已经滚不动了，继续滚动鼠标滚轮，还会继续执行）  </p>
<h3 id="6、键盘事件"><a href="#6、键盘事件" class="headerlink" title="6、键盘事件"></a>6、键盘事件</h3><p>1、<code>@keyup</code>：键盘弹起事件；（键盘弹起时触发）<br>2、<code>@keydown</code>：键盘按下事件；（键盘按下时触发）</p>
<h3 id="7、键盘事件修饰符"><a href="#7、键盘事件修饰符" class="headerlink" title="7、键盘事件修饰符"></a>7、键盘事件修饰符</h3><p>1、常用的<br>（1）<code>enter</code>：按下回车触发，例子：<code>@keyup.enter</code>；<br>（2）<code>delete</code>：删除（捕获删除和退格键）；<br>（3）<code>esc</code>：按下ESC键触发；<br>（4）<code>space</code>：按下空格键触发；<br>（5）<code>tab</code>：按下TAB键触发；<br>（6）<code>up</code>：按下↑键触发；<br>（7）<code>down</code>：按下↓键触发；<br>（8）<code>left</code>：按下←键触发；<br>（9）<code>right</code>：按下→键触发；<br>2、特殊的<br>（1）<code>ctrl</code>：按下CTRL键触发；<br>（2）<code>alt</code>：按下ALT键触发；<br>（3）<code>shift</code>：按下SHIFT键触发；<br>（4）<code>meta</code>：按下META键触发，<code>meta</code>是苹果公司保留的键，<code>meta</code>键在苹果电脑上代表<code>command</code>键（即<code>command+x</code>），windows上是按下这个键之后会弹出系统菜单的键；<br>说明：<br>（1）配合<code>@keyup</code>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发；<br>（2）配合<code>@keydown</code>使用：正常触发事件。<br>3、查看修饰键：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">使用@keyup事件，然后输出：</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>, event.<span class="property">key</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：按下Ctrl键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>, event.<span class="property">key</span>) <span class="comment">// 17, Control</span></span><br><span class="line"><span class="comment">// 例子：按下回车键键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>, event.<span class="property">key</span>) <span class="comment">// 13, Enter</span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">@keyup.<span class="property">Enter</span></span><br><span class="line">@keyup.<span class="property">enter</span></span><br><span class="line">@keyup<span class="number">.13</span>（不推荐）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的由多个单词组成的 键盘上的 Caps Lock（大小写转换键）</span></span><br><span class="line">@keyup.<span class="property">caps</span>-lock（必须写成这种形式才有效果）</span><br></pre></td></tr></table></figure>
<p>4、自定义键名  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.自定义键名 = 键码</span><br></pre></td></tr></table></figure>

<h3 id="8、filter过滤器"><a href="#8、filter过滤器" class="headerlink" title="8、filter过滤器"></a>8、filter过滤器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        过滤器：</span></span><br><span class="line"><span class="comment">            定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</span></span><br><span class="line"><span class="comment">            语法：</span></span><br><span class="line"><span class="comment">                1.注册过滤器：Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">                2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;</span></span><br><span class="line"><span class="comment">            备注：</span></span><br><span class="line"><span class="comment">                1.过滤器也可以接收额外参数、多个过滤器也可以串联</span></span><br><span class="line"><span class="comment">                2.并没有改变原本的数据, 是产生新的对应的数据</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、自定义指令"><a href="#9、自定义指令" class="headerlink" title="9、自定义指令"></a>9、自定义指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span></span><br><span class="line"><span class="comment">        需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</span></span><br><span class="line"><span class="comment">        自定义指令总结：</span></span><br><span class="line"><span class="comment">            一、定义语法：</span></span><br><span class="line"><span class="comment">                (1).局部指令：</span></span><br><span class="line"><span class="comment">                    new Vue(&#123;</span></span><br><span class="line"><span class="comment">                        directives:&#123;指令名:配置对象&#125; 或 directives&#123;指令名:回调函数&#125;</span></span><br><span class="line"><span class="comment">                    &#125;) </span></span><br><span class="line"><span class="comment">                (2).全局指令：</span></span><br><span class="line"><span class="comment">                    Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            二、配置对象中常用的3个回调：</span></span><br><span class="line"><span class="comment">                (1).bind：指令与元素成功绑定时调用。</span></span><br><span class="line"><span class="comment">                (2).inserted：指令所在元素被插入页面时调用。</span></span><br><span class="line"><span class="comment">                (3).update：指令所在模板结构被重新解析时调用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            三、备注：</span></span><br><span class="line"><span class="comment">                1.指令定义时不加v-，但使用时要加v-；</span></span><br><span class="line"><span class="comment">                2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//定义全局指令</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			bind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">				element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			inserted(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">				element.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			update(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">				element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">		&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">					// console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">					element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">				&#125;, */</span></span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="language-javascript">					<span class="comment">// console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">					element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">				&#125;,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10、vue内置指令"><a href="#10、vue内置指令" class="headerlink" title="10、vue内置指令"></a>10、vue内置指令</h3><p>1、v-text指令  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-text指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        我们学过的指令：</span></span><br><span class="line"><span class="comment">            v-bind	: 单向绑定解析表达式, 可简写为 :xxx</span></span><br><span class="line"><span class="comment">            v-model	: 双向数据绑定</span></span><br><span class="line"><span class="comment">            v-for  	: 遍历数组/对象/字符串</span></span><br><span class="line"><span class="comment">            v-on   	: 绑定事件监听, 可简写为@</span></span><br><span class="line"><span class="comment">            v-if 	 	: 条件渲染（动态控制节点是否存存在）</span></span><br><span class="line"><span class="comment">            v-else 	: 条件渲染（动态控制节点是否存存在）</span></span><br><span class="line"><span class="comment">            v-show 	: 条件渲染 (动态控制节点是否展示)</span></span><br><span class="line"><span class="comment">        v-text指令：</span></span><br><span class="line"><span class="comment">            1.作用：向其所在的节点中渲染文本内容。</span></span><br><span class="line"><span class="comment">            2.与插值语法的区别：v-text会替换掉节点中的内容，&#123;&#123;xx&#125;&#125;则不会。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、v-html指令  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-html指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        v-html指令：</span></span><br><span class="line"><span class="comment">            1.作用：向指定节点中渲染包含html结构的内容。</span></span><br><span class="line"><span class="comment">            2.与插值语法的区别：</span></span><br><span class="line"><span class="comment">                (1).v-html会替换掉节点中所有的内容，&#123;&#123;xx&#125;&#125;则不会。</span></span><br><span class="line"><span class="comment">                (2).v-html可以识别html结构。</span></span><br><span class="line"><span class="comment">            3.严重注意：v-html有安全性问题！！！！</span></span><br><span class="line"><span class="comment">                (1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</span></span><br><span class="line"><span class="comment">                (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、v-cloak指令  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        v-cloak指令（没有值）：</span></span><br><span class="line"><span class="comment">            1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</span></span><br><span class="line"><span class="comment">            2.使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、v-once指令  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-once指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        v-once指令：</span></span><br><span class="line"><span class="comment">            1.v-once所在节点在初次动态渲染后，就视为静态内容了。</span></span><br><span class="line"><span class="comment">            2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、v-pre指令  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-pre指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        v-pre指令：</span></span><br><span class="line"><span class="comment">            1.跳过其所在节点的编译过程。</span></span><br><span class="line"><span class="comment">            2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> &gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11、mixin混入用法"><a href="#11、mixin混入用法" class="headerlink" title="11、mixin混入用法"></a>11、mixin混入用法</h3><p>1、说明<br><code>mixin</code> 混入 (混入) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。（大白话就是，把多个地方需要使用的相同代码，比如：方法、data数据、生命周期函数等提出来，封装到一个js文件里）<br>2、使用方式<br>（1）在<code>src</code>目录下新建一个js文件（可以自定义名字），例如：<code>mixin.js</code>；  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;School.vue和Student.vue都使用了此方法！&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：默认暴露</span></span><br><span class="line"><span class="keyword">const</span> mixin = &#123;</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;School.vue和Student.vue都使用了此方法！&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mixin;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;School.vue和Student.vue都使用了此方法！&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在需要使用的组件中，使用<code>import</code>引入，并使用<code>mixins</code>属性接收。<br><code>School.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2 @click=&quot;showName&quot;&gt;学校名称：&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	// 分别暴露的导入方式是 &#123;&#125; + 暴露的名称</span><br><span class="line">	import &#123;mixin&#125; from &#x27;../mixin&#x27;;</span><br><span class="line">	</span><br><span class="line">	// 默认暴露的导入方式是 直接暴露的名称</span><br><span class="line">	// import mixin from &#x27;../mixin&#x27;;</span><br><span class="line">	</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#x27;School&#x27;,</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				name: &#x27;XXX大学&#x27;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		// 对应上面import</span><br><span class="line">		minxins: [mixin]</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（3）上面是局部使用方式，现在是全局使用方式。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 全局引入mixin</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin1, mixin2&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin1);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>说明：全局使用<code>mixin</code>，所有文件（vm实例、vc组件实例）都可以mixin1和mixin2的内容。<br>3、特别说明<br>（1）<code>mixin</code>中<code>data</code>和<code>methods</code>中定义的属性，在组件中可以同名覆盖（也就是说，如果<code>mxin</code>中<code>data</code>或者<code>methods</code>有一个叫demo的数据或方法，在组件的<code>data</code>或者<code>methods</code>中也有相同的demo，组件中的demo会覆盖<code>mixin</code>的；<br>（2）生命周期函数不会覆盖，而是会合并。  </p>
<h3 id="12、插件用法"><a href="#12、插件用法" class="headerlink" title="12、插件用法"></a>12、插件用法</h3><p>1、说明：什么是插件？<br>（1）举个例子<br>玩游戏时，可以开外挂，先开外挂，再开游戏，外挂是对游戏的一种增强，这里的外挂就是插件。<br>（2）什么是插件<br>插件就是对vue的一种增强，本质：它是包含<code>install</code>方法的一个对象，<code>install</code>方法的第一个参数是<code>Vue</code>（用来构造vue实例的），第二个以后的参数是插件使用者传递的数据。<br>2、用法<br>（1）在<code>src</code>目录下创建<code>xxx.js</code>（一般是<code>plugins.js</code>命名）；  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">install</span>(<span class="params">Vue,x,y,z</span>)&#123;</span><br><span class="line">		<span class="comment">// 这里x，y，z输出的是main.js中使用插件时传的参数1，2，3</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line">		<span class="comment">//全局过滤器</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义全局指令</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">			<span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">			<span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">				element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">			<span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">				element.<span class="title function_">focus</span>()</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">			<span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">				element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义混入</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">			<span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> &#123;</span><br><span class="line">					<span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">					<span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在<code>main.js</code>中引入；  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用（使用）插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>（3）现在只要启动这个<code>vue</code>项目，<code>vue</code>就会自己帮我们调用<code>install</code>方法，也就是说每个页面或者组件都可以<code>install</code>里面的东西。<br>在下面页面使用插件中的东西：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;!-- mySlice是插件中的全局过滤器 --&gt;</span><br><span class="line">		&lt;h2&gt;测试名称：&#123;&#123;name | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">		&lt;h2&gt;测试地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">		&lt;button @click=&quot;test&quot;&gt;点我测试一个hello方法&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#x27;School&#x27;,</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				name:&#x27;使用插件plugins&#x27;,</span><br><span class="line">				address:&#x27;中国&#x27;,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			test()&#123;</span><br><span class="line">				// 插件中的hello方法</span><br><span class="line">				this.hello()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="13、浏览器本地存储"><a href="#13、浏览器本地存储" class="headerlink" title="13、浏览器本地存储"></a>13、浏览器本地存储</h3><p>1、说明<br>有两种存储方式：<code>window.sessionStorage()</code>(简写：<code>sessionStorage()</code>)和<code>winwindow.localStorage()</code>(简写：<code>localStorage()</code>)。<br>2、相关API<br>（1）<code>xxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code>：添加数据到存储中；<br>（2）<code>xxxStorage.getItem(&#39;key&#39;)</code>：获取存储中的数据；<br>（3）<code>xxxStorage.removeItem(&#39;key&#39;)</code>：移除key对应的value；<br>（4）<code>xxxStorage.clear()</code>：清空存储中的所有数据。<br>3、区别<br>（1）<code>sessionStorage</code>存储的内容会随着浏览器窗口关闭而消失；<br>（2）<code>localStorage</code>存储的内容，需要手动清除才会消失。  </p>
<h3 id="14、兄弟组件之间的通信（传值）"><a href="#14、兄弟组件之间的通信（传值）" class="headerlink" title="14、兄弟组件之间的通信（传值）"></a>14、兄弟组件之间的通信（传值）</h3><p>一、方法一：（全局事件总线）<br>1、在<code>main.js</code>中添加全局事件总线；  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">	<span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// 安装全局事件总线</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>2、<code>School.vue</code>和<code>Student.vue</code>是兄弟组件，<code>School.vue</code>想给<code>Student.vue</code>传值，代码如下：<br>（1）<code>School.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click=&quot;sendData&quot;&gt;给Student.vue传值&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &#x27;School&#x27;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			sendData() &#123;</span><br><span class="line">				this.$bus.$emit(&#x27;hello&#x27;, &#x27;我是School组件，我给Student组件传递数据&#x27;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（2）<code>Student.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click=&quot;sendData&quot;&gt;给Student.vue传值&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &#x27;Student&#x27;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">			this.$bus.$on(&#x27;hello&#x27;, (data) =&gt; &#123;</span><br><span class="line">				console.log(&#x27;我是Student组件，我收到了School传给我的数据：&#x27;, data)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">		// 推荐：一般都销毁这个事件</span><br><span class="line">		beforeDestroy() &#123;</span><br><span class="line">			this.$bus.$off(&#x27;hello&#x27;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>二、方法二：（消息订阅与发布<code>pubsub.js</code>）<br>1、<code>npm i pubsub-js</code>（不一定非要安装这个库，消息订阅与发布是一种思想，用其它库也行）<br>2、使用方法<br><code>Student.vue</code>传值给<code>School.vue</code>：<br>（1）<code>Student.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click=&quot;sendData&quot;&gt;给Student.vue传值&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	// 导入 pubsub.js</span><br><span class="line">	import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &#x27;Student&#x27;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">			// 这里必须是箭头函数，this才是vue实例，</span><br><span class="line">			// 如果是普通函数，this为空</span><br><span class="line">			// 这里第二个参数才是穿过来的数据，第一个永远是函数名（这里是 hello）</span><br><span class="line">			// name 为 hello，pubId 为pubsub返回的id，用来下面销毁的时候用</span><br><span class="line">			this.pubId = pubsub.subscribe(&#x27;hello&#x27;, (name, data) =&gt; &#123;</span><br><span class="line">				console.log(&#x27;我是Student组件，我收到了School传给我的数据：&#x27;, data)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">		// 推荐：一般都销毁这个事件</span><br><span class="line">		beforeDestroy() &#123;</span><br><span class="line">			pubsub.unsubscribe(this.pubId)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（2）<code>School.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click=&quot;sendData&quot;&gt;给Student.vue传值&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	// 导入 pubsub.js</span><br><span class="line">	import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &#x27;School&#x27;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			sendData() &#123;</span><br><span class="line">				pubsub.publish(&#x27;hello&#x27;, &#x27;我是School组件，我给Student组件传递数据&#x27;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="15、Vuex"><a href="#15、Vuex" class="headerlink" title="15、Vuex"></a>15、Vuex</h3><p>1、介绍<br>（1）<code>vue2</code>版本使用的是：<code>vuex3</code>；<br>（2）<code>vue3</code>版本使用的是：<code>vuex4</code>；<br>（3）<code>npm i vuex</code>安装的是最新版本。<br>2、使用<br>（1）<code>npm i vuex@数字</code>：安装指定版本，如果是使用<code>vue2</code>的，就<code>npm i vuex@3</code>；<br>（2）在<code>src</code>目录下创建<code>store</code>目录，然后在该目录下创建<code>index.js</code>：<br>（也可以在<code>src</code>目录下创建<code>vuex</code>目录，在该目录下创建<code>store.js</code>）  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备state，用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备mutations，用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">	<span class="title function_">DEMO</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">		<span class="comment">// state：上面的state</span></span><br><span class="line">		<span class="comment">// value：传递过来的数据</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions，用于响应组件中的动作，比如发送ajax请求</span></span><br><span class="line"><span class="comment">// 不推荐直接在这里操作数据，想操作必须在这里调用mutations</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">	<span class="title function_">demo</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">		<span class="comment">// context：上下文</span></span><br><span class="line">		<span class="comment">// value：组件中传递过来的数据</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------下面是新的配置项--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备getters，用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">	<span class="title function_">handleState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">		<span class="comment">// 对state处理加工</span></span><br><span class="line">		<span class="keyword">return</span> state.<span class="property">xxx</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">	state,</span><br><span class="line">	mutations,</span><br><span class="line">	actions,</span><br><span class="line">	<span class="comment">// 下面是新的配置项</span></span><br><span class="line">	getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>（3）在<code>main.js</code>文件中加入：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>（4）在组件中读取<code>vuex</code>中的数据：<code>this.$store.state.xxx</code>；<br>（5）在组件中修改<code>vuex</code>中的数据：<code>this.$store.dispatch(&#39;actions中的方法名&#39;, 数据)</code>或<code>this.$store.commit(&#39;mutations中的方法名&#39;, 数据)</code>；<br>（6）<code>mapState</code>用法：（不使用<code>this.$store.state.xxx</code>这种写法获取数据，直接使用<code>xxx</code>来获取数据的方法）  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">computed</span>: &#123;</span><br><span class="line">		<span class="comment">// 传统方法：</span></span><br><span class="line">		<span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 用法一：把`this.$store.state.xxx`映射为`this.xxx`</span></span><br><span class="line">		<span class="comment">// xxx 使上面的方法名，&#x27;xxx&#x27;是state中的数据名</span></span><br><span class="line">		...<span class="title function_">mapState</span>(&#123;<span class="attr">xxx</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;)</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 用法二：简写形式</span></span><br><span class="line">		...<span class="title function_">mapState</span>([<span class="string">&#x27;xxx&#x27;</span>])</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// mapGetters用法和mapState一样，区别是mapState对应state，mapGetters对应getters</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（7）<code>mapMutations</code>用法：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="comment">// 传统用法：</span></span><br><span class="line">		<span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;mutations中的方法名&#x27;</span>, 要传的参数)</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用法一：demo是对应上面的方法名，要传的参数在调用demo方法时传入</span></span><br><span class="line">		...<span class="title function_">mapMutations</span>(&#123; <span class="attr">demo</span>: <span class="string">&#x27;mutations中的方法名&#x27;</span> &#125;)</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 用法二：简写形式，如果demo和mutations中的方法名相同，可以简写</span></span><br><span class="line">		...<span class="title function_">mapMutations</span>([<span class="string">&#x27;mutations中的方法名&#x27;</span>])</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// mapActions用法和mapMutations一样，区别是mapMutations对应mutations，mapActions对应actions</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16、Vuex模块化开发"><a href="#16、Vuex模块化开发" class="headerlink" title="16、Vuex模块化开发"></a>16、Vuex模块化开发</h3><p>1、<code>store.js</code>中：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和 模块，也可以新建一个文件夹存放</span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">	<span class="comment">// 使用方法一中的方式二，必须有namespaced</span></span><br><span class="line">	<span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">state</span>: &#123;</span><br><span class="line">		<span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">getters</span>: &#123;</span><br><span class="line">		<span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">mutations</span>: &#123;</span><br><span class="line">		<span class="title function_">DEMO</span>(<span class="params">state, value</span>) &#123;...&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">actions</span>: &#123;</span><br><span class="line">		<span class="title function_">demo</span>(<span class="params">context, value</span>) &#123;...&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人员管理 模块</span></span><br><span class="line"><span class="keyword">const</span> personOptions = &#123;</span><br><span class="line">	<span class="comment">// 使用方法一中的方式二，必须有namespaced</span></span><br><span class="line">	<span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">state</span>: &#123;</span><br><span class="line">		<span class="attr">personList</span>: []</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">getters</span>: &#123;</span><br><span class="line">		<span class="title function_">getPerson</span>(<span class="params">state</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> state.<span class="property">personList</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">mutations</span>: &#123;</span><br><span class="line">		<span class="title function_">ADD_PERSON</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">			state.<span class="property">personList</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">actions</span>: &#123;</span><br><span class="line">		<span class="title function_">addPerson</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">			context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>, value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">	<span class="attr">modules</span>: &#123;</span><br><span class="line">		<span class="comment">//可以简写为 countOptions</span></span><br><span class="line">		<span class="attr">countAbout</span>: countOptions,</span><br><span class="line">		<span class="attr">personAbout</span>: personOptions</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2、用法一：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 使用的时候是 countAbout.xxx</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	computed: &#123;</span><br><span class="line">		// 方式一</span><br><span class="line">		// 简写形式使用方式是countOptions、personOptions</span><br><span class="line">		...mapState([&#x27;countAbout&#x27;, &#x27;personAbout&#x27;])</span><br><span class="line">		</span><br><span class="line">		// 方式二</span><br><span class="line">		// 中括号里面对应state中的属性，这种方式上面使用的时候就不用countAbout.xxx，可以直接xxx</span><br><span class="line">		// 注意这种方式，必须在store.js中使用 namespaced</span><br><span class="line">		...mapState(&#x27;countAbout&#x27;, [&#x27;sum&#x27;])</span><br><span class="line">		// 多个使用方式就是在弄一个mapState</span><br><span class="line">		...mapState(&#x27;personOptions&#x27;, [&#x27;personList&#x27;])</span><br><span class="line">		</span><br><span class="line">		...mapGetters(&#x27;countAbout&#x27;, [&#x27;bigSum&#x27;])</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		...mapMutations(&#x27;countAbout&#x27;, [&#x27;mutations中的方法名&#x27;])</span><br><span class="line">		...mapMutations(&#x27;personOptions&#x27;, &#123; demo: &#x27;mutations中的方法名&#x27; &#125;)</span><br><span class="line">		</span><br><span class="line">		...mapActions(&#x27;countAbout&#x27;, [&#x27;actions中的方法名&#x27;])</span><br><span class="line">		...mapActions(&#x27;personOptions&#x27;, &#123; demo: &#x27;actions中的方法名&#x27; &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>3、用法二：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	computed: &#123;</span><br><span class="line">		// state</span><br><span class="line">		sum() &#123;</span><br><span class="line">			return this.$store.state.countAbout.sum</span><br><span class="line">		&#125;,</span><br><span class="line">		personList() &#123;</span><br><span class="line">			return this.$store.state.personOptions.personList</span><br><span class="line">		&#125;,</span><br><span class="line">		</span><br><span class="line">		// getters</span><br><span class="line">		getPerson() &#123;</span><br><span class="line">			return this.$store.getters[&#x27;personOptions/getPerson&#x27;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		// mutations</span><br><span class="line">		demo() &#123;</span><br><span class="line">			this.$store.commit(&#x27;countAbout/demo&#x27;, 要传的参数)</span><br><span class="line">		&#125;,</span><br><span class="line">		</span><br><span class="line">		// actions</span><br><span class="line">		demo() &#123;</span><br><span class="line">			this.$store.dispatch(&#x27;personOptions/addPerson&#x27;, 要传的参数)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="17、Router路由器"><a href="#17、Router路由器" class="headerlink" title="17、Router路由器"></a>17、Router路由器</h3><p>1、介绍<br>（1）<code>router</code>的默认版本为：4（只能在<code>vue3</code>中使用）；<br>（2）<code>vue2</code>使用的版本是：3（<code>npm i vue-router@3</code>）。<br>2、使用<br>（1）在<code>src</code>目录下创建<code>router</code>文件夹，并在文件夹下创建<code>index.js</code>：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 也可以使用下面的导入方式，前提是在配置文件中配置了src的别名</span></span><br><span class="line"><span class="comment"> * import Home from &#x27;@/views/Home&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Register</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Register&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面注释的是解决重复调用this.$router.push()报错的问题</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里解释下this.$router.push()：this是组件实例，$router是路由器实例，push是路由器实例的方法</span></span><br><span class="line"><span class="comment"> * 相当于this组件实例中有个属性是$router，而这个$router属性是vueRouter路由器类创建的一个实例，这个实例中有push方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // 先把vueRouter原型对象的push和replace保存一份</span></span><br><span class="line"><span class="comment"> * // 为什么需要保存一份，因为这里相当于重写了push和replace方法，</span></span><br><span class="line"><span class="comment"> * // 在重写的方法中再调用一下保存的push和replace方法</span></span><br><span class="line"><span class="comment"> * let originPush = vueRouter.prototype.push;</span></span><br><span class="line"><span class="comment"> * let originReplace = vueRouter.prototype.replace;</span></span><br><span class="line"><span class="comment"> * // 重写push|replace</span></span><br><span class="line"><span class="comment"> * // 第一个参数：告诉原来的push方法，往哪里跳转</span></span><br><span class="line"><span class="comment"> * // 第二个参数：成功的回调</span></span><br><span class="line"><span class="comment"> * // 第三个参数：失败的回调</span></span><br><span class="line"><span class="comment"> * vueRouter.prototype.push = function (location, resolve, reject) &#123;</span></span><br><span class="line"><span class="comment"> *  if (resolve &amp;&amp; reject) &#123;</span></span><br><span class="line"><span class="comment"> *  	// call和apply的区别：</span></span><br><span class="line"><span class="comment"> *  	// 相同点：都可以调用函数一次，都可以篡改函数的上下文一次</span></span><br><span class="line"><span class="comment"> *  	// 不同点：call传递参数用逗号隔开，apply传递参数用数组</span></span><br><span class="line"><span class="comment"> *  	// 这里的this是路由器实例</span></span><br><span class="line"><span class="comment"> *  	originPush.call(this, location, resolve, reject);</span></span><br><span class="line"><span class="comment"> *  &#125; else &#123;</span></span><br><span class="line"><span class="comment"> *  	originPush.call(this, location, () =&gt; &#123;&#125;, () =&gt; &#123;&#125;);</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * vueRouter.prototype.replace = function (location, resolve, reject) &#123;</span></span><br><span class="line"><span class="comment"> *  if (resolve &amp;&amp; reject) &#123;</span></span><br><span class="line"><span class="comment"> *  	// call和apply的区别：</span></span><br><span class="line"><span class="comment"> *  	// 相同点：都可以调用函数一次，都可以篡改函数的上下文一次</span></span><br><span class="line"><span class="comment"> *  	// 不同点：call传递参数用逗号隔开，apply传递参数用数组</span></span><br><span class="line"><span class="comment"> *  	originReplace.call(this, location, resolve, reject);</span></span><br><span class="line"><span class="comment"> *  &#125; else &#123;</span></span><br><span class="line"><span class="comment"> *  	originReplace.call(this, location, () =&gt; &#123;&#125;, () =&gt; &#123;&#125;);</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title function_">vueRouter</span>(&#123;</span><br><span class="line">	<span class="comment">/*	路由模式：history和hash模式两种</span></span><br><span class="line"><span class="comment">	 *  history：路径中没有#号，发送请求会把整个路径当作请求发给后端</span></span><br><span class="line"><span class="comment">	 *  比如：http://localhost:5000/demo/user/234/haha，会把/demo/user/234/haha当作请求路径发给后端</span></span><br><span class="line"><span class="comment">	 *  hash：路径中有#号，发送请求只会把#前的发给后端</span></span><br><span class="line"><span class="comment">	 *  比如：http://localhost:5000/demo/#/user/234/haha，会把/demo当作请求发给后端</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Login&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Register&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Register</span>,</span><br><span class="line">			<span class="comment">// 独享路由前置拦截器，只有前置，没有后置</span></span><br><span class="line">			<span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="title function_">next</span>() <span class="comment">// 放行</span></span><br><span class="line">			&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Home&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">			<span class="comment">// 嵌套路由，注意：嵌套路由里面的path没有“/”</span></span><br><span class="line">			<span class="attr">children</span>: [</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="comment">// params传参的话使用：path: &#x27;index/:id/:name&#x27;</span></span><br><span class="line">							<span class="comment">// path: &#x27;index/:id?/:name?&#x27;加个问号表示params参数可传可不</span></span><br><span class="line">							<span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">							<span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/index&#x27;</span>),</span><br><span class="line">							<span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">							<span class="comment">// 自定义参数，必须写在meta里面</span></span><br><span class="line">							<span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">affix</span>: <span class="literal">true</span> &#125;</span><br><span class="line">							<span class="comment">// props，具体看下面第（5）props使用方式</span></span><br><span class="line">							<span class="comment">// props: true // 对应下面（5）props使用方式中的第一种使用方式（只使用于params传参方式）</span></span><br><span class="line">							<span class="comment">// props第二种使用方式</span></span><br><span class="line">							<span class="comment">/*  props($route) &#123;</span></span><br><span class="line"><span class="comment">							 *	  return &#123; id: $route.query.id, name: $route.query.name &#125;</span></span><br><span class="line"><span class="comment">							 */</span> &#125;</span><br><span class="line">							 </span><br><span class="line">							<span class="comment">// 第二种简写形式一</span></span><br><span class="line">							<span class="comment">/*  props(&#123; query &#125;) &#123;</span></span><br><span class="line"><span class="comment">							 *	  return &#123; id: query.id, name: query.name &#125;</span></span><br><span class="line"><span class="comment">							 */</span> &#125;</span><br><span class="line">							 </span><br><span class="line">							 <span class="comment">// 第二种简写形式二</span></span><br><span class="line">							 <span class="comment">/*  props(&#123; query: &#123; id, name &#125; &#125;) &#123;</span></span><br><span class="line"><span class="comment">							  *	  return &#123; id: id, name: name &#125;</span></span><br><span class="line"><span class="comment">							  */</span> &#125;</span><br><span class="line">							  </span><br><span class="line">							  <span class="comment">/**</span></span><br><span class="line"><span class="comment">							   * 第二种箭头函数方式</span></span><br><span class="line"><span class="comment">							   * props: ($route) =&gt; &#123;</span></span><br><span class="line"><span class="comment">							   *	return &#123; id: $route.query.id, name: $route.query.name &#125;</span></span><br><span class="line"><span class="comment">							   &#125;</span></span><br><span class="line"><span class="comment">							   */</span></span><br><span class="line">							  </span><br><span class="line">							  <span class="comment">/**</span></span><br><span class="line"><span class="comment">							   * 第二种箭头函数简写形式</span></span><br><span class="line"><span class="comment">							   * props: ($route) =&gt; (&#123; id: $route.query.id, name: $route.query.name &#125;)</span></span><br><span class="line"><span class="comment">							   */</span></span><br><span class="line">						&#125;</span><br><span class="line">			]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由前置拦截器，初始化的时候、每次路由切换之前被调用，</span></span><br><span class="line"><span class="comment">// to：要跳转到哪个路由，from：从哪个路由开始跳</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="title function_">next</span>() <span class="comment">// 放行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由后置拦截器，初始化的时候、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>（2）在<code>main.js</code>中使用  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 也可以使用下面的导入方式，前提是配置了src的别名</span></span><br><span class="line"><span class="comment"> * import router from &#x27;@/router&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 这里实际是key-value的形式，如果key和value一样，可以简写</span></span><br><span class="line"><span class="comment">   * router: router，简写：router</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  router</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还得在<code>App.vue</code>组件处使用<code>&lt;router-view&gt;&lt;/router-view&gt;</code>，不然路由切换的时候，页面不会显示。<br>（3）<code>router-link</code>使用  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// active-class：导航高亮css；to：该导航的路由地址</span></span><br><span class="line"><span class="comment">// 如果是嵌套路由，to必须写完整：/Home/index</span></span><br><span class="line"><span class="comment">// router-link有两种模式：push和replace，默认为push</span></span><br><span class="line"><span class="comment">// push：跳转路由是往路由器里面push</span></span><br><span class="line"><span class="comment">// replace：跳转路由是替换调路由器里面的路由</span></span><br><span class="line"><span class="comment">// 直接在标签中使用相应的属性</span></span><br><span class="line">&lt;router-link active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/demo&quot;</span>&gt;demo&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>（4）传参<br><code>query</code>方式：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第一种方式：</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/demo?id=$&#123;id&#125;&amp;name=$&#123;name&#125;`&quot;</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 第二种方式：</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">	// name对应路由（就是router目录里面的index.js）里面的name</span></span></span><br><span class="line"><span class="string"><span class="tag">	// 注意：使用name的话，传参方式不能使用上面第一种</span></span></span><br><span class="line"><span class="string"><span class="tag">	name: &#x27;Home&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">	path: &#x27;/demo&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">	query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		id: id,</span></span></span><br><span class="line"><span class="string"><span class="tag">		name: name</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 接收参数</span><br><span class="line">$route.query.id</span><br></pre></td></tr></table></figure>
<p><code>params</code>方式：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第一种方式：直接拼在后面，然后还需要去到路由修改path</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/demo/$&#123;id&#125;/$&#123;name&#125;`&quot;</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 第二种方式：</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">	// name对应路由（就是router目录里面的index.js）里面的name</span></span></span><br><span class="line"><span class="string"><span class="tag">	// 注意：使用params传参方式，不能使用path！</span></span></span><br><span class="line"><span class="string"><span class="tag">	name: &#x27;Home&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">	params: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		id: id,</span></span></span><br><span class="line"><span class="string"><span class="tag">		name: name</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 接收参数</span><br><span class="line">$route.params.id</span><br></pre></td></tr></table></figure>
<p>（5）<code>props</code>使用方式：<br>说明：接收参数使用<code>$route.params.id</code>或者<code>$route.query.id</code>想要直接使用<code>id</code>，就使用<code>props</code>。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dev</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dev</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">dev</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dev</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">dev</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dev</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一种使用方式（只适用于<code>params</code>传参方式）：将路由里面的props配置打开为<code>true</code>；<br>第二种使用方式（都适用）：将路由里面的第二种方式打开。<br>注意：不管路由里面使用第一种还是第二种，在页面的使用方式都是上面代码块中的方式。<br>3、专属路由组件的生命周期函数  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	name: &#x27;demo&#x27;,</span><br><span class="line">	// 路由跳转进demo前执行</span><br><span class="line">	activated() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;,</span><br><span class="line">	// 路由离开demo后执行</span><br><span class="line">	deactivated() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>4、组件路由前置、后置拦截器<br><strong>注意</strong>：只有通过路由规则，点击路由切换跳转的时候才会执行！  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">	<span class="comment">// 路由跳转进demo时执行</span></span><br><span class="line">	<span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">// 路由离开demo时执行</span></span><br><span class="line">	<span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>5、<code>$route</code>和<code>$router</code>的区别<br>（1）<code>route</code>：一般获取该路由的信息（路径、query、params参数等等）；<br>（2）<code>router</code>：一般进行编程式导航进行路由跳转（push、replace）。  </p>
<h3 id="18、Vue2全局组件"><a href="#18、Vue2全局组件" class="headerlink" title="18、Vue2全局组件"></a>18、Vue2全局组件</h3><p>1、创建一个<code>vue</code>页面当作组件；<br>2、在<code>main.js</code>中注册成全局组件：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将页面引入</span></span><br><span class="line"><span class="keyword">import</span> demo <span class="keyword">from</span> <span class="string">&#x27;@/pages/Demo/demo&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line"><span class="comment">// 第一个参数：全局组件的名字，第二个参数：哪个组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(demo.<span class="property">name</span>, demo);</span><br></pre></td></tr></table></figure>
<p>3、在页面中直接使用：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;dev&gt;</span><br><span class="line">		&lt;demo&gt;&lt;/demo&gt;</span><br><span class="line">	&lt;/dev&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19、Vue2单页面组件"><a href="#19、Vue2单页面组件" class="headerlink" title="19、Vue2单页面组件"></a>19、Vue2单页面组件</h3><p>1、创建一个<code>vue</code>页面当作组件；<br>2、在要使用该组件的页面中注册组件并使用：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;dev&gt;</span><br><span class="line">		&lt;demo&gt;&lt;/demo&gt;</span><br><span class="line">	&lt;/dev&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import demo from &#x27;@/pages/Demo/demo&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">	name: &#x27;test&#x27;,</span><br><span class="line">	components: &#123;</span><br><span class="line">		demo</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<br/>

<hr>
<br/>


<h1 id="四、其他问题"><a href="#四、其他问题" class="headerlink" title="四、其他问题"></a>四、其他问题</h1><h3 id="1、vue和uni-app的不同点"><a href="#1、vue和uni-app的不同点" class="headerlink" title="1、vue和uni-app的不同点"></a>1、vue和uni-app的不同点</h3><p>1、<code>vue</code> 用 <code>div</code>, <code>uni-app</code>用<code>view</code>，这应该是刚开始使用时最先变化的了。<br>2、<code>vue</code> 用<code>background-image</code>时 <code>../../xxxx</code>就行，<code>uni-app</code>是<code>~@/static/xxxx</code>（在<code>uni-app</code>里面<code>static</code>文件夹存放静态资源）。<br>3、<code>uni-app</code>中，<code>H5</code>端默认启用<code>scoped</code>，非<code>H5</code>端默认不启用<code>scoped</code>。<br>4、请求数据在<code>onLoad</code>进行，<code>vue</code>是在<code>created</code>中进行。</p>
<h3 id="2、vue2响应式使用方式"><a href="#2、vue2响应式使用方式" class="headerlink" title="2、vue2响应式使用方式"></a>2、vue2响应式使用方式</h3><p>1、方法（有两种）<br>（1）方法一：使用<code>this.$set()</code>，例子如下；  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">person</span>: &#123;</span><br><span class="line">				<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">				<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">				<span class="attr">hobby</span>: [<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;看书&quot;</span>]</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="comment">// 向对象person中新增一个属性</span></span><br><span class="line">		<span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span> = <span class="number">18</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;age&quot;</span>,<span class="number">18</span>) <span class="comment">// 是响应式</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// 删除对象person中的一个属性</span></span><br><span class="line">		<span class="title function_">delete</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="variable language_">this</span>.$delete(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;age&quot;</span>,<span class="number">18</span>) <span class="comment">// 是响应式</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// 更新对象person中的一个属性</span></span><br><span class="line">		<span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&quot;打游戏&quot;</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&quot;打游戏&quot;</span>) <span class="comment">// 方法一：是响应式</span></span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;打游戏&quot;</span>) <span class="comment">// 方法二：是响应式</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（2）方法二：使用<code>Vue.set()</code>，例子如下；<br>说明：这个方法需要导入<code>Vue</code>对象。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">person</span>: &#123;</span><br><span class="line">				<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">				<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">				<span class="attr">hobby</span>: [<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;看书&quot;</span>]</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="comment">// 向对象person中新增一个属性</span></span><br><span class="line">		<span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span> = <span class="number">18</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;age&quot;</span>,<span class="number">18</span>) <span class="comment">// 是响应式</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// 删除对象person中的一个属性</span></span><br><span class="line">		<span class="title function_">delete</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">age</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="title class_">Vue</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&quot;age&quot;</span>,<span class="number">18</span>) <span class="comment">// 是响应式</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// 更新对象person中的一个属性</span></span><br><span class="line">		<span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&quot;打游戏&quot;</span> <span class="comment">// 不是响应式</span></span><br><span class="line">			<span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&quot;打游戏&quot;</span>) <span class="comment">// 方法一：是响应式</span></span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;打游戏&quot;</span>) <span class="comment">// 方法二：是响应式</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>2、实现原理<br>（1）对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截；<br>（2）数组类型：通过重写更新数组的一系列方法来实现拦截。<br>（3）存在的问题：新增属性、删除属性，界面不会更新，直接通过下标修改数组，界面不会自动更新。<br>（4）原理例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">				<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">				<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="keyword">let</span> p = &#123;&#125;</span><br><span class="line"><span class="comment">// person有几个属性就有几个 Object.defineProperty()</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">	<span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 提供删除</span></span><br><span class="line">	<span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> person.<span class="property">name</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">		person.<span class="property">name</span> = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p,<span class="string">&quot;sex&quot;</span>,&#123;</span><br><span class="line">	<span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 提供删除</span></span><br><span class="line">	<span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> person.<span class="property">sex</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">		person.<span class="property">sex</span> = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、注释折叠方式"><a href="#3、注释折叠方式" class="headerlink" title="3、注释折叠方式"></a>3、注释折叠方式</h3><p>在需要折叠的注释前后加上<code>#region.......#endregion</code>，例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #region</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   ......注释内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//#endregion</span></span><br></pre></td></tr></table></figure>

<h3 id="4、Vue3关于响应式问题"><a href="#4、Vue3关于响应式问题" class="headerlink" title="4、Vue3关于响应式问题"></a>4、Vue3关于响应式问题</h3><p>1、当数据更新时，没有渲染到页面上<br>场景：编辑页面，查询数据详情，并且渲染到页面上  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dataOne = <span class="title function_">reactive</span>(&#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> dataTwo = <span class="title function_">ref</span>(&#123;&#125;);</span><br><span class="line"><span class="comment">// 编辑表单查询详情</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDetails</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;编辑表单查询详情 &#x27;</span>, id);</span><br><span class="line">	<span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">`/policy/detail/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		dataOne = res; <span class="comment">// dataOne是渲染不了的</span></span><br><span class="line">		dataTwo.<span class="property">value</span> = res; <span class="comment">// 可以渲染</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>说明：<br>（1）<code>dataOne</code>是渲染不了的，因为是用<code>reactive</code>定义的变量，它是属于<code>Proxy</code>代理对象，不能直接赋值，如果直接将结果赋值给它，就把代理对象给替换了，从而无法触发对应的set和get，最终就会导致丢失掉响应性了，对于reactive创建的响应式数据应该避免直接使用&#x3D;号进行赋值；会覆盖响应式；<br>解决方法：</p>
<ul>
<li>再封装一层数据，即定义属性名，在后期赋值的时候，对此属性进行直接赋值：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dataOne = <span class="title function_">reactive</span>(&#123;<span class="attr">data</span>:&#123;&#125;);</span><br><span class="line"><span class="comment">// 编辑表单查询详情</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDetails</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;编辑表单查询详情 &#x27;</span>, id);</span><br><span class="line">	<span class="keyword">await</span> <span class="title function_">get</span>(<span class="string">`/policy/detail/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		dataOne.<span class="property">data</span> = res; <span class="comment">// 可以渲染</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>使用 ref 来定义数据</li>
</ul>
<p>（2）<code>dataTwo</code>是<code>ref</code>定义的变量，它是属于<code>RefImpl</code>对象，可以直接赋值，所以可以渲染成功；</p>
<h3 id="5、项目启动时访问路径修改"><a href="#5、项目启动时访问路径修改" class="headerlink" title="5、项目启动时访问路径修改"></a>5、项目启动时访问路径修改</h3><p>默认项目启动时访问路径是：<code>http://localhost:8080</code>，想修改为：<code>http://localhost:8080/xxx</code>，方法如下：<br>（1）在<code>vue.config.js</code>配置文件配置：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/xxx&#x27;</span> <span class="comment">// 配置这个，默认为 /</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后启动项目时，就会变为<code>http://localhost:8080/xxx</code>。<br>（2）在<code>router</code>路由新增配置：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title function_">router</span>(&#123;</span><br><span class="line">	<span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">	<span class="attr">base</span>: <span class="string">&#x27;/xxx&#x27;</span>, <span class="comment">// 配置这个，相当于将 /xxx 映射到 routers数组中的第一个对象</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Register&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Register</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Home&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="6、后端返回文件流，前端接收文件流并下载文件"><a href="#6、后端返回文件流，前端接收文件流并下载文件" class="headerlink" title="6、后端返回文件流，前端接收文件流并下载文件"></a>6、后端返回文件流，前端接收文件流并下载文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> da = &#123;</span><br><span class="line">  <span class="string">&#x27;cs1&#x27;</span>: <span class="string">&#x27;参数1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cs2&#x27;</span>: <span class="string">&#x27;参数2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 响应格式决定了是否能接收到文件流，这里文件流设置的响应格式为arraybuffer</span></span><br><span class="line"><span class="comment">// withCredentials设置false，跨域请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;接口地址&#x27;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: da</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// res.data为接口所返回的文件流</span></span><br><span class="line">  <span class="comment">// vnd.openxmlformats-officedocument.spreadsheetml.sheet表示设置下载格式为xlsx</span></span><br><span class="line">  <span class="comment">// type是可变的，例如pdf的type为application/pdf等</span></span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;application/vnd.openxmlformats-           </span></span><br><span class="line"><span class="string">           officedocument.spreadsheetml.sheet;chartset=UTF-8&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 新窗口打开</span></span><br><span class="line">  <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  a.<span class="property">href</span> = url</span><br><span class="line">  <span class="comment">// 文件名</span></span><br><span class="line">  a.<span class="property">download</span> = <span class="variable language_">this</span>.<span class="title class_">GetFileName</span>()</span><br><span class="line">  a.<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>示例：（不用管后端使用了哪些技术，后端主要做的就是根据数据生成一个需要下载的word文档）<br>后端代码：<br>controller：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/contract&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContractController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadContract</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟从数据库中查询的数据</span></span><br><span class="line">            Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;contractId&quot;</span>, <span class="string">&quot;20231001&quot;</span>);</span><br><span class="line">            data.put(<span class="string">&quot;startDate&quot;</span>, <span class="string">&quot;2023-10-01&quot;</span>);</span><br><span class="line">            data.put(<span class="string">&quot;endDate&quot;</span>, <span class="string">&quot;2024-09-30&quot;</span>);</span><br><span class="line">            data.put(<span class="string">&quot;rent&quot;</span>, <span class="string">&quot;5000&quot;</span>);</span><br><span class="line">            data.put(<span class="string">&quot;cashPledge&quot;</span>, <span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 替换模板中的占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> WordTemplateUtil.processTemplate(<span class="string">&quot;template.docx&quot;</span>, data);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 根据合同编号或时间动态生成文件名</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;contract_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.docx&quot;</span>;</span><br><span class="line">            <span class="comment">// 生成并下载 Word 文档</span></span><br><span class="line">            WordGenerator.generateAndDownloadWord(content, response, fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成word文档工具类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.poi.xwpf.usermodel.XWPFDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xwpf.usermodel.XWPFParagraph;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xwpf.usermodel.XWPFRun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 Word 文档并写入 HttpServletResponse</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  替换后的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 下载的文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateAndDownloadWord</span><span class="params">(String content, HttpServletResponse response, String fileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建 Word 文档</span></span><br><span class="line">        <span class="type">XWPFDocument</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XWPFDocument</span>();</span><br><span class="line">        <span class="type">XWPFParagraph</span> <span class="variable">paragraph</span> <span class="operator">=</span> document.createParagraph();</span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">run</span> <span class="operator">=</span> paragraph.createRun();</span><br><span class="line">        run.setText(content); <span class="comment">// 设置内容</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将文档写入响应输出流</span></span><br><span class="line">        document.write(response.getOutputStream());</span><br><span class="line">        document.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端代码：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadContract&quot;</span>&gt;</span>下载合同<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">downloadContract</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;/contract/download&#x27;</span>, <span class="comment">// 后端下载接口</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// 重要：设置响应类型为 blob</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 创建一个链接元素</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>]));</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          link.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">          link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;contract.docx&#x27;</span>); <span class="comment">// 设置下载文件名</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span></span><br><span class="line"><span class="language-javascript">          link.<span class="title function_">click</span>(); <span class="comment">// 触发下载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link); <span class="comment">// 移除链接元素</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url); <span class="comment">// 释放 URL 对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载失败&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、关于跨域问题说明"><a href="#7、关于跨域问题说明" class="headerlink" title="7、关于跨域问题说明"></a>7、关于跨域问题说明</h3><p>1、什么是跨域？<br>跨域是请求发过去了，后端也收到请求了，然后处理完之后返回的时候，浏览器发现返回的响应头中包含有跨域的标识，所以浏览器拦截了响应，导致前端无法接收到后端返回的数据。<br>2、发生跨域的情况<br>只有当前端通过浏览器访问后端接口时（ajax、axios），才会发生跨域问题；而服务器之间是不存在跨域的。<br>3、跨域问题描述<br>（1）发生跨域  </p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue25.jpg" class="">  
<p>（2）使用代理服务器，不发生跨域  </p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue26.jpg" class="">  
<p>4、跨域问题解决<br>（1）通过后端设置请求头<code>cors</code>（不推荐）<br>就是后端处理完返回的时候，设置响应头<code>cors</code>，这样浏览器就不会拦截响应了。<br>（2）通过前端设置代理服务器（推荐）  </p>
<img src="/2023/10/27/Vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue27.jpg" class="">  
<p><code>vue.config.js</code>：<br>特别说明：<code>public</code>文件夹相当于代理服务器了，如果请求接口为<code>/test</code>，<code>public</code>文件夹里有<code>test</code>文件，那么代理服务器就不会将请求转发给后端，它会直接将<code>test</code>文件返回给前端（针对方式一）。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">	pages: &#123;</span><br><span class="line">		index: &#123;</span><br><span class="line">			// 入口</span><br><span class="line">			entry: &#x27;src/main.js&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	// 关闭语法检查</span><br><span class="line">	lintOnSave: false,</span><br><span class="line">	// 开启代理服务器（方式一）</span><br><span class="line">	// 只能配置一个</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		proxy: &#x27;http://localhost:8080&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	// 开启代理服务器（方式二）推荐</span><br><span class="line">	// 可以配置多个</span><br><span class="line">	// 注意：因为使用了前缀&#x27;/demo&#x27;，所以请求接口时，必须加上前缀&#x27;/demo&#x27;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		proxy: &#123;</span><br><span class="line">			&#x27;/demo1&#x27;: &#123;</span><br><span class="line">				target: &#x27;http://localhost:8080&#x27;,</span><br><span class="line">				// 必须配置pathRewrite，这个不配置的话，后端收到的请求也包含前缀</span><br><span class="line">				pathRewrite: &#123;</span><br><span class="line">					&#x27;^/demo1&#x27;: &#x27;&#x27;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			// 配置多个</span><br><span class="line">			&#x27;/demo2&#x27;: &#123;</span><br><span class="line">				target: &#x27;http://localhost:8088&#x27;,</span><br><span class="line">				pathRewrite: &#123;</span><br><span class="line">					&#x27;^/demo2&#x27;: &#x27;&#x27;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后接口请求处的端口号一定要改成和前端一致，比如前端的端口号是4000，请求接口也要改成4000。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Login() &#123;</span><br><span class="line">  this.axios.post(&#x27;http://localhost:4000/login&#x27;,this.form).then((res) =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    if (res.data.code == 200) &#123;</span><br><span class="line">      this.$message(&#123;</span><br><span class="line">        message: &quot;成功登录！&quot;,</span><br><span class="line">        type: &quot;success&quot;</span><br><span class="line">      &#125;)</span><br><span class="line">      this.$router.push(&#123;path: &quot;/Home&quot;&#125;)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      this.$message.error(&#x27;登录失败&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    this.$message.error(&#x27;登录失败&#x27;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、Vue数字输入框说明"><a href="#8、Vue数字输入框说明" class="headerlink" title="8、Vue数字输入框说明"></a>8、Vue数字输入框说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-input type=&quot;number&quot; size=&quot;small&quot; v-model.number=&quot;addIntegralForm.integral&quot; placeholder=&quot;请输入积分&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure>
<p>1、<code>type=&quot;number&quot;</code>：这个的作用是让输入框只能输入数字，但是输入的数字是字符串数字，例如：<code>&quot;3&quot;</code>。<br>2、<code>v-model.number</code>：这个的作用就是解决上面出现的问题，使输入的数字是数字类型，例如：<code>3</code>。  </p>
<h3 id="9、Vue关于路由跳转，携带参数"><a href="#9、Vue关于路由跳转，携带参数" class="headerlink" title="9、Vue关于路由跳转，携带参数"></a>9、Vue关于路由跳转，携带参数</h3><p>1、<code>this.$router.push</code>传递参数有2种方式：<br>（1）第一种<br>传递参数：<code>this.$router.push(&#123;path: &#39;路由&#39;, query: &#123;key: value&#125;&#125;)</code><br>参数取值：<code>this.$route.query.key</code>（注意不是<code>$router</code>，是<code>$route</code>）<br>使用这种方式，传递参数会拼接在路由后面，出现在地址栏。<br>（2）第二种<br>传递参数：<code>this.$router.push(&#123;name: &#39;路由的name&#39;, params: &#123;key: value&#125;&#125;)</code><br>参数取值：<code>this.$route.params.key</code>（注意不是<code>$router</code>，是<code>$route</code>）<br>使用这种方式，参数不会拼接在路由后面，地址栏上看不到参数。<br>注意：使用这种方式传参，如果参数是空字符串，必须这样传：<code>this.$router.push(&#123;name: &#39;路由的name&#39;, params: &#123;key: &#39;&#39; || undefined&#125;&#125;)</code>。<br>2、例子：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#x27;/viewAgent&#x27;)</span><br><span class="line"></span><br><span class="line">this.$router.push(&#123; path: &#x27;/viewAgent&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">this.$router.push(&#123; name: &#x27;viewAgent&#x27;, params: &#123; isShow: true&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="10、前端get请求参数包含数组的情况"><a href="#10、前端get请求参数包含数组的情况" class="headerlink" title="10、前端get请求参数包含数组的情况"></a>10、前端get请求参数包含数组的情况</h3><p>解决方法：数组参数序列化，如果我们使用的是<code>axios</code>插件，那么可以对<code>axios</code>的<code>paramsSerializer</code>属性进行处理，使得数组参数能够序列化。<br>1、方法一：自行写回调函数对数组参数进行处理  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ajax请求方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getDataApi</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>/transferFee/page`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">    <span class="comment">// 处理git请求传subjectCodes数组的问题，对数组进行序列化</span></span><br><span class="line">	<span class="attr">paramsSerializer</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  		<span class="keyword">let</span> arr = [];</span><br><span class="line">		<span class="comment">// 用的时候修改subjectCodes为实际的数组名，下面同理</span></span><br><span class="line">  		<span class="keyword">const</span> &#123;subjectCodes, ...rest&#125; = params;</span><br><span class="line">  		<span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> rest) &#123;</span><br><span class="line">    		arr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;rest[key]&#125;</span>`</span>)</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">if</span> (subjectCodes) &#123;</span><br><span class="line">    		<span class="keyword">let</span> subjectCodes=params.<span class="property">subjectCodes</span>.<span class="title function_">map</span>(<span class="function"><span class="params">_</span>=&gt;</span><span class="string">`subjectCodes=<span class="subst">$&#123;_&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    		arr.<span class="title function_">push</span>(subjectCodes)</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">const</span> paramsStr = arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  		<span class="variable language_">console</span>.<span class="title function_">log</span>(paramsStr);</span><br><span class="line">  		<span class="keyword">return</span> paramsStr;</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、方法二：使用qs插件对数组参数进行处理<br>（1）qs插件：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、qs.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] &#125;, &#123; <span class="attr">arrayFormat</span>: <span class="string">&#x27;indices&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 输出结果：&#x27;a[0]=b&amp;a[1]=c&#x27;</span></span><br><span class="line"><span class="number">2</span>、qs.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] &#125;, &#123; <span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 输出结果：&#x27;a[]=b&amp;a[]=c&#x27;</span></span><br><span class="line"><span class="number">3</span>、qs.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] &#125;, &#123; <span class="attr">arrayFormat</span>: <span class="string">&#x27;repeat&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 输出结果：&#x27;a=b&amp;a=c&#x27;</span></span><br><span class="line"><span class="number">4</span>、qs.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] &#125;, &#123; <span class="attr">arrayFormat</span>: <span class="string">&#x27;comma&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 输出结果：&#x27;a=b,c&#x27;</span></span><br></pre></td></tr></table></figure>
<p>（2）axios配置：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">async</span> (config) =&gt; &#123;</span><br><span class="line"><span class="comment">//只针对get方式进行序列化</span></span><br><span class="line"> <span class="keyword">if</span> (config.<span class="property">method</span> === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">   config.<span class="property">paramsSerializer</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> qs.<span class="title function_">stringify</span>(params, &#123; <span class="attr">arrayFormat</span>: <span class="string">&#x27;repeat&#x27;</span> &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）如果是小程序使用qs：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> urlQueryString = qs.<span class="title function_">stringify</span>(options.<span class="property">params</span>, &#123;   <span class="comment">//使用到qs ,先下载，后引入</span></span><br><span class="line">  <span class="attr">addQueryPrefix</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowDots</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">arrayFormat</span>: <span class="string">&#x27;repeat&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">myUrl += urlQueryString;</span><br></pre></td></tr></table></figure>

<h3 id="11、axios和vue-axios"><a href="#11、axios和vue-axios" class="headerlink" title="11、axios和vue-axios"></a>11、axios和vue-axios</h3><p>1、区别<br>（1）axios是基于promise的http库，可以在浏览器和node.js中使用，它不是vue的第三方插件，它使用的时候不能像vue的插件（如：vue-router、vuex等）通过Vue.use()安装插件，需要在原型上进行进行绑定使用：<code>Vue.prototype.$http = axios</code>；<br>（2）vue-axios是axios集成到vue.js的小包装器，可以像插件一样安装使用：<code>Vue.use(VueAxios, axios)</code>。<br>2、使用方式<br>（1）axios使用方法<br>安装命令：<code>npm install --save axios</code>。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在入口文件main.<span class="property">js</span>中配置</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"># 在原型上绑定axios</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line"></span><br><span class="line"># 在组件中使用</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/url?id=666&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>（2）vue-axios使用方法<br>安装命令：<code>npm install --save vue-axios axios</code>或者<code>npm install --save vue-axios</code>。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在入口文件main.<span class="property">js</span>中配置</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxios</span> <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxios</span>, axios)</span><br><span class="line"></span><br><span class="line"># 在组件中使用</span><br><span class="line"># 使用方式一</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"># 使用方式二</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"># 使用方式三</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="12、启动项目自动打开浏览器"><a href="#12、启动项目自动打开浏览器" class="headerlink" title="12、启动项目自动打开浏览器"></a>12、启动项目自动打开浏览器</h3><p>在<code>package.json</code>文件中的<code>scripts</code>属性中添加<code>--open</code>参数即可：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve --open&quot;</span><span class="punctuation">,</span> <span class="comment">// 启动项目自动打开浏览器</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="13、关闭eslint检查"><a href="#13、关闭eslint检查" class="headerlink" title="13、关闭eslint检查"></a>13、关闭eslint检查</h3><p>1、在项目根目录创建<code>vue.config.js</code>文件；<br>2、在<code>vue.config.js</code>文件中添加以下代码：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、配置src别名"><a href="#14、配置src别名" class="headerlink" title="14、配置src别名"></a>14、配置src别名</h3><p>1、在项目根目录创建<code>jsconfig.json</code>文件；<br>2、在<code>jsconfig.json</code>文件中添加：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="comment">// @不能在node_modules、dist中使用</span></span><br><span class="line">	<span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="15、自动导入组件方法"><a href="#15、自动导入组件方法" class="headerlink" title="15、自动导入组件方法"></a>15、自动导入组件方法</h3><p>使用Webpack的require.context功能来实现。<br>1、创建组件目录<br>首先，确保你的组件都放在一个统一的目录下，比如<code>src/components</code>（这是约定好的，想要实现自动导入，组件就必须放在这里）。<br>2、使用<code>require.context</code>自动导入组件<br>你可以在<code>src/main.js</code>或者一个单独的模块中（比如重新在src目录下创建一个新的js文件<code>auto-import-components.js</code>）使用require.context来自动导入组件。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/auto-import-components.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动导入 src/components 目录下的所有 .vue 文件</span></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.<span class="title function_">context</span>(</span><br><span class="line">  <span class="comment">// 组件目录的相对路径</span></span><br><span class="line">  <span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  <span class="comment">// 另一个匹配方式：/\.vue$/</span></span><br><span class="line">  <span class="regexp">/[A-Z]\w+\.(vue|js)$/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">requireComponent.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取组件配置</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名，下面有三种方式，选择其中一种即可</span></span><br><span class="line">  <span class="comment">// 一种方式：const componentName = fileName.replace(/^\.\/(.*)\.vue$/, &#x27;$1&#x27;);</span></span><br><span class="line">  <span class="comment">/** 一种方式：</span></span><br><span class="line"><span class="comment">   * const componentName = fileName</span></span><br><span class="line"><span class="comment">   * .replace(/^\.\/(.*)\.vue$/, &#x27;$1&#x27;) // 去除路径和扩展名</span></span><br><span class="line"><span class="comment">   * .replace(/\w+/g, str =&gt; str.charAt(0).toUpperCase() + str.slice(1)); // 转换为 PascalCase</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> componentName = fileName</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pop</span>()</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\.\w+$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.<span class="property">default</span> || componentConfig</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3、如果是重新创建的js文件，就得在main.js中导入  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./auto-import-components&#x27;</span>; <span class="comment">// 引入自动导入组件的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>4、使用组件<br>现在，你可以在任何页面中直接使用这些组件，而不需要手动导入。例如：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyComponent /&gt;</span><br><span class="line">    &lt;AnotherComponent /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyPage&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意事项：<br>（1）组件命名：确保组件的文件名是<code>PascalCase</code>（大驼峰命名法），例如<code>MyComponent.vue</code>，这样在模板中使用时可以直接写<code>&lt;MyComponent /&gt;</code>。<br>（2）性能考虑：自动导入所有组件可能会增加初始加载时间，尤其是在组件数量较多的情况下。如果项目较大，建议按需加载或使用动态导入。<br>（3）特定目录：如果你只想自动导入特定目录下的组件，可以调整<code>require.context</code>的路径和正则表达式。<br>5、动态导入（按需加载）<br>如果你希望进一步优化性能，可以考虑使用动态导入<code>（import()）</code>来按需加载组件。不过这会增加一些复杂性，因为你需要手动管理组件的加载和注册。<br>动态导入（Dynamic Import）是 JavaScript 的一种特性，允许你在运行时按需加载模块。这种方式可以显著优化应用的性能，尤其是在组件较多或较大的情况下。在 Vue 项目中，动态导入通常用于实现组件的懒加载（Lazy Loading），即只有在组件需要被渲染时才会加载对应的代码。<br>以下是如何在Vue2项目中实现动态导入的具体方法：<br>（1）动态导入的基本语法<br>动态导入使用<code>import()</code>语法，它返回一个<code>Promise</code>，在模块加载完成后会解析为该模块。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;path/to/module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用加载的模块</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>（2）在Vue2中使用动态导入，实现路由懒加载  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Home.vue&#x27;</span>), <span class="comment">// 动态导入</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/About.vue&#x27;</span>), <span class="comment">// 动态导入</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>（3）在Vue2中使用动态导入，实现组件懒加载  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;loadComponent&quot;&gt;加载组件&lt;/button&gt;</span><br><span class="line">    &lt;component :is=&quot;dynamicComponent&quot; v-if=&quot;dynamicComponent&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;LazyLoadDemo&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dynamicComponent: null,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    loadComponent() &#123;</span><br><span class="line">      import(&#x27;@/components/MyComponent.vue&#x27;).then(module =&gt; &#123;</span><br><span class="line">        this.dynamicComponent = module.default; // 将加载的组件赋值给 dynamicComponent</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（3）结合require.context实现自动动态导入  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.<span class="title function_">context</span>(</span><br><span class="line">  <span class="string">&#x27;@/components&#x27;</span>, <span class="comment">// 组件目录</span></span><br><span class="line">  <span class="literal">false</span>, <span class="comment">// 是否递归子目录</span></span><br><span class="line">  <span class="regexp">/\.vue$/</span> <span class="comment">// 匹配文件的正则表达式</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">requireComponent.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> componentName = fileName</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.vue$/</span>, <span class="string">&#x27;$1&#x27;</span>) <span class="comment">// 去除路径和扩展名</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\w+/g</span>, <span class="function"><span class="params">str</span> =&gt;</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>)); <span class="comment">// 转换为 PascalCase</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态导入组件</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(componentName, <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`@/components/<span class="subst">$&#123;fileName.replace(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span>`</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在模板中使用组件：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyComponent /&gt;</span><br><span class="line">    &lt;AnotherComponent /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyPage&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在动态导入组件时，可以添加加载状态提示（如 Loading 动画），以提升用户体验：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;loadComponent&quot;&gt;加载组件&lt;/button&gt;</span><br><span class="line">    &lt;div v-if=&quot;isLoading&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">    &lt;component :is=&quot;dynamicComponent&quot; v-if=&quot;dynamicComponent&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;LazyLoadDemo&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dynamicComponent: null,</span><br><span class="line">      isLoading: false,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    loadComponent() &#123;</span><br><span class="line">      this.isLoading = true;</span><br><span class="line">      import(&#x27;@/components/MyComponent.vue&#x27;)</span><br><span class="line">        .then(module =&gt; &#123;</span><br><span class="line">          this.dynamicComponent = module.default;</span><br><span class="line">        &#125;)</span><br><span class="line">        .finally(() =&gt; &#123;</span><br><span class="line">          this.isLoading = false;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如果你希望在某些情况下预加载组件，可以使用<code>webpackPrefetch</code>或<code>webpackPreload</code>注释：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">&#x27;@/components/MyComponent.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>


<br/>

<hr>
<br/>]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习笔记</title>
    <url>/2024/07/19/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Maven配置"><a href="#一、Maven配置" class="headerlink" title="一、Maven配置"></a>一、Maven配置</h1><p>1、Maven配置国内阿里镜像  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置jdk17版本构建  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="二、Maven标签解释"><a href="#二、Maven标签解释" class="headerlink" title="二、Maven标签解释"></a>二、Maven标签解释</h1><h3 id="1、GAPV属性"><a href="#1、GAPV属性" class="headerlink" title="1、GAPV属性"></a>1、GAPV属性</h3><p>1、说明<br>GAPV属性是Maven项目坐标的四个属性，分别是：<code>groupId、artifactId、version、packaging</code>，其中前三个是必要的，而packaging属性是可选项。<br>2、解释<br>（1）<code>groupId</code>：定义当前Maven项目属于哪个组，这个组往往和项目所在的组织或公司有关，格式为：com.{公司}.业务线.{子业务线}（最多4级）。<br>说明：{公司} 例如：alibaba、taobao、tmall等一级，子业务线可选。<br>例子：com.taobao.tddl或com.alibaba.sourcing.multilang等。<br>（2）<code>artifactId</code>：定义实际项目中的一个模块，格式为：产品线名-模块名。<br>例子：tc-client、uic-api、tair-tool等。<br>（3）<code>version</code>：定义当前项目的版本号，格式为：主版本号.次版本号.修订号。<br>说明：  </p>
<ol>
<li>主版本号：当做了不兼容的API修改，或者增加了能改变产品方向的新功能，例如：原来的项目有用户模块、部门模块，然后根据需要删除了部门模块。  </li>
<li>次版本号：当做了向下兼容的功能性新增（新增类、接口等），例如：原来的项目用户没有删除功能，然后根据需求新增了删除功能。  </li>
<li>修订号：修复bug，没有修改方法签名的功能加强，保持API兼容性。<br>例如：初始 -》1.0.0，修改bug -》1.0.1，功能调整 -》1.1.1等。</li>
</ol>
<p>（4)<code>packaging</code>：定义项目的打包方式，常用的打包方式有jar、war、pom等。  </p>
<ol>
<li>jar：代表普通的java工程，打包以后是.jar结尾的文件，默认值。  </li>
<li>war：代表java的web工程，打包以后.war结尾的文件，idea有个插件可以将普通java工程转成war工程：<code>JBLJavaToWeb</code>。  </li>
<li>pom：父项目打包方式，代表不会打包，用来做继承的父工程。</li>
</ol>
<h3 id="2、properties标签"><a href="#2、properties标签" class="headerlink" title="2、properties标签"></a>2、properties标签</h3><p>1、说明<br>properties标签是Maven的属性标签，用来定义一些常量，在pom.xml文件中可以直接引用。<br>2、例子  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、Maven依赖信息"><a href="#3、Maven依赖信息" class="headerlink" title="3、Maven依赖信息"></a>3、Maven依赖信息</h3><p>1、Maven依赖去哪里找？<br>（1）maven提供的查询官网：<code>https://mvnrepository.com</code>；<br>（2）idea中的插件：<code>maven-search</code>。<br>2、提取版本号<br>说明：就是说，可以将依赖中的<code>version</code>标签提取出来，写到<code>properties</code>标签中管理。<br>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里相当于声明一个版本变量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这里是用上面声明的版本变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、Scope标签"><a href="#4、Scope标签" class="headerlink" title="4、Scope标签"></a>4、Scope标签</h3><p>1、说明<br>Scope标签是用在<code>dependency</code>标签中的。<br>2、用法<br>（1）<code>compile</code>：默认值，表示该依赖在编译和运行时都有效。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）<code>test</code>：表示该依赖只在测试时有效，只用在test包下导入并使用，比如：引入junit依赖，使用@Test注解，只能在test包下使用。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）<code>provided</code>：表示该依赖在编译和测试时有效，但在运行时无效，意思和<code>runtime</code>相反，在main和test包下使用，打包和运行不使用，比如：引入servlet-api包，使用HttpServlet，在main和test中可能要使用，但是打包和运行我们就不使用，因为tomcat会提供。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）<code>runtime</code>：表示该依赖只在运行时有效，在编译时无效，意思就是在main包下不会用到，test包下也不会用到，只有在打包和运行的时候会用到，比如：mysql驱动依赖，我们要使用反射Class.forName(“xxx.xxx.xxx”)加载mysql驱动。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（5）<code>system</code>：表示当前依赖不从maven仓库获取，从本地系统获取，结合systempath使用，常用于无法从maven仓库获取的包。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.supermap<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>data<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/data-1.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（6）<code>import</code>：只能在<code>dependencyManagement</code>标签中使用，而且仅用于<code>type</code>标签为pom值时。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：pom文件是单继承制，也就是只会继承<code>parent</code>标签，而<code>parent</code>标签一般是继承spring-boot-starter-parent，如果想继承其他的，比如想继承spring-cloud-dependencies，那么就需要使用<code>import</code>标签，首先在<code>dependencyManagement</code>中指定spring-cloud-dependencies的版本，然后在<code>scope</code>和<code>type</code>标签中指定import和pom。  </p>
<h3 id="5、dependencyManagement标签"><a href="#5、dependencyManagement标签" class="headerlink" title="5、dependencyManagement标签"></a>5、dependencyManagement标签</h3><p>1、说明<br>在父工程使用，用于依赖管理，在这个标签中的依赖不会真正导入项目，只是声明和统一管理。<br>2、例子：<br>比如有一个父工程和两个子工程user和order。<br>（1）在父工程中使用  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这里引入依赖，依赖不会真正导入项目中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）在user子工程中使用  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user子工程就继承了父工程的版本 2.15.2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：此时父工程和order子工程中是没有<code>jackson-core</code>这个依赖的。<br>（3）在order子工程中使用其他版本  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- order子工程因为使用了version，不会继承父工程中的版本，此时order的版本为 2.14.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、Optional标签"><a href="#6、Optional标签" class="headerlink" title="6、Optional标签"></a>6、Optional标签</h3><p>在<code>dependency</code>标签下使用，作用是如果哪个依赖使用了<code>optional</code>，表示可选，需要我们手动导入所需依赖，比如：<br>在pom文件中导入camunda-bpm-spring-boot-starter-rest依赖，我们查看camunda-bpm-spring-boot-starter-rest依赖，它里面已经导入了spring-boot-starter-web依赖了，并且使用了<code>optional</code>标签为true，说明我们如果在pom文件中要想使用spring-boot-starter-web依赖，那就需要我们手动再导入一次；如果<code>optional</code>标签为false，那spring-boot-starter-web依赖已经自动帮我们导入了，不需要我们手动再次导入。  </p>
<h3 id="7、RelativePath标签"><a href="#7、RelativePath标签" class="headerlink" title="7、RelativePath标签"></a>7、RelativePath标签</h3><p>1、说明<br>在<code>parent</code>标签下使用，作用是，选择父pom文件的地址。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（1）默认值（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>默认我们不用写<code>relativePath</code>，那默认值就是<code>../pom.xml</code>（默认从pom文件上一级目录开始查找），会从本地路径中获取parent的pom。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）写了<code>relativePath</code>标签<br>有时候我们会写成<code>relativePath</code>，表示不从本地获取，直接从仓库获取。<br>（3）写了<code>relativePath</code>某个pom的路径（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>指定本地的路径，从本地路径获取parent的pom。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../xxx/pom.xml<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="三、Maven相关问题"><a href="#三、Maven相关问题" class="headerlink" title="三、Maven相关问题"></a>三、Maven相关问题</h1><h3 id="1、Maven依赖传递和依赖冲突特性"><a href="#1、Maven依赖传递和依赖冲突特性" class="headerlink" title="1、Maven依赖传递和依赖冲突特性"></a>1、Maven依赖传递和依赖冲突特性</h3><p>1、依赖传递（只有<code>compile</code>的会发生）<br>（1）说明<br>A 依赖-》 B 依赖-》C，如果只引入C，自动引入A和B。<br>（2）查看引入的依赖又依赖了谁<br>在maven仓库中，点击某个依赖，往下翻，有个<code>Compile Dependencies</code>项，就是这个依赖所依赖的其他的依赖（注意：只有<code>Compile Dependencies</code>项有依赖传递，其他没有！）。<br>2、依赖冲突<br>（1）说明<br>A 依赖-》 B 依赖-》 C 依赖 -》 A 依赖，这样就产生了循环依赖，循环依赖就会导致依赖冲突，当发生依赖冲突，就会终止依赖传递，避免重复依赖。<br>（2）场景一（谁短谁优先，针对引用路径）<br>A -》C -》B1.0：有一个依赖A（scope标签为<code>compile</code>），引入依赖A后，会自动引入C，然后又自动引入B1.0；<br>F -》B2.0：有一个依赖F（scope标签为<code>compile</code>），引入依赖F后，自动引入B2.0；<br>因为maven采用谁的引用路径短，就引用谁，所以最后引用的B是2.0版本。<br>（3）场景二（引用路径相同时，谁上谁优先，dependencies声明的先后顺序）<br>A -》B1.0：在pom.xml文件中，先引用了A，然后A自动引用了B1.0；<br>F -》B2.0：然后在pom.xml文件中，又引用了F，这样最后得到的B是1.0版本。<br>（4）场景三<br>A -》B1.0 -》C：引入了A依赖，不会自动引入B1.0，也不会引入C；<br>F -》B2.0：引入了F，自动引入B2.0，所以最后引用的B的版本是2.0；<br>因为根据谁短谁优先，引入了B2.0，这样就导致A这边依赖冲突，就终止了后续自动引入。  </p>
<h3 id="2、Maven本地仓库被污染"><a href="#2、Maven本地仓库被污染" class="headerlink" title="2、Maven本地仓库被污染"></a>2、Maven本地仓库被污染</h3><p>当发现本地仓库有<code>lastUpdated</code>文件，说明本地仓库被污染，需要删除<code>lastUpdated</code>文件，重新下载依赖。<br>清除污染仓库脚本（针对windows，是.bat文件）：<br>rem：是注释的意思。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 下面写你的本地仓库路径</span><br><span class="line">set REPOSITORY_PATH=D:\repository</span><br><span class="line">rem 正在搜索...</span><br><span class="line">for /f &quot;delims=&quot; %%i in (&#x27;dir /b /s &quot;%REPOSITORY_PATH%\*lastUpdated*&quot;&#x27;) do (</span><br><span class="line">    del /s /q %%i</span><br><span class="line">    echo 删除文件: %%i</span><br><span class="line">)</span><br><span class="line">echo 搜索完成！</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h3 id="3、Maven生命周期插件用法"><a href="#3、Maven生命周期插件用法" class="headerlink" title="3、Maven生命周期插件用法"></a>3、Maven生命周期插件用法</h3><p>1、生命周期流程<br>清理-》编译-》测试-》打包-》报告-》部署。<br>2、生命周期插件<br>（1）<code>mvn clean</code>：清理编译或打包后的项目结构，删除target文件夹。<br>（2）<code>mvn compile</code>：编译项目，生成target文件夹。<br>（3）<code>mvn test</code>：执行测试源码（测试）。<br>（4）<code>mvn site</code>：生成一个项目依赖信息的展示页面。<br>（5）<code>mvn package</code>：打包项目，生成jar&#x2F;war包。<br>（6）<code>mvn install</code>：打包后上传到maven本地仓库（本地部署），供其他项目使用。<br>（7）<code>mvn deploy</code>：只打包，上传到maven私服仓库（私服部署）。<br>3、用法<br>因为<code>clean</code>是独立出来的（还有<code>site</code>也是独立出来的，很少用），所以在执行插件的时候，最好是（命令行操作，在使用命令行的时候，必须在项目根路径）<code>mvn clean compile</code>，点击idea插件时，最后先点<code>clean</code>清理操作之后，在点击<code>compile</code>。<br>4、配置插件<br>在<code>build</code>标签中配置插件，比如将web项目打包时，因为版本兼容问题，报错打不了包，就需要自定义配置插件，如下：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、maven打包插件<br>（1）maven-jar-plugin：默认的打包插件，用来打普通的project JAR包。<br>（2）maven-shade-plugin：用来打可执行JAR包，也就是所谓的fat JAR包。<br>（3）maven-assembly-plugin：支持自定义的打包结构，也可以定制依赖项等。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Thinking学习笔记</title>
    <url>/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h3 id="1、重载区分"><a href="#1、重载区分" class="headerlink" title="1、重载区分"></a>1、重载区分</h3><p><code>Java重载</code>不能以返回值区分（不能以方法类型），只能以方法参数的类型、个数和顺序区分（顺序不推荐）。  </p>
<h3 id="2、static方法调用规则"><a href="#2、static方法调用规则" class="headerlink" title="2、static方法调用规则"></a>2、static方法调用规则</h3><p>（1）在<code>static方法</code>内不能调用非静态方法，但是非静态方法可以调用<code>static方法</code>。<br>（2）<code>static</code>关键字不能应用于局部变量。  </p>
<h3 id="3、finalize方法"><a href="#3、finalize方法" class="headerlink" title="3、finalize方法"></a>3、finalize方法</h3><p><code>finalize方法</code>：当垃圾回收器（gc）执行时会触发该方法（不推荐使用该方法，java9已废弃）。  </p>
<h3 id="4、volatile关键字作用"><a href="#4、volatile关键字作用" class="headerlink" title="4、volatile关键字作用"></a>4、volatile关键字作用</h3><p>（1）保证可见性（两个线程A、B互相可见）；<br>（2）不保证原子性；<br>（3）防止指令重排。  </p>
<h3 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h3><p>（1）数组的声明<br>正确的方式：<code>int[] a</code>或者<code>int a[]</code><br>错误的方式：<code>int[3] a</code>或者<code>int a[6]</code><br>原因：针对声明数组的时候，编译器不允许指定数组的大小。<br>（2）数组的初始化  </p>
<ol>
<li><code>int[] a = &#123;1,2,3,4&#125;;</code>  </li>
<li><code>int[] a = new int[3];</code>  </li>
<li><code>int[] a = new[]&#123;1,2,3,4&#125;;</code>（1. 是3. 的简写）</li>
</ol>
<h3 id="6、try-catch执行顺序"><a href="#6、try-catch执行顺序" class="headerlink" title="6、try..catch执行顺序"></a>6、try..catch执行顺序</h3><p>（1）<code>try..catch</code>捕获到异常，<code>try</code>中后面的代码不会继续执行，但是<code>catch</code>括号外面的会执行。<br>（2）如果<code>try</code>中有<code>return</code>，先执行<code>try</code>中<code>return</code>之前的逻辑，再执行<code>finally</code>，最后执行<code>return</code>。<br>（3）<code>finally</code>中一般是不推荐有<code>return</code>语句的！！！如果有，会覆盖<code>try</code>中的<code>return</code>。  </p>
<h3 id="7、权限修饰符"><a href="#7、权限修饰符" class="headerlink" title="7、权限修饰符"></a>7、权限修饰符</h3><p><code>public</code> &gt; <code>protected</code> &gt; <code>default</code> &gt; <code>private</code>。<br>（1）<code>public</code>：公共权限，可以被任何类访问，无论它们是否在同一包中；<br>（2）<code>protected</code>：受保护权限，可以被同一个包中的类以及该类的子类访问；<br>（3）<code>default</code>：默认权限，只有同一个包中的类可以访问。  </p>
<h3 id="8、基本类型判断"><a href="#8、基本类型判断" class="headerlink" title="8、基本类型判断"></a>8、基本类型判断</h3><p><code>==、!=</code>；引用类型判断：<code>equals</code>（默认比较引用，不是比较值，所以自定义类时必须重写equals）。  </p>
<h3 id="9、Java标签用法"><a href="#9、Java标签用法" class="headerlink" title="9、Java标签用法"></a>9、Java标签用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		labelOne:</span><br><span class="line">			<span class="keyword">for</span> (;<span class="literal">true</span>;) &#123;</span><br><span class="line">				labelTwo:</span><br><span class="line">					<span class="keyword">for</span> (;i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">						<span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;continue&quot;</span>);</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;break&quot;</span>);</span><br><span class="line">							i ++;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (i == <span class="number">7</span>) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;continue labelOne&quot;</span>);</span><br><span class="line">							i ++;</span><br><span class="line">							<span class="keyword">continue</span> labelOne;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (i == <span class="number">8</span>) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;break labelOne&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span> labelOne;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k &lt; <span class="number">5</span>;k ++) &#123;</span><br><span class="line">							<span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</span><br><span class="line">								System.out.println(<span class="string">&quot;continue labelTwo&quot;</span>);</span><br><span class="line">								<span class="keyword">continue</span> labelTwo;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelTwo</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelTwo</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="type">continue</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="type">break</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelTwo</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelTwo</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelTwo</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">7</span></span><br><span class="line"><span class="keyword">continue</span> <span class="type">labelOne</span></span><br><span class="line"><span class="variable">i</span> <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">break</span> labelOne</span><br></pre></td></tr></table></figure>

<h3 id="10、java基本数据类型"><a href="#10、java基本数据类型" class="headerlink" title="10、java基本数据类型"></a>10、java基本数据类型</h3><p>（1）<code>boolean</code>：1b（bit），1位，占用4字节（<code>Boolean</code>）；<br>（2）<code>char</code>：2B（Bytes），16b（bits），16位（<code>Character</code>）；<br>（3）<code>byte</code>：1B（Byte），8b（bits），8位，-128〜127（<code>Byte</code>）；<br>（4）<code>short</code>：2B（Bytes），16b（bits）16位，-12^15〜2^15-1（<code>Short</code>）；<br>（5）<code>int</code>：4B（Bytes），32b（bits），32位，-2^31〜2^31-1（<code>Integer</code>）；<br>（6）<code>long</code>：8B（Bytes），64b（bits）64位，-2^63〜2^63-1（<code>Long</code>）；<br>（7）<code>float</code>：4B（Bytes），32b（bits），32位，-3.4E+38〜3.4E+38（<code>Float</code>）；<br>（8）<code>double</code>：8B（Bytes），64b（bits），64位，-1.7E+308〜1.7E+308（<code>Double</code>）。<br>类中的字段是基本类型，没有初始化，java也会默认加上默认值（针对类中，只有在类中的字段才会自动加上默认值，方法中的变量不会）。<br>（1）<code>boolean</code>：false；<br>（2）<code>char</code>：’\u0000’（null）；<br>（3）<code>byte</code>：(byte)0；<br>（4）<code>short</code>：(short)0；<br>（5）<code>int</code>：0；<br>（6）<code>long</code>：0L；<br>（7）<code>float</code>：0.0f；<br>（8）<code>double</code>：0.0d。  </p>
<h3 id="11、堆和栈"><a href="#11、堆和栈" class="headerlink" title="11、堆和栈"></a>11、堆和栈</h3><p>堆：存放java对象（唯一的）；栈：不唯一，是根据线程定，比如main线程的栈。  </p>
<h3 id="12、java的回收机制"><a href="#12、java的回收机制" class="headerlink" title="12、java的回收机制"></a>12、java的回收机制</h3><p>java有一个垃圾回收器，用来监视new创建的对象，如果某个对象的引用没用了，便会释放该对象，例如：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// s在作用域外是无法使用的，所以引用s没用了，释放</span></span><br></pre></td></tr></table></figure>

<h3 id="13、高精度数字"><a href="#13、高精度数字" class="headerlink" title="13、高精度数字"></a>13、高精度数字</h3><p>（1）<code>BigInteger</code>：整数；<br>（2）<code>BigDecimal</code>：定点数。  </p>
<h3 id="14、基本类型和引用类型给值问题"><a href="#14、基本类型和引用类型给值问题" class="headerlink" title="14、基本类型和引用类型给值问题"></a>14、基本类型和引用类型给值问题</h3><p>基本类型给值是深给值，引用类型是浅给值。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">a = b;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="15、static静态初始化"><a href="#15、static静态初始化" class="headerlink" title="15、static静态初始化"></a>15、static静态初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	A() &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">f1</span> <span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 3</span></span><br><span class="line">	B() &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">		a2.f1();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">f2</span> <span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f2&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 4，这里的顺序无关紧要</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">	<span class="type">A</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 7</span></span><br><span class="line">	<span class="keyword">static</span> <span class="type">A</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 5</span></span><br><span class="line">	C () &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">		a4.f1();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">f3</span> <span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f3&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">A</span> <span class="variable">a5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Test1&quot;</span>); <span class="comment">// 8</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">C</span>(); <span class="comment">// 9</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Test2&quot;</span>);</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">		b.f2();</span><br><span class="line">		c.f3();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(); <span class="comment">// 1</span></span><br><span class="line">	<span class="keyword">static</span> <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>(); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">A</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">f1</span><br><span class="line">A</span><br><span class="line">A</span><br><span class="line">A</span><br><span class="line">C</span><br><span class="line">f1</span><br><span class="line">Test1</span><br><span class="line">A</span><br><span class="line">C</span><br><span class="line">f1</span><br><span class="line">Test2</span><br><span class="line">A</span><br><span class="line">C</span><br><span class="line">f1</span><br><span class="line">f2</span><br><span class="line">f3</span><br></pre></td></tr></table></figure>
<p>说明：<br>（1）Test类中有3个static，执行main方法时，先初始化static<code>1</code>和<code>2</code>；<br>（2）执行<code>1</code>，生成B对象，B类中存在<code>3</code>、<code>4</code>两个static，先执行<code>3</code>；<br>（3）生成A对象，执行A的构造方法，输出A；<br>（4）执行<code>4</code>，生成A对象，输出A；<br>（5）执行B的构造方法，输出B，然后输出f1；<br>（6）同理<code>（2）</code>，先执行<code>5</code>、<code>6</code>、<code>7</code>，输出A，A，A，然后执行C的构造方法，输出C，f1；<br>（7）然后开始执行main方法，输出Test1；<br>（8）执行<code>9</code>，C类中，static只执行一次，所以<code>5</code>、<code>6</code>不执行，只执行<code>7</code>，输出A；<br>（9）然后执行C的构造方法，输出C，f1；<br>（10）后面同理，输出Test2，A，C，f1，f2，f3。  </p>
<h3 id="16、继承和组合"><a href="#16、继承和组合" class="headerlink" title="16、继承和组合"></a>16、继承和组合</h3><p>不止可以使用继承，还可以使用组合，<code>继承</code>是去继承某个类，然后拥有这个类的方法、属性；而<code>组合</code>是在一个新类中声明某个类的对象，并创建这个类的对象，这样就可以使用这个类的方法、属性。  </p>
<h3 id="17、代理和组合很像："><a href="#17、代理和组合很像：" class="headerlink" title="17、代理和组合很像："></a>17、代理和组合很像：</h3><p>（1）组合  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LunTai</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">LunTai</span> <span class="variable">lunTai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LunTai</span>(); <span class="comment">// 组合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Car</span>().lunTai.run();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）代理  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FandDong</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">zuFang</span> <span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhongJie</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">FandDong</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FangDong</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zuFang</span> <span class="params">()</span> &#123;</span><br><span class="line">		fd.zuFang(); <span class="comment">// 代理</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18、Java向上转型"><a href="#18、Java向上转型" class="headerlink" title="18、Java向上转型"></a>18、Java向上转型</h3><p>（1）调用的属性是父类的属性；（父类和子类都有field属性，向上转型之后得到的对象，调用field属性是父类的）<br>（2）调用的方法，只能调用父类有的方法，如果子类重写了该方法，调用的就是子类的；<br>（3）不能调用子类独有的方法；<br>（4）如果父类的a方法是private，子类重写了a方法，这个a方法属于子类独有的方法，因为父类的a方法是private，相当于加了final关键字，是不能被重写的；<br>（5）向上转型静态方法执行的是父类的，普通方法执行的是子类的。  </p>
<h3 id="19、抽象类和接口实例化问题"><a href="#19、抽象类和接口实例化问题" class="headerlink" title="19、抽象类和接口实例化问题"></a>19、抽象类和接口实例化问题</h3><p>抽象类和接口一样，不能实例化；<br>（1）如果某个类继承了抽象类，要想实例化必须实现抽象类中所有抽象方法，否则这个类也是抽象类；<br>（2）接口可以有static final常量，但是不能是“空 final”，也可以被非常量表达式初始化。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="type">Random</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">47</span>);</span><br><span class="line">	<span class="type">int</span> <span class="variable">RANDOM_INT</span> <span class="operator">=</span> a.nextInt(<span class="number">10</span>);</span><br><span class="line">	<span class="type">long</span> <span class="variable">RANDOM_LONG</span> <span class="operator">=</span> a.nextLong() * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）当一个类继承抽象类并实现多个接口，顺序是先继承，再实现。  </p>
<h3 id="20、怎么调用抽象类中的抽象方法"><a href="#20、怎么调用抽象类中的抽象方法" class="headerlink" title="20、怎么调用抽象类中的抽象方法"></a>20、怎么调用抽象类中的抽象方法</h3><p>（1）创建一个interface接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个抽象类去实现这个接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TestAbstractImpl</span> <span class="keyword">implements</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了接口方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.testAbstractMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">testAbstractMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建一个普通类继承这个抽象类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestImpl</span> <span class="keyword">extends</span> <span class="title class_">TestAbstractImpl</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAbstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;继承了抽象类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）测试  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestImpl</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestImpl</span>();</span><br><span class="line">        test.testAbstractMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        test.testMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">继承了抽象类</span><br><span class="line">----------------------</span><br><span class="line">实现了接口方法</span><br><span class="line">继承了抽象类</span><br></pre></td></tr></table></figure>

<h3 id="21、迭代器设计模式"><a href="#21、迭代器设计模式" class="headerlink" title="21、迭代器设计模式"></a>21、迭代器设计模式</h3><p>（1）创建一个接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Selector</span> &#123;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">end</span><span class="params">()</span>;</span><br><span class="line">	Object <span class="title function_">current</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个类实现这个接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Object[] items;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Sequence</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">		items = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(next &lt; items.length) &#123;</span><br><span class="line">			items[next++] = x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SequenceSelector</span> <span class="keyword">implements</span> <span class="title class_">Selector</span> &#123; <span class="comment">// 内部类，相当于外部类的属性</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> i == items.length;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Object <span class="title function_">current</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> items[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; items.length) &#123;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Selector <span class="title function_">selector</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SequenceSelector</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Sequence</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sequence</span>(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			sequence.add(Integer.toString(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> sequence.selector();</span><br><span class="line">		<span class="keyword">while</span>(!selector.end()) &#123;</span><br><span class="line">			System.out.println(selector.current());</span><br><span class="line">			selector.next();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：Sequence类只是一个固定大小的Object的数组，以类的形式包装了起来。可以调用add()方法增加新的Object。要获取Sequence中的每一个对象，可以使用Selector接口。Selector允许检查Object数组是否到末尾了（end()），访问当前对象（current()），以及移到数组的下一个对象（next()）。  </p>
<h3 id="22、内部类调用外部类的方法"><a href="#22、内部类调用外部类的方法" class="headerlink" title="22、内部类调用外部类的方法"></a>22、内部类调用外部类的方法</h3><p>在内部类想要获取外部类对象的引用，可以使用：<code>外部类.this</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;A.f()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> A <span class="title function_">outer</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> A.<span class="built_in">this</span>; <span class="comment">// 使用这样的方式获取外部类对象的引用</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Inner <span class="title function_">inner</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">		A.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> a.inner();</span><br><span class="line">		inner.outer().f(); <span class="comment">//输出：A.f()</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="23、创建内部类的方法"><a href="#23、创建内部类的方法" class="headerlink" title="23、创建内部类的方法"></a>23、创建内部类的方法</h3><p>要创建内部类（是非静态内部类）对象：<code>先new外部类对象，再外部类对象.new 内部类()</code>。<br>注意：<br>（1）虽然静态类不能实例化，但是静态内部类是可以实例化的，静态内部类和内部类的区别就是，创建内部类必须先创建外部类，而静态内部类不用创建外部类；<br>（2）普通内部类不能有static字段和方法，但是<code>JDK16</code>以后是可以允许有的！  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="comment">// 内部类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">		A.<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> a.<span class="keyword">new</span> <span class="title class_">B</span>(); <span class="comment">// 先new外部类对象，再外部类对象.new 内部类()</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24、内部类相当于外部类中的属性"><a href="#24、内部类相当于外部类中的属性" class="headerlink" title="24、内部类相当于外部类中的属性"></a>24、内部类相当于外部类中的属性</h3><p>如果用<code>private</code>修饰内部类，则除了拥有该内部类的外部类能访问，其他都不能访问；如果用<code>protected</code>修饰内部类，只有拥有该内部类的外部类及其子类，以及与该外部类同一包中的类能访问，其他都不能访问。  </p>
<h3 id="25、只要在匿名内部类中会使用到的参数都得加上final修饰"><a href="#25、只要在匿名内部类中会使用到的参数都得加上final修饰" class="headerlink" title="25、只要在匿名内部类中会使用到的参数都得加上final修饰"></a>25、只要在匿名内部类中会使用到的参数都得加上final修饰</h3><p>（1）例子一：在匿名内部类中使用到了参数  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Destination</span> &#123;</span><br><span class="line">	String <span class="title function_">readLabel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> Destination <span class="title function_">destination</span><span class="params">(<span class="keyword">final</span> String dest, <span class="keyword">final</span> <span class="type">float</span> price)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Destination</span>() &#123;</span><br><span class="line">			<span class="keyword">private</span> <span class="type">int</span> cost;</span><br><span class="line">			&#123;</span><br><span class="line">				cost = Math.round(price);</span><br><span class="line">				<span class="keyword">if</span> (cost &gt; <span class="number">100</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;over budget!&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">private</span> <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> dest;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> String <span class="title function_">readLabel</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> label;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">		<span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> demo.destination(<span class="string">&quot;Tasmania&quot;</span>, <span class="number">101.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">over budget!</span><br></pre></td></tr></table></figure>
<p>（2）例子二：在匿名内部类中没有使用到参数  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要有参构造的话使用抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base constructor i = &quot;</span> + i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">	<span class="comment">// 这里的参数i不为final，因为匿名内部类中没有使用到i</span></span><br><span class="line">	<span class="keyword">public</span> Base <span class="title function_">base</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Base</span>(i) &#123;</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Inside instance initializer&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;In anonymous f()&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">		<span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> demo.base(<span class="number">47</span>);</span><br><span class="line">		base.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Base <span class="type">constructor</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">47</span></span><br><span class="line">Inside instance initializer</span><br><span class="line">In anonymous <span class="title function_">f</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>注意：在此例中，不要求变量i一定是final的，因为i被传递给匿名内部类的基类的构造器，它并不会在匿名内部类中被直接使用。  </p>
<h3 id="26、接口与内部类的使用"><a href="#26、接口与内部类的使用" class="headerlink" title="26、接口与内部类的使用"></a>26、接口与内部类的使用</h3><p>如果在使用接口时，有很多类实现这个接口，并存在公共的代码，使得这些公共代码可以被这个接口的所有不同实现类所共有，那么可以使用接口内部的嵌套类会很方便：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassInInterface</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">howdy</span><span class="params">()</span>;</span><br><span class="line">	<span class="comment">// 接口内部的嵌套类</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">ClassInInterface</span> &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">howdy</span><span class="params">()</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;howdy&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">			ClassInInterface.<span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassInInterface</span>.Test();</span><br><span class="line">			test.howdy();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">howdy</span><br></pre></td></tr></table></figure>
<p>可以使用嵌套内部类来放置测试代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBed</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">			<span class="type">TestBed</span> <span class="variable">testBed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestBed</span>();</span><br><span class="line">			testBed.f();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h3 id="27、静态代码块、构造代码块、构造函数以及Java类初始化顺序"><a href="#27、静态代码块、构造代码块、构造函数以及Java类初始化顺序" class="headerlink" title="27、静态代码块、构造代码块、构造函数以及Java类初始化顺序"></a>27、静态代码块、构造代码块、构造函数以及Java类初始化顺序</h3><p>（1）构造函数  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;&#125; <span class="comment">// 构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于<code>构造函数</code>，需要注意：  </p>
<ol>
<li>对象一建立，就会调用与之相应的<code>构造函数</code>，也就是说，不建立对象，<code>构造函数</code>时不会运行的。  </li>
<li><code>构造函数</code>的作用是用于给对象进行初始化。  </li>
<li>一个对象建立，<code>构造函数</code>只运行一次，而一般方法可以被该对象调用多次。</li>
</ol>
<p>（2）构造代码块  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 构造代码块</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于<code>构造代码块</code>，需要注意：<br><code>构造代码块</code>的作用是给对象进行初始化。对象一建立就运行<code>构造代码块</code>了，而且优先于<code>构造函数</code>执行。这里要强调一下，有对象建立，才会运行<code>构造代码块</code>，类不能调用<code>构造代码块</code>的，而且<code>构造代码块</code>与<code>构造函数</code>的执行顺序是先执行<code>构造代码块</code>，再执行<code>构造函数</code>。<br><code>构造代码块</code>与<code>构造函数</code>的区别是：<br><code>构造代码块</code>是给所有对象进行统一初始化，而<code>构造函数</code>是给对应的对象初始化，因为<code>构造函数</code>是可以多个的，运行哪个<code>构造函数</code>就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的<code>构造代码块</code>。也就是说，<code>构造代码块</code>中定义的是不同对象共性的初始化内容。<br>（3）静态代码块  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">// 静态代码块</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于<code>静态代码块</code>，要注意的是：  </p>
<ol>
<li>它是随着类的加载而执行，只执行一次，并优先于主函数。具体说，<code>静态代码块</code>是由类调用的。类调用时，先执行<code>静态代码块</code>，然后才执行主函数的。  </li>
<li><code>静态代码块</code>其实就是给类初始化的，而<code>构造代码块</code>是给对象初始化的。  </li>
<li><code>静态代码块</code>中的变量是局部变量，与普通函数中的局部变量性质没有区别。  </li>
<li>一个类中可以有多个<code>静态代码块</code>。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  staitc <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">6</span>; <span class="comment">// 先执行1</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 再执行2</span></span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    cnt += <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最后执行4</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(cnt);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 再执行3</span></span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    cnt /= <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>（4）Java类初始化顺序<br>对于一个类而言，按照如下顺序执行：<br><code>执行静态代码块</code> -&gt; <code>执行构造代码</code> -&gt; <code>块执行构造函数</code>。<br>对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序依次是：<br><code>静态变量、静态初始化块</code> -&gt; <code>变量、初始化块</code> -&gt; <code>构造器</code>。<br>当涉及到继承时，按照如下顺序执行：<br>执行父类的静态代码块，并初始化父类静态成员变量<br>执行子类的静态代码块，并初始化子类静态成员变量<br>执行父类的构造代码块，执行父类的构造函数，并初始化父类普通成员变量<br>执行子类的构造代码块， 执行子类的构造函数，并初始化子类普通成员变量<br>例子一：没有new对象时  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造函数&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造代码块&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">A的静态代码块</span><br></pre></td></tr></table></figure>
<p>例子二：new了一个对象  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造函数&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造代码块&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HelloA a=<span class="keyword">new</span> <span class="title class_">HelloA</span>();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">A的静态代码块</span><br><span class="line">A的构造代码块</span><br><span class="line">A的构造函数</span><br></pre></td></tr></table></figure>
<p>例子三：new了多个对象  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造函数&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造代码块&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HelloA a=<span class="keyword">new</span> <span class="title class_">HelloA</span>();</span><br><span class="line">        HelloA b=<span class="keyword">new</span> <span class="title class_">HelloA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">A的静态代码块</span><br><span class="line">A的构造代码块</span><br><span class="line">A的构造函数</span><br><span class="line">A的构造代码块</span><br><span class="line">A的构造函数</span><br></pre></td></tr></table></figure>
<p>例子四：有静态变量和变量时  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitialOrderTest</span> &#123;</span><br><span class="line">    <span class="comment">/* 静态变量 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">staticField</span> <span class="operator">=</span> <span class="string">&quot;静态变量&quot;</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* 变量 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> <span class="string">&quot;变量&quot;</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* 静态初始化块 */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println( staticField );</span><br><span class="line">        System.out.println( <span class="string">&quot;静态初始化块&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* 初始化块 */</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println( field );</span><br><span class="line">        System.out.println( <span class="string">&quot;初始化块&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* 构造器 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InitialOrderTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;构造器&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitialOrderTest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">静态变量</span><br><span class="line">静态初始化块</span><br><span class="line">变量</span><br><span class="line">初始化块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure>
<p>例子五：有继承关系时  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造函数&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的构造代码块&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloB</span> <span class="keyword">extends</span> <span class="title class_">HelloA</span>&#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloB</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的构造函数&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的构造代码块&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的静态代码块&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HelloB b=<span class="keyword">new</span> <span class="title class_">HelloB</span>();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">A的静态代码块</span><br><span class="line">B的静态代码块</span><br><span class="line">A的构造代码块</span><br><span class="line">A的构造函数</span><br><span class="line">B的构造代码块</span><br><span class="line">B的构造函数</span><br></pre></td></tr></table></figure>

<h3 id="28、为什么需要内部类？"><a href="#28、为什么需要内部类？" class="headerlink" title="28、为什么需要内部类？"></a>28、为什么需要内部类？</h3><p>当一个类实现多个接口时，有两种方式可以选择：<code>使用传统方式，直接实现多个接口</code>和<code>使用内部类</code>。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口A</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口B</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统方式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">implements</span> <span class="title class_">A</span>, B &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	B <span class="title function_">makeB</span> <span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>() &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">takesA</span><span class="params">(A a)</span> &#123;&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">takesB</span><span class="params">(B b)</span> &#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 传统方式</span></span><br><span class="line">		<span class="type">X</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X</span>();</span><br><span class="line">		takesA(x);</span><br><span class="line">		takesB(x);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 内部类</span></span><br><span class="line">		<span class="type">Y</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Y</span>();</span><br><span class="line">		takesA(y);</span><br><span class="line">		takesB(<span class="keyword">new</span> <span class="title class_">Y</span>().makeB());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那如果不是实现多个接口，而是继承多个类呢？<br>那就不能使用<code>传统方式</code>了，只能使用<code>内部类方式</code>了：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">D</span> &#123;</span><br><span class="line">	E <span class="title function_">makeE</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">E</span>() &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">takesD</span><span class="params">(D d)</span> &#123;&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">takesE</span><span class="params">(E e)</span> &#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Z</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Z</span>();</span><br><span class="line">		takesD(z);</span><br><span class="line">		takesE(z.makeE());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="29、Collection接口"><a href="#29、Collection接口" class="headerlink" title="29、Collection接口"></a>29、Collection接口</h3><p>（1）<code>Tree-</code>前缀：按照比较结果的升序排列，例如：TreeSet、TreeMap；<br>（2）<code>LinkedHash-</code>前缀：按照被添加的顺序排列例如：LinkedHashSet、LinkedHashMap（不仅按照插入顺序保存，还保留了HashMap的查询速度）；<br>（3）LinkedList还可以用作<code>栈</code>、<code>队列</code>、<code>双端队列</code>；  </p>
<h3 id="30、格式化字符"><a href="#30、格式化字符" class="headerlink" title="30、格式化字符"></a>30、格式化字符</h3><p>（1）<code>%s</code>：字符串；<br>（2）<code>%c</code>：字符；<br>（3）<code>%b</code>：布尔值；<br>（4）<code>%d</code>：十进制整数；<br>（5）<code>%x</code>：十六进制整数；<br>（6）<code>%o</code>：八进制整数；<br>（7）<code>%f</code>：浮点数；<br>（8）<code>%e</code>：指数；<br>（9）<code>%g</code>：通用浮点数（f和e中较短的）；<br>（10）<code>%h</code>：散列码（十六进制）；<br>（11）<code>%%</code>：字面值百分号（%）<br>（12）<code>%n</code>：换行符；<br>（13）<code>%tx</code>：日期与时间（x代表日期和时间转换符，例如：<code>%tT</code>代表时间，<code>%tF</code>代表日期）。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Formatter</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>(System.out);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        formatter.format(<span class="string">&quot;a = %c\n&quot;</span>, a);</span><br><span class="line">        formatter.format(<span class="string">&quot;s: %s\n&quot;</span>, a);</span><br><span class="line">        formatter.format(<span class="string">&quot;d: %d\n&quot;</span>, (<span class="type">int</span>)a);</span><br><span class="line">        formatter.format(<span class="string">&quot;b: %b\n&quot;</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">a = <span class="type">a</span></span><br><span class="line"><span class="variable">a</span> <span class="operator">=</span> a</span><br><span class="line">s: a</span><br><span class="line">d: <span class="number">97</span></span><br><span class="line">b: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="31、泛型用于方法中"><a href="#31、泛型用于方法中" class="headerlink" title="31、泛型用于方法中"></a>31、泛型用于方法中</h3><p>案例一：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span> Long total;</span><br><span class="line">	<span class="keyword">private</span> Long pages;</span><br><span class="line">	<span class="comment">// 分页结果集，这里的T对应上面类名的T</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 泛型用于方法中</span></span><br><span class="line">	<span class="comment">// 将Page&lt;PO&gt;转化成Page&lt;VO&gt;</span></span><br><span class="line">	<span class="comment">// 注意：这里因为是静态方法，所以不能用类上面的T泛型</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class="title function_">of</span><span class="params">(Page&lt;PO&gt; p, Class&lt;VO&gt; clazz)</span> &#123;</span><br><span class="line">		PageDTO&lt;VO&gt; dto = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">// 设置总条数</span></span><br><span class="line">		dto.setTotal(p.getTotal());</span><br><span class="line">		<span class="comment">// 设置总页数</span></span><br><span class="line">		dto.setPages(p.getPages());</span><br><span class="line">		<span class="comment">// 获取当前页结果集</span></span><br><span class="line">		List&lt;PO&gt; records = p.getRecords();</span><br><span class="line">		<span class="keyword">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class="line">			dto.setList(Collections.emptyList());</span><br><span class="line">			<span class="keyword">return</span> dto;</span><br><span class="line">		&#125;</span><br><span class="line">		dto.setList(BeanUtil.copyToList(records, clazz));</span><br><span class="line">		<span class="keyword">return</span> dto;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例二：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">	<span class="comment">// 页码</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 每页数据的条数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="comment">// 排序字段</span></span><br><span class="line">	<span class="keyword">private</span> String sortBy;</span><br><span class="line">	<span class="comment">// 是否升序</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 泛型用于方法中</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toPage</span><span class="params">(OrderItem ... items)</span> &#123;</span><br><span class="line">		<span class="comment">// 设置分页条件</span></span><br><span class="line">		Page&lt;T&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">		<span class="comment">// 设置排序条件</span></span><br><span class="line">		<span class="keyword">if</span> (StrUtil.isNotBlank(sortBy)) &#123;</span><br><span class="line">			page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy, isAsc));</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (items != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 为空就默认排序</span></span><br><span class="line">			page.addOrder(items);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> page;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 重载的运用</span></span><br><span class="line">	<span class="comment">// 根据defaultSortBy和defaultAsc排序</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toPage</span><span class="params">(String defaultSortBy, Boolean defaultAsc)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> toPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(defaultSortBy, defaultAsc));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 默认第一个实现是根据创建时间降序</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toPageDefaultSortByCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> toPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;create_time&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 默认第二个实现是根据更新时间降序</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toPageDefaultSortByUpdateTime</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> toPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例一和案例二的使用例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">	Page&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class="line">	</span><br><span class="line">	Page&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class="line">	<span class="keyword">return</span> PageDTO.of(p, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例一可以优化成，调用者自己去决定怎么set数据，而不是在方法内部set（相当于在<code>of()</code>方法中添加一个参数，用来传行为）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class="title function_">of</span><span class="params">(Page&lt;PO&gt; p, Function&lt;PO, VO&gt; convertor)</span> &#123;</span><br><span class="line">	PageDTO&lt;VO&gt; dto = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 设置总条数</span></span><br><span class="line">	dto.setTotal(p.getTotal());</span><br><span class="line">	<span class="comment">// 设置总页数</span></span><br><span class="line">	dto.setPages(p.getPages());</span><br><span class="line">	<span class="comment">// 获取当前页结果集</span></span><br><span class="line">	List&lt;PO&gt; records = p.getRecords();</span><br><span class="line">	<span class="keyword">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class="line">		dto.setList(Collections.emptyList());</span><br><span class="line">		<span class="keyword">return</span> dto;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 以前做法</span></span><br><span class="line">	<span class="comment">// dto.setList(BeanUtil.copyToList(records, clazz));</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 现在改成由调用者自己决定set</span></span><br><span class="line">	dto.setList(records.stream().map(convertor).collect(Collectors.toList()));</span><br><span class="line">	<span class="keyword">return</span> dto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="comment">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">	Page&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class="line">	</span><br><span class="line">	Page&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class="line">	<span class="comment">// 例子一</span></span><br><span class="line">	<span class="comment">// return PageDTO.of(p, user -&gt; BeanUtil.copyToList(user, UserVO.class));</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 例子二</span></span><br><span class="line">	<span class="keyword">return</span> PageDTO.of(p, user -&gt; &#123;</span><br><span class="line">		<span class="comment">// 拷贝基础属性</span></span><br><span class="line">		<span class="type">UserVO</span> <span class="variable">vo</span> <span class="operator">=</span> BeanUtil.copyToList(user, UserVO.class);</span><br><span class="line">		<span class="comment">// 拷贝扩展属性</span></span><br><span class="line">		<span class="comment">// vo.setExt(user.getExt());</span></span><br><span class="line">		<span class="keyword">return</span> vo;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="32、HTTP状态码"><a href="#32、HTTP状态码" class="headerlink" title="32、HTTP状态码"></a>32、HTTP状态码</h3><p>（1）2xx  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. <span class="number">200</span>：ok</span><br><span class="line"><span class="attribute">2</span>. <span class="number">204</span>：no content，表示请求成功，但响应报文不含实体的主体部分</span><br><span class="line"><span class="attribute">3</span>. <span class="number">205</span>：reset content，表示请求成功，不含主体，要求重置请求内容</span><br><span class="line"><span class="attribute">4</span>. <span class="number">206</span>：partial content，即部分内容，当客户端请求一个资源的一部分时，服务器会返回这个状态码，表示服务器成功处理了部分GET请求。这种情况通常发生在客户端继续请求一个未完成的下载，或者客户端尝试实现带宽遏流等情况下</span><br></pre></td></tr></table></figure>
<p>（2）3xx（重定向）  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. <span class="number">301</span>：moved permanently，永久性重定向，表示资源已被分配了新的url</span><br><span class="line"><span class="attribute">2</span>. <span class="number">302</span>：found，临时性重定向，表示资源临时被分配了新的url</span><br><span class="line"><span class="attribute">3</span>. <span class="number">303</span>：see other，表示资源存在另一个url，应使用get方法获取</span><br><span class="line"><span class="attribute">4</span>. <span class="number">304</span>：not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</span><br><span class="line"><span class="attribute">5</span>. <span class="number">307</span>：temporary redirect，临时重定向，和<span class="number">302</span>类似，但是期望客户端保持请求方法不变，向新的地址发出请求</span><br></pre></td></tr></table></figure>
<p>（3）4xx（客户端错误）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. <span class="number">400</span>：bad request，请求报文存在语法错误</span><br><span class="line"><span class="attribute">2</span>. <span class="number">401</span>：unauthorized，表示发送的请求需要有http认证的认证信息</span><br><span class="line"><span class="attribute">3</span>. <span class="number">403</span>：forbidden，表示对请求资源的访问被服务器拒绝</span><br><span class="line"><span class="attribute">4</span>. <span class="number">404</span>：not found，表示在服务器上没有找到请求的资源</span><br></pre></td></tr></table></figure>
<p>（4）5xx（服务器错误）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. <span class="number">500</span>：internal server error，表示服务器端在执行请求时发生了错误</span><br><span class="line"><span class="attribute">2</span>. <span class="number">501</span>：not implemented，表示服务器不支持当前请求所需要的某个功能</span><br><span class="line"><span class="attribute">3</span>. <span class="number">503</span>：service unavailable，表示服务器暂时处于超负载或正在停机维护，无法处理请求</span><br></pre></td></tr></table></figure>

<h3 id="33、session和cookie的区别"><a href="#33、session和cookie的区别" class="headerlink" title="33、session和cookie的区别"></a>33、session和cookie的区别</h3><p>（1）<code>cookie</code>：就是存储在浏览器的一小段信息，以键值对形式存储，存的都是字符串。<br>特点：  </p>
<ol>
<li>以key-value键值对形式存储；  </li>
<li>cookie由服务器产生，通过response返回，浏览器保存（cookie服务器产生，浏览器保存，下次请求路径是在header中携带cookie）；  </li>
<li>cookie有大小限制4K；  </li>
<li>cookie有时间限制，默认30分钟；  </li>
<li>cookie不能存储敏感信息，例如密码。</li>
</ol>
<p>（2）<code>session</code>：就是会话（同一个浏览器请求同一个服务器，无论打开多少个窗口，这些窗口都共享一个会话），会话就是浏览器和服务器保存链接的一种形式，主要作用就是记录用户的状态，记录用户相关的信息。<br>特点：  </p>
<ol>
<li>存储在服务器端；  </li>
<li>以键值对存储，值可以是任何值；  </li>
<li>会话也有时间限制（如果用户长时间没有访问，则会话会自动删除）；  </li>
<li>浏览器关闭，会话结束，如果重新打开浏览器，则是新会话；  </li>
<li>session的安全性相对较高。</li>
</ol>
<h3 id="34、转发和重定向"><a href="#34、转发和重定向" class="headerlink" title="34、转发和重定向"></a>34、转发和重定向</h3><p>（1）<code>重定向</code>  </p>
<ol>
<li>浏览器行为；  </li>
<li>浏览器做了2次请求；  </li>
<li>上次请求的request对象会丢失；  </li>
<li>url发生改变；  </li>
<li>可以是任意的网络资源。</li>
</ol>
<p>（2）<code>转发</code>  </p>
<ol>
<li>服务器行为；  </li>
<li>浏览器只做了一次行为；  </li>
<li>转发带有用户的HttpServletRequest；  </li>
<li>url没有变化；  </li>
<li>只能在当前项目进行，不能到网络资源。</li>
</ol>
<h3 id="35、servlet的生命周期"><a href="#35、servlet的生命周期" class="headerlink" title="35、servlet的生命周期"></a>35、<code>servlet</code>的生命周期</h3><p>每个servlet只会创建一个对象，第一次请求servlet时，对象会创建，并执行<code>init()</code>方法，后续每次请求servlet，只会调用它的服务方法<code>dopost()</code>方法、<code>doget()</code>方法、<code>service()</code>方法等，tomcat关闭，会销毁servlet对象。  </p>
<h3 id="36、tomcat容器如何创建servlet实例"><a href="#36、tomcat容器如何创建servlet实例" class="headerlink" title="36、tomcat容器如何创建servlet实例"></a>36、<code>tomcat</code>容器如何创建<code>servlet</code>实例</h3><p>（1）先到缓存中寻找有没有这个对象；  </p>
<ol>
<li>如果没有，就通过反射去创建相应的对象（执行构造方法）；  </li>
<li>tomcat会把对象存放到缓存中；  </li>
<li>执行初始化方法<code>init()</code>；  </li>
<li>如果有，直接获取到这个对象；</li>
</ol>
<p>（2）执行服务方法；<br>（3）返回响应的数据到客户端（浏览器）。  </p>
<h3 id="37、什么是xss攻击，如何避免？"><a href="#37、什么是xss攻击，如何避免？" class="headerlink" title="37、什么是xss攻击，如何避免？"></a>37、什么是<code>xss</code>攻击，如何避免？</h3><p>（1）<code>xss</code>攻击<br>就是<code>跨站脚本攻击</code>，它是web程序中常见的漏洞。原理是攻击者往web页面里插入恶意的脚本代码（<code>css</code>代码、<code>javascript</code>代码），当用户浏览该页面时，嵌入其中的脚本代码会被执行，从而达到恶意攻击用户的目的，如盗取用户cookie、破坏页面结构、重定向到其他网站等。<br>（2）避免方法<br>预防xss的核心是必须对输入的数据做过滤处理。  </p>
<h3 id="38、什么是csrf攻击，如何避免？"><a href="#38、什么是csrf攻击，如何避免？" class="headerlink" title="38、什么是csrf攻击，如何避免？"></a>38、什么是<code>csrf</code>攻击，如何避免？</h3><p>（1）<code>csrf</code>攻击（Cross-Site Request Forgery）<br>就是<code>跨站请求伪造</code>，可以理解为攻击者盗用了你的身份，以你的名义发送恶意请求，比如：以你的名义发送邮件、发消息、购买商品，虚拟货币转账等。<br>（2）避免方法<br>验证请求来源地址，关键操作添加验证码，在请求地址添加token并验证。  </p>
<h3 id="39、拦截器Interceptor和过滤器Filter的区别"><a href="#39、拦截器Interceptor和过滤器Filter的区别" class="headerlink" title="39、拦截器Interceptor和过滤器Filter的区别"></a>39、拦截器<code>Interceptor</code>和过滤器<code>Filter</code>的区别</h3><p>（1）<code>拦截器</code>是spring中的，只能作用于DispatcherServlet，<code>过滤器</code>是servlet的；<br>（2）<code>拦截器</code>基于Java反射机制，<code>过滤器</code>基于函数回调；<br>（3）<code>拦截器</code>只对action请求起作用，<code>过滤器</code>几乎所有请求都起作用；<br>（4）<code>拦截器</code>可以多次被调用，<code>过滤器</code>只能在初始化的时候被调用一次。  </p>
<h3 id="40、Mybatis的理解"><a href="#40、Mybatis的理解" class="headerlink" title="40、Mybatis的理解"></a>40、<code>Mybatis</code>的理解</h3><p>（1）<code>Mybatis</code>是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程，程序员直接编写原生态SQL，可以严格控制SQL执行性能，灵活度高；<br>（2）<code>Mybatis</code>可以使用XML或注解来配置和映射原生信息，将pojo映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集；<br>（3）通过XML文件或注解的方式将要执行的各种statement配置起来，并通过Java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为Java对象并返回。  </p>
<h3 id="41、-和-的区别"><a href="#41、-和-的区别" class="headerlink" title="41、#{}和${}的区别"></a>41、<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>的区别</h3><p>（1）<code>#&#123;&#125;</code><br><code>#&#123;&#125;</code>是sql的参数占位符，Mybatis会将sql中的<code>#&#123;&#125;</code>替换为<code>?</code>号，在sql执行前会使用<code>PreparedStatement</code>的参数设置方法，按序给sql的<code>?</code>号占位符设置参数。<br>（2）<code>$&#123;&#125;</code><br><code>$&#123;&#125;</code>是<code>Properties</code>文件中的变量占位符，它可以用于标签属性值和sql内部，例如：<code>$&#123;driver&#125;</code>会被替换为<code>com.mysql.jdbc.Driver</code>。  </p>
<h3 id="42、Mybatis如何传递多个参数"><a href="#42、Mybatis如何传递多个参数" class="headerlink" title="42、Mybatis如何传递多个参数"></a>42、<code>Mybatis</code>如何传递多个参数</h3><p>（1）若Dao层函数有多个参数，那么其对应的xml中，<code>#&#123;0&#125;</code>代表接收的是第一个参数，<code>#&#123;1&#125;</code>代表第二个，以此类推；<br>（2）使用<code>@Param</code>注解，在Dao层方法的参数前加<code>@Param</code>注解，注解内的参数名和<code>#&#123;&#125;</code>中的保持一致；<br>（3）多个参数封装成map，以HashMap的形式传递到mapper中。  </p>
<h3 id="43、加密技术"><a href="#43、加密技术" class="headerlink" title="43、加密技术"></a>43、加密技术</h3><p>1、对称加密技术（私人密钥加密）<br>文件加密和解密使用相同的密钥。<br><strong>常见的对称加密技术</strong>：<br>（1）数据加密标准算法<code>DES</code><br>主要采用替换和移位的方法加密，用56位密钥对64位二进制数据块进行加密，每次加密可对64位的输入数据进行16轮编码，经一系列替换和移位后，输入的64位原始数据转换成完全不同的64位输出数据。<br>特点：<code>DES算法速度快，密钥生产容易</code>。<br>（2）三重DES<code>3DES</code>或<code>TDEA</code><br>在DES的基础上采用三重DES，即用两个56位的密钥K1和K2，发送方用K1加密，K2解密，再使用K1加密；接收方则使用K1解密，K2加密，再使用K1解密。<br>（3）RC-5<br>（4）国际数据加密算法<code>IDEA</code><br>类似于三重DES，IDEA的密钥是128位。<br>（5）高级加密标准算法<code>AES</code><br>基于排列和置换运算，排列是对数据重新进行安排，置换是将一个数据单元替换为另一个，AES使用几种不同的方法来执行排列和置换运算。<br>AES是一个迭代、对称密钥分组的密码，它可以使用128、192和256位密钥，并且用128位（16字节）分组加密和解密数据。  </p>
<p>2、非对称加密技术（两个密钥：公开密钥<code>Publickey</code>和私有密钥<code>Privatekey</code>）<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。  </p>
<img src="/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<img src="/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>说明：甲方生成一对密钥并将其中的一把作为公用密钥向其他方公开，得到该公开密钥的乙方使用该密钥对信息进行加密后再发送给甲方，甲方用自己保存的私有密钥对密文解密。<br>注意：加密和解密花费时间长，速度慢，不适于对文件加密，只适用于对少量数据加密。<br>常用的有：RSA。  </p>
<h3 id="44、认证技术"><a href="#44、认证技术" class="headerlink" title="44、认证技术"></a>44、认证技术</h3><p>主要解决网络通信过程中通信双方的身份认可。<br>1、信息摘要<code>MD5</code><br>描述了一份较长的信息或文件，它可以被看作一份长文件的“数字指纹”。信息摘要用于创建数字签名，对于特定的文件而言，信息摘要是唯一的，可以被公开的。<br><code>MD5</code>以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。  </p>
<p>2、数字签名<br>一对多，任何拥有发送放公开密钥的人都可以验证数字签名的正确性。<br>（1）信息发送者使用一个单向散列函数（Hash函数）对信息生成<code>信息摘要</code>；<br>（2）信息发送者使用自己的<code>私钥</code>加密<code>信息摘要</code>，生成<code>数字签名</code>；<br>（3）信息发送者把信息本身（原始信息）和<code>数字签名</code>一起发送出去；<br>（4）信息接收者通过使用与信息发送者使用的同一个单向散列函数（Hash函数）对接收的信息本身生成新的<code>信息摘要</code>，再使用信息发送者的公钥对接收到的<code>数字签名</code>进行解密，然后将解密得到的<code>信息摘要</code>和刚才生成的新<code>信息摘要</code>作对比，以确认信息发送者的身份和信息是否被修改。<br>注意：签名一般指用自己的私钥对数据进行加密！！！  </p>
<p>3、数字加密<br>多对一，任何知道接收方公开密钥的人都可以向接收方发送加密信息。<br>（1）当信息发送者需要发送信息时，首先生成一个<code>对称密钥</code>，用该<code>对称密钥</code>加密要发送的报文；<br>（2）信息发送者用信息接收者的<code>公钥</code>加密上述<code>对称密钥</code>；<br>（3）信息发送者将第（1）步和第（2）步的结果结合在一起传给信息接收者，称为<code>数字信封</code>；<br>（4）信息接收者使用自己的<code>私钥</code>解密被加密的<code>对称密钥</code>，再用此<code>对称密钥</code>解密被发送方加密的密文，得到真正的报文。  </p>
<h3 id="45、排序算法"><a href="#45、排序算法" class="headerlink" title="45、排序算法"></a>45、排序算法</h3><p>1、直接插入排序<br>前提已经按顺序排序好了，然后将要插入的记录的关键字ki依次与关键字ki-1、ki-2进行比较，找到应该插入的位置。  </p>
<p>2、冒泡排序<br>首先将第一个记录的关键字和第二个记录的关键字进行比较，若为逆序，则交换两个记录的值，然后比较第二个记录和第三个记录的关键字。  </p>
<p>3、简单选择排序（不稳定）<br>顺序扫描序列中的元素，记住遇到的最小元素（一次扫描完毕就找到了一个最小的元素，反复扫描就能完成排序工作）。  </p>
<p>4、快速排序<br>通过一趟排序划分为两个部分，第一部分小于第二部分。<br>设i和j，分别为第一个和最后一个，设判断记录（一般是第一个）为pivot，首先从j所指位置向前比较，小于pivot的元素就将该位置的数移到i处，然后从i处向后比较，如此重复。  </p>
<h3 id="46、SQL语句执行顺序"><a href="#46、SQL语句执行顺序" class="headerlink" title="46、SQL语句执行顺序"></a>46、SQL语句执行顺序</h3><p><code>select</code>、<code>from</code>、<code>where</code>、<code>group by</code>、<code>having</code>、<code>order by</code>。<br>注意：<br>1、<code>where</code>后面的使用：<br>（1）<code>in</code>：在集合中，<code>where id in (...)</code>；<br>（2）<code>not in</code>：不在集合中，<code>where id not in (...)</code>；<br>（3）<code>like</code>：与<code>_</code>和<code>%</code>进行单个和多个字符匹配，<code>where name like &#39;_明&#39;</code>查询名为明的姓名；<br><code>like</code>也可与<code>escape</code>关键字（定义转义符）搭配使用：  </p>
<ol>
<li><code>like &#39;ab\%cd%&#39; escape &#39;\&#39;</code>：匹配所有以<code>ab%cd</code>开头的字符串。  </li>
<li><code>like &#39;ab\\cd%&#39; escape &#39;\&#39;</code>：匹配所有以<code>ab\cd</code>开头的字符串。</li>
</ol>
<p>（4）<code>is null</code>：为空，<code>where name is null</code>；<br>（5）<code>is not null</code>：不为空，<code>where name is not null</code>；<br>（6）<code>and</code>：与，<code>where name is not null and age &gt; 18</code>；<br>（7）<code>or</code>：或，<code>where name is not null or age &gt; 18</code>；<br>（8）<code>not</code>：非，<code>where not (name is not null and age &gt; 18)</code>；<br>（9）<code>between</code>：在两个数之间，<code>where age between 18 and 20</code>。  </p>
<h3 id="47、SQL语句谓词使用"><a href="#47、SQL语句谓词使用" class="headerlink" title="47、SQL语句谓词使用"></a>47、SQL语句谓词使用</h3><p>1、<code>ALL</code>：&gt; ALL，大于子查询结果中的所有值。<br>2、<code>ANY</code>：&gt; ANY，大于子查询结果中的某个值。<br>例一：查询其他系比计算机系CS，所有学生年龄都要小的学生姓名及年龄。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># sd：系；<span class="operator">&lt;&gt;</span>：不等于</span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> age <span class="keyword">from</span> student <span class="keyword">where</span> sd <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>) <span class="keyword">and</span> sd <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>例二：查询其他系比计算机系某一学生年龄小的学生姓名及年龄。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="keyword">any</span>(<span class="keyword">select</span> age <span class="keyword">from</span> student <span class="keyword">where</span> sd <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>) <span class="keyword">and</span> sd <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="48、数据库常见问题"><a href="#48、数据库常见问题" class="headerlink" title="48、数据库常见问题"></a>48、数据库常见问题</h3><p>1、事务<br>用户对数据库进行的一系列操作。  </p>
<p>2、丢失修改<br>两个事务T1、T2，T1在t1时读取了A值为16，T2在t2时读取了A值也为16，t3时，T1执行了16-1&#x3D;15，把15存入数据库，完成了事务，而t4时，T2也执行了16-1&#x3D;15的操作并也存入数据库完成事务，事务T1的结果被覆盖丢失了。  </p>
<p>3、不可重复读<br>两个事务T1、T2，事务T1读取了A、B的值为50、100，执行A+B&#x3D;150，事务T1还没完成的情况下，事务T2修改了B的值为200存入数据库，之后事务T1再次执行A+B操作，两次相同的执行，结果不一样。  </p>
<p>4、幻读<br>两个事务T1、T2，T1去查询工资为1000的，比如查出来5人，在事务T1还没有完成的情况下，事务T2插入了一条工资为1000的记录，之后事务T1再次查询却变成6人。  </p>
<p>5、脏读<br>两个事务T1、T2，事务T1修改了A值，并存入数据库，之后事务T2读取了事务T1修改之后的A值并做了一系列操作，这时，事务T1回滚了，那事务T2做的操作就无效了。  </p>
<h3 id="49、数据库的锁"><a href="#49、数据库的锁" class="headerlink" title="49、数据库的锁"></a>49、数据库的锁</h3><p>1、封锁（并发控制的主要技术）<br>（1）排它锁（X锁或写锁）<br>若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他事务不能再对A加任何类型的锁，直到T释放A上的锁。<br>（2）共享锁（S锁或读锁）<br>若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其他事务只能再对A加S锁，直到T释放A上的锁。<br>保证了其他事务可以读A，但再T释放A上的锁之前不能修改A。  </p>
<p>2、活锁<br>事务T1封锁了数据A时，事务T2请求封锁数据A，于是事务T2等待，当T1释放了A上的锁后，系统首先批准了T3请求，于是T2继续等待，同理批准了T4、T5…，T2永远都在等待。  </p>
<p>3、死锁<br>两个事务以上分别请求封锁对方已经封锁的数据，导致长期等待。  </p>
<h3 id="50、三级封锁协议"><a href="#50、三级封锁协议" class="headerlink" title="50、三级封锁协议"></a>50、三级封锁协议</h3><p>1、一级封锁协议（解决丢失修改）<br>事务在修改数据之前，必须先对其加上X锁，直到事务结束才释放。  </p>
<p>2、二级封锁协议（解决脏读，不能解决不可重复读，因为它读完就释放）<br>在一级的基础上，加上事务在读数据之前，必须先对其加上S锁，读完后释放。  </p>
<p>3、三级封锁协议（都解决了）<br>在一级的基础上，加上事务在读数据之前，必须先加上S锁，知道事务结束再释放。  </p>
<h3 id="51、数据库三大范式"><a href="#51、数据库三大范式" class="headerlink" title="51、数据库三大范式"></a>51、数据库三大范式</h3><p>1、解释<code>候选码</code>、<code>主码</code>、<code>主属性</code><br>（1）候选码：某一属性或属性组的值能唯一标识一个元组，则该属性或属性组为候选码。<br>（2）主码：有多个候选码，则选定其中一个为主码。<br>（3）主属性：包含在任何候选码中的属性。  </p>
<p>2、第一范式（1NF）<br>数据表中每一个字段都不可再分。  </p>
<p>3、第二范式（2NF）<br>在满足第一范式的基础上，还要满足所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分。<br>例如：在成绩表（学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，学号或课程号都不能单独决定成绩，所以（学号，课程号）-&gt; 成绩完全依赖。<br>又例如：比赛表里面（球员编号，姓名，年龄，比赛编号，比赛时间，比赛场地），候选键和主键都是（球员编号，比赛编号），（球员编号，比赛编号）-&gt;（姓名，年龄，比赛时间，比赛场地）显然不满足2NF，因为：（球员编号）-&gt;（姓名，年龄），（比赛编号）-&gt;（比赛时间，比赛场地），这样会产生很多问题：比如一个球员参加了n场比赛，那么该球员的姓名和年龄就重复很多次了。  </p>
<p>4、第三范式（3FN）<br>在满足第二范式的基础上，满足所有非主键字段都直接和主键相关，都互相独立。  </p>
]]></content>
      <categories>
        <category>书本知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>书本知识</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity学习笔记</title>
    <url>/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>完整的项目地址：<a href="https://gitee.com/zuo-junyuan/zjy-security">gitee地址</a><br><br/></p>
<hr>
<br/>
  
<h1 id="一、快速体验（基于JDK8）"><a href="#一、快速体验（基于JDK8）" class="headerlink" title="一、快速体验（基于JDK8）"></a>一、快速体验（基于JDK8）</h1><p>1、先创建一个springboot项目  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、创建一个controller类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、启动项目，访问<a href="http://localhost:8080/hello%EF%BC%8C%E8%BF%94%E5%9B%9Ehello">http://localhost:8080/hello，返回hello</a><br>4、整合springSecurity，引入springSecurity所需依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、重新启动项目，刷新页面，会自动跳转到springSecurity帮我们自动生成的登陆页面，用户名为：<code>user</code>，密码在控制台。<br>6、登录之后需要退出，可以在浏览器输入：<code>http://localhost:8080/logout</code>，这个退出页面也是springSecurity帮我们自动生成的。  </p>
<br/>


<hr>
<br/>


<h1 id="二、原理讲解"><a href="#二、原理讲解" class="headerlink" title="二、原理讲解"></a>二、原理讲解</h1><p>这是针对<code>一、快速体验</code>的原理讲解！！！<br>1、先看springSecurity提供的比较重要的几个过滤器，下图为过滤器链。  </p>
<img src="/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.jpg" class="">  
<ol>
<li><code>UsernamePasswordAuthenticationFilter</code>：在这个过滤器里面判断用户名和密码是否正确。  </li>
<li><code>ExceptionTranslationFilter</code>：主要处理在登录认证过程中出现的异常。  </li>
<li><code>FilterSecurityInterceptor</code>：主要是去判断当前用户是谁。</li>
</ol>
<p>2、怎么查看完整的过滤器链呢？  </p>
<ol>
<li>在启动类的main方法中打个断点，像下面这样  <img src="/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" class="">  </li>
<li>选择断点中的计算机图标  <img src="/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg" class="">  </li>
<li>在Expression输入框中执行：<code>run.getBean(DefaultSecurityFilterChain.class)</code>  <img src="/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<code>DefaultSecurityFilterChain</code>这个是springSecurity默认实现的过滤器链。<br>其中第<code>5</code>、<code>13</code>和<code>14</code>个过滤器上面已经介绍了，然后它的过滤器的顺序就是从上往下的。<br>我们可以看到第<code>6</code>和<code>7</code>个过滤器就是用来帮助我们自动生成登录页面和退出页面的。<br>3、将总的流程转换为图就是下面的图  <img src="/2024/09/03/SpringSecurity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
（1）图中部分名词解释  </li>
<li><code>Authentication</code>接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。  </li>
<li><code>AuthenticationManager</code>接口:定义了认证Authentication的方法。  </li>
<li><code>UserDetailsservice</code>接口:加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。  </li>
<li><code>UserDetails</code>接口:提供核心用户信息。通过UserDetailsservice根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</li>
</ol>
<p>（2）讲解（针对<code>一、快速体验</code>的原理讲解）  </p>
<ol>
<li>首先前端登录，输入用户名和密码，请求达到<code>UsernamePasswordAuthenticationFilter</code>这个过滤器，从图上我们可以知道这个过滤器封装<code>Authentication</code>对象，因为此时我们只有用户名和密码，没有权限。  </li>
<li>然后会将封装好的<code>Authentication</code>对象传给<code>ProviderManager</code>、<code>DaoAuthenticationProvider</code>和<code>InMemoryUserDetailsManager</code>进行认证。  </li>
<li>在<code>InMemoryUserDetailsManager</code>中，它会去内存中根据用户名查询用户对应的信息（不是去数据库查，是内存），把对应的用户信息封装成<code>UserDetails</code>对象，返回给<code>DaoAuthenticationProvider</code>。  </li>
<li>在<code>DaoAuthenticationProvider</code>中，通过<code>PasswordEncoder</code>对比<code>UserDetails</code>对象中的用户密码和<code>Authentication</code>对象中用户密码是否正确，如果正确，就把<code>UserDetails</code>对象中的权限信息设置到<code>Authentication</code>对象中。</li>
</ol>
<p>从讲解中我们可以看到，我们要想自定义，就需要把<code>InMemoryUserDetailsManager</code>替换掉，因为它是从内存中去查的，我们需要自己写去数据库查，然后也封装成<code>UserDetails</code>对象返回给<code>DaoAuthenticationProvider</code>。<br>除了这个，我们再看<code>UsernamePasswordAuthenticationFilter</code>这个过滤器，因为我们还需要将token返回去，而这个过滤器是没有的，所以我们也需要把这个过滤器替换了。<br>然后我们再看，就是用户登录成功之后，后续每个请求也得去认证这个token，所以我们还得自己写个过滤器，去判断这个token是否正确，然后这里有个重点，就是认证的时候，是不是得去查询数据中的用户信息，如果每个请求都去查数据库，那数据库的压力就很大，所以可以考虑使用<code>redis</code>，那什么时候往<code>redis</code>中存用户信息呢？可以在第一次登录的时候，在我们替换掉的<code>UsernamePasswordAuthenticationFilter</code>那个controller中操作。  </p>
<br/>


<hr>
<br/>


<h1 id="三、自定义登录接口"><a href="#三、自定义登录接口" class="headerlink" title="三、自定义登录接口"></a>三、自定义登录接口</h1><p><strong>说明：</strong><br>在第<code>二、原理讲解</code>篇说过，要想自定义登录页面，那我们就得自定义登录接口，得把springSecurity默认的<code>UsernamePasswordAuthenticationFilter</code>和<code>InMemoryUserDetailsManager</code>替换：  </p>
<ol>
<li><code>UsernamePasswordAuthenticationFilter</code>替换为<code>controller</code>登录接口；  </li>
<li><code>InMemoryUserDetailsManager</code>替换为<code>UserDetailsService</code>（springSecurity中的接口）的实现类，去数据库中查询用户信息。</li>
</ol>
<p>现在我们基于<code>一、快速体验</code>来修改：<br>1、先创建和初始化数据库<br>因为<code>SpringSecurity</code>是不推荐明文密码存储的，所以如果需要明文密码存储，密码前面加<code>&#123;noop&#125;</code>。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> test;</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `sys_user` (</span><br><span class="line">	`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">	`user_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">	`nick_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">	`password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">	`status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span> comment <span class="string">&#x27;账号状态（0正常，1停用）&#x27;</span>,</span><br><span class="line">	`email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">	`phonenumber` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">	`sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;2&#x27;</span> comment <span class="string">&#x27;用户性别（0男，1女，2未知）&#x27;</span>,</span><br><span class="line">	`avatar` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="keyword">null</span> comment <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">	`user_type` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment <span class="string">&#x27;用户类型（0管理员，1普通用户）&#x27;</span>,</span><br><span class="line">	`create_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人的用户id&#x27;</span>,</span><br><span class="line">	`create_time` datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_by` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span> comment <span class="string">&#x27;更新人的用户id&#x27;</span>,</span><br><span class="line">	`update_time` datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	`del_flag` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span> comment <span class="string">&#x27;删除标志（0代表未删除，1代表已删除）&#x27;</span>,</span><br><span class="line">	<span class="keyword">primary</span> key (`id`)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">2</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `sys_user` <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;admin123&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;admin@qq.com&#x27;</span>, <span class="string">&#x27;15888888888&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2022-01-01 00:00:00&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2022-01-01 00:00:00&#x27;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>2、引入相关依赖  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis依赖，如果有prent标签，已经继承了springboot，version版本标签就可以省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里继承了springboot parent标签，所以不用version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、创建一个工具类包<code>utils</code><br>（1）创建redis序列化工具类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FastJsonRdisSerializer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 11:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAsmEnable(<span class="literal">true</span>);</span><br><span class="line">		ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建Jwt工具类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 12:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Jwt工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有效期，60 * 60 * 1000  一个小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置密钥明文，注意长度必须大于等于6位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;zjy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="literal">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)              <span class="comment">// 唯一ID</span></span><br><span class="line">                .setSubject(subject)      <span class="comment">// 主题</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;zjy&quot;</span>)         <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)        <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">// 使用HS256对称加密算法签名，第二个参数为密钥</span></span><br><span class="line">                .setExpiration(exp);      <span class="comment">// 过期时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, id);</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的密钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）创建redis工具类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.BoundSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.HashOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RedisCache</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 13:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> redis工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer expireTime, <span class="keyword">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, expireTime, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：设置成功，false：设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> expireTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：设置成功，false：设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> expireTime, <span class="keyword">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, expireTime, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Map&lt;String, T&gt;) redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey hash的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; hashOperations = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hashOperations.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得多个hash中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys hash的key集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的list数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存set数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span> &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; iterator = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            setOperation.add(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap 缓存的Map数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span>  <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(dataMap)) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往hash中存入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey hash的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 存储的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）创建web字符串渲染工具类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 13:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、创建一个配置类包<code>config</code><br>（1）创建redis配置类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.utils.FastJsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RedisConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 11:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> redis配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        FastJsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(serializer);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(serializer);</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、创建一个公共类包<code>common</code><br>（1）创建一个返回结果类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ResponseResult</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 12:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 响应类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、创建一个实体类<code>pojo</code>（对应数据库）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 14:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用户实体类，对应数据库sys_user表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户昵称</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账号状态（0正常，1停用）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性别（0男，1女，2未知）</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户类型（0管理员，1普通用户）</span></span><br><span class="line">    <span class="keyword">private</span> String userType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建人id</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新人id</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除标志（0代表存在，1代表删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、创建一个<code>mapper</code>包和<code>mapper</code>接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@InterfaceName</span> UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、创建<code>resources</code>目录，与<code>java</code>目录同级，并在<code>resources</code>下创建<code>application.yml</code>配置文件  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZjySecurityApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、替换<code>InMemoryUserDetailsManager</code>，将去内存查询用户信息改为去数据库查询用户信息，需要我们创建一个类，去实现<code>SpringSecurity</code>提供的<code>UserDetailsService</code>接口，并重写<code>loadUserByUsername</code>方法，代码如下：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.common.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyUserDetailServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 15:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户名去数据库查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName, s);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把查询到的用户信息封装到UserDetails接口中</span></span><br><span class="line">		<span class="comment">// todo 权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10、因为<code>UserDetailsService</code>接口中的<code>loadUserByUsername</code>方法返回值是<code>UserDetails</code>接口，所以我们需要创建一个类，去实现<code>UserDetails</code>接口（这个接口就是专门封装登录信息的接口），并重写其中的方法，代码如下：<br>在<code>common</code>包下创建<code>LoginUser</code>类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.User;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LoginUser</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 14:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用户登录信息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:00</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 用于返回权限信息</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:00</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取用户密码</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:01</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取用户名</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:01</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 判断登录状态是否过期，为true表示永不过期</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 判断账号是否被锁定，为true为锁定，如果为false登录的时候不让登录</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:03</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 判断登录凭证是否过期，为true表示永不过期</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 15:03</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 判断用户是否可用</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>.equals(user.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11、启动项目，访问<code>http://localhost:8080/hello</code>，现在登录就是去数据库查询了。<br>12、目前还有一个问题，就是数据库存入的用户密码是<code>&#123;noop&#125;</code>+明文形式，这是因为SpringSecurity默认使用的加密方式为<code>PasswordEncoder</code>，它要求数据库中的密码格式为：<code>&#123;加密方式&#125;密码</code>，例如：密码为：123，存入数据库就是：<code>&#123;noop&#125;123</code>，所以我们需要修改密码的加密方式。<br>13、推荐使用SpringSecurity提供的<code>BCryptPasswordEncoder</code>加密方式，创建一个SpringSecurity配置类，继承<code>WebSecurityConfigurerAdapter</code>，将<code>PasswordEncoder</code>注入spring容器。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SpringSecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/5 23:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 实现SpringSecurity提供的WebSecurityConfigurerAdapter，修改加密方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/5 23:41</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: org.springframework.security.crypto.password.PasswordEncoder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 把BCryptPasswordEncoder对象注入spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="comment">// 注意下面使用了PasswordEncoder，也是可以的，因为PasswordEncoder是BCryptPasswordEncoder的父类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">	<span class="comment">// 加密</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(encode);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 校验</span></span><br><span class="line">	<span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> bCryptPasswordEncoder.matches(<span class="string">&quot;123456&quot;</span>, encode);</span><br><span class="line">    System.out.println(matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14、自定义登录接口，在<code>controller</code>包下新增登录接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.common.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> loginService.login(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;登录成功&quot;</span>, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15、在<code>SpringSecurityConfig</code>配置类中添加  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span>: 2024/9/6 13:21</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: org.springframework.security.authentication.AuthenticationManager</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 登录认证</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManager();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * anyRequest          |   匹配所有请求路径</span></span><br><span class="line"><span class="comment">  * access              |   SpringEl表达式结果为true时可以访问</span></span><br><span class="line"><span class="comment">  * anonymous           |   匿名可以访问，和permitAll的区别就是，anonymous只要登录之后就不能访问，只能匿名访问，permitAll登录还是不登陆都可以访问</span></span><br><span class="line"><span class="comment">  * denyAll             |   用户不能访问</span></span><br><span class="line"><span class="comment">  * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）</span></span><br><span class="line"><span class="comment">  * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问</span></span><br><span class="line"><span class="comment">  * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问</span></span><br><span class="line"><span class="comment">  * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问</span></span><br><span class="line"><span class="comment">  * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问</span></span><br><span class="line"><span class="comment">  * hasRole             |   如果有参数，参数表示角色，则其角色可以访问</span></span><br><span class="line"><span class="comment">  * permitAll           |   用户可以任意访问</span></span><br><span class="line"><span class="comment">  * rememberMe          |   允许通过remember-me登录的用户访问</span></span><br><span class="line"><span class="comment">  * authenticated       |   用户登录后可访问</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">// 由于是前后端分离项目，所以要关闭csrf</span></span><br><span class="line">        csrf().disable()</span><br><span class="line">        <span class="comment">// 由于是前后端分离项目，所以session是失效的，我们就不能通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        <span class="comment">// 指定springSecurity放行登录接口规则</span></span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 anonymous表示允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求都需要鉴权认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16、创建<code>LoginService</code>接口和<code>LoginServiceImpl</code>实现类<br><code>LoginService</code>接口：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2024/9/6 21:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    String <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>LoginServiceImpl</code>实现类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据那个流程图，因为默认的UsernamePasswordAuthenticationFilter调用了AuthenticationManager接口的authenticate()方法进行认证，所以我们这里也要调用它</span></span><br><span class="line">            <span class="comment">//调用这个方法，首先我们得去SpringSecurityConfig配置类中将AuthenticationManager接口注入到spring容器中</span></span><br><span class="line">            <span class="comment">//因为authenticate()方法需要Authentication接口参数，我们查看Authentication接口的实现，选择使用UsernamePasswordAuthenticationToken实现类</span></span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断上面authenticate是否为null，如果认证没通过，就抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(authenticate)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果认证通过，就使用userId生成一个jwt，并将jwt返回给前端</span></span><br><span class="line">            <span class="type">LoginUser</span> <span class="variable">loginUserInfo</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUserInfo.getUser().getId().toString();</span><br><span class="line">            jwt = JwtUtil.createJWT(userId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为了减少数据库压力，采用redis</span></span><br><span class="line">            <span class="comment">// 将完整的用户信息存入redis，将userId作为key</span></span><br><span class="line">            redisCache.setCacheObject(userId, loginUserInfo);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17、去数据库修改用户密码，使用第<code>13</code>中的测试生成加密密码，然后启动redis服务，再使用postman发送请求测试。<br>18、在<code>二、原理讲解</code>的最后说还需要创建一个过滤器，来处理每个请求的jwt认证  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.common.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtAuthenticationTokenFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/6 20:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> jwt认证过滤器，可以实现Filter过滤器接口，但是会有问题，使用OncePerRequestFilter，保证在一次请求中只通过一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取token，指定你的token名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判空，不一定所有的请求都有token请求头，比如登录页面请求和登录请求就没有</span></span><br><span class="line">        <span class="comment">// StringUtils.hasText()方法用于检查给定的字符串是否为空或仅包含空格字符</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="comment">// 如果请求没有携带token，直接放行</span></span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从redis中获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(loginUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户信息存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// 为什么使用UsernamePasswordAuthenticationToken，我们使用有三个参数的UsernamePasswordAuthenticationToken构造函数</span></span><br><span class="line">        <span class="comment">// 点进去查看这个构造函数，可以看到super.setAuthenticated(true);，这个表示已经认证过的用户，不用在认证了，只是用来获取用户信息</span></span><br><span class="line">        <span class="comment">// 第一个参数是LoginUser用户信息，第二个参数为null不用管，第三个参数是权限信息，有的话就得填</span></span><br><span class="line">		<span class="comment">// TODO 权限</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 将authenticationToken存入SecurityContextHolder</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19、在<code>SpringSecurityConfig</code>配置类中添加  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br></pre></td></tr></table></figure>
<p>在<code>SpringSecurityConfig</code>配置类的<code>configure(HttpSecurity http)</code>方法中添加  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把自定义的过滤器添加到过滤器链中</span></span><br><span class="line"><span class="comment">// 第一个参数是注入我们在filter目录中自定义的过滤器，第二个参数表示想要在哪个过滤器之前添加</span></span><br><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="四、自定义退出登录接口"><a href="#四、自定义退出登录接口" class="headerlink" title="四、自定义退出登录接口"></a>四、自定义退出登录接口</h1><p>1、关闭SpringSecurity默认的注销功能，在在<code>SpringSecurityConfig</code>配置类的<code>configure(HttpSecurity http)</code>方法中添加  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭SpringSecurity默认的注销请求</span></span><br><span class="line">http.logout().disable();</span><br></pre></td></tr></table></figure>
<p>2、在<code>LoginService</code>接口和<code>LoginServiceImpl</code>实现类中添加注销方法<br><code>LoginService</code>接口：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: zjy</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Date</span>: 2024/9/6 21:29</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 退出登录</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">String <span class="title function_">logout</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p><code>LoginServiceImpl</code>实现类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取在JwtAuthenticationTokenFilter过滤器中设置的SecurityContextHolder用户信息</span></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line">    <span class="comment">// 删除redis中的用户信息</span></span><br><span class="line">    redisCache.deleteObject(userId.toString());</span><br><span class="line">    <span class="comment">// 删除SecurityContextHolder中的用户信息</span></span><br><span class="line">    SecurityContextHolder.clearContext();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;退出成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在<code>LoginController</code>类中添加注销方法  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult&lt;String&gt; <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">logout</span> <span class="operator">=</span> loginService.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>&lt;&gt;(<span class="number">200</span>, logout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<br/>



<hr>
<br/>




<h1 id="五、权限"><a href="#五、权限" class="headerlink" title="五、权限"></a>五、权限</h1><p>说明一：在<code>SpringSecurity</code>中，会使用默认的<code>FilterSecurityInterceptor</code>来进行权限校验，在<code>FileSecurityInterceptor</code>中会从<code>SecurityContexrHolder</code>获取其中的<code>Authentication</code>，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。<br>说明二：对于权限我们采用经典模型<code>RBAC权限模型</code>，该模型由下面五个部分组成：  </p>
<ol>
<li>用户：用户是系统操作者，用户可以拥有自己的用户名和密码，用户可以登录系统。  </li>
<li>角色：角色是权限的集合，角色可以拥有自己的名字和描述信息。  </li>
<li>权限：权限是系统中的最小单元，权限可以拥有自己的名字和描述信息。  </li>
<li>用户-角色映射：用户与角色是多对多的关系，用户可以拥有多个角色，角色也可以被多个用户拥有。  </li>
<li>角色-权限映射：角色与权限是多对多的关系，角色可以拥有多个权限，权限也可以被多个角色拥有。</li>
</ol>
<p>1、根据权限模型创建表<br>用户表我们上面已经创建过了。<br>（1）角色表  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) comment <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `role_key` <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;角色key&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span> comment <span class="string">&#x27;角色状态（0正常，1停用）&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;逻辑删除（0未删除，1已删除）&#x27;</span>,</span><br><span class="line">  `create_by` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;创建人id&#x27;</span>,</span><br><span class="line">  `create_time` datetime comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_by` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;更新人id&#x27;</span>,</span><br><span class="line">  `update_time` datetime comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) engine<span class="operator">=</span>Innodb auto_increment<span class="operator">=</span><span class="number">3</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment <span class="string">&#x27;角色表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>（2）权限表  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `sys_menu` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) comment <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">200</span>) comment <span class="string">&#x27;路由地址&#x27;</span>,</span><br><span class="line">  `component` <span class="type">varchar</span>(<span class="number">255</span>) comment <span class="string">&#x27;组件路径&#x27;</span>,</span><br><span class="line">  `visible` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span> comment <span class="string">&#x27;菜单是否显示（0显示，1隐藏）&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span> comment <span class="string">&#x27;菜单状态（0正常，1停用）&#x27;</span>,</span><br><span class="line">  `perms` <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;权限标识&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;菜单图标&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;逻辑删除（0未删除，1已删除）&#x27;</span>,</span><br><span class="line">  `create_by` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;创建人id&#x27;</span>,</span><br><span class="line">  `create_time` datetime comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_by` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;更新人id&#x27;</span>,</span><br><span class="line">  `update_time` datetime comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) engine<span class="operator">=</span>Innodb auto_increment<span class="operator">=</span><span class="number">2</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment <span class="string">&#x27;权限表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>（3）用户-角色映射表  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `sys_user_role` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) engine<span class="operator">=</span>Innodb auto_increment<span class="operator">=</span><span class="number">2</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment <span class="string">&#x27;用户角色映射表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>（4）角色-权限映射表  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `sys_role_menu` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">bigint</span>(<span class="number">200</span>) comment <span class="string">&#x27;权限id&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) engine<span class="operator">=</span>Innodb auto_increment<span class="operator">=</span><span class="number">2</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment <span class="string">&#x27;角色权限映射表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>（5）添加数据  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_user_role <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_role <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;经理&#x27;</span>, <span class="string">&#x27;ceo&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="string">&#x27;coder&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_role_menu <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_menu <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;/user&#x27;</span>, <span class="string">&#x27;system/user/index&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;system:user:list&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;角色管理&#x27;</span>, <span class="string">&#x27;/role&#x27;</span>, <span class="string">&#x27;system/role/index&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;system:role:list&#x27;</span>, <span class="string">&#x27;peoples&#x27;</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>2、根据创建的表去<code>pojo</code>包下创建实体类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Menu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/9 20:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 菜单权限表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_menu&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由地址</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件路径</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单是否显示，0显示，1隐藏</span></span><br><span class="line">    <span class="keyword">private</span> String visible;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单状态，0正常，1停用</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权限标识</span></span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单图标</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建人id</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新人id</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除标志（0代表存在，1代表删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在<code>mapper</code>包下创建接口  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjysecurity.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjysecurity.pojo.Menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户id查询用户权限</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、在<code>resources</code>包下创建<code>mapper</code>目录，并创建<code>MenuMapper.xml</code>  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zjysecurity.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">        SELECT DISTINCT</span><br><span class="line">        m.perms</span><br><span class="line">        FROM</span><br><span class="line">        sys_user_role ur</span><br><span class="line">        LEFT JOIN sys_role r ON ur.role_id = r.id</span><br><span class="line">        LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id</span><br><span class="line">        LEFT JOIN sys_menu m ON m.id = rm.menu_id</span><br><span class="line">        WHERE</span><br><span class="line">        user_id = #&#123;userId&#125;</span><br><span class="line">        AND r.`status` = &#x27;0&#x27;</span><br><span class="line">        AND m.`status` = &#x27;0&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、在<code>application.yml</code>文件中配置（也可以不配置，mybatis-plus自动已经配置好了）  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>
<p>6、开启权限相关配置，在<code>SecurityConfig</code>配置类上使用注解<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code>，之后就可以在<code>controller</code>类中使用<code>@PreAuthorize()</code>注解来进行权限配置；<br><code>SecurityConfig</code>配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">	......（省略）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>controller</code>类中使用<code>@PreAuthorize()</code>注解来进行权限配置：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)表示：用户拥有test权限才能访问此接口</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、在<code>LoginUser</code>类中添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 权限集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; permissions;</span><br></pre></td></tr></table></figure>
<p>将<code>@NoArgsConstructor</code>和<code>@AllArgsConstructor</code>删除，更换为<code>@Builder</code>，使用<code>@Builder</code>注解来生成一个构建器模式，这样你可以更灵活地创建对象。<br>8、在<code>MyUserDetailServiceImpl</code>类中添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MenuMapper menuMapper;</span><br></pre></td></tr></table></figure>
<p>并在<code>// todo 权限</code>后面部分全部修改为：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> List&lt;String&gt; list = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line"><span class="keyword">return</span> LoginUser.builder()</span><br><span class="line">                .user(user)</span><br><span class="line">                .permissions(list)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>
<p>9、在<code>LoginUser</code>类添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @JSONField这个注解的作用：是不让被标注的成员变量序列化存入redis，避免redis不支持而报异常</span></span><br><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorities;</span><br></pre></td></tr></table></figure>
<p>重写<code>getAuthorities()</code>方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 传统方式：</span></span><br><span class="line"><span class="comment">	 * authorities = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">	 * for (String permission : permissions) &#123;</span></span><br><span class="line"><span class="comment">	 *   SimpleGrantedAuthority authority = new SimpleGrantedAuthority(permission);</span></span><br><span class="line"><span class="comment">	 *   authorities.add(authority);</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 新方式：</span></span><br><span class="line">	<span class="comment">// 这里优化了，把authorities属性声明提到方法外面，这样只有第一次的时候需要转换</span></span><br><span class="line">	<span class="keyword">if</span> (authorities != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> authorities;</span><br><span class="line">	&#125;</span><br><span class="line">	authorities = permissions.stream()</span><br><span class="line">							 .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">							 .collect(Collectors.toList());</span><br><span class="line">	<span class="keyword">return</span> authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：为什么权限会使用到<code>SimpleGrantedAuthority</code>类？<br>因为我们需要重写<code>getAuthorities()</code>方法，而此方法返回值是<code>GrantedAuthority</code>接口，我们查看<code>GrantedAuthority</code>接口的实现类，选择简单的<code>SimpleGrantedAuthority</code>。<br>10、在<code>JwtAuthenticationTokenFilter</code>类的<code>// todo 权限</code>下面一行改为：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, loginUser.getAuthorities());</span><br></pre></td></tr></table></figure>
<p>11、测试访问<code>/hello</code>接口，因为<code>/hello</code>接口需要用户拥有<code>test</code>权限才能访问，然后我们数据库中用户拥有的权限为：<code>system:user:list</code>和<code>system:role:list</code>，没有<code>test</code>权限，所以用户不能访问<code>/hello</code>接口。  </p>
<br/>



<hr>
<br/>



<h1 id="六、自定义异常处理"><a href="#六、自定义异常处理" class="headerlink" title="六、自定义异常处理"></a>六、自定义异常处理</h1><p>说明：当认证或授权过程中出现了异常报错时，我们希望响应回来的数据格式同一，所以需要自定义异常处理。<br>在<code>SpringSecurity</code>中，如果认证或者授权过程中出现了异常，会被<code>ExceptionTranslationFilter</code>捕获到：  </p>
<ol>
<li>如果是<strong>认证</strong>过程中出现的异常会被封装成<code>AuthenticationException</code>，然后调用<code>AuthenticationEntryPoint</code>对象的方法去进行异常处理；  </li>
<li>如果是<strong>授权</strong>过程中出现的异常会被封装成<code>AccessDeniedException</code>，然后调用<code>AccessDeniedHandler</code>对象的方法去进行异常捕获。</li>
</ol>
<p>如果我们需要自定义异常处理，只需要创建<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>的实现类对象，然后配置给<code>SpringSecurity</code>即可。<br>1、创建<code>exception</code>目录，并创建<code>AuthenticationEntryPoint</code>接口的实现类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个类只处理认证异常，不处理授权异常</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：请求对象</span></span><br><span class="line"><span class="comment">	 * 第二个参数：相应对象</span></span><br><span class="line"><span class="comment">	 * 第三个参数：异常对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">		<span class="comment">// ResponseResult是common包中的返回结果集</span></span><br><span class="line">		<span class="comment">// HttpStatus是spring提供的枚举类</span></span><br><span class="line">		<span class="comment">// UNAUTHORIZED表示401状态码</span></span><br><span class="line">		<span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(), <span class="string">&quot;用户认证失败，请重新登录&quot;</span>);</span><br><span class="line">		<span class="comment">// 将上面的result对象转换为json字符串</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">		<span class="comment">// 将json字符串响应给前端</span></span><br><span class="line">		<span class="comment">// WebUtils是utils包中的工具类</span></span><br><span class="line">		WebUtils.renderString(response, json);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在<code>exception</code>目录下创建<code>AccessDeniedHandler</code>接口的实现类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个类只处理授权异常，不处理认证异常</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：请求对象</span></span><br><span class="line"><span class="comment">	 * 第二个参数：相应对象</span></span><br><span class="line"><span class="comment">	 * 第三个参数：异常对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">		<span class="comment">// ResponseResult是common包中的返回结果集</span></span><br><span class="line">		<span class="comment">// HttpStatus是spring提供的枚举类</span></span><br><span class="line">		<span class="comment">// UNAUTHORIZED表示401状态码</span></span><br><span class="line">		<span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.FORBIDDEN.value(), <span class="string">&quot;您没有权限&quot;</span>);</span><br><span class="line">		<span class="comment">// 将上面的result对象转换为json字符串</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">		<span class="comment">// 将json字符串响应给前端</span></span><br><span class="line">		<span class="comment">// WebUtils是utils包中的工具类</span></span><br><span class="line">		WebUtils.renderString(response, json);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在<code>SecurityConfig</code>类中配置<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>：<br>添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里用的是我们在exception目录中写好的类，因为我们将默认的实现类覆盖了</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure>
<p>在<code>configure(HttpSecurity http)</code>方法中添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.exceptionHandling()</span><br><span class="line">    <span class="comment">// 配置认证失败的处理器</span></span><br><span class="line">	.authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">	<span class="comment">// 配置授权失败的处理器</span></span><br><span class="line">	.accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>
<p>4、除了上面的方法以外，还可以使用<strong>自定义处理器</strong>来同一处理异常和返回结果，可查看链接：<br><a href="https://www.yuque.com/huanfqc/springsecurity/springsecurity#qJDwT">点击跳转</a></p>
<br/>



<hr>
<br/>



<h1 id="七、跨域处理"><a href="#七、跨域处理" class="headerlink" title="七、跨域处理"></a>七、跨域处理</h1><p>说明：跨域问题，在前端和后端分离的项目中比较常见，比如前端使用<code>Vue</code>，后端使用<code>SpringBoot</code>，前端和后端部署在不同的服务器上，那么前端在请求后端接口时就会出现跨域问题。<br>处理跨域问题，我们需要做两步（第二步可能不需要，因为springboot解决了跨域，就解决了，如果没有解决再弄）：<br>1、开启<code>Springboot</code>的允许跨域访问：<br>在<code>config</code>目录下创建<code>CorsConfig</code>配置类。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 设置允许跨域的路由</span></span><br><span class="line">		registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">				<span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">				.allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">				<span class="comment">// 设置允许的请求方法</span></span><br><span class="line">				.allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">				<span class="comment">// 是否允许证书（cookies）</span></span><br><span class="line">				.allowCredentials(<span class="literal">true</span>)</span><br><span class="line">				<span class="comment">// 设置允许的header属性</span></span><br><span class="line">				.allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">				<span class="comment">// 跨域允许时间</span></span><br><span class="line">				.maxAge(<span class="number">3600</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在<code>SecurityConfig</code>类中的<code>configure(HttpSecurity http)</code>方法中添加：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许跨域请求</span></span><br><span class="line">http.cors();</span><br></pre></td></tr></table></figure>



<br/>



<hr>
<br/>



<h1 id="八、自定义权限校验方法"><a href="#八、自定义权限校验方法" class="headerlink" title="八、自定义权限校验方法"></a>八、自定义权限校验方法</h1><p>1、新建自定义权限校验类  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里需要命名</span></span><br><span class="line"><span class="meta">@Component(&quot;myAuthority&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthority</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 自定义权限校验方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">		<span class="comment">// 获取当前登录用户</span></span><br><span class="line">		<span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">		<span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">		<span class="comment">// 获取当前用户的权限</span></span><br><span class="line">		List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">		<span class="comment">// 判断当前用户是否具有该权限</span></span><br><span class="line">		<span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、使用<code>@PreAuthorize</code>注解：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="comment">// 这里需要使用我们自定义的权限校验方法</span></span><br><span class="line">	<span class="meta">@PreAuthorize(&quot;@myAuthority.hasAuthority(&#x27;hello&#x27;)&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习笔记</title>
    <url>/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Docker示意图"><a href="#一、Docker示意图" class="headerlink" title="一、Docker示意图"></a>一、Docker示意图</h1><img src="/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>镜像和容器的区别：<br>镜像：相当于一个模版，模板中又分层，每层又相当于一个镜像，每个镜像里面包含了运行容器所需要的所有文件。<br>容器：相当于一个虚拟机，里面运行了一个操作系统。<br>镜像运行起来就是容器。  </p>
<img src="/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>所以镜像中的基础镜像是可以共用的，就比如本地已经存在mysql镜像，现在再下载redis镜像，下载日志会显示某些镜像已经存在，不需要再下载。  </p>
<img src="/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">


<br/>


<hr>
<br/>


<h1 id="二、Docker命令"><a href="#二、Docker命令" class="headerlink" title="二、Docker命令"></a>二、Docker命令</h1><h3 id="1、镜像命令"><a href="#1、镜像命令" class="headerlink" title="1、镜像命令"></a>1、镜像命令</h3><p>1、<code>docker cp xxx:/xxx.jar ./</code>：将docker里面的xxx服务移动到root根目录下。<br>2、<code>docker build</code>：构建镜像。<br>3、<code>docker images</code>：查看本地镜像。<br>4、<code>docker rmi</code>：删除镜像。<br>例子：<code>docker rmi nginx:latest</code>（也可以是镜像id，删除nginx镜像）<br>5、<code>docker push</code>：推送镜像到服务。<br>6、<code>docker pull</code>：从服务拉取镜像。<br>7、<code>docker save</code>：将镜像保存为一个压缩包。<br>例子：<code>docker save -o nginx.tar nginx:latest</code>（将nginx:latest镜像导出到nginx.tar压缩包中，会自动创建nginx.tar压缩包）<br>8、<code>docker load</code>：加载压缩包为镜像。<br>例子：<code>docker load -i nginx.tar</code>（将nginx.tar压缩包导入进docker容器）<br>9、<code>docker --help</code>：查看docker所有命令。<br>例子：<code>docker images --help</code>（查看images命令用法）  </p>
<h3 id="2、容器命令"><a href="#2、容器命令" class="headerlink" title="2、容器命令"></a>2、容器命令</h3><p>1、<code>docker run</code>：将镜像运行起来变为容器。<br>例子一：<code>docker run --name 【containerName】 -p 【宿主机端口】:【容器端口】 -d nginx</code><br>（1）<code>docker run</code>：创建并运行一个容器；<br>（2）<code>--name</code>：给容器起一个名字，比如叫mn（docker run –name mn -p 80:80 -d nginx）；<br>（3）<code>-p</code>：将宿主机端口与容器端口映射，用户通过访问宿主机的端口，就能访问到宿主机上的容器内部的端口（docker run –name mn -p 80:80 -d nginx）；<br>（4）<code>-d</code>：后台运行容器。<br>例子二：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>
<p>上面命令解释：<br>（1）<code>docker run</code>：创建并运行一个容器，<code>-d</code>是让容器再后台运行；<br>（2）<code>--name mysql</code>：给容器起个名字，必须唯一；<br>（3）<code>-p 3306:3306</code>：设置端口映射（相当于这个mysql容器是一个虚拟机，需要将本机上面的3306端口映射到虚拟机的3306端口）；<br>（4）<code>-e KEY=VALUE</code>：是设置环境变量（这个环境变量的设置需要根据镜像容器来设置，具体查看docker官网某个镜像容器的文档）；<br>（5）<code>mysql</code>：指定运行的镜像的名字。<br>镜像的名字一般分两部分组成：<code>【镜像名字】:【镜像版本】</code>。<br>例如：<code>mysql:8.0</code>，如果没有指定镜像版本，默认为最新版本。<br>2、<code>docker pause 【容器名字】</code>：将运行的容器暂停；<br>3、<code>docker unpause 【容器名字】</code>：将暂停的容器运行；<br>4、<code>docker start 【容器名字】</code>：将停止的容器运行；<br>5、<code>docker stop 【容器名字】</code>：将运行的容器停止；<br>6、<code>docker ps</code>：查看运行中的容器（注意：只能查看运行的容器！）；<br>例子：<code>docker ps -a</code>：查看所有容器；<br>可以执行下面的命令，将输出内容格式化：<br><code>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Name&#125;&#125;&quot;</code>。<br>这里因为上面的命令太长，不方便记忆，可以在Linux中设置别名，具体查看Linux学习笔记中第四大点。<br>7、<code>docker logs 【容器名字】</code>：查看容器运行的日志；<br>例子：<code>docker logs -f mn</code>（查看mn容器运行的日志，<code>-f</code>是实时查看日志）；<br>8、<code>docker exec</code>：进入容器内部执行命令；<br>例子：<code>docker exec -it mn bash</code><br>（1）<code>docker exec</code>：进入容器内部，执行一个命令；<br>（2）<code>-it</code>：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互；<br>（3）<code>mn</code>：要进入的容器的名称；<br>（4）<code>bash</code>：进入容器后执行的命令，bash是一个linux终端交互命令。<br>9、<code>docker rm 【容器名字】</code>：删除指定容器；（不止删除容器，还会删除文件系统）<br>注意：<br>（1）删除指定容器的时候，必须先让容器停止，才能删除；<br>（2）也可以强制删除：<code>docker rm -f mn</code>（强制删除mn容器）。<br>10、<code>docker inspect 【容器名字】</code>：查看运行的容器的详细信息。  </p>
<br/>


<hr>
<br/>


<h1 id="三、数据卷"><a href="#三、数据卷" class="headerlink" title="三、数据卷"></a>三、数据卷</h1><h3 id="1、什么是数据卷"><a href="#1、什么是数据卷" class="headerlink" title="1、什么是数据卷"></a>1、什么是数据卷</h3><p>就比如，我们创建了一个mysql容器，然后想要修改mysql的配置，那我们首先需要进入这个运行了mysql的虚拟机（就是mysql容器），执行<code>docker exec -it mysql bash</code>命令进入容器与容器交互，然后执行linux的相关命令，我们会发现执行不了。<br>不是说mysql容器就是装了mysql的linux虚拟机吗？为什么进入liunx系统，执行linux的命令执行不了？<br>这是因为mysql容器是mysql镜像运行之后产生的，而mysql镜像里面并没有包含linux的相关命令，只有关于运行mysql的相关配置文件。<br>那我们如何去修改mysql容器中的mysql配置呢？<br>这就需要使用数据卷了，数据卷就相当于本机目录和mysql容器目录之间的映射桥梁。<br>就比如我在本机某个目录创建了一个目录，然后和mysql容器中的某个目录设置了数据卷进行了映射，那我们在本机这个目录进行的所有操作，都会同步到mysql容器中被映射的目录中，是双向映射。  </p>
<h3 id="2、数据卷命令"><a href="#2、数据卷命令" class="headerlink" title="2、数据卷命令"></a>2、数据卷命令</h3><p>1、<code>docker volume create 【数据卷名字】</code>：创建数据卷；<br>2、<code>docker volume ls</code>：查看所有数据卷；<br>3、<code>docker volume inspect 【数据卷名字】</code>：查看指定数据卷的详细信息；<br>4、<code>docker volume rm 【数据卷名字】</code>：删除指定数据卷；<br>5、<code>docker volume prune</code>：删除无主的数据卷；<br>6、<code>docker volume --help</code>：查看数据卷命令使用指南。  </p>
<h3 id="3、使用数据卷例子"><a href="#3、使用数据卷例子" class="headerlink" title="3、使用数据卷例子"></a>3、使用数据卷例子</h3><p><strong>例子一</strong><br>1、需求一：<br>（1）创建nginx容器，修改nginx容器内的html目录下的index.html文件内容；<br>（2）将静态资源放到nginx的html目录中。<br>注意：<br>（1）我们不用刻意去执行<code>docker volume create</code>创建数据卷，数据卷是自动创建的；<br>（2）如果已经存在运行的容器了，是无法进行数据卷挂载的，需要删除，重新创建容器并执行数据卷挂载；<br>在执行<code>docker run</code>命令时，使用<code>-v 数据卷名字:容器内目录</code>可以完成数据卷挂载，当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷。<br>2、步骤：<br>（1）如果本地存在已经运行的nginx容器，先执行<code>docker rm -f nginx</code>删除运行的容器；<br>（2）执行<code>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</code>创建nginx容器，并且挂载数据卷；<br>（3）执行<code>docker volume ls</code>查看已经有的所有数据卷列表；  </p>
<img src="/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>（4）执行<code>docker volume inspect html</code>，查看html数据卷的详细信息；  </p>
<img src="/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<p>解释：<br>我们创建了一个nginx容器，创建了一个叫html的数据卷，这个html数据卷和nginx容器内的<code>/usr/share/nginx/html</code>目录进行了映射，然后html数据卷又和本地的<code>/var/lib/docker/volums/html/_data</code>目录进行了映射，这样本地和容器就关联成功了。<br>（5）在本机执行<code>cd /var/lib/docker/volumes/html/_data</code>目录之后，执行<code>ll</code>查看目录，会看到有内容，这些内容是容器内<code>/usr/share/nginx/html</code>目录的内容；<br>（6）我们直接在本机<code>/var/lib/docker/volumes/html/_data</code>目录下修改index.html文件，然后刷新浏览器，会发现已经修改成功了。  </p>
<p><strong>例子二</strong><br>1、需求二：<br>（1）查看mysql容器，判断是否有数据卷挂载；<br>（2）基于本机目录实现mysql数据目录、配置文件、初始化脚本的挂载（可以查看docker官网镜像文档）。<br>说明：<br>（1）我们先运行一个mysql容器，执行<code>docker inspect mysql</code>查看mysql容器的详细信息，找到<code>Mounts</code>，会发现默认挂载了一个数据卷（匿名卷），我们一般是不要这个匿名卷的，我们一般都是自己挂载一个数据卷；<br>（2）可以在执行<code>docker run</code>命令时，使用<code>-v 本地目录:容器内目录</code>来进行数据卷挂载；<br>本地目录必须以<code>/</code>或<code>./</code>开头，如果直接以名称开头，会被识别为数据卷而非本地目录。<br>例如：  </p>
<ol>
<li><code>-v mysql:/var/lib/mysql</code>会被识别为一个数据卷叫mysql；  </li>
<li><code>-v ./mysql:/var/lib/mysql</code>会被识别为当前目录下的mysql目录。</li>
</ol>
<p>（3）容器内的mysql数据目录、配置文件、初始化脚本路径在哪里可以查看docker官网mysql镜像文档。<br>2、步骤：<br>（1）如果本地存在已经运行的mysql容器，先执行<code>docker rm -f mysql</code>删除运行的容器；<br>（2）在本机任意目录（就是你想要在哪个目录挂载的父目录，这里用root目录）创建mysql目录，在mysql目录中分别创建data、conf、init目录（记得把各目录的脚本文件放入）；<br>（3）执行下面的命令创建mysql容器，并挂载数据卷。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /root/mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="四、Dockerfile"><a href="#四、Dockerfile" class="headerlink" title="四、Dockerfile"></a>四、Dockerfile</h1><h3 id="1、Dockerfile是什么"><a href="#1、Dockerfile是什么" class="headerlink" title="1、Dockerfile是什么"></a>1、Dockerfile是什么</h3><p>Dockerfile是用来构建Docker镜像的文本文件，其中包含了一个个的指令，用这些指令来说明要执行什么操作来构建镜像，最终生成一个Docker镜像。<br>当编写好Dockerfile，可以执行下面的命令来构建镜像：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t myImage:1.0 .</span><br></pre></td></tr></table></figure>
<p><code>-t</code>：是给镜像起名，格式是：【镜像名字】:【镜像版本号】，不指定镜像版本号默认为latest。<br><code>.</code>：最后的.表示Dockerfile所在目录，如果就在当前目录，则指定为<code>.</code>，一般Dockerfile和相关的文件、jar包都放在同一个目录下。<br>构建例子查看下面第3点例子中的实例。  </p>
<h3 id="2、Dockerfile常用指令"><a href="#2、Dockerfile常用指令" class="headerlink" title="2、Dockerfile常用指令"></a>2、Dockerfile常用指令</h3><p>1、<code>FROM</code>：指定基础镜像，当前新镜像是基于哪个镜像的，例如：<code>FROM centos:6</code>，新镜像基于centos6镜像构建。<br>2、<code>ENV</code>：用来在构建镜像过程中设置环境变量，例如：<code>ENV key value</code>。<br>3、<code>COPY</code>：拷贝本地文件到镜像的指定目录，例如：<code>COPY ./jrel1.tar.gz /tmp</code>，拷贝本地文件jrel1.tar.gz到镜像的tmp目录。<br>4、<code>RUN</code>：在构建镜像过程中执行哪些命令，例如：<code>RUN tar -zxvf /tmp/jrel1.tar.gz &amp;&amp; EXPORTS path=/tmpjrel1:$path</code>，在构建镜像时执行此命令。<br>5、<code>EXPOSE</code>：指定容器运行时监听的端口，是给镜像使用者看的，例如：<code>EXPOSE 8080</code>。<br>6、<code>ENTRYPOINT</code>：镜像中应用的启动命令，容器运行时调用，例如：<code>ENTRYPOINT java -jar xx.jar</code>。<br>更多指令可以查看docker官网。  </p>
<h3 id="3、例子"><a href="#3、例子" class="headerlink" title="3、例子"></a>3、例子</h3><p>1、例子<br>基于Ubuntu基础镜像，构建一个java项目镜像。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置JDK的安装目录</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置时区</span></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝jdk和java项目的包</span></span><br><span class="line">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class="line">COPY ./demo.jar /tmp/demp.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装jdk</span></span><br><span class="line">RUN cd $JAVA_DIR &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; mv ./jdk8 ./java8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">入口，java项目的启动命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>上面可以直接基于别人构建好jdk镜像来镜像构建，下面是基于jdk11的：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础镜像</span></span><br><span class="line">FROM openjdk:11.0-jre-buster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝jar包</span></span><br><span class="line">COPY demo.jar /demo.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">入口，java项目的启动命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>特别注意：FROM后面跟的基础镜像，必须是已经存在的镜像，比如要基于openjdk:11.0来构建镜像，那得先从docker仓库拉取openjdk:11.0镜像，才能基于它来构建镜像。  </p>
<p>2、实例<br>（1）执行<code>docker images</code>查看本机是否有openjdk:11.0-jre-buster镜像，没有先拉取；<br>（2）在demo.jar包所在目录下创建Dockerfile文件，并写入下面代码；  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础镜像</span></span><br><span class="line">FROM openjdk:11.0-jre-buster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝jar包</span></span><br><span class="line">COPY demo.jar /demo.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">入口，java项目的启动命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>（3）执行<code>docker build -t demoImage .</code>，就构建好了；<br>（4）执行<code>docker images</code>可以查看构建好的镜像；<br>（5）执行<code>docker run -d -p 8080:8080 demoImage</code>，启动容器，并映射端口；<br>（6）执行<code>docker ps</code>可以查看启动的容器；<br>（7）执行<code>curl http://localhost:8080</code>，可以访问到demo项目。  </p>
<br/>


<hr>
<br/>


<h1 id="五、Docker网络"><a href="#五、Docker网络" class="headerlink" title="五、Docker网络"></a>五、Docker网络</h1><h3 id="1、什么是docker网络"><a href="#1、什么是docker网络" class="headerlink" title="1、什么是docker网络"></a>1、什么是docker网络</h3><p>Docker网络是Docker容器之间的通信方式，Docker容器之间可以通过网络进行通信。Docker网络分为四种：<br>1、bridge：桥接网络，是Docker默认的网络模式，每个Docker容器都会分配一个虚拟网卡，通过桥接网络进行通信。<br>2、host：主机网络，容器和宿主机共享网络，容器可以直接使用宿主机的网络。<br>3、none：无网络，容器没有网络连接，无法进行通信。<br>4、container：容器网络，容器之间共享网络，容器之间可以直接通信。<br>有这么一个场景，我们运行了一个mysql容器，docker就给mysql容器分配了一个虚拟网卡，注意，这个虚拟网卡的ip是随机的，会变，如果我们项目需要连接这个mysql，ip会变，那我们是无法连接的，所以我们需要自定义网络。  </p>
<h3 id="2、docker网络命令"><a href="#2、docker网络命令" class="headerlink" title="2、docker网络命令"></a>2、docker网络命令</h3><p>1、<code>docker network create 【网络名字】</code>：创建一个网络。<br>2、<code>docker network ls</code>：查看本机所有的网络。<br>3、<code>docker network rm</code>：删除指定网络。<br>4、<code>docker network prune</code>：清除未使用的网络。<br>5、<code>docker network connect 【网络名字】 【镜像名字】</code>：使指定容器加入某网络。<br>6、<code>docker network disconnect</code>：使指定容器离开某网络。<br>7、<code>docker network inspect</code>：查看网络详细信息。<br>8、镜像启动时就加入网络：<code>docker run -d --name 【镜像启动的名字】 -p 8080:8080 --network 【网络名字】 【镜像名字】</code>。  </p>
<h3 id="3、例子-1"><a href="#3、例子-1" class="headerlink" title="3、例子"></a>3、例子</h3><p>1、自定义一个网络<code>docker network create myNet</code>；<br>2、执行<code>docker network connect myNet mysql</code>，将mysql镜像加入自定义好的网络；<br>3、demo镜像想要连接mysql镜像时，可以使用<code>mysql://mysql:3306</code>，这样就可以连接了。<br>实际开发时，在本地项目中会有两个yml配置文件，一个是本地的，一个是docker的，docker的配置文件中，mysql的地址就是<code>mysql://mysql:3306</code>；本地的地址还是之前的。  </p>
<br/>


<hr>
<br/>


<h1 id="六、DockerCompose"><a href="#六、DockerCompose" class="headerlink" title="六、DockerCompose"></a>六、DockerCompose</h1><h3 id="1、什么是DockerCompose"><a href="#1、什么是DockerCompose" class="headerlink" title="1、什么是DockerCompose"></a>1、什么是DockerCompose</h3><p>有这么一个场景，现实中一套系统是由多个项目或服务组成的，比如一个项目由mysql、redis、nginx、java项目组成，那么我们启动的时候就需要一个一个去启动，如果使用docker命令，就需要启动多个命令，这样太麻烦了，还可能会遗漏了，所以就有了DockerCompose，它可以将多个容器组合在一起，通过一个命令启动。<br>DockerCompose通过一个单独的docker-compose.yml模板文件来定义一组相关联的应用容器，帮助我们实现多个相互关联的docker容器的快速部署。<br>一个DockerCompose文件对应一套系统，下面是一个docker-compose.yml文件的内容：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span>  <span class="comment"># 指定docker-compose文件格式的版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义服务</span></span><br><span class="line">  <span class="attr">containerA:</span>  <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">A</span>  <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">A</span>  <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 指定环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 指定数据卷</span></span><br><span class="line">  <span class="attr">containerB:</span>  <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">B</span>  <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">B</span>  <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 指定环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 指定数据卷</span></span><br></pre></td></tr></table></figure>
<p>mysql实例：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span>  <span class="comment"># 指定docker-compose文件格式的版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义服务</span></span><br><span class="line">  <span class="attr">mysql:</span>  <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span>  <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>  <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 指定环境变量</span></span><br><span class="line">	  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 指定数据卷</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">	<span class="attr">networks:</span> <span class="comment"># 指定网络</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">myNet</span></span><br></pre></td></tr></table></figure>
<p>demo.jar实例与mysql实例（不用构建成镜像情况下）：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span>  <span class="comment"># 指定docker-compose文件格式的版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义服务</span></span><br><span class="line">  <span class="attr">mysql:</span>  <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span>  <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>  <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 指定环境变量</span></span><br><span class="line">	  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 指定数据卷</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">	<span class="attr">networks:</span> <span class="comment"># 指定网络</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">myNet</span></span><br><span class="line">  <span class="attr">demo:</span>  <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">build:</span>  <span class="comment"># 指定构建</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span>  <span class="comment"># 在哪里build，.表示在当前目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>  <span class="comment"># 指定dockerfile文件，这里表示在当前目录找dockerfile文件</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">demo</span>  <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 指定网络</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">myNet</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment">#指定依赖</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">mysql</span> <span class="comment"># 指定依赖mysql镜像，指定之后就会先构建mysql，再构建demo</span></span><br><span class="line">  <span class="attr">networks:</span>	<span class="comment"># 这里指定网络之后，不用再去创建网络，会自动创建</span></span><br><span class="line">    <span class="attr">myNet:</span>  <span class="comment"># 网络名</span></span><br><span class="line">	  <span class="attr">name:</span> <span class="string">myNet</span>  <span class="comment"># 网络名</span></span><br></pre></td></tr></table></figure>

<h3 id="2、DockerCompose命令"><a href="#2、DockerCompose命令" class="headerlink" title="2、DockerCompose命令"></a>2、DockerCompose命令</h3><p>一般将DockerCompose文件和其他相关的项目、jar包、文件都放在同一个目录下。<br><code>docker compose 【OPTIONS】 【COMMAND】</code><br><code>OPTIONS</code>:<br>（1）<code>-f</code>：指定docker-compose文件的路径和名称。<br>（2）<code>-p</code>：指定项目名称。<br>（3）<code>-d</code>：在后台运行。<br><code>COMMAND</code>:<br>（1）<code>up</code>：创建并启动所有服务。<br>（2）<code>down</code>：停止并删除所有服务。<br>（3）<code>logs</code>：查看指定服务的日志。<br>（4）<code>ps</code>：查看所有服务的状态。<br>（5）<code>stop</code>：停止某个镜像。<br>（6）<code>start</code>：启动某个镜像。<br>（7）<code>restart</code>：重启某个镜像。<br>（8）<code>exec</code>：进入某个镜像。<br>（9）<code>top</code>：查看运行的进程。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot日志框架学习笔记</title>
    <url>/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<p>一、日志框架分类<br>1、日志门面（相当于接口）<br><code>JCL</code>（Jakarta Commons Logging）、<code>SLF4J</code>、<code>jboss-logging</code>。  </p>
<p>2、日志实现（相当于实现类）<br><code>Log4j</code>、<code>Log4j2</code>、<code>Logback</code>、<code>JUL</code>（java.util.logging）。  </p>
<p>二、日志门面和日志实现的关系<br>1、日志门面是日志实现的抽象，日志实现是日志门面的具体实现。  </p>
<p>2、日志门面和日志实现可以互相独立，可以单独使用，也可以组合使用。  </p>
<p>3、日志门面和日志实现可以互相替换，只要替换的日志实现和日志门面兼容即可。  </p>
<p>三、简单介绍说明<br>1、一般都是选择一个日志门面、一个日志实现来使用。  </p>
<p>2、<code>SLF4J</code>、<code>Log4j</code>、<code>Logback</code>都是一个人写的，所以<code>Logback</code>是<code>SLF4J</code>的实现类；<code>JCL</code>是Apache的Jakarta小组开发的；<code>Log4j2</code>是Apache公司借了<code>Log4j</code>之名开发的，是<code>Log4j</code>的升级版。  </p>
<p>3、一般选择的是日志门面为：<code>SLF4J</code>，日志实现为：<code>Logback</code>。  </p>
<p>4、Springboot默认的日志框架也是：<code>SLF4J</code>+<code>Logback</code>，Spring框架默认用的是：<code>JCL</code>。  </p>
<p>5、日志的级别：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 由低到高</span></span><br><span class="line"><span class="comment">		 * 日志输出，只会输出它后面的级别，例如：配置了info，那只会输出info、warn、error，不会输出trace、debug</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		logger.trace(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">		logger.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">		logger.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">		logger.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">		logger.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、默认配置  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png" class="">  

<p>7、xml配置文件替换默认配置  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png" class="">  
<p>解释：如果使用的是<code>logback</code>，那么在<code>src/main/resources</code>目录下创建<code>logback.xml</code>文件，如果使用的是<code>log4j2</code>，那么在<code>src/main/resources</code>目录下创建<code>log4j2.xml</code>文件。<br><code>logback.xml</code>和<code>logback-spring.xml</code>的区别：<br>（1）<code>logback.xml</code>：直接被<code>Logback</code>日志框架识别，加载；<br>（2）<code>logback-spring.xml</code>：被<code>Springboot</code>加载，<code>Springboot</code>会根据<code>logback</code>的配置，再进行一些配置，比如根据开发环境生效，如下。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>四、怎么使用<code>SLF4J</code>？<br>使用的时候，我们不应该直接调用日志的实现类，应该调用的是日志的接口。<br>导入<code>slf4j</code>和<code>logback</code>的依赖。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五、图解<br>1、项目只导入了<code>slf4j</code>依赖  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  

<p>2、项目导入了<code>slf4j</code>和<code>logback</code>依赖  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  

<p>3、如果项目要使用<code>log4j</code>日志功能，怎么办？<br>因为Springboot项目中使用的日志门面是<code>slf4j</code>，如果要使用<code>log4j</code>，需要导入<code>slf4j</code>的<code>log4j</code>适配依赖。  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  

<p>4、同理要使用其他日志实现，也需要导入<code>slf4j</code>的适配依赖。  </p>
<p>六、场景<br>有这么个场景：项目中使用的是<code>slf4j</code>日志功能，而其他框架使用的是其他的日志功能，太杂乱了，想统一都使用<code>slf4j</code>，怎么办呢？<br>可以看下面的图  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>1、将系统中其他日志框架先排除出去（排除出去之后项目是启动不了的，会报错，因为缺少了被排除的依赖）；<br>2、用中间包来替换原有的被排除出去的日志框架；<br>3、在引入<code>slf4j</code>的实现依赖。<br>可以通过idea中查看依赖树：  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  
<p>查看依赖数的方法，在pom文件空白处右键：  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" class="">  

<p>如果要引入其他日志框架的依赖，我们一定要把Springboot中该日志框架移除掉，因为从上面依赖树中可以到Springboot中已经存在了该日志框架了，如果再引入就会冲突。<br>我们可以去查看Spring的依赖，它也是这么做的，Spring默认日志使用的是<code>JCL</code>，而在它依赖中把<code>JCL</code>移除了：  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png" class="">  


<p>七、切换日志框架<br>1、例子一：将<code>logback</code>切换为<code>log4j</code>。<br>（1）将<code>logback</code>相关依赖排除，如下：  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png" class="">  
<p>（2）将Spingboot原有的<code>log4j</code>依赖也排除，方法同上：  </p>
<img src="/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png" class="">  
<p>（3）引入<code>log4j</code>和<code>slf4j</code>适配依赖<code>slf4j-log4j12</code>（这个依赖中已经包含了<code>log4j</code>的依赖）即可。  </p>
<p>2、例子二：将<code>logback</code>切换为<code>log4j2</code>。<br>（1）直接将<code>spring-boot-starter-logging</code>依赖排除掉；<br>（2）引入<code>spring-boot-starter-log4j2</code>依赖即可。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记</title>
    <url>/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、架构体系"><a href="#一、架构体系" class="headerlink" title="一、架构体系"></a>一、架构体系</h1><img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>1、说明<br>（1）注册中心（配置中心）、网关、各个服务启动，每个服务都会向注册中心注册，注册中心将每个服务的信息记录到它的数据库中，此时，每个服务和注册中心会建立心跳连接（相当于每隔一段时间，每个服务就会主动告诉注册中心，自己没有出现异常，没有挂掉），这样防止服务挂掉后，注册中心没有及时更新服务信息，导致调用方调用失败；<br>（2）网关启动之后，也会将自己注册到注册中心，然后从注册中心拉取每个服务的注册信息到内存中（这里可以使用动态路由，相关信息查看网关的动态路由设置）；<br>（3）前端发送请求，请求会先到网关，网关使用过滤器去校验请求，校验通过之后，会根据请求路径，从内存中找到相对应的服务，然后将请求转发给服务，服务在自己数据库进行crud业务处理之后返回结果。  </p>
<p>2、例子说明：<br>（1）用户在登录页进行登录，用户发送登录请求<code>/users/login</code>，这个请求在网关配置文件中配置的是白名单（白名单：不需要校验，可以直接通过的请求），该请求到达网关，网关不进行校验，直接从内存中匹配，匹配到是用户服务（登录校验还是在用户服务进行），因此将请求转发给用户服务；<br>（2）用户服务收到请求，进行登录校验，校验通过之后生成token返回给前端（先返回给网关，再返回给前端）；<br>（3）用户登录成功之后（注意：这里如果项目中登录打了断点，是成功不了的，这是因为网关降级），进行查找商品列表，发送<code>/items/list</code>请求；<br>（4）网关收到<code>/items/list</code>请求，因为该请求没有设置白名单，需要进行校验，校验token是否有效（无效返回401无效的token），校验通过之后，解析token为用户信息，然后从内存中匹配路由列表，匹配到的是商品服务，然后将用户信息重新设置到header请求头中，再将请求转发给商品服务；<br>（5）如果商品服务是集群，因为网关中设置了负载均衡，所以网关会根据负载均衡规则，将请求转发给商品服务集群中的某一个商品服务；<br>（6）商品服务接收到请求，会通过公共jar包中写好的拦截器设置好用户信息（这个拦截器不做别的事情，只获取header请求头中用户信息存入ThreadLocal供后面使用），再从数据库中查找商品列表，返回给网关，网关将商品列表返回给前端（如果商品服务中打了断点，也不会成功，因为网关降级）；<br>（7）用户查询购物车列表，查询购物车也要查询商品，这里就是服务之间的调用；<br>（8）用户查询购物车列表，发送请求<code>/carts/list</code>，网关收到请求，同样需要校验token并解析，校验通过之后，将解析出来的token（用户信息）重新设置到header请求头，转发给购物车服务；<br>（9）同样购物车服务收到请求，也会先执行公共jar包中写好的拦截器设置header请求头中的用户信息，然后购物车服务查询购物车列表，此时需要查找商品信息，因为商品信息在商品服务那，只能由商品服务来进行查询，所以购物车服务调用商品服务，本来这里可以使用restTemplate来发送请求给商品服务（因为都是基于http协议），但是这种做法比较麻烦，所以可以使用OpenFeign来简化这个过程，OpenFeign底层也是使用restTemplate，但是OpenFeign会根据接口定义，自动生成请求，然后发送给商品服务；<br>（10）购物车服务先通过OpenFeign提供好的接口，将用户信息设置到header请求头中，再发送请求给商品服务；<br>（11）商品服务接收到请求，同样先执行公共jar包中写好的拦截器获取用户信息，再进行商品的查询，然后返回给购物车服务；<br>（12）购物车服务接收到商品服务返回的商品列表，将商品列表返回给网关，网关将商品列表返回给前端。  </p>
<h1 id="二、SpringCloud组件"><a href="#二、SpringCloud组件" class="headerlink" title="二、SpringCloud组件"></a>二、SpringCloud组件</h1><img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>1、<code>注册中心</code>（服务注册发现）：Eureka（Netflix公司产品，被集成在SpringCloud中，一般用于Java应用）、Consul（HashCorp公司产品，被集成在SpringCloud中，不限制微服务语言）、Zookeeper、Nacos（Alibaba公司产品，被集成在SpringCloud中，用于Java应用）<br>2、<code>配置中心</code>（统一配置管理）：SpringCloud Config、Nacos<br>3、<code>负载均衡</code>：Ribbon、OpenFeign、Nacos<br>4、<code>网关</code>（统一网关路由）：Zuul、Gateway（SpringCloudGateway）<br>5、<code>服务调用</code>（服务远程调用）：OpenFeign、RestTemplate、Dubbo<br>6、<code>服务链路监控</code>：Zipkin、Sleuth<br>7、<code>流控、降级、保护</code>：Hystrix、Sentinel  </p>
<h1 id="三、单体演变为微服务过程"><a href="#三、单体演变为微服务过程" class="headerlink" title="三、单体演变为微服务过程"></a>三、单体演变为微服务过程</h1><p><a href="https://b11et3un53m.feishu.cn/wiki/space/7229522334074372099?ccm_open_type=lark_wiki_spaceLink&open_tab_from=wiki_home">具体的文档教程请点击</a>。<br>本笔记中所用到的所有资料可在这里获取：<a href="https://pan.baidu.com/s/1jo-0f6Ge5p8B-_dK2dP0eg?pwd=78ly">链接</a><br>提取码：78ly<br>1、说明<br>将单体项目改为微服务项目。<br>（1）什么时候需要使用单体项目，什么时候使用微服务？<br><strong>创业型项目</strong>：先采用单体架构，快速开发，快速试错，随着规模扩大，逐渐拆分。<br><strong>确定的大型项目</strong>：资金充足，目标明确，可以直接选择微服务架构，避免后续拆分的麻烦。<br>（2）单体项目怎么拆分为微服务？<br><strong>高内聚</strong>：每个微服务的职责要尽量单一，包含的业务互相关联度高、完整度高。<br><strong>低耦合</strong>：每个微服务的功能要相对独立，尽量减少与其他微服务的依赖。<br>拆分方法一般有两种：<br><strong>纵向拆分</strong>：按照业务模块来拆分。<br><strong>横向拆分</strong>：抽取公共服务，提高复用性。<br>（3）有两种微服务结构：<br>第一种是<strong>独立Project</strong>，每个微服务都是一个独立的Project，每个Project都有自己的pom文件，每个Project都有自己的数据库，每个Project都有自己的启动类（相当于每个微服务都是一个项目，有几个微服务就有几个项目）。<br>第二种是<strong>聚合Project</strong>，每个微服务都是一个独立的Module，每个Module都有自己的pom文件，每个Module都有自己的数据库，但是这些Module共用一个启动类（相当于一个项目中有多个微服务模块，只有一个项目）。  </p>
<p>2、拆分过程<br>单体项目地址：<a href="https://gitee.com/zuo-junyuan/single-project">点击</a><br>前端地址：<a href="https://gitee.com/zuo-junyuan/hmall-nginx">点击</a><br>已分离项目地址：<a href="https://gitee.com/zuo-junyuan/microservice-learning-notes">点击</a><br>这里我们使用纵向拆分和第二种微服务结构，将用户、商品、购物车、订单、支付等模块拆分为五个不同的微服务。<br>这里只选商品服务进行演示，其他类似：<br>（1）在项目根目录创建一个module，起名为item-service；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>（2）引入所需依赖和构建插件（从单体项目中进行拷贝）：<br>依赖：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>构建插件（可以不用引入，从单体项目中拷贝）：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）分别创建启动类（启动类上面别忘了加mapper扫描注解、controller、pojo、service、mapper包；<br>（4）将单体项目中的三个yaml配置文件拷贝过来，并修改需要修改的配置；  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 这里需要修改</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span> <span class="comment"># 这里需要修改</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span> <span class="comment"># 这里需要修改</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 这里需要修改</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;hm.db.host&#125;:3306/hm-item?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.db.pw&#125;</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hmall:</span> <span class="string">debug</span> <span class="comment"># 这里需要修改</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;logs/$&#123;spring.application.name&#125;&quot;</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">黑马商城商品服务接口文档</span> <span class="comment"># 这里需要修改</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;黑马商城商品服务接口文档&quot;</span> <span class="comment"># 这里需要修改</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.hmall.controller</span> <span class="comment"># 这里需要修改为你的controller包路径</span></span><br></pre></td></tr></table></figure>
<p>（5）将单体项目关于商品的pojo实体类、mapper、service、controller分别拷贝过来（按照这个顺序拷贝）；  </p>
<ul>
<li>pojo类：ItemDTO、OrderDetailDTO、Item、ItemPageQuery；  </li>
<li>mapper类：ItemMapper；  </li>
<li>service类：IItemService、ItemServiceImpl；<br>service实现类中需要修改<code>deductStock</code>方法中第一行<code>sqlStatement</code>值，修改为实际的路径。  </li>
<li>controller类：ItemController、SearchController。<br>这里解释controller类中的<code>@RequiredArgsConstructor</code>注解，这个注解是lombok提供的，用于自动生成一个包含所有final字段和带有@NonNull注解的字段的构造函数。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在这个示例中，Example 类使用了 <span class="doctag">@RequiredArgsConstructor</span> 注解，</span></span><br><span class="line"><span class="comment">	 * Lombok 会自动生成一个构造函数，该构造函数接受 id 和 name 两个参数，并初始化它们。</span></span><br><span class="line"><span class="comment">	 * description 字段不是 final，因此不会出现在生成的构造函数中。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>(<span class="number">1</span>, <span class="string">&quot;Example Name&quot;</span>);</span><br><span class="line">        System.out.println(example);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（6）初始化数据库；<br>（7）启动商品服务测试，可以在下面图片中启动；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  
<p>要启动多个商品服务（集群）这样启动：  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" class="">  
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png" class="">  
<p>（8）启动成功后，访问swagger接口文档<code>http://localhost:8081/doc.html</code>测试。<br>（9）在拆分购物车服务的时候，因为购物车服务需要查询商品信息，爆红的地方先不用管，将其注释，然后将service实现类中的<code>queryMyCarts</code>方法中第一行<code>UserContext.getUser()</code>注释掉，改为<code>1L</code>；<br>（10）现在我们来处理两个服务间如何调用，我们看之前单体项目，都是由前端发送http请求到后端，所以我们可以模仿单体项目发送请求的方式，使用<code>RestTemplate</code>来发送http请求，即在购物车服务使用<code>RestTemplate</code>发送http请求给商品服务；  </p>
<ul>
<li>在springboot配置类中注入<code>RestTemplate</code>，这里在启动类中注入，因为启动类也是配置类；  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.heima.cartservice.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CartServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 声明RestTemplate为Bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在购物车服务的<code>CartServiceImpl</code>类中注入<code>RestTemplate</code>；  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式一：构造器注入，前提要在类上面使用<span class="doctag">@RequiredArgsConstructor</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式二：使用<span class="doctag">@Autowired</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></li>
<li>将<code>handleCartItems</code>方法中原来查询商品的代码注释掉，改为使用<code>RestTemplate</code>；  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 商品服务的接口地址为：http://localhost:8081/items?ids=1,2,3 形式</span></span><br><span class="line">ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; responseEntity = restTemplate.exchange(</span><br><span class="line">				<span class="comment">// 请求路径，也就是商品服务的接口地址</span></span><br><span class="line">                <span class="string">&quot;http://localhost:8081/items?ids=&#123;ids&#125;&quot;</span>,</span><br><span class="line">				<span class="comment">// 请求方式</span></span><br><span class="line">                HttpMethod.GET,</span><br><span class="line">				<span class="comment">// 请求参数</span></span><br><span class="line">                <span class="literal">null</span>, </span><br><span class="line">				<span class="comment">// 这里需要传字节码Clazz.class，因为这里我们需要传List类型，我们不可能传List.class，</span></span><br><span class="line">				<span class="comment">// 所以这里使用ParameterizedTypeReference来传List类型的字节码，它是泛型的引用</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;&#125;,</span><br><span class="line">				<span class="comment">// 这个参数是个map，下面的ids对应上面接口地址中的参数名</span></span><br><span class="line">				<span class="comment">// Map.of()是jdk11新增的方法，用于构建一个map</span></span><br><span class="line">				<span class="comment">// CollUtils.join(a, b)是hutool工具包中的方法，用于将a集合，以b分隔拼接成字符串</span></span><br><span class="line">                Map.of(<span class="string">&quot;ids&quot;</span>, CollUtils.join(itemIds, <span class="string">&quot;,&quot;</span>)));</span><br><span class="line"><span class="comment">// 进行判断，如果返回结果不为2xx，则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (!responseEntity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">	<span class="comment">// 查询失败，直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;ItemDTO&gt; items = responseEntity.getBody();</span><br><span class="line"><span class="comment">// 如果items为空，则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（11）重启购物车服务进行测试；<br>（12）因为我们在实际开发中不可能直接使用<code>restTemplate</code>发送<code>http://localhost:8081</code>这种请求，并且可能会涉及集群，上面方式不可行，因此我们使用nacos注册中心，通过服务名来访问服务；<br>（13）nacos服务自己百度或者官网，这里不再讲解；<br>（14）在每个服务中引入nacos依赖；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos这个包包含了服务的注册和发现了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（15）在yml配置文件中配置nacos配置；  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">服务的名称，如商品服务就是：item-service</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">nacos:</span> </span><br><span class="line">	  <span class="attr">server-addr:</span> <span class="string">nacos地址，默认为本地：127.0.0.1:8848，注意：这里不能配localhost，必须配数字！！！</span></span><br></pre></td></tr></table></figure>
<p>（16）重新启动服务，访问nacos管理平台<code>http://127.0.0.1:8848</code>，可以查看服务已经注册到nacos注册中心了；<br>（17）SpringCloud为了注册中心定义了一个标准，也就是一个接口<code>DiscoveryClient</code>，所有注册中心都实现了这个接口；<br>（18）我们在<code>CartServiceImpl</code>类中注入<code>DiscoveryClient</code>接口；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式一：构造器注入，前提要在类上面使用<span class="doctag">@RequiredArgsConstructor</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式二：使用<span class="doctag">@Autowired</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure>
<p>（19）将之前的<code>restTemplate</code>相关代码全注释了，在查询商品信息那使用<code>discoveryClient</code>，改了之后重启测试；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据服务名获取nacos注册中心中的服务实例列表，这里实例名对应配置文件中配置的服务名，比如要调用商品服务就是item-service</span></span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;item-service&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (CollUtil.isEmpty(instances)) &#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用随机负载均衡方式来从服务实例列表中获取一个服务</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; responseEntity = restTemplate.exchange(instance.getUri() + <span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>,</span><br><span class="line">        HttpMethod.GET,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        Map.of(<span class="string">&quot;ids&quot;</span>, CollUtils.join(itemIds, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (!responseEntity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;ItemDTO&gt; items = responseEntity.getBody();</span><br><span class="line"><span class="comment">// 如果items为空，则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（20）现在修改之后，还是太繁琐了，因为只要涉及到服务间的调用都要写一遍上面的代码，不可取，我们进行优化，改用<code>OpenFeign</code>方式来简化；<br><code>OpenFeign</code>是一个声明式的http客户端，是SpringCloud在Eureka公司开源的<code>Feign</code>基础上改造而来的，<a href="https://github.com/OpenFeign/feign">官方地址</a>，其作用就是基于SpringMVC的常见注解，帮我们优雅的实现http请求的发送。<br>（21）引入<code>OpenFeign</code>和<code>OpenFeign</code>负载均衡依赖；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- OpenFeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 负载均衡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（22）在启动类上添加<code>@EnableFeignClients</code>注解，开启<code>OpenFeign</code>；<br>（23）创建api包，并在api包下创建接口，接口上添加<code>@FeignClient</code>注解，并指定服务名，然后在接口中定义方法，方法上添加<code>@RequestMapping</code>注解，并指定请求路径（我们不用管这个方法的实现，它是通过动态代理来实现的）；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span>(value = &quot;item-service&quot;)的意思是告诉OpenFeign，这个接口是调用item-service服务的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemApi</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 这里对应商品服务中的controller的接口</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/items&quot;)</span></span><br><span class="line">    List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> Collection&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（24）将上面关于<code>discoveryClient</code>的相关代码都注释，在<code>CartServiceImpl</code>类中注入<code>ItemApi</code>接口，并使用；<br>注入：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式一：构造器注入，前提要在类上面使用<span class="doctag">@RequiredArgsConstructor</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemApi itemApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入方式二：使用<span class="doctag">@Autowired</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemApi itemApi;</span><br></pre></td></tr></table></figure>
<p>使用：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接调用接口中的方法查询商品信息即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;ItemDTO&gt; items = itemApi.queryItemByIds(itemIds);</span><br><span class="line"><span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（25）因为<code>OpenFeign</code>发送请求是通过<code>Client</code>接口（专门发送http请求的接口）发的，这个接口默认实现是<code>HttpURLConnection</code>，这个jdk自带的，这个类发送请求，每次都要创建连接，利用Stream流的方式去作读写，效率比较低，我们需要优化，我们采用连接池的方式；<br><code>OpenFeign</code>对Http请求做了优雅的伪装，不过其底层发起http请求，依赖于其他的框架，这些框架可以自己选择，包括以下三种：  </p>
<ul>
<li><code>HttpURLConnection</code>：默认实现，不支持连接池；  </li>
<li><code>Apache HttpClient</code>：支持连接池；  </li>
<li><code>OKHttp</code>：支持连接池。<br>具体源码可以参考<code>FeignBlockingLoadBalancerClient</code>类中的<code>delegate</code>成员变量（开启连接池之后，可以查看该变量是否变成对应的连接池）。<br>这里选择<code>OKHttp</code>，<strong>注意</strong>：如果<code>Apache HttpClient</code>和<code>OKHttp</code>两个都使用，只会<code>HttpClient</code>生效。<br>（26）引入<code>OKHttp</code>依赖；  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- OKHttp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
（27）在yaml配置文件中开启连接池的功能，重启之后查看<code>FeignBlockingLoadBalancerClient</code>类中的<code>delegate</code>成员变量是否变成对应的连接池；  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置okhttp</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
（28）假如有多个服务都需要查询商品服务的数据，那每个服务都要在自己服务中写一遍<code>ItemApi</code>接口，太繁琐，不可行，有两种解决方式；  </li>
<li>第一种：在A服务写AApi接口，也就是说由A服务自己提供，在A服务下建3个module，分别是dto、api、service，其中api就是用来给其他服务调用的，然后其他需要调用A服务的api，直接引用dto和api的依赖坐标即可；  <img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png" class="">  </li>
<li>第二种：在总的项目下新建一个module，专门写各个服务的api，然后其他服务需要调用哪个api，直接引用这个module的依赖坐标即可。  <img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png" class="">  
这里我们使用第二种。</li>
</ul>
<p>（29）在总的项目hmall下新建一个新的module，叫<code>api-service</code>；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png" class="">  
<p>（30）在<code>api-service</code>的pom文件中引入关于<code>OpenFeign</code>相关的依赖；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- OpenFeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 负载均衡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- OKHttp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- common公共jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hm-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（31）在<code>api-service</code>中新建两个包dto和api，将原来的dto类和api接口移动到<code>api-service</code>的dto和api中（如果是复制粘贴，记得删除原来的dto和api）；<br>（32）将购物车服务的pom文件中引入<code>api-service</code>的依赖坐标；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- api-service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（33）重启发现报错，是因为购物车服务中Springboot扫描器只能扫描到它自己规定的包路径，而<code>api-service</code>包中的类是扫描不到的，所以无法注入到Spring容器中，解决办法是：在购物车服务启动类上的<code>@EnableFeignClients</code>指定扫描<code>api-service</code>接口包路径，有两种指定方式；  </p>
<ul>
<li>第一种：指定FeignApi所在包路径，<code>@EnableFeignClients(basePackages = &quot;com.heima.apiservice.api&quot;)</code>；  </li>
<li>第二种：指定FeignApi字节码，<code>@EnableFegnClients(clients = &#123;ItemApi.class&#125;)</code>（可指定多个）。</li>
</ul>
<p>（34）<code>OpenFeign</code>日志输出配置；<br><code>OpenFeign</code>只会在<code>FeignApi</code>所在包的日志级别为<code>debug</code>，才会输出日志，而且其日志级别有4级：  </p>
<ul>
<li><code>none</code>：不记录任何日志信息，这个默认值；  </li>
<li><code>basic</code>：仅记录请求的方法、url以及响应状态码和执行时间；  </li>
<li><code>headers</code>：在<code>basic</code>的基础上，额外记录了请求和响应的头信息；  </li>
<li><code>full</code>：记录所有请求和响应的明细，包括头信息、请求体、元数据。<br>由于<code>Feign</code>默认的日志级别就是<code>none</code>，所以默认看不到请求日志。<br>我们查看yaml配置文件：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.heima:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
由上面yaml配置我们可以知道，不管是哪个服务，还是<code>api-service</code>module，只要包路径以<code>com.heima</code>开头，其日志级别都是<code>debug</code>，但是为什么还没日志输出，因为<code>OpenFeign</code>默认的日志级别为<code>none</code>（不输出任何信息），我们需要修改<code>OpenFeign</code>的日志级别。<br>在<code>api-service</code>module新建config包，新建<code>FeignLogConfig</code>配置类：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignLogConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个配置类需要被Spring容器扫描到，有两种配置方式：<br>第一种配置方式（<code>局部配置</code>）：<br>在<code>api-service</code>的api某个接口中的<code>@FeignClient</code>注解中指定配置类：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, configuration = FeignLogConfig.class)</span></span><br></pre></td></tr></table></figure>
第二种配置方式（<code>全局配置</code>）：<br>我们可以在<code>@EnableFegnClients</code>注解上指定包扫描路径：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置发送请求日志输出：</span></span><br><span class="line"><span class="comment"> * 1、首先在api-service module中创建日志配置类；</span></span><br><span class="line"><span class="comment"> * 2、在下面<span class="doctag">@EnableFeignClients</span>注解中将配置类配置进去即可。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.heima.apiservice.api&quot;, defaultConfiguration = &#123;FeignLogConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.cartservice.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CartServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（35）拆分用户服务的时候，注意：<code>Address</code>类和login相关的都是属于用户服务，还需要<code>hmall.jks</code>（密钥文件）、<code>JwtProperties</code>类、<code>SecurityConfig</code>类、<code>JwtTool</code>工具类以及yaml配置文件中下面的配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">classpath:hmall.jks</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hmall123</span></span><br><span class="line">    <span class="attr">tokenTTL:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">excludePaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/search/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/users/login</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/items/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/hi</span></span><br></pre></td></tr></table></figure>
<p><code>密钥文件</code>：生成jwt的密钥，可以看到打开是乱码，是因为被加密过了，密钥也需要加密的。<br><code>JwtProperties</code>：读取密钥文件的配置信息，里面的passwprd是<code>密钥文件</code>的密码，<code>密钥文件</code>本身是需要密码的。<br>（36）拆分交易服务时，牵扯到服务间的调用，需要在<code>api-service</code>编写api接口，可以去对应的controller中查看是否有需要的接口，如果有直接复制粘贴即可；<br>（37）拆分支付服务时，也有服务间的调用，测试就在支付服务的controller中将下面代码粘贴进去测试；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询支付单&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;PayOrderVO&gt; <span class="title function_">getPayOrders</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BeanUtils.copyList(payOrderService.list(), PayOrderVO.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>（38）现在面临两个问题，问题一（现在后端有这么多服务，每个服务都有一个端口，前端如何调用？），问题二（服务间需要用到用户信息，即用户上下文<code>ThreadLocal</code>，这个服务间要怎么传递和获取？）；<br>（39）解决问题一，需要使用<code>网关</code>（查看最上面<code>一、架构体系</code>中的图）；<br><code>网关</code>：就是网络的关口，负责请求的路由、转发、身份校验。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png" class="">  
<p>（40）新建一个mudole网关服务<code>gateway-service</code>；  </p>
<ul>
<li>引入依赖；  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网关服务依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为网关服务也需要注册到nacos注册中心，所以也需要nacos的依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为网关在转发请求时也会用到负载均衡，所以也需要负载均衡的依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 负载均衡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建网关服务启动类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>新建yaml配置文件；  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment"># 这里其他服务实际上也需要配置的，默认配置是本地，所以其他服务没有配置</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由属性</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart-service</span> <span class="comment"># 路由规则id，自定义，唯一就行</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span> <span class="comment"># 路由目标微服务，对应服务名称；lb表示负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，路由条件，满足条件时路由到目标微服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span> <span class="comment"># 路径匹配，以/carts开头的请求都路由到目标微服务，可以查看controller中的路径</span></span><br><span class="line">          <span class="comment"># filters:  过滤器，对请求或响应进行处理，每个服务接收请求之前的过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,</span> <span class="string">/search/**</span> <span class="comment"># 多个映射简化方式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pay-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pay-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/pay-orders/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/users/**,</span> <span class="string">/addresses/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trade-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://trade-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/orders/**</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># default-filters: # 全局过滤器，对所有路由生效</span></span><br></pre></td></tr></table></figure>
配置文件中的<code>路由属性</code>：对应Java类型是<code>RouteDefinition</code>；<br>配置文件中的<code>路由断言</code>：Spring提供了12种基本的<code>RoutePredicateFactory</code>实现；  <img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.png" class="">  
配置文件中的<code>过滤器</code>：网关中已经提供好了33种路由过滤器，每种过滤器都具有独特的作用，具体可查看SpringCloud官网查看；<br>这33种过滤器使用方式，直接在配置文件中配置即可生效使用，例如：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart-service</span> </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span> </span><br><span class="line">          <span class="attr">predicates:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span> </span><br><span class="line">          <span class="attr">filters:</span>  <span class="string">配置单个过滤器</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">AddRequestHeader=test,</span> <span class="string">ceshi</span> <span class="string">test</span> <span class="comment"># 配置AddRequestHeader过滤器，作用是在当前请求中添加一个请求头，key是test，value是ceshi test</span></span><br></pre></td></tr></table></figure>
测试，在购物车服务controller的查询购物车列表接口中添加<code>@RequestHeader</code>注解获取请求头：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询购物车列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">queryMyCarts</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;test&quot;, required = false)</span> String test)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test = &quot;</span> + test);</span><br><span class="line">        <span class="keyword">return</span> cartService.queryMyCarts();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
访问：<code>http://localhost:8080/carts</code>，可以查看控制台输出信息；<br>上面这种使用方式针对的是某个服务进行配置，如果想配置全局过滤器，让所有服务都有该过滤器，可以这样配：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart-service</span> </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span> </span><br><span class="line">          <span class="attr">predicates:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span> </span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 全局过滤器配置</span></span><br><span class="line">	    <span class="bullet">-</span> <span class="string">AddRequestHeader=test,</span> <span class="string">ceshi</span> <span class="string">test</span></span><br><span class="line">			</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（41）现在网关服务已经建好，需要做登录校验，先分析网关请求处理流程；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/13.png" class="">  
<p>说明：前端请求到达网关，网关中的<code>HandlerMapping</code>根据请求找到匹配的路由并存入上下文，然后再把请求交给<code>WebHandler</code>处理，<code>WebHandler</code>默认实现是<code>FilteringWebHandler</code>，它会加载我们在配置文件中配置的多个过滤器，放入到集合并排序，形成过滤器链，依次执行，这个过滤器先执行<code>pre</code>方法，然后最后一个过滤器<code>NettyRoutingFilter</code>将请求转发到微服务，微服务处理完后再返回到<code>NettyRoutingFilter</code>，再倒叙执行每个过滤器中的<code>post</code>方法。<br>根据上面的过程，我们要做登录校验，需要自定义一个过滤器去做校验，而且需要将用户信息（也就是解析的token）传给各个用户信息，这个自定义的过滤器还得做排序，必须在<code>NettRoutingFilter</code>这个过滤器之前执行，因为这个过滤器的作用就是负责将请求转发到各个微服务。<br>（42）自定义过滤器；  </p>
<ul>
<li><p><code>GatewayFilter</code>接口：局部单个过滤器，作用于配置文件中任意服务指定的路由，默认不生效，要配置到配置文件中的服务路由后才生效，就比如上面提到的33种过滤器就是网关为我们提供好的，都是基于这个接口实现的；<br>要想自定义一个单个局部过滤器，并不是直接去实现<code>GatewayFilter</code>接口，而是实现<code>AbstractGatewayFilterFactory</code>工厂接口，为什么要这样做？<br>因为局部单个过滤器需要在配置文件中指定：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span>  <span class="comment">#配置单个过滤器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=test,</span> <span class="string">ceshi</span> <span class="string">test</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">default-filters:</span> <span class="comment"># 全局过滤器配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=test,</span> <span class="string">ceshi</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>
<p>它指定的格式是<code>过滤器名=参数，参数值</code>，可以发现<code>过滤器名</code>是固定的，但是<code>参数</code>有可能不同，所以我们需要用<code>过滤器工厂</code>根据参数去帮我们动态生成每一个过滤器。<br>这里还特别需要注意一点，就是给过滤器起名的时候，<strong>必须</strong>遵循<code>过滤器名</code>+<code>GatewayFilterFactory</code>后缀。<br><strong>无参过滤器</strong>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非全局无参过滤器，泛型里就是Object，哪个服务配置了这个过滤器，哪个服务接收请求之前才会执行，</span></span><br><span class="line"><span class="comment"> * 注意所有过滤器名字必须以‘xxx’ + ‘GatewayFilterFactory’格式来命名，然后配置里面就使用‘xxx’来配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoParameterGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Object config)</span> &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 第一种：这里本来是要new GatewayFilter的，但是我们还需要排序，所以使用到了装饰类（装饰模式）；</span></span><br><span class="line"><span class="comment">		 * 第二种：也可以自己在下面new一个内部类，去分别实现GatewayFilter和Ordered接口，再在这里new</span></span><br><span class="line"><span class="comment">		 * 一般都会使用第一种方式</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedGatewayFilter</span>(<span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在配置文件中配置，注意要使用别忘了放开注解！  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span>  <span class="comment">#配置单个过滤器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">NoParameter</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">default-filters:</span> <span class="comment"># 全局过滤器配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">NoParameter</span></span><br></pre></td></tr></table></figure>
<p><strong>有参过滤器</strong>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;ParameterGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedGatewayFilter</span>(<span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">                <span class="comment">// 获取配置参数</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">parameOne</span> <span class="operator">=</span> config.getParameOne();</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义配置属性，成员变量名称很重要，下面会用到</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="comment">// 参数1</span></span><br><span class="line">        <span class="keyword">private</span> String parameOne;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数2</span></span><br><span class="line">        <span class="keyword">private</span> String parameTwo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数3</span></span><br><span class="line">        <span class="keyword">private</span> String parameThree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量名称依次返回，顺序很重，将来读取参数时需要按顺序获取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;parameOne&quot;</span>, <span class="string">&quot;parameTwo&quot;</span>, <span class="string">&quot;parameThree&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Config字节码传递给父类，父类负责帮我们读取yml配置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParameterGatewayFilterFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据上面配置的顺序依次对应</span></span><br><span class="line"><span class="attr">filters:</span>  <span class="comment">#配置单个过滤器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Parameter=&quot;对应parameOne&quot;,&quot;对应parameTwo&quot;,&quot;对应parameThree&quot;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">default-filters:</span> <span class="comment"># 全局过滤器配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Parameter=&quot;对应parameOne&quot;,&quot;对应parameTwo&quot;,&quot;对应parameThree&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>GlobalFilter</code>接口：全局过滤器，作用范围是所有路由，只要新建并且声明后自动生效，不需要在配置文件指定。<br>自定义一个类去实现<code>GlobalFilter</code>接口，注意，这里还需要实现另一个接口<code>Ordered</code>，这个接口是用来排序的：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局过滤器必须实现GlobalFilter接口，每个微服务接收请求之前都会执行，Ordered接口是为了排序，也必须实现</span></span><br><span class="line"><span class="comment"> * 要生效就把过滤器注入到容器，放开下面注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; ServerWebExchange exchange 请求上下文，包含整个过滤器链内共享数据，例如：request、response等</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; GatewayFilterChain chain 过滤器链，当前过滤器执行完后，要调用过滤器链中的下一个过滤器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回的值越小，优先级越高</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（43）现在开始做网关登录校验；  </p>
<ul>
<li><p>需要将<code>hmall.jks</code>（密钥文件）、<code>JwtProperties</code>类、<code>AuthProperties</code>类（设置用户白名单的）、<code>SecurityConfig</code>类、<code>JwtTool</code>工具类以及下面配置文件中的配置复制粘贴过来；  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">classpath:hmall.jks</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hmall123</span></span><br><span class="line">    <span class="attr">tokenTTL:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="comment"># 这里设置的白名单，表示任何人都可以访问，对应AuthProperties类</span></span><br><span class="line">    <span class="attr">excludePaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/search/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/users/login</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/items/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/hi</span></span><br></pre></td></tr></table></figure>
<p>需要注意<code>AuthProperties</code>类会报错，是因为Spring容器没有扫描到它，它不是一个Spring的管理Bean，可以只用<code>@Configuration</code>或者<code>@Component</code>注解将它注入Spring容器成为Bean。  </p>
</li>
<li><p>新建自定义登录校验过滤器；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthProperties authProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtTool jwtTool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取request</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">// 2. 判断是否需要做登录拦截</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isExclude(request.getPath().toString())) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 获取token</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; authorizations = request.getHeaders().get(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (authorizations != <span class="literal">null</span> &amp;&amp; !authorizations.isEmpty()) &#123;</span><br><span class="line">            token = authorizations.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 校验并解析token</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 解释下这里为什么要捕获异常</span></span><br><span class="line"><span class="comment">		 * 因为parseToken()方法如果出现异常会把异常抛出，这里我们不希望它将异常抛出，</span></span><br><span class="line"><span class="comment">		 * 我们希望设置一个状态码，让前端知道是因为没有权限，是因为解析token失败，</span></span><br><span class="line"><span class="comment">		 * 所以这里我们要捕获这个方法中出现的所有异常，然后重新设置响应码。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = jwtTool.parseToken(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnauthorizedException e) &#123;</span><br><span class="line">            <span class="comment">// 拦截，设置响应状态码为401</span></span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 保存并传递用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> userId.toString();</span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">swe</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">                .request(builder -&gt; builder.header(<span class="string">&quot;user-info&quot;</span>, userInfo))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(swe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExclude</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String pathPattern : authProperties.getExcludePaths()) &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 判断校验这里说明：</span></span><br><span class="line"><span class="comment">			 * 这里不能使用普通的字符串校验，因为这里的路径例如是&quot;/search/**&quot;格式，</span></span><br><span class="line"><span class="comment">			 * 如果使用字符串校验，那请求&quot;/searchlist/**&quot;这种也会被校验成功，不可行，</span></span><br><span class="line"><span class="comment">			 * 我们这里要用到特殊的校验路径的方式，spring给我们提供的校验工具AntPathMatcher</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(pathPattern, path)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>（44）现在我们已经完成了网关登录校验，但是还有一点需要做处理，就是网关登录校验成功之后，会把解析好的用户信息转发给其他服务，那这些微服务要怎么获取这个用户信息呢？所以我们需要自定义一个拦截器，专门获取用户信息，因为每个服务都会用到这个拦截器，所以我们在公共jar包中去新建；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在公共包中新建，因为能执行到这里，说明已经校验通过了，所以这个拦截器只做一件事：获取用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取登陆用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-info&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 判断是否获取了用户信息，如果有，存入ThreadLocal</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(userInfo)) &#123;</span><br><span class="line">            UserContext.setUser(Long.valueOf(userInfo));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 3. 清除ThreadLocal中的用户信息</span></span><br><span class="line">        UserContext.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义的拦截器需要添加到MVC配置中，再新建一个SpringMVC配置类，将这个拦截器配置进去；  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里用到了<span class="doctag">@ConditionalOnClass</span>注解，需要说明：</span></span><br><span class="line"><span class="comment"> * 因为不止微服务用到了公共jar包，可能其他不需要使用到这个拦截器的jar包也使用到了公共jar包，</span></span><br><span class="line"><span class="comment"> * 以防万一，我们可以使用条件注解<span class="doctag">@ConditionalOnClass</span>，当类路径下存在DispatcherServlet类时，</span></span><br><span class="line"><span class="comment"> * 才会加载这个配置类，否则不加载，这样就不会影响其他jar包了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">UserInfoInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现这个拦截器是在公共包中的，其他各个微服务是扫描不到的，所以根据Springboot自动配置原理，我们需要在<code>resources</code>包下的<code>META-INF/spring.factories</code>文件中配置这个拦截器：  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span>.EnableAutoConfiguration=\</span><br><span class="line">  com<span class="selector-class">.hmall</span><span class="selector-class">.common</span><span class="selector-class">.config</span><span class="selector-class">.MyBatisConfig</span>,\</span><br><span class="line">  com<span class="selector-class">.hmall</span><span class="selector-class">.common</span><span class="selector-class">.config</span><span class="selector-class">.MvcConfig</span>,\</span><br><span class="line">  com<span class="selector-class">.hmall</span><span class="selector-class">.common</span><span class="selector-class">.config</span>.JsonConfig</span><br></pre></td></tr></table></figure>
<p>（45）服务间的调用，也需要传递解析token出来的用户信息，而服务间的调用是通过<code>OpenFeign</code>来调用的，我们需要用到<code>OpenFeign</code>中提供的拦截器<code>RequestInterceptor</code>接口（所有由<code>OpenFeign</code>发起的请求都会先调用这个拦截器处理请求）；<br>我们在<code>api-service</code>中的config包下，新建一个配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">userInfoRequestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这个方法中的参数是requestTemplate，它提供header方法供我们修改请求头</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> requestTemplate</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">                <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserContext.getUser();</span><br><span class="line">                <span class="keyword">if</span> (userId != <span class="literal">null</span>) &#123;</span><br><span class="line">                    requestTemplate.header(<span class="string">&quot;user-info&quot;</span>, userId.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为这个<code>api-service</code>中的类是无法被Spring容器扫描到的，又因为它是个配置类，所以我们需要在每个使用了<code>OpenFeign</code>的服务的启动类上面的<code>@EnableFeignClients</code>注解中添加这个配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.heima.apiservice.api&quot;, defaultConfiguration = &#123;FeignLogConfig.class, FeignConfig.class&#125;)</span></span><br></pre></td></tr></table></figure>
<p>注意：记得将之前被注释的<code>UserContext.getUser()</code>改回来。<br>（46）现在来讲配置文件，如果需要将配置文件管理起来，可以使用<code>配置中心</code>，nacos自带了配置中心；<br>案例：我们继续上面的项目，现在将一些共享的配置添加到nacos配置中心去，包括：jdbc、MybatisPlus、日志、swagger、OpenFeign等配置。<br>访问：<code>localhost:8848</code>进入nacos后台管理系统，如果没有启动nacos就启动（目前启动的nacos是单机模式，启动命令：<code>startup.cmd -m standalone</code>）。<br>进入配置管理，新建三个配置文件：<code>shared-jdbc.yaml</code>、<code>shared-log.yaml</code>、<code>shared-swagger.yaml</code>，表单中的分组为默认<code>DEFAULT_GROUP</code>，描述自定义，格式为<code>yaml</code>，其他不用填，如下图所示；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/14.png" class="">  
<p><code>shared-jdbc.yaml</code>：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 这里读取项目配置文件中的hm.db.host属性，如果没有默认为127.0.0.1，其他同理</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;hm.db.host:127.0.0.1&#125;:$&#123;hm.db.port:3306&#125;/$&#123;hm.db.database&#125;?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;hm.db.un:root&#125;</span> <span class="comment"># 这里读取项目配置文件中的hm.db.un属性，如果没有默认为root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.db.pw:root&#125;</span> <span class="comment"># 这里读取项目配置文件中的hm.db.pw属性，如果没有默认为root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<p><code>shared-log.yaml</code>：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.heima:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;logs/$&#123;spring.application.name&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>shared-swagger.yaml</code>：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">$&#123;hm.swagger.title:黑马商城接口文档&#125;</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">$&#123;hm.swagger.des:黑马商城接口文档&#125;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">$&#123;hm.swagger.package&#125;</span> <span class="comment"># 如果没有设置默认值的，必须在项目配置文件中配置！</span></span><br></pre></td></tr></table></figure>
<p>然后将项目中原来的相对应的配置删除（也可以备份一份再删除），修改之后的配置文件内容如下：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置okhttp</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 下面配置对应配置中心的共享配置</span></span><br><span class="line"><span class="comment"># 配置数据库</span></span><br><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">hm-cart</span></span><br><span class="line">  <span class="comment"># 配置swagger</span></span><br><span class="line">  <span class="attr">swagger:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">黑马商城购物车服务接口文档</span></span><br><span class="line">    <span class="attr">des:</span> <span class="string">黑马商城购物车服务接口文档</span></span><br><span class="line">    <span class="attr">package:</span> <span class="string">com.heima.cartservice.controller</span></span><br></pre></td></tr></table></figure>
<p>然后这里先讲下Springboot项目的启动流程，它是先加载<code>application.yaml</code>配置文件，然后再进行<code>ApplicationContext</code>的初始化。而现在我们用的是SpringCloud，它启动之后，会先拉取nacos配置中心的配置信息，然后进行SpringCloud的上下文初始化，才会进行Springboot的启动流程，但是它先拉取nacos配置中心，这个nacos配置中心的地址是在项目配置文件<code>application.yaml</code>中的，它不知道配置中心的地址怎么拉取呢？<br>我们可以引入依赖，然后在项目中新建一个配置文件<code>bootstrap.yaml</code>，将nacos配置中心的地址以及相关的信息配置进去，有了这个配置文件，SpringCloud启动之后，就会先读取这个配置文件，再拉取配置中心的配置。<br>依赖：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos配置管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取bootstrap文件依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">`bootstrap.yaml`：  </span><br><span class="line">``` yaml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cart-service # 对应下面（47）图片中的spring.application.name</span><br><span class="line">  profiles:</span><br><span class="line">    active: local # 对应下面（47）图片中的spring.active.profiles</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 127.0.0.1:8848 # nacos服务如果是本地，可以不配，默认已经是本地了</span><br><span class="line">      config:</span><br><span class="line">        file-extension: yaml # 配置nacos配置管理中的配置文件的后缀名，对应下面（47）图片中的file-extension</span><br><span class="line">        # 配置nacos配置管理中的配置文件</span><br><span class="line">        shared-configs:</span><br><span class="line">          - data-id: shared-jdbc.yaml</span><br><span class="line">          - data-id: shared-log.yaml</span><br><span class="line">          - data-id: shared-swagger.yaml</span><br></pre></td></tr></table></figure>
<p>（47）现在我们来将<code>配置热更新</code>（当修改配置文件中的配置时，微服务无需重启即可使配置生效）；<br>必要的条件有两个：<br>条件一：nacos中要有一个与微服务名有关的配置文件：  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.png" class="">  
<p><code>file-extension</code>项可以省略。<br>条件二：微服务中要以特定的方式读取需要热更新的配置属性：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取方式一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hm.cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer maxItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取方式二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProperties</span> &#123;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;hm.cart.maxItems&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxItems;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们修改项目，项目有个业务是购物车的限定数量是写死在代码中的，我们需要将它改为热更新。<br>我们先新建一个读取配置的类，就是上面条件二中的类，然后我们修改<code>CartServiceImpl</code>类的<code>checkCartsFull</code>方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CartProperties cartProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCartsFull</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> lambdaQuery().eq(Cart::getUserId, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= cartProperties.getMaxItems()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(StrUtil.format(<span class="string">&quot;用户购物车课程不能超过&#123;&#125;&quot;</span>, cartProperties.getMaxItems()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们去配置中心新建一个配置<code>cart-service.yaml</code>（这里的起名要符合上面条件一中的要求）：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span> </span><br><span class="line">  <span class="attr">cart:</span> </span><br><span class="line">    <span class="attr">maxItems:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>（48）<code>动态路由配置</code>，现在微服务的配置都是写死在网关服务中的，那么要想实现动态路由配置该怎么办呢？<br>要实现<code>动态路由</code>，首先要将路由配置保存到nacos，当nacos中的路由配置变更时，推送最新的配置到网关服务，实时更新网关中的路由信息。<br>我们需要做两件事情：<code>监听nacos配置变更的消息</code>和<code>当配置变更时，将最新的路由信息更新到网关路由表</code>，这两件事情可以参考nacos官网<code>https://nacos.io</code>jdk中监听配置。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面是官网提供的示例，这里是讲解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// nacos配置中心地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">serverAddr</span> <span class="operator">=</span> <span class="string">&quot;&#123;serverAddr&#125;&quot;</span>;</span><br><span class="line"><span class="comment">// 要加载的配置文件id</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> <span class="string">&quot;&#123;dataId&#125;&quot;</span>;</span><br><span class="line"><span class="comment">// 要加载的配置文件group</span></span><br><span class="line"><span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> <span class="string">&quot;&#123;group&#125;&quot;</span>;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.put(<span class="string">&quot;serverAddr&quot;</span>, serverAddr);</span><br><span class="line"><span class="comment">// 获取路由配置信息</span></span><br><span class="line"><span class="type">ConfigService</span> <span class="variable">configService</span> <span class="operator">=</span> NacosFactory.createConfigService(properties);</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> configService.getConfig(dataId, group, <span class="number">5000</span>);</span><br><span class="line">System.out.println(content);</span><br><span class="line"><span class="comment">// 添加监听器</span></span><br><span class="line">configService.addListener(dataId, group, <span class="keyword">new</span> <span class="title class_">Listener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfigInfo</span><span class="params">(String configInfo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;recieve1:&quot;</span> + configInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面我们可以看到，它先要获取一次路由信息到内存，再进行监听</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>上面的示例太麻烦了，我们不用按照上面示例来，因为我们之前引入了<code>spring-cloud-starter-alibaba-nacos-config</code>nacos配置管理的依赖，它帮我们自动配置了，我们只需要使用它提供的<code>NacosConfigManager</code>接口即可。<br>我们先在网关服务中引入依赖：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos配置管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取bootstrap文件依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们新建一个<code>bootstrap.yaml</code>配置文件：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">nacos:</span> </span><br><span class="line">	  <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">	  <span class="attr">config:</span>  </span><br><span class="line">	    <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">		<span class="attr">shared-configs:</span> </span><br><span class="line">		  <span class="bullet">-</span> <span class="string">data-id</span> <span class="string">shared-log.yaml</span></span><br></pre></td></tr></table></figure>
<p>然后将网关服务原来的<code>application.yaml</code>配置文件修改为：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">classpath:hmall.jks</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hmall123</span></span><br><span class="line">    <span class="attr">tokenTTL:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">excludePaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/search/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/users/login</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/items/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/hi</span></span><br></pre></td></tr></table></figure>
<p>我们在网关服务新建一个包routers，然后新建一个类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicRouteLoader</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> NacosConfigManager nacosConfigManager;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RouteDefinitionWriter writer;</span><br><span class="line">	<span class="comment">// 对应配置中心中的配置文件名，这里为什么要json文件，因为json文件解析比较容易，yaml文件解析比较麻烦</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> <span class="string">&quot;gateway-routes.json&quot;</span>;</span><br><span class="line">	<span class="comment">// 对应配置中心的配置文件分组</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line">	<span class="comment">// 保存需要删除的routerIds，这里使用Set集合，因为Set集合不会重复</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; routerIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostConstruct</span> <span class="comment">// 在DynamicRouteLoader的bean初始化之后执行</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRouteConfigListener</span><span class="params">()</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">		<span class="comment">// 1. 项目启动时，先拉取一次配置，并且添加配置监听器</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">configInfo</span> <span class="operator">=</span> nacosConfigManager.getConfigService()</span><br><span class="line">						.getConfigAndSignListener(dataId, group,<span class="number">5000</span>, <span class="keyword">new</span> <span class="title class_">Listener</span>() &#123;</span><br><span class="line">							<span class="meta">@Override</span></span><br><span class="line">							<span class="keyword">public</span> Executor <span class="title function_">getExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">								<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">							&#125;</span><br><span class="line">							</span><br><span class="line">							<span class="meta">@Override</span></span><br><span class="line">							<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfigInfo</span><span class="params">(String configInfo)</span> &#123;</span><br><span class="line">								<span class="comment">// 2. 监听到配置变更，需要去更新路由表</span></span><br><span class="line">								updateConfigInfo(configInfo);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;);</span><br><span class="line">		<span class="comment">// 3. 第一次读取到配置，也需要更新到路由表</span></span><br><span class="line">		updateConfigInfo(configInfo);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新路由表，监听到路由信息后，需要用到RouteDefinitionWriter接口类更新路由表</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * public interface RouteDefinitionWriter &#123;</span></span><br><span class="line"><span class="comment">	 *   </span></span><br><span class="line"><span class="comment">	 *   // 更新路由到路由表，如果路由id重复，则会覆盖旧的路由</span></span><br><span class="line"><span class="comment">	 *   Mono&lt;Void&gt; save(Mono&lt;RouteDefinition&gt; route);</span></span><br><span class="line"><span class="comment">	 *   </span></span><br><span class="line"><span class="comment">	 *   // 根据路由id删除路由表中的路由</span></span><br><span class="line"><span class="comment">	 *   Mono&lt;Void&gt; delete(Mono&lt;String&gt; routeId);</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateConfigInfo</span><span class="params">(String configInfo)</span> &#123;</span><br><span class="line">		<span class="comment">// 1. 解析配置信息，转为RouteDefinition</span></span><br><span class="line">		List&lt;RouteDefinition&gt; routeDefinitions = JSONUtil.toList(configInfo, RouteDefinition.class);</span><br><span class="line">		<span class="comment">// 2. 删除旧的路由表</span></span><br><span class="line">		<span class="keyword">for</span> (String routeId : routeIds) &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * delete方法需要用到Mono对象，这里Mono.just(routeId)表示将routeId包装成Mono对象</span></span><br><span class="line"><span class="comment">			 * .subscribe()表示执行删除方法，如果没有.subscribe()方法，是不会执行删除方法的</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			writer.delete(Mono.just(routeId)).subscribe();</span><br><span class="line">		&#125;</span><br><span class="line">		routeIds.clear();</span><br><span class="line">		<span class="comment">// 3. 添加新的路由表</span></span><br><span class="line">		<span class="keyword">for</span> (RouteDefinition routeDefinition : routeDefinitions) &#123;</span><br><span class="line">			writer.save(Mono.just(routeDefinition)).subscribe();</span><br><span class="line">			<span class="comment">// 4. 保存路由id，方便下次删除</span></span><br><span class="line">			routerIds.add(routeDefinition.getId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启服务，因为现在网关服务中是没有任何其他微服务的地址信息的（路由信息），所以没办法做任何请求。<br>我们访问nacos配置中心管理后台，在配置管理中新建一个json文件<code>gateway-routes.json</code>（名字要与上面代码中的保持一致）：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span>    	<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;item&quot;</span><span class="punctuation">,</span>    	<span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lb://item-service&quot;</span><span class="punctuation">,</span>    	<span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span>    	    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Path&quot;</span><span class="punctuation">,</span>    	    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    	        <span class="attr">&quot;_genkey_0&quot;</span><span class="punctuation">:</span><span class="string">&quot;/items/**&quot;</span><span class="punctuation">,</span>    	         <span class="attr">&quot;_genkey_1&quot;</span><span class="punctuation">:</span><span class="string">&quot;/search/**&quot;</span>    	    <span class="punctuation">&#125;</span>    	<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span>    	<span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span>	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>按照上面的格式将其他服务信息也加进去，不用重启网关服务，直接查看项目控制台或者直接发送任何请求都可以（如果还是访问不了，需要等待一段时间，因为这个需要等待一会才能生效）。  </p>
<br/>


<hr>
<br/>



<h1 id="四、微服务架构体系"><a href="#四、微服务架构体系" class="headerlink" title="四、微服务架构体系"></a>四、微服务架构体系</h1><img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/16.png" class="">  
<p>这个图就是微服务的架构体系图。<br>1、服务之间通过<code>OpenFeign</code>来互相调用；<br>2、各个微服务将自己信息注册到<code>Nacos</code>注册中心进行来进行服务治理；<br>3、前端发送请求给<code>Gateway</code>（网关），网关进行身份验证和请求路由转发；<br>4、可以通过<code>Nacos</code>来进行动态地配置管理。  </p>
<br/>


<hr>
<br/>



<h1 id="五、其他问题"><a href="#五、其他问题" class="headerlink" title="五、其他问题"></a>五、其他问题</h1><h3 id="1、雪崩问题"><a href="#1、雪崩问题" class="headerlink" title="1、雪崩问题"></a>1、雪崩问题</h3><p>1、什么是雪崩？<br>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用。   </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/17.png" class="">  
<p>比如说，<code>商品服务</code>处理时间比较长（或者故障了），有个请求发送给网关，网关转发给<code>购物车服务</code>，<code>购物车服务</code>调用了<code>服务B</code>，这是正常的，然后又有请求转给<code>购物车服务</code>，<code>购物车服务</code>调用了<code>商品服务</code>（处理慢或者故障了），需要等很长时间，如果此时突然来了大量请求都需要<code>购物车服务</code>调用<code>商品服务</code>（高并发场景下），这些请求都需要等很长时间，而<code>tomcat</code>资源是有限的，这些有限的资源被这些请求占用着，后面再来请求处理别的就处理不了了，而其他需要调用<code>商品服务</code>的服务也会受到影响调用不了<code>商品服务</code>，整个微服务就受到影响。<br>（1）那为什么这个微服务的问题要叫雪崩呢？<br>因为这个微服务的问题和雪崩一样，雪崩是因为一点声音或者一片小雪花，就能产生雪崩。<br>（2）雪崩问题产生的原因是什么？<br>微服务互相调用，服务提供者出现故障或阻塞；<br>服务调用者没有做好异常处理，导致自身故障；<br>调用链中的所有服务级联失败，导致整个集群故障。<br>（3）解决问题的思路有哪些？<br>尽量避免服务出现故障或阻塞；<br>保证代码的健壮性；<br>保证网络畅通；<br>能应对较高的并发请求。  </p>
<p>2、解决雪崩问题的方案<br><strong>第一个方案：请求限流</strong>（属于服务保护方案）<br>请求限流：限制访问微服务的请求的并发量，避免服务因流量激增出现故障，如下图所示。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/18.png" class="">  

<p><strong>第二个方案：线程隔离</strong>（属于服务保护方案）<br>线程隔离（舱壁模式）：模拟船舱隔板的防水原理，通过限定每个业务能使用的线程数量而将故障业务隔离，避免故障扩散。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/19.png" class="">  

<p><strong>第三个方案：服务熔断</strong>（属于服务保护方案）<br>服务熔断：由断路器统计请求的异常比例或慢调用比例，如果超出阈值则会熔断该业务，则拦截该接口的请求。<br>背景由来：在使用线程隔离基础上，如下图：  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.png" class="">  
<p>假如<code>服务A</code>中有两个业务，分别需要调用<code>服务B</code>和<code>服务C</code>，我们将<code>服务A</code>中的业务分别设置线程数，<code>业务1</code>设置线程数为10，<code>业务2</code>设置线程数为4，当一个请求到<code>服务A</code>的<code>业务1</code>，它先领取一个线程，在去调用<code>服务B</code>，另一个请求到<code>服务A</code>的<code>业务2</code>，先领取线程再调用<code>服务C</code>，这就是线程隔离。<br>此时<code>服务C</code>故障了，来了四个请求都处理<code>服务A</code>的<code>业务2</code>，明知<code>服务C</code>故障，还要去调用<code>服务C</code>，就浪费资源了，所以这里需要<code>服务熔断</code>，当得知<code>服务C</code>故障了，就将其断开（之前遇到的在登录校验业务的地方打上断点或者在服务之间打上断点就请求不了的问题就是这个）。<br>然后这里熔断期间，所有请求快速失败，全部走<code>fallback</code>方法（在<code>服务A</code>提前写好），返回友好的提示，而不会等待<code>服务C</code>的响应，从而避免了故障的传播。  </p>
<p>3、服务保护技术  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/21.png" class="">  
<p>这里选用<code>Sentinel</code>来讲解。  </p>
<p>4、<code>Sentinel</code><br><code>Sentinel</code>是阿里巴巴开源的一款微服务流量控制组件，<a href="https://sentinelguard.io/zh-cn/index.html">官网地址</a>。<br>（1）先从官网找到<code>启动 Sentinel 控制台</code>项，下载jar包并启动，启动命令官网中有。<br>（2）启动成功后，访问<code>http://localhost:8080</code>，可以看到<code>Sentinel</code>控制台界面。<br>（3）在<code>服务A</code>中引入<code>Sentinel</code>依赖：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个依赖中已经包含了官网中让引入的sentinel-transport-simple-http依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）在<code>服务A</code>的<code>application.yml</code>中配置<code>Sentinel</code>：  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span> </span><br><span class="line">	    <span class="attr">dashboard:</span> <span class="string">localhost:8090</span> <span class="comment"># 指定sentinel控制台地址</span></span><br></pre></td></tr></table></figure>
<p>（5）重启<code>服务A</code>，然后访问<code>服务A</code>的任意接口，<code>sentinel</code>控制台就会显示<code>服务A</code>接口的信息（注意这里得访问服务接口之后，控制台才会有信息）。  </p>
<p>5、介绍<code>Sentinel</code>控制台<br>（1）簇点链路（就是单机调用链路）<br>是一次请求进入服务后经过的每一个被Sentinel监控的资源链，默认Sentinel会监控SpringMVC的每一个http接口（即controller接口）。<br>因为默认监控的是controller接口，有时controller接口会采用restful风格，也就是说一个controller接口<code>/carts</code>可能存在请求方式不同（<code>get</code>、<code>post</code>、<code>delete</code>），所以我们需要设置用用请求方式来区分。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">sentinel:</span> </span><br><span class="line">	  <span class="attr">http-method-specify:</span> <span class="literal">true</span> <span class="comment"># 开启http请求方式区分</span></span><br></pre></td></tr></table></figure>
<p>我们查看我们的项目，购物车服务中的<code>/carts</code>接口，它里面调用了商品服务中的<code>/items</code>接口，假设<code>/carts</code>接口中还调用了<code>服务B</code>，然后商品服务的<code>/items</code>接口性能低或者宕机了，为了保护项目，我们需要设置<code>请求限流</code>、<code>线程隔离</code>和<code>服务熔断</code>。  </p>
<ul>
<li><p>在簇点链路中，设置<code>请求限流</code>：<br>在簇点链路中，我们选择<code>GET/carts</code>接口，在后面点击<code>流控</code>按钮，在弹出的窗口中不用去修改任何东西，只用修改那个阈值，这里介绍下<code>QPS</code>（每秒钟请求的数量），比如填了6，代表这个接口每秒钟只能请求6个。<br>测试可以使用<code>Jmeter</code>测试工具（这个测试工具和使用方法在已分离的项目git地址jmeter目录中）。  </p>
</li>
<li><p>在簇点链路中，设置<code>线程隔离</code>：<br>同<code>请求隔离</code>一样，也是点击<code>流控</code>按钮，这次我们选择阈值类型为<code>并发线程数</code>，例如<code>GET/carts</code>这个接口的<code>并发线程数</code>设置为5，<code>QPS</code>设置为6，说明这个接口每秒钟可以请求5*6&#x3D;30个请求，这样设置了之后，假如有大量请求去请求<code>GET/carts</code>接口，都不会影响购物车服务的其他接口性能；如果不设置，就会影响到购物车服务的其他接口性能。<br>这里我们还需要完善一点，就是如果大量请求都去请求<code>GET/carts</code>这个接口，虽然此时购物车服务的其它接口不会被影响，但是<code>GET/carts</code>这个接口的资源被占满之后就会直接报错，不是很友好，我们需要给<code>GET/carts</code>这个接口添加<code>fallback</code>方法，这样一来当<code>GET/carts</code>这个接口的请求超过30个时，就会触发<code>fallback</code>方法，返回友好提示，相当于就是只对<code>GET/carts</code>这个接口中调用商品服务接口这部分做<code>线程隔离</code>，不对整个<code>GET/carts</code>接口做<code>线程隔离</code>，但是我们发现在<code>Sentinel控制台</code>中，只有SpringMVC的请求接口是簇点链路，可以设置<code>线程隔离</code>，所以我们需要将<code>OpenFeign</code>接口也设置成簇点链路资源，让它可以设置<code>线程隔离</code>。<br>我们需要在购物车服务的配置文件中开启配置（<code>服务A</code>调用了<code>服务B</code>，就在<code>服务A</code>配置）：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span> </span><br><span class="line">  <span class="attr">sentinel:</span> </span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign的sentinel支持</span></span><br></pre></td></tr></table></figure>
<p>因为我们需要写的商品服务的<code>fallback</code>方法，所以我们需要在<code>api-service</code>下新建ballback包，并新建一个类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现的方式有两种：</span></span><br><span class="line"><span class="comment"> * 1、实现FallbackClass接口，无法对远程调用的异常做处理；</span></span><br><span class="line"><span class="comment"> * 2、实现FallbackFactory接口，可以对远程调用的异常做处理，一般都选择这种方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因为是针对ItemApi接口写的fallback方法，所以泛型中是ItemApi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemApiFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ItemApi&gt; &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ItemApi <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemApi</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(Collection&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">				<span class="comment">// 查询商品失败，返回空集合</span></span><br><span class="line">				<span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductStock</span><span class="params">(List&lt;OrderDetailDTO&gt; items)</span> &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(cause);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在配置类中，将<code>ItemApiFallbackFactory</code>类注册为bean：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ItemApiFallbackFactory <span class="title function_">itemApiFallbackFactory</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemApiFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将<code>ItemApi</code>接口的<code>@FeignClient</code>注解中添加<code>fallbackFactory</code>属性，并指向<code>ItemApiFallbackFactory</code>类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, fallbackFactory = ItemApiFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemApi</span> &#123;</span><br><span class="line">	<span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，当商品服务接口调用失败时，就会触发<code>fallback</code>方法，返回空集合，我们也可以去<code>Sentinel控制台</code>对<code>GET/carts</code>这个接口中调用商品服务接口这部分进行配置了。  </p>
</li>
<li><p>在簇点链路中，设置<code>服务熔断</code>：<br>思路是由<code>断路器</code>统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务，即拦截访问该服务的一切请求，而当服务恢复时，<code>断路器</code>会放行访问该服务的请求。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/22.png" class="">  
<p>上图说明：<br>（1）<code>断路器</code>有三种状态，分别是：<code>Closed</code>、<code>Open</code>、<code>Half-Open</code>；<br>（2）<code>断路器</code>默认状态是<code>Closed</code>，当服务调用失败比例超过阈值时，<code>断路器</code>会变成<code>Open</code>状态，此时所有请求都会被拦截，会执行<code>fallback</code>方法；<br>（3）当<code>断路器</code>变成<code>Open</code>状态后，经过一段时间，<code>断路器</code>会变成<code>Half-Open</code>状态，此时它会尝试放行一个请求，如果这个请求调用成功，则<code>断路器</code>会变成<code>Closed</code>状态，如果这个请求调用失败，则<code>断路器</code>会变成<code>Open</code>状态。<br>在簇点链路中，选择某个接口，点击<code>熔断</code>按钮，在弹出的窗口中，最大RT是最大响应时间，比如填了200ms，然后熔断策略选择了慢调用比例，代表如果请求这个接口超过了200ms，就说明这个接口是慢的，然后比例阈值设置了0.5，表示50%，也就是说如果这个接口请求一共请求了10次，有5次是慢的，就达到了阈值。最小请求数就是这10次，统计一次的意思。统计时长设置1000ms，就是每1秒统计10次，如果这10次中有50%请求超过了200ms，就说明它是慢调用比例。</p>
</li>
</ul>
<h3 id="2、分布式事务"><a href="#2、分布式事务" class="headerlink" title="2、分布式事务"></a>2、分布式事务</h3><p>1、什么是分布式事务？<br>假设有个项目，里面有<code>订单服务</code>、<code>购物车服务</code>、<code>库存服务</code>。<br>在单体项目中，我们创建订单之后，需要清理购物车，然后还要扣减商品库存，因为是在单体项目里面，这三个业务都在一个事务中，满足事务的ACID原则。<br>但是在微服务项目中，这三个业务分别在三个不同的服务中，我们创建订单之后，<code>订单服务</code>提交到<code>订单服务</code>的数据库，然后调用<code>购物车服务</code>，执行清理购物车操作，此时操作的数据库是<code>购物车服务</code>的数据库，不是<code>订单服务</code>的数据库，然后调用<code>库存服务</code>执行扣减商品库存，如果此时失败了，是回滚不了的（为什么回滚不了？<code>订单服务</code>分别调用了<code>购物车服务</code>和<code>库存服务</code>，<code>库存服务</code>发生了异常，<code>订单服务</code>是可以回滚的，因为<code>订单服务</code>和<code>库存服务</code>有关联，但是<code>购物车服务</code>和<code>库存服务</code>是没有关联的，所以<code>购物车服务</code>回滚不了），不满足事务的ACID原则。<br>在分布式系统中，如果一个业务需要多个服务合作完成，而且每一个服务都有事务，多个事务必须同时成功或失败，这样的事务就是<code>分布式事务</code>。其中的每个服务的事务就是一个<code>分支事务</code>，整个业务称为<code>全局事务</code>。<br>要想解决分布式事务问题，我们可以使用<code>Seata</code>。  </p>
<p>2、什么是Seata？<br>Seata是阿里巴巴开源的分布式事务解决方案，官网：<a href="http://seata.io/">请点击</a>，<a href="https://seata.apache.org/zh-cn/">中文官网地址</a>。<br>方案思路如下图：新增了一个事务协调者。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/23.png" class="">  

<p>3、Seata架构  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/24.png" class="">  
<p>（1）<code>TC</code>（Transaction Coordinator）：事务协调者，维护全局和分支事务的状态，协调全局事务提交或回滚。<br>（2）<code>TM</code>（Transaction Manager）：事务管理器，定义全局事务的范围，负责全局事务的开启、提交、回滚。<br>（3）<code>RM</code>（Resource Manager）：资源管理器，管理分支事务，负责分支事务的注册、提交、回滚。  </p>
<p>4、Seata使用<br>（1）Seata部署需要部署<code>TC</code>服务，请自行查阅进行部署，注意：需要将<code>TC</code>服务注册到注册中心（因为<code>TC</code>服务很重要，有可能会集群部署，而我们后续需要在各个微服务中配置<code>TC</code>服务地址，如果是集群部署，那么这个地址就不能配死）；<br>（2）<code>TC</code>服务部署之后，我们还需要在微服务中集成Seata，在微服务中引入依赖；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）在微服务中配置seata相关配置，让微服务能找到<code>TC</code>服务地址：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span> </span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># 注册中心的配置，微服务根据这些信息去注册中心获取TC服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型，seata内部支持多种注册中心，这里我们使用nacos</span></span><br><span class="line">	<span class="attr">nacos:</span> </span><br><span class="line">	  <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line">	  <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># nacos命名空间，不填代表默认，为public</span></span><br><span class="line">	  <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">	  <span class="attr">application:</span> <span class="string">seata-server</span> <span class="comment"># TC服务在nacos中的服务名</span></span><br><span class="line">	  <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">	  <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">hmall</span> <span class="comment"># 事务组名称，就是nacos注册中心的集群</span></span><br><span class="line">  <span class="attr">service:</span> </span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC集群的映射关系</span></span><br><span class="line">	  <span class="attr">hmall:</span> <span class="string">&quot;default&quot;</span> <span class="comment"># key:value，key对应上面事务组名称，value对应nacos中的集群</span></span><br></pre></td></tr></table></figure>
<p>例子：<br>比如在订单服务、用户服务和交易服务的配置文件中添加上面的配置（或者将上面的配置配置到nacos中作为共享配置），然后在这三个服务中都引入上面的依赖，注意：如果是将上面的配置配置到nacos中作为共享配置的话，这里还要去这三个服务中的bootstrap.yaml中将共享配置加上！<br>然后重启项目，可以去查看<code>TC</code>服务的控制台，看看这三个服务是否注册到<code>TC</code>服务中了。  </p>
<p>（4）集成好之后，seata提供很多种模式，比较常用的是<code>XA</code>模式和<code>AT</code>模式；<br>（5）<code>XA</code>模式；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.png" class="">  
<p>说明：当执行到被<code>@GlobalTransactional</code>注解标注的方法时，开启全局事务，然后每个微服务再执行sql语句之前，先去<code>TC</code>注册分支事务，再执行sql语句，此时它不会立即提交（数据库锁没有释放），当全部微服务都将自己sql执行情况报告给<code>TC</code>之后，如果都成功了，<code>TC</code>就会通知每个微服务提交事务（释放数据库锁），如果其中一个微服务分支事务失败了，就通知每个微服务都回滚事务。<br>总的来说，<code>XA</code>模式有两阶段工作：<br>一阶段的工作：<code>RM</code>注册分支事务到<code>TC</code>，<code>RM</code>执行分支业务sql但不提交，<code>RM</code>报告执行状态到<code>TC</code>；<br>二阶段的工作：<code>TC</code>检测各分支事务执行状态（如果都成功了，通知所有<code>RM</code>提交事务；如果有失败，通知所有<code>RM</code>回滚事务），<code>RM</code>接收<code>TC</code>指令，提交或回滚事务。<br>这个模式的优点是：事务的强一致性，满足ACID原则，常用的数据库都支持，实现简单，并且没有代码侵入。<br>这个模式的缺点是：因为一阶段需要锁定数据库资源，等待二阶段结束才释放锁，所以性能较差，然后还依赖关系型数据库实现事务（如果关系型数据不支持<code>XA</code>模式就不能实现）。<br>怎么实现<code>XA</code>模式？因为seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：<br>先在每个参与事务的微服务的配置文件中，添加如下配置（如果使用了共享配置的，直接在nacos中修改共享配置）：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span> </span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span> <span class="comment"># 开启XA模式</span></span><br></pre></td></tr></table></figure>
<p>然后在需要开启全局事务的方法中添加<code>@GlobalTransactional</code>注解：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">createOrder</span><span class="params">(OrderFormDTO order)</span> &#123;</span><br><span class="line">	<span class="comment">// 创建订单.....调用本服务业务方法执行创建订单sql</span></span><br><span class="line">	<span class="comment">// 清理购物车.....调用购物车服务的业务方法执行清理购物车sql，注意：最好也在这个方法上添加@Transactional注解</span></span><br><span class="line">	<span class="comment">// 扣减库存.....调用库存服务的业务方法执行扣减sql，注意：最好也在这个方法上添加@Transactional注解</span></span><br><span class="line">	<span class="keyword">return</span> order.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）<code>AT</code>模式（是seata主推的默认模式）；  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/26.png" class="">  
<p>说明：当执行到被<code>@GlobalTransactional</code>注解标注的方法时，开启全局事务，然后每个微服务再执行sql语句之前，先去<code>TC</code>注册分支事务，并且生成一份sql数据快照，之后再执行sql并立刻提交，当全部微服务都将自己sql执行情况报告给<code>TC</code>之后，如果都成功了，<code>TC</code>就会通知每个微服务删除之前生成的sql数据快照，如果其中一个微服务分支事务失败了，就通知每个微服务使用之前生成的备份数据快照恢复数据库（回滚）。<br>总的来说，<code>AT</code>模式也有两阶段工作：<br>一阶段工作：<code>RM</code>注册分支事务到<code>TC</code>，<code>RM</code>备份数据快照再执行业务sql并立刻提交，<code>RM</code>报告事务状态给<code>TC</code>；<br>二阶段工作：如果都成功了，<code>TC</code>通知<code>RM</code>删除备份的数据快照，如果失败需要回滚，<code>TC</code>通知<code>RM</code>根据备份的数据快照恢复数据到更新前。<br>实现<code>AT</code>模式的步骤：<br>需要先生成一个<code>undo_log</code>表，用于存储sql数据快照的（这张表在已分离的项目seata目录中seata-at.sql，也可以直接复制下面的sql语句，都是一样的）：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `undo_log`</span><br><span class="line">(</span><br><span class="line">    `branch_id`     <span class="type">BIGINT</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">    `xid`           <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">    `context`       <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">    `rollback_info` LONGBLOB     <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">    `log_status`    <span class="type">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">    `log_created`   DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">    `log_modified`  DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="operator">=</span><span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>然后在每个参与事务的微服务的配置文件中，添加如下配置（如果使用了共享配置的，直接在nacos中修改共享配置）：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span> </span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 开启AT模式</span></span><br></pre></td></tr></table></figure>
<p>最后在需要开启全局事务的方法中添加<code>@GlobalTransactional</code>注解：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">createOrder</span><span class="params">(OrderFormDTO order)</span> &#123;</span><br><span class="line">	<span class="comment">// 创建订单.....调用本服务业务方法执行创建订单sql</span></span><br><span class="line">	<span class="comment">// 清理购物车.....调用购物车服务的业务方法执行清理购物车sql，注意：最好也在这个方法上添加@Transactional注解</span></span><br><span class="line">	<span class="comment">// 扣减库存.....调用库存服务的业务方法执行扣减sql，注意：最好也在这个方法上添加@Transactional注解</span></span><br><span class="line">	<span class="keyword">return</span> order.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（7）<code>AT</code>和<code>XA</code>的区别；  </p>
<ul>
<li><code>XA</code>模式一阶段不提交事务，锁定资源，<code>AT</code>模式一阶段直接提交事务，不锁定资源；  </li>
<li><code>XA</code>模式依赖数据库机制实现回滚，<code>AT</code>模式利用数据快照实现数据回滚；  </li>
<li><code>XA</code>模式强一致性，<code>AT</code>模式最终一致性。</li>
</ul>
<p><a id="spring-cloud-53"></a></p>
<h3 id="3、消息队列的使用"><a href="#3、消息队列的使用" class="headerlink" title="3、消息队列的使用"></a>3、消息队列的使用</h3><p>1、需求：基于已分离的项目进行改造，改造余额支付功能，不再同步调用交易服务的OpenFeign接口，而是采用异步MQ通知交易服务更新订单状态。  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/27.png" class="">  
<p>说明：<code>交易服务</code>只管发送消息到<code>交换机</code>，其他服务要想获取消息，就在自己服务声明创建<code>交换机</code>和<code>队列</code>去监听。  </p>
<p>2、实现步骤<br>因为目前项目中只有<code>支付服务</code>和<code>交易服务</code>，所以这里只用这两个服务。<br>（1）在<code>支付服务</code>（发送者）和<code>交易服务</code>（消费者）中引入依赖和配置yaml：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 消息转换器序列化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># RabbitMQ的部署ip地址</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># RabbitMQ的服务端口</span></span><br><span class="line">	<span class="attr">virtual-host:</span> <span class="string">/mq</span> <span class="comment"># 要使用的虚拟机</span></span><br><span class="line">	<span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># 连接到RabbitMQ的用户名</span></span><br><span class="line">	<span class="attr">password:</span> <span class="string">admin</span> <span class="comment"># 连接到RabbitMQ的密码</span></span><br></pre></td></tr></table></figure>
<p>（2）在<code>支付服务</code>（发送者）和<code>交易服务</code>（消费者）新建一个配置类，配置消息转换器：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提示：如果这个配置类写在common公共包中的，因为公共包Springboot是扫描不到的，所以根据Springboot自动加载原理，我们需要在公共包下的resources目录下的<code>META-INF/spring.factories</code>中将这个配置类的包路径配置进去。<br>（3）在<code>交易服务</code>中新建listener包，新建一个监听类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> OrderService orderService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">	  value = @Queue(name = &quot;trade.pay.success.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">	  exchange = @Exchange(name = &quot;pay.direct&quot;),</span></span><br><span class="line"><span class="meta">	  key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">	))</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">		orderService.updateOrderStatus(orderId);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）在<code>支付服务</code>中的<code>PayOrderServiceImpl</code>类中的<code>tryPayOrderByBalance</code>方法中最后一行注释，修改为发送消息：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入RabbitTemplate</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在tryPayOrderByBalance方法最后一行注释之后，添加下面的代码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一个参数：指定交换机名称</span></span><br><span class="line"><span class="comment"> * 第二个参数：指定RoutingKey</span></span><br><span class="line"><span class="comment"> * 第三个参数：发送的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;pay.direct&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面如果发送失败可能会影响原来的业务，</span></span><br><span class="line"><span class="comment"> * 我们尽可能不要影响到原来的业务，所以我们使用try-catch来捕获异常，</span></span><br><span class="line"><span class="comment"> * 正确的该法是下面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	rabbitTemplate.convertAndSend(<span class="string">&quot;pay.direct&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	<span class="comment">// 做一些日志输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启两个服务。  </p>
<p><a id="spring-cloud-54"></a></p>
<h3 id="4、处理MQ消息重复投递问题"><a href="#4、处理MQ消息重复投递问题" class="headerlink" title="4、处理MQ消息重复投递问题"></a>4、处理MQ消息重复投递问题</h3><p>1、场景<br>消费者处理完消息后，要返回状态给MQ服务，此时因为网络原因，MQ服务没有收到消费者的恢复，MQ服务就会将消息重新投递给消费者，导致消费者重复处理消息。<br>2、处理方法<br>在上面<code>3、消息队列的使用</code>的基础上<code>基于业务判断</code>方法来解决。<br>在MQ服务第一次投递给消费者处理之前，先查询数据库，判断消息是否已经处理过，如果处理过则直接返回ACK，不再处理。<br>修改<code>交易服务</code>的PayStatusListener类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> OrderService orderService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">	  value = @Queue(name = &quot;trade.pay.success.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">	  exchange = @Exchange(name = &quot;pay.direct&quot;),</span></span><br><span class="line"><span class="meta">	  key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">	))</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">		<span class="comment">// 1、新增查询订单</span></span><br><span class="line">		<span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getById(orderId);</span><br><span class="line">		<span class="comment">// 2、新增判断订单状态，是否为未支付，1表示未支付</span></span><br><span class="line">		<span class="keyword">if</span> (order == <span class="literal">null</span> || order.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 不做处理</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 标记订单状态为已支付</span></span><br><span class="line">		orderService.updateOrderStatus(orderId);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a id="spring-cloud-55"></a></p>
<h3 id="5、使用延迟消息插件"><a href="#5、使用延迟消息插件" class="headerlink" title="5、使用延迟消息插件"></a>5、使用延迟消息插件</h3><img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/28.png" class="">  
<p>上图解释：<br>（1）用户下单，请求到交易服务，交易服务将订单保存到交易服务数据库，然后远程调用商品服务，扣减库存；<br>（2）用户去支付，请求到支付服务，支付订单，然后支付服务将消息发送给MQ服务，由MQ服务通知交易服务更新订单状态；<br>（3）此时因为某些原因，支付服务不能通知交易服务；<br>（4）解决办法使用延迟消息队列，在交易服务保存订单之后，向延迟消息队列发送延迟消息，时间为15分钟；<br>（5）15分钟之后，延迟消息投递消息给交易服务，由交易服务主动去远程查询支付服务，判断订单是否支付成功；<br>（6）如果支付成功，更新订单状态；<br>（7）如果支付失败或没有支付，就取消订单，并远程调用商品服务，恢复库存。<br>注意：<br>（1）做下面操作之前，要确保已经在MQ服务安装好延迟消息插件（DelayExchange插件）；<br>（2）下面例子就不创建支付服务和交易服务之间的MQ服务了，因为以演示延迟消息队列为主；<br>（3）下面例子在上面<code>3、消息队列的使用</code>的基础上进行。<br>1、在交易服务引入依赖，在yaml配置MQ的相关配置以及配置消息转换器，因为在上面<code>3、消息队列的使用</code>的基础上进行的，已经配置过了，具体查看上面<a href="#spring-cloud-53">3、消息队列的使用</a>。<br>2、在交易服务创建常量类，用来保存交换机、队列名：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConstant</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAY_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;trade.delay.direct&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAY_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;trade.delay.order.queue&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAY_ORFRT_KEY</span> <span class="operator">=</span> <span class="string">&quot;delay.order.query&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在交易服务<code>OrderServiceImpl</code>类中的<code>createOrder</code>方法return之前添加下面的代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送延迟消息，检测订单支付状态</span></span><br><span class="line"><span class="comment">// 注意别忘了注入RabbitTemplate</span></span><br><span class="line">rabbitTemplate.convertAndSend(</span><br><span class="line">  RabbitMQConstant.DELAY_EXCHANGE_NAME,</span><br><span class="line">  RabbitMQConstant.DELAY_ORFRT_KEY,</span><br><span class="line">  order.getId(),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">  		<span class="comment">// 设置消息的延迟时间，单位毫秒，15分钟</span></span><br><span class="line">  		message.getMessageProperties().setDelay(<span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  		<span class="keyword">return</span> message;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>4、在<code>hm-api</code>服务下新建下面三个类：<br>PayOrderDTO：支付单的数据传输实体。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 支付订单</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;支付单数据传输实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayOrderDTO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;业务订单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long payOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizUserId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付渠道编码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String payChannelCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付金额，单位分&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付类型，1：h5,2:小程序，3：公众号，4：扫码，5：余额支付&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer payType;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付状态，0：待提交，1:待支付，2：支付超时或取消，3：支付成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;拓展字段，用于传递不同渠道单独处理的字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String expandJson;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回业务码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回提示信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付成功时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime paySuccessTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付超时时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime payOverTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付二维码链接&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qrCodeUrl;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PayClient：支付系统的Feign客户端。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;pay-service&quot;, fallbackFactory = PayClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayClient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据交易订单id查询支付单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 业务订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 支付单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pay-orders/biz/&#123;id&#125;&quot;)</span></span><br><span class="line">    PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PayClientFallback：支付系统的fallback逻辑。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayClientFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;PayClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PayClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PayClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、<code>pay-service</code>模块的PayController中新增方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询支付单&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/biz/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">payOrder</span> <span class="operator">=</span> payOrderService.lambdaQuery().eq(PayOrder::getBizOrderNo, id).one();</span><br><span class="line">    <span class="keyword">return</span> BeanUtils.copyBean(payOrder, PayOrderDTO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、在交易服务新建一个监听器，创建listen包，在包下创建一个类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayMessageListener</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> IOrderService orderService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">	  value = @Queue(name = RabbitMQConstant.DELAY_QUEUE_NAME, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">	  exchange = @Exchange(name = RabbitMQConstant.DELAY_EXCHANGE_NAME, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">	  key = RabbitMQConstant.DELAY_ORFRT_KEY</span></span><br><span class="line"><span class="meta">	))</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayMessage</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">		<span class="comment">// 1、查询订单</span></span><br><span class="line">		<span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getById(orderId);</span><br><span class="line">		<span class="comment">// 2、判断订单是否支付成功，1：未付款</span></span><br><span class="line">		<span class="keyword">if</span> (order == <span class="literal">null</span> || order.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 订单不存在或者已经支付</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 3.未支付，需要远程查询支付流水状态</span></span><br><span class="line">		<span class="type">PayOrderDTO</span> <span class="variable">payOrder</span> <span class="operator">=</span> payClient.queryPayOrderByBizOrderNo(orderId);</span><br><span class="line">		<span class="comment">// 4.判断是否支付</span></span><br><span class="line">		<span class="keyword">if</span>(payOrder != <span class="literal">null</span> &amp;&amp; payOrder.getStatus() == <span class="number">3</span>)&#123;</span><br><span class="line">		    <span class="comment">// 4.1.已支付，标记订单状态为已支付</span></span><br><span class="line">		    orderService.markOrderPaySuccess(orderId);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">// TODO 4.2.未支付，取消订单，回复库存</span></span><br><span class="line">		    orderService.cancelOrder(orderId);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、启动服务，测试，如果启动报错，需要去<code>hm-common</code>中的<code>MqConfig</code>类上面使用<code>@ConditionalOnClass(RabbitTemplate.class)</code>，表示有RabbitTemplate类的服务才让MqConfig类生效。  </p>
<h3 id="6、抽取MQ工具"><a href="#6、抽取MQ工具" class="headerlink" title="6、抽取MQ工具"></a>6、抽取MQ工具</h3><p>MQ在企业开发中的常见应用我们就学习完毕了，除了收发消息以外，消息可靠性的处理、生产者确认、消费者确认、延迟消息等等编码还是相对比较复杂的。<br>因此，我们需要将这些常用的操作封装为工具，方便在项目中使用。要求如下：  </p>
<ul>
<li>将RabbitMQ的yaml配置抽取到nacos中，作为共享配置，替换所有微服务中的自定义MQ配置</li>
<li>在hm-commom模块下编写发送消息的工具类RabbitMqHelper</li>
<li>定义一个自动配置类MqConsumeErrorAutoConfiguration，内容包括：<ul>
<li>声明一个交换机，名为error.direct，类型为direct</li>
<li>声明一个队列，名为：微服务名 + error.queue，也就是说要动态获取</li>
<li>将队列与交换机绑定，绑定时的RoutingKey就是微服务名</li>
<li>声明RepublishMessageRecoverer，消费失败消息投递到上述交换机</li>
<li>给配置类添加条件，当spring.rabbitmq.listener.simple.retry.enabled为true时触发</li>
</ul>
</li>
</ul>
<p>具体步骤：<br>1、抽取共享配置<br>首先，我们需要在nacos中抽取RabbitMQ的共享配置，命名为shared-mq.yaml：  </p>
<img src="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/29.png" class="">  
<p>其中只包含mq的基础共享配置，内容如下：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;hm.mq.host:192.168.150.101&#125;</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;hm.mq.port:5672&#125;</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">$&#123;hm.mq.vhost:/hmall&#125;</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;hm.mq.un:hmall&#125;</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.mq.pw:123&#125;</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>
<p>2、引入依赖<br>在hm-common模块引入要用到的一些依赖，主要包括amqp、jackson。但是不要引入starter，因为我们希望可以让用户按需引入。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring整合Rabbit依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：依赖的scope要选择provided，这样依赖仅仅是用作项目编译时不报错，真正运行时需要使用者自行引入依赖。<br>3、封装工具<br>在hm-common模块的com.hmall.common.utils包下新建一个RabbitMqHelper类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.UUID;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, Object msg)</span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;准备发送消息，exchange:&#123;&#125;, routingKey:&#123;&#125;, msg:&#123;&#125;&quot;</span>, exchange, routingKey, msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDelayMessage</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> delay)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, msg, message -&gt; &#123;</span><br><span class="line">            message.getMessageProperties().setDelay(delay);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageWithConfirm</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> maxRetries)</span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;准备发送消息，exchange:&#123;&#125;, routingKey:&#123;&#125;, msg:&#123;&#125;&quot;</span>, exchange, routingKey, msg);</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString(<span class="literal">true</span>));</span><br><span class="line">        cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> retryCount;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理ack回执失败&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; !result.isAck()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;消息发送失败，收到nack，已重试次数：&#123;&#125;&quot;</span>, retryCount);</span><br><span class="line">                    <span class="keyword">if</span>(retryCount &gt;= maxRetries)&#123;</span><br><span class="line">                        log.error(<span class="string">&quot;消息发送重试次数耗尽，发送失败&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString(<span class="literal">true</span>));</span><br><span class="line">                    cd.getFuture().addCallback(<span class="built_in">this</span>);</span><br><span class="line">                    rabbitTemplate.convertAndSend(exchange, routingKey, msg, cd);</span><br><span class="line">                    retryCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, msg, cd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、自动装配<br>最后，我们在hm-common模块的包下定义一个配置类，将RabbitMqHelper注册为Bean：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.hmall.common.utils.RabbitMqHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(value = &#123;MessageConverter.class, RabbitTemplate.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(ObjectMapper.class)</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">(ObjectMapper mapper)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">        <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>(mapper);</span><br><span class="line">        <span class="comment">// 2.配置自动创建消息id，用于识别不同消息</span></span><br><span class="line">        jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitMqHelper <span class="title function_">rabbitMqHelper</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitMqHelper</span>(rabbitTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为是在公共包下的，spring是扫描不到的，所以为了让我们的配置生效，我们需要在项目的classpath下的META-INF&#x2F;spring.factories文件中声明这个配置类：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.hmall.common.config.MyBatisConfig,\</span></span><br><span class="line"><span class="string">  com.hmall.common.config.MqConfig,\</span></span><br><span class="line"><span class="string">  com.hmall.common.config.MvcConfig</span></span><br></pre></td></tr></table></figure>
<p>至此，RabbitMQ的工具类和自动装配就完成了。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列学习笔记</title>
    <url>/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、消息队列基础介绍"><a href="#一、消息队列基础介绍" class="headerlink" title="一、消息队列基础介绍"></a>一、消息队列基础介绍</h1><p>1、背景  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>有这么个场景，用户发送请求到<code>支付服务</code>，<code>支付服务</code>远程调用<code>用户服务</code>执行扣减余额业务，等扣减成功之后，<code>支付服务</code>再去更新支付状态，然后分别调用<code>交易服务</code>（更新订单状态）、<code>通知服务</code>（短信通知用户）和<code>积分服务</code>（增加用户积分），这里<code>用户服务</code>的扣减余额和<code>支付服务</code>的更新支付状态是同步处理，也就是说<code>支付服务</code>必须得等待<code>用户服务</code>完成扣减余额操作，返回结果之后才能去更新支付状态，但是其他服务和<code>支付服务</code>就属于异步处理（为什么要异步？因为如果同步的话，每个服务都得等待前一个服务处理完才能处理，这样耗时会很长，性能会很差），其他服务不用等待<code>支付服务</code>的处理结果。<br>上面的场景就可以使用消息队列，而且使用消息队列，后续如果还有新的需求，需求新增加服务，那我们可以不用去更改原来的代码，直接去获取消息队列中的消息即可。  </p>
<p>2、异步调用<br>异步调用通常是基于消息通知的方式，包含三个角色：<br>（1）消息发送者：投递消息的人，就是原来的调用者；<br>（2）消息接收者：接收和处理消息的人，就是原来的服务提供者；<br>（3）消息代理：管理、暂存、转发消息，可以把它理解成微信服务器。  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>就如上面的场景，在<code>支付服务</code>和<code>交易服务</code>、<code>通知服务</code>、<code>积分服务</code>之间加一层<code>消息代理</code>，<code>支付服务</code>只管将消息发送给<code>消息代理</code>，然后其他服务来监听<code>消息代理</code>。  </p>
<p>3、技术框架  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  
<p><code>ActiveMQ</code>已被淘汰。  </p>
<br/>


<hr>
<br/>


<h1 id="二、RabbitMQ"><a href="#二、RabbitMQ" class="headerlink" title="二、RabbitMQ"></a>二、RabbitMQ</h1><p><a href="https://www.rabbitmq.com/">官网地址</a>  </p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>1、基于Docker安装<br>提示：如果docker下不下来，请点击<a href="https://pan.baidu.com/s/1sOkAciC9WvifdOWTc7fBQw?pwd=frxr">链接</a>下载本地镜像，提取码：<code>frxr</code>，然后将本地镜像<code>mq.tar</code>加载到docker中，通过<code>docker load -i mq.tar</code>命令加载，加载之后想要删除tar包，执行命令<code>rm -rf mq.tar</code>。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">  -v mq-plugins:/plugins \</span><br><span class="line">  --name mq \</span><br><span class="line">  -p 15672:15672 \</span><br><span class="line">  -p 5672:5672 \</span><br><span class="line">  --network net\</span><br><span class="line">  -d \</span><br><span class="line">  rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>
<p><code>-e RABBITMQ_DEFAULT_USER=admin</code>：RabbitMQ后台管理系统用户名；<br><code>-e RABBITMQ_DEFAULT_PASS=admin</code>：RabbitMQ后台管理系统密码；<br><code>-v mq-plugins:/plugins</code>：挂载数据卷；<br><code>--name mq</code>：容器名；<br><code>-p 15672:15672</code>：RabbitMQ后台管理系统端口；<br><code>-p 5672:5672</code>：RabbitMQ服务端口；<br><code>--network net</code>：指定网络；<br><code>-d</code>：后台运行；<br><code>rabbitmq:3.8-management</code>：镜像名。<br>其他安装方式查看官网。  </p>
<h3 id="2、RabbitMQ后台管理系统使用"><a href="#2、RabbitMQ后台管理系统使用" class="headerlink" title="2、RabbitMQ后台管理系统使用"></a>2、RabbitMQ后台管理系统使用</h3><p>1、访问地址<br><code>http://ip:15672</code>，输入配置的用户名和密码访问。  </p>
<p>2、页面介绍<br><code>Connections</code>Tab页：显示消息发送者和消息接收者，只要连接了RabbitMQ的服务都会在这里显示。<br><code>Channels</code>Tab页：显示消息通道。<br><code>Exchanges</code>Tab页：显示交换机。<br><code>Queues</code>Tab页：显示队列。<br><code>Admin</code>Tab页：管理用户。  </p>
<p>3、RabbitMQ的整体架构和核心概念  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>（1）交换机（exchange）只能路由消息，无法存储消息。<br>（2）交换机（exchange）只会路由消息给与自己绑定的队列，因此队列必须与交换机绑定。  </p>
<p>4、快速入门需求一<br>（1）需求  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">在RabbitMQ的后台管理系统中完成下列操作</span><br><span class="line"><span class="number">1</span>、新建队列 hello<span class="selector-class">.queue1</span> 和 hello.queue2；</span><br><span class="line"><span class="number">2</span>、向默认的 amp<span class="selector-class">.fanout</span> 交换机发送一条消息；</span><br><span class="line"><span class="number">3</span>、查看消息是否到达 hello<span class="selector-class">.queue1</span> 和 hello.queue2。</span><br></pre></td></tr></table></figure>
<p>（2）步骤  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  
<p>如上图所示，分别添加hello.queue1和hello.queue2两个队列。<br>然后选中<code>Exchanges</code>Tab页，点击<code>amp.fanout</code>交换机进入交换机详情页，将两个队列与交换机建立关联，如下图所示。  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" class="">  
<p>然后在该页面找到<code>Publish message</code>项，在<code>Payload</code>输入hello，mq！，点击发送之后，我们在<code>Queues</code>Tab页查看，两个队列都收到消息了。  </p>
<p>5、快速入门需求二<br>（1）需求（数据隔离）  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">在RabbitMQ的后台管理系统中完成下列操作</span><br><span class="line"><span class="number">1</span>、新建一个用户；</span><br><span class="line"><span class="number">2</span>、为新建的用户创建一个 <span class="keyword">virtual</span> host；</span><br><span class="line"><span class="number">3</span>、测试不同 <span class="keyword">virtual</span> host 之间的数据隔离现象。</span><br></pre></td></tr></table></figure>
<p>（2）步骤<br>点击<code>Admin</code>Tab页，点击右侧的<code>Users</code>选项，点击<code>Add a user</code>，输入用户名和密码，Tags是用户角色的意思，这里选择超级管理员角色Admin。<br>可以看到刚新建的用户是没有可以访问的virtual host的，退出登录，切换成刚创建的新用户。<br>我们点击<code>Admin</code>Tab页，点击右侧<code>Virtual Hosts</code>选项，点击<code>Add a new virtual host</code>，创建一个新的虚拟机。  </p>
<h3 id="3、Java代码中使用RabbitMQ"><a href="#3、Java代码中使用RabbitMQ" class="headerlink" title="3、Java代码中使用RabbitMQ"></a>3、Java代码中使用RabbitMQ</h3><h4 id="（1）知识介绍"><a href="#（1）知识介绍" class="headerlink" title="（1）知识介绍"></a>（1）知识介绍</h4><p>演示项目<a href="https://gitee.com/zuo-junyuan/microservice-learning-notes">请点击访问下载</a>，在mq目录<code>mq-demo.zip</code>包。<br><code>AMQP</code>（Advanced Message Queuing Protocol）是用于在应用程序之间传递业务消息的开放标准，该协议与语言和平台无关，更符合微服务中独立性的要求。<br><code>Spring AMQP</code>是基于<code>AMQP</code>协议定义的一套API规范，提供了模板来发送和接收消息，它包含两部分，其中<code>spring-amqp</code>是基础抽象，<code>spring-rabbit</code>是底层的默认实现。  </p>
<h4 id="（2）快速入门"><a href="#（2）快速入门" class="headerlink" title="（2）快速入门"></a>（2）快速入门</h4><p>（1）需求<br>打开上面演示项目，演示项目中包括了两个服务<code>consumer</code>（消息接收者）和<code>publisher</code>（消息发送者）。  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、利用RabbitMQ的后台管理系统创建队列 simple.queue；</span><br><span class="line"><span class="number">2</span>、在publisher服务中，利用SpringAMQP直接向simple.queue发送消息；</span><br><span class="line"><span class="number">3</span>、在consumer服务中，利用SpringAMQP编写消费者，监听simple.queue队列。</span><br><span class="line">注意：该需求不涉及交换机，是直接将消息发送到队列。</span><br></pre></td></tr></table></figure>
<p>（2）步骤<br>创建队列这里不再做阐述。<br>在父工程中引入<code>spring-amqp</code>依赖，这样publisher和consumer两个服务都可以使用：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在每个服务中配置MQ的服务端信息，这样每个服务才能连接到RabbitMQ：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># RabbitMQ的部署ip地址</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># RabbitMQ的服务端口</span></span><br><span class="line">	<span class="attr">virtual-host:</span> <span class="string">/mq</span> <span class="comment"># 要使用的虚拟机</span></span><br><span class="line">	<span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># 连接到RabbitMQ的用户名</span></span><br><span class="line">	<span class="attr">password:</span> <span class="string">admin</span> <span class="comment"># 连接到RabbitMQ的密码</span></span><br></pre></td></tr></table></figure>
<p>在<code>test/java</code>目录下创建<code>com.itheima.publisher</code>单元测试包（单元测试路径要与main包下的路径保持一致），创建<code>SpringAmqpTest</code>测试类，编写测试代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 需要使用到RabbitTemplate类，这个类amqp包中已经提供了，可以直接注入使用</span></span><br><span class="line"><span class="comment">	 * RabbitTemplate是SpringAMQP提供的用于操作RabbitMQ的工具类</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1、发送消息</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 第一个参数：队列名称</span></span><br><span class="line"><span class="comment">		 * 第二个参数：发送消息的内容</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>,<span class="string">&quot;hello, spring amqp!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动之后，可以去RabbitMQ管理后台查看对应的队列中是否收到消息。<br>在<code>consumer</code>服务中编写监听消息的消息接收者，在main&#x2F;java目录下创建mq包，在mq包下新建SpringRabbitListener监听类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 监听simple.queue队列的消息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg 消息内容，发送的时候是什么类型，接收的时候就是什么类型</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;spring amqp 监听到了simple.queue的消息：&quot;</span> + msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动<code>consumer</code>服务，可以看到控制台输出了消息。现在只要<code>publisher</code>服务那边发送了消息，<code>consumer</code>服务这边就会监听到消息，并且输出收到的消息。  </p>
<h4 id="（3）Work-Queues"><a href="#（3）Work-Queues" class="headerlink" title="（3）Work Queues"></a>（3）Work Queues</h4><p><code>Work Queues</code>：任务模型，简单来说就是让多个消费者绑定到一个队列，共同消费队列中的消息。注意：队列中的消息只能由这些消费者中的一个接收，比如：队列中有一条消息，这个队列绑定了三个消费者，队列中的这条消息假如被消费者2接收到了，那么消费者1和消费者3是接收不到的。<br>1、需求  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在RabbitMQ后台管理系统中创建一个队列，名为 work.queue；</span><br><span class="line"><span class="number">2</span>、在 publisher 服务中定义测试方法，发送<span class="number">50</span>条消息到 work.queue；</span><br><span class="line"><span class="number">3</span>、在 consumer 服务中定义两个消息监听者，都监听 work.queue 队列。</span><br><span class="line">注意：该需求不涉及交换机，是直接将消息发送到队列。</span><br></pre></td></tr></table></figure>
<p>2、步骤<br>创建队列这里不再做阐述。<br>基于<code>快速入门</code>中的项目继续做。<br>（1）在<code>consumer</code>服务中的SpringRabbitListener类中添加两个方法（注意：实际项目中不可能写两个方法）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueOne</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者1监听到了work.queue的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueTwo</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者2监听到了work.queue的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在<code>publisher</code>服务中的SpringAmqpTest测试类中添加测试的发送方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 队列名</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 发送50条消息</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">50</span>;i ++) &#123;</span><br><span class="line">		<span class="comment">// 消息内容</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp! &quot;</span> + i;</span><br><span class="line">		<span class="comment">// 发送消息</span></span><br><span class="line">		rabbitTemplate.convertAndSend(queueName, msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启两个服务，可以看到<code>consumer</code>服务的控制台输出，两个消费者分别接收到了25条消息。<br>如果这两个消费者是在两个不同的服务中，消费者1的性能要比消费者2的性能好，这种情况下依然是每个消费者都处理25条。<br>那么我们想实现“能者多劳”的效果，也就是说让消费者1处理更多的消息，可以在配置文件中配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">listener:</span> </span><br><span class="line">	  <span class="attr">simple:</span> </span><br><span class="line">	    <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一条消息</span></span><br></pre></td></tr></table></figure>
<p>3、总结：<code>Work</code>模型的使用  </p>
<ol>
<li>多个消费者绑定到一个队列，可以加快消息处理速度；  </li>
<li>同一条消息只会被一个消费者处理；  </li>
<li>通过设置<code>prefetch</code>来控制消费者预取的消息数量，处理完一条再处理下一条，实现能者多劳。</li>
</ol>
<h4 id="（4）Fanout交换机"><a href="#（4）Fanout交换机" class="headerlink" title="（4）Fanout交换机"></a>（4）Fanout交换机</h4><p>上面的案例都没有涉及到<code>交换机</code>，从上面的案例可以看出，消息可以直接发送到队列，队列还具有存储消息的功能，而交换机并没有存储消息的功能，只有路由消息的功能，那为什么还要有交换机呢？<br>我们可以从<code>Work Queues</code>案例看出，队列中的消息只要被消费者接收之后，就没有该条消息了。那么如果想实现这么一个场景：这条消息想要被所有消费者都接收到（广播的模式），该怎么去实现？这就得用到<code>Fanout</code>类型的交换机了。<br><code>交换机</code>的作用：主要是接收发送者发送的消息，并将消息路由到与其绑定的队列，而<code>Fanout交换机</code>就是可以实现一条消息，所有消费者都能接收到，即<code>广播模式</code>。<br>1、需求  </p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在<span class="type">RabbitMQ</span>后台管理系统中，创建两个队列 fanout.queue1 和 fanout.queue2；</span><br><span class="line"><span class="number">2</span>、在<span class="type">RabbitMQ</span>后台管理系统中，创建交换机 fanout.exchange，类型<span class="keyword">type</span>为 fanout，并将两个队列与其绑定；</span><br><span class="line"><span class="number">3</span>、在 consumer 服务中，编写两个消费者方法，分别监听 fanout.queue1 和 fanout.queue2；</span><br><span class="line"><span class="number">4</span>、在 publisher 服务中，编写测试方法，向 fanout.exchange发送消息。</span><br></pre></td></tr></table></figure>
<p>2、步骤<br>创建队列这里不再做阐述。<br>（1）在<code>consumer</code>服务中的SpringRabbitListener类中添加两个方法（注意：实际项目中不可能写两个方法）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueueOne</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者1监听到了fanout.queue1的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueueTwo</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者2监听到了fanout.queue2的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在<code>publisher</code>服务中的SpringAmqpTest测试类中添加测试的发送方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;fanout.exchange&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 发送消息</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：交换机名称</span></span><br><span class="line"><span class="comment">	 * 第二个参数：这里为null和&quot;&quot;都行</span></span><br><span class="line"><span class="comment">	 * 第三个参数：消息内容</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, <span class="string">&quot;hello,exange fanout!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（5）Direct交换机"><a href="#（5）Direct交换机" class="headerlink" title="（5）Direct交换机"></a>（5）Direct交换机</h4><p>有这么个场景：想要实现有些消息是多个消费者接收到，有些消息只有个别消费者收到，这种情况下，就需要用到<code>Direct交换机</code>了。<br><code>Direct交换机</code>：会将接收到的消息根据规则路由到指定的队列，即<code>定向模式</code>。<br>（1）每一个队列在与交换机绑定时，都设置一个key（一般将这个key叫做<code>BindingKey</code>）；<br>（2）发送者发送消息时，指定消息的key（一般将这个key叫做<code>RoutingKey</code>）；<br>（3）交换机将消息路由到<code>BindingKey</code>与<code>RoutingKey</code>一致的队列。<br>1、需求  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在RabbitMQ后台管理系统中，创建两个队列 <span class="built_in">direct</span>.queue1 和 <span class="built_in">direct</span>.queue2；</span><br><span class="line"><span class="number">2</span>、在RabbitMQ后台管理系统中，创建交换机 <span class="built_in">direct</span>.exchange，类型type为 <span class="built_in">direct</span>，并将两个队列与其绑定，绑定的时候在RoutingKey输入框处<span class="built_in">direct</span>.queue1指定red、blue两个<span class="built_in">key</span>，也就是BindingKey（输入的时候只能一个一个的输入去绑定），<span class="built_in">direct</span>.queue2指定red、yellow两个<span class="built_in">key</span>；</span><br><span class="line"><span class="number">3</span>、在 consumer 服务中，编写两个消费者方法，分别监听 <span class="built_in">direct</span>.queue1 和 <span class="built_in">direct</span>.queue2；</span><br><span class="line"><span class="number">4</span>、在 publisher 服务中，编写测试方法，向 <span class="built_in">direct</span>.exchange发送消息，并指定RoutingKey。</span><br></pre></td></tr></table></figure>
<p>2、步骤<br>创建队列这里不再做阐述。<br>（1）在<code>consumer</code>服务中的SpringRabbitListener类中添加两个方法（注意：实际项目中不可能写两个方法）：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueueOne</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者1监听到了direct.queue1的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueueTwo</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;消费者2监听到了direct.queue2的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）在<code>publisher</code>服务中的SpringAmqpTest测试类中添加测试的发送方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;direct.exchange&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 发送消息</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：交换机名称</span></span><br><span class="line"><span class="comment">	 * 第二个参数：RoutingKey</span></span><br><span class="line"><span class="comment">	 * 第三个参数：消息内容</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;hello,exange direct!&quot;</span>);</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 说明：</span></span><br><span class="line"><span class="comment">	 * 1、如果第二个参数RoutingKey为red，那么direct.queue1和direct.queue2都能接收到消息；</span></span><br><span class="line"><span class="comment">	 * 2、如果第二个参数RoutingKey为blue，那么只有direct.queue1能接收到消息；</span></span><br><span class="line"><span class="comment">	 * 3、如果第二个参数RoutingKey为yellow，那么只有direct.queue2能接收到消息；</span></span><br><span class="line"><span class="comment">	 * 4、如果第二个参数RoutingKey为green，那么direct.queue1和direct.queue2都不能接收到消息。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（6）Topic交换机"><a href="#（6）Topic交换机" class="headerlink" title="（6）Topic交换机"></a>（6）Topic交换机</h4><p><code>Topic交换机</code>：也是基于RoutingKey做消息路由的，但是它的RoutingKey通常是多个单词的组合，并且以<code>.</code>分隔，即<code>主题模式</code>。<br>队列与交换机指定BindingKey时可以使用通配符：<code>#</code>（0个或多个单词）、<code>*</code>（一个单词）。<br>比如：<br>六个队列与一个交换机绑定时，设置的<code>BindingKey</code>为：<br>队列1为<code>china.news</code>：指中国的新闻消息；<br>队列2为<code>china.weather</code>：指中国的天气消息；<br>队列3为<code>japan.news</code>：指日本的新闻消息；<br>队列4为<code>japan.weather</code>：指日本的天气消息；<br>队列5为<code>china.#</code>：指中国的所有消息；<br>队列6为<code>#.news</code>：指所有的新闻消息。<br>然后发送者发送消息指定的<code>RoutingKey</code>为：<br><code>china.#</code>：所有<code>BindingKey</code>中有<code>china</code>的消费者都收到消息，队列1、队列2、队列5收到消息；<br><code>japan.*</code>：只有<code>BindingKey</code>中有<code>japan</code>后跟一个单词的消费者能接收到消息，队列3、队列4收到消息（<code>japan</code>和<code>japan.xxx.xxx</code>是接收不到消息的）；<br><code>#.weather</code>：只有<code>BindingKey</code>中有<code>weather</code>的消费者能接收到消息，队列2、队列4收到消息；<br><code>china.news</code>：只有<code>BindingKey</code>中有<code>china.news</code>的消费者能接收到消息，队列1、队列5、队列6收到消息；<br><code>china.weather</code>：队列2、队列5收到消息。<br>注意：在创建交换机的时候，类型type为<code>topic</code>。  </p>
<h4 id="（7）在代码中声明队列、交换机"><a href="#（7）在代码中声明队列、交换机" class="headerlink" title="（7）在代码中声明队列、交换机"></a>（7）在代码中声明队列、交换机</h4><p>1、说明<br>之前所有案例的交换机、队列都是在RabbitMQ的后台管理系统中创建的，实际开发中是不允许这么做，都是在代码中创建的。<br><code>SpringAMQP</code>提供了几个类，用来声明队列、交换机及其绑定关系：<br>（1）<code>Queue</code>：用于声明队列，可以用工厂类<code>QueueBuilder</code>构建；<br>（2）<code>Exchange</code>：用于声明交换机，可以用工厂类<code>ExchangeBuilder</code>构建；<br>（3）<code>Binding</code>：用于声明队列和交换机的绑定关系，可以用工厂类<code>BindingBuilder</code>构建。  </p>
<p>2、使用配置类声明<br>声明一个<code>Fanout</code>类型的交换机，并且创建队列与其绑定：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">	<span class="comment">// 声明 FanoutExchange 交换机</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 参数：交换机的名称</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.exchange&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 声明第一个队列</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Queue <span class="title function_">fanoutQueueOne</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 参数：队列的名称</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 绑定队列1和交换机</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; Queue fanoutQueueOne 要和上面声明第一个队列方法名称保持一致</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; FanoutExchange fanoutExchange 要和上面声明交换机方法名称保持一致</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Binding <span class="title function_">bindingQueueOne</span><span class="params">(Queue fanoutQueueOne, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">		<span class="comment">// 绑定哪个队列到哪个交换机</span></span><br><span class="line">		<span class="comment">// 如果有 BindingKey 在to方法后面调用with方法指定，如果得指定多个 BindingKey 就得再新建一个方法</span></span><br><span class="line">		<span class="keyword">return</span> BindingBuilder.bind(fanoutQueueOne).to(fanoutExchange);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// ...略，同理，以相同的方式声明第二个队列并完成绑定</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 同一个队列指定多个 BindingKey：</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">	 * public Binding bindingQueueOneRed(Queue fanoutQueueOne, FanoutExchange fanoutExchange) &#123;</span></span><br><span class="line"><span class="comment">	 *   // 指定 第一个 BindingKey 为 Red</span></span><br><span class="line"><span class="comment">	 *   return BindingBuilder.bind(fanoutQueueOne).to(fanoutExchange).with(&quot;red&quot;);</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">	 * public Binding bindingQueueOneBlue(Queue fanoutQueueOne, FanoutExchange fanoutExchange) &#123;</span></span><br><span class="line"><span class="comment">	 *   // 指定 第二个 BindingKey 为 Blue</span></span><br><span class="line"><span class="comment">	 *   return BindingBuilder.bind(fanoutQueueOne).to(fanoutExchange).with(&quot;blue&quot;);</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用工厂类来创建队列、交换机及其绑定关系：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">	<span class="comment">// 声明 FanoutExchange 交换机</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ExchangeBuilder.fanoutExchange(<span class="string">&quot;fanout.exchange&quot;</span>).build();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 声明第一个队列</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Queue <span class="title function_">fanoutQueueOne</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;fanout.queue1&quot;</span>).build();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 绑定队列1和交换机</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; Queue fanoutQueueOne 要和上面声明第一个队列方法名称保持一致</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &#123;Object&#125; FanoutExchange fanoutExchange 要和上面声明交换机方法名称保持一致</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Binding <span class="title function_">bindingQueueOne</span><span class="params">(Queue fanoutQueueOne, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">		<span class="comment">// 绑定哪个队列到哪个交换机</span></span><br><span class="line">		<span class="comment">// 指定多个 BindingKey 同上面的方式一样</span></span><br><span class="line">		<span class="keyword">return</span> BindingBuilder.bind(fanoutQueueOne).to(fanoutExchange);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：上面的配置类都是写在<code>consumer</code>消费者服务中的！<br>为什么？<br>因为发送者只关心发送消息，将消息发到交换机或队列就行了，而消费者需要去监听队列，需要知道队列和哪个交换机绑定了。<br>上面绑定多个BindingKey方法太繁琐，推荐使用注解方式。  </p>
<p>3、使用注解方式声明<br><code>SpringAMQP</code>还提供了基于<code>@RabbitListener</code>注解来声明队列和交换机：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">  bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">	exchange = @Exchange(name = &quot;direct.exchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">	key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">  )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueueOne</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;消费者1收到消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：上面的注解方式也是写在<code>consumer</code>消费者服务中的，这个注解是使用在需要监听队列的方法上的！  </p>
<h4 id="（8）消息转换器"><a href="#（8）消息转换器" class="headerlink" title="（8）消息转换器"></a>（8）消息转换器</h4><p>1、说明<br><code>SpringAMQP</code>中默认消息是网络传输，将消息内容（对象）转化成字节，通过字节流进行传输，默认的消息转换器是<code>SimpleMessageConverter</code>实现类，基于JDK的<code>ObjectOutputStream</code>完成序列化。<br>它存在下列问题：<br>（1）JDK的序列化有完全风险；<br>（2）JDK序列化的消息太大；<br>（3）JDK序列化的消息可读性差，是一串乱码。  </p>
<p>2、修改默认消息转换器<br>推荐使用JSON序列化代替默认的JDK序列化，在publisher和consumer服务中引入jackson依赖：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在publisher和consumer服务中配置MessageConverter消息转换器：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（9）消息队列在实际项目中的运用"><a href="#（9）消息队列在实际项目中的运用" class="headerlink" title="（9）消息队列在实际项目中的运用"></a>（9）消息队列在实际项目中的运用</h4><p>具体查看<a href="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#spring-cloud-53">SpringCloud学习笔记第五、其他问题消息队列的使用</a>。  </p>
<h3 id="4、使用过程中遇到的问题"><a href="#4、使用过程中遇到的问题" class="headerlink" title="4、使用过程中遇到的问题"></a>4、使用过程中遇到的问题</h3><h4 id="（1）确保消息发送成功"><a href="#（1）确保消息发送成功" class="headerlink" title="（1）确保消息发送成功"></a>（1）确保消息发送成功</h4><p>1、发送者重连机制（针对消息发送者）<br>场景：假如MQ消息队列服务挂了或者由于网络波动，可能会出现发送者连接MQ失败的情况。<br>在消息发送服务配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="string">1s</span> <span class="comment"># 设置MQ的连接超时时间，例如：等了1s还没连上就认为连接超时</span></span><br><span class="line">	<span class="attr">template:</span> </span><br><span class="line">	  <span class="attr">retry:</span> </span><br><span class="line">	    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启超时重试机制，默认是没有开启</span></span><br><span class="line">		<span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 重连失败后的初始等待时间，例如：连接超时之后不会立刻去重连，会等待1000ms再去重连</span></span><br><span class="line">		<span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier，例如：如果设置为2，第一次等待1000ms（因为初始等待时间设置的是1000ms），第二次等待2000ms，第三次4000ms</span></span><br><span class="line">		<span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重连次数</span></span><br></pre></td></tr></table></figure>
<p>注意：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率，不过SpringAMQP提供的重试机制是阻塞式的重试，也即是说在重试期间，发送消息服务会一直在重试，直到重试成功或者达到重试最大次数，才会继续往下执行业务，会影响业务性能。<br>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，也可以考虑使用异步线程来执行发送消息的代码。  </p>
<p>2、发送者确认机制（针对消息发送者）<br>SpringAMQP有<code>Publisher Confirm</code>和<code>Publisher Return</code>两种确认机制（是一起使用的）。开启确认机制后，当发送消息服务给MQ发送消息后，MQ会返回确认结果给发送消息服务，返回结果有以下几种情况：<br>（1）消息投递到了MQ，但是路由失败（没有绑定队列或者代码错误）。此时会通过PublisherReturn返回路由异常原因，然后返回ACK（确认结果），告知消息投递成功；<br>（2）临时消息（不需要持久化的消息）投递到了MQ，并且入队成功，返回ACK，告知投递成功；<br>（3）持久消息投递到了MQ，并且入队完成持久化，返回ACK，告知投递成功；<br>（4）其他情况都会返回NACK，告知投递失败。<br>一般收到NACK都需要重发消息，收到ACK的记录日志。<br>在发送消息服务的配置文件中配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="comment"># publisher-confirm-type有三种模式：</span></span><br><span class="line">	<span class="comment"># 1. none：关闭confirm机制，默认</span></span><br><span class="line">	<span class="comment"># 2. simple：同步阻塞等待MQ的回执消息</span></span><br><span class="line">	<span class="comment"># 3. correlated：MQ异步回调方式返回回执消息</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 开启publisher confirm机制，并设置confirm类型</span></span><br><span class="line">	<span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启publisher return机制，默认为false</span></span><br></pre></td></tr></table></figure>
<p>配置<code>Publisher Return</code>，创建一个MQ配置类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 设置Publisher Return回调函数</span></span><br><span class="line">		rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;交换机为：&quot;</span> + returned.getExchange());</span><br><span class="line">				System.out.println(<span class="string">&quot;routingKey：&quot;</span> + returned.getRoutingKey());</span><br><span class="line">				System.out.println(<span class="string">&quot;消息本身message：&quot;</span> + returned.getMessage());</span><br><span class="line">				System.out.println(<span class="string">&quot;异常code：&quot;</span> + returned.getReplyCode());</span><br><span class="line">				System.out.println(<span class="string">&quot;异常message：&quot;</span> + returned.getReplyText());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后配置<code>Publisher Confirm</code>，需要去发送消息的代码处修改：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改之前的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 发送消息</span></span><br><span class="line">	rabbitTemplate.convertAndSend(<span class="string">&quot;exchange.direct&quot;</span>, <span class="string">&quot;发送的消息内容&quot;</span>, <span class="string">&quot;hello direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改之后的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 设置Publisher Confirm回调函数</span></span><br><span class="line">	<span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">	cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (result.isAck()) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;消息投递成功&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;消息投递失败&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 这里springamqp 内部处理时出现的异常，不是mq投递消息失败的异常</span></span><br><span class="line"><span class="comment">		 * 一般是不会出现的</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;spring amqp 处理确认结果异常：&quot;</span> + ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 发送消息</span></span><br><span class="line">	rabbitTemplate.convertAndSend(<span class="string">&quot;exchange.direct&quot;</span>, <span class="string">&quot;发送的消息内容&quot;</span>, <span class="string">&quot;hello direct&quot;</span>, cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="（2）确保MQ的可靠性"><a href="#（2）确保MQ的可靠性" class="headerlink" title="（2）确保MQ的可靠性"></a>（2）确保MQ的可靠性</h4><p>在默认情况下，RabbitMQ会将收到的消息保存在内存中，以降低消息收发的延迟，这样会导致两个问题：  </p>
<ul>
<li>一旦MQ宕机，内存中的消息会丢失；  </li>
<li>内存空间有限，当消费者故障或处理过慢时，会导致消息积压，引发MQ阻塞。</li>
</ul>
<p>因此可以使用<code>数据持久化</code>和<code>Lazy Queue</code>来确保MQ的可靠性。<br>推荐使用<code>Lazy Queue</code>。  </p>
<p>1、数据持久化<br>RabbitMQ实现数据持久化包括3个方面（每个都要做，下面三个都设置之后，哪怕MQ服务重启都不会丢失消息）：  </p>
<ul>
<li>交换机持久化；<br>在RabbitMQ后台管理系统中，创建交换机时，在<code>Durability</code>选项处选择<code>Durable</code>，代表交换机持久化；而<code>Transient</code>代表临时数据。  </li>
<li>队列持久化，同交换机持久化一样的操作；  </li>
<li>消息持久化。<br>在RabbitMQ后台管理系统中，发送消息时，有个<code>Delivery mode</code>选项，<code>Non-persistent</code>代表临时消息；<code>Persistent</code>代表持久化消息。</li>
</ul>
<p>使用代码测试：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个测试，是用来测试消息设置成持久化之前和之后的性能对比。</span></span><br><span class="line"><span class="comment"> * 注意：测试之前，需要先创建好持久交换机、队列，</span></span><br><span class="line"><span class="comment"> * 并且将配置文件中的关于确保消息发送成功的相关配置关闭</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1、将下面message先设置成临时消息，测试一次；</span></span><br><span class="line"><span class="comment"> * 2、再将message设置成持久化消息，测试一次；</span></span><br><span class="line"><span class="comment"> * 3、可以查看RabbitMQ后台管理系统的消息积压情况，可知将message设置成持久化之后，性能会更好。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 这里因为涉及到消息持久化，所以我们需要自定义构建消息</span></span><br><span class="line"><span class="comment">	 * 使用MessageBuilder消息工厂类自定义消息</span></span><br><span class="line"><span class="comment">	 * withBody()方法：设置消息体，因为它需要字节码，所以这里需要将字符串转换为字节码</span></span><br><span class="line"><span class="comment">	 * setDeliveryMode()方法：设置消息的投递模式，默认是Non-persistent，也就是临时消息</span></span><br><span class="line"><span class="comment">	 * PERSISTENT代表持久化消息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">			.setDeliveryMode(MessageDeliveryMode.PERSISTENT)</span><br><span class="line">			.build();</span><br><span class="line">	<span class="comment">// 发送1000000条消息</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">1000000</span>;i ++) &#123;</span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">&quot;交换机名字&quot;</span>, message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、Lazy Queue（直接将消息存入磁盘，不存内存）<br>之前的版本是先将消息存到内存中，然后再根据消息设置，如果设置了消息为持久化，才将消息存入磁盘。而从RabbitMQ的3.6.0版本开始，就增加了Lazy Queue的概念，也就是惰性队列，它的特征是：  </p>
<ul>
<li>接收到消息后直接存入磁盘，不再存储到内存；  </li>
<li>消费者要消费消息时，才会从磁盘中读取并加载到内存（可以提前缓存部分消息到内存，最多2048条）。</li>
</ul>
<p>也就是说不管消息是临时消息还是持久化消息，直接存入磁盘，不存内存，等消费者要使用消息时，再从磁盘存入内存。<br>注意：在3.12版本后，所有队列都是Lazy Queue模式，无法更改。<br>如果使用3.12之前的版本，需要使用Lazy Queue的话，在RabbitMQ后台管理系统中创建队列的时候，需要在<code>Arguments</code>选项处添加<code>x-queue-mode=lazy</code>参数，这里不需要在输入框输入，可以直接点击下面的<code>Lazy mode</code>即可添加。<br>使用代码的方式添加：<br>要设置一个队列为惰性队列，只需要在声明队列时，指定<code>x-queue-mode</code>属性为lazy即可。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;队列名字&quot;</span>)</span><br><span class="line">	                   .lazy() <span class="comment">// 开启lazy模式</span></span><br><span class="line">					   .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解方式：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">  name = &quot;队列名字&quot;,</span></span><br><span class="line"><span class="meta">  durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">  arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;LazyQueue接收到消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推荐使用时，都使用这个方式！！！！<br>总结：<br>（1）首先通过配置可以让交换机、队列、以及发送的消息都持久化。这样队列中的消息会持久化到磁盘，MQ重启，消息依然存在；<br>（2）RabbitMQ在3.6版本引入了LazyQueue，并且在3.12版本后会将其设置成队列的默认模式，这个模式会将所有消息都持久化；<br>（3）开启持久化和生产者确认时，RabbitMQ只有在消息持久化完成后才会给生产者返回ACK回执。  </p>
<h4 id="（3）确保消息接收成功"><a href="#（3）确保消息接收成功" class="headerlink" title="（3）确保消息接收成功"></a>（3）确保消息接收成功</h4><p>1、消费者确认机制（针对消息接收服务）<br>消费者确认机制是为了确认消费者是否成功处理消息，一共有三种场景：  </p>
<ul>
<li>返回<code>ACK</code>：表示消费者成功处理消息之后，返回ACK给MQ服务，告知MQ服务自己成功处理消息，让MQ服务将该消息从队列中删除；  </li>
<li>返回<code>NACK</code>：表示消费者处理消息时出现异常，返回NACK给MQ服务，告知MQ服务不要删除消息，将消息重新投递给自己处理，直到成功；  </li>
<li>返回<code>REJECT</code>：表示消费者处理消息时出现异常，并告知MQ服务，拒绝该消息处理，让MQ服务将该消息从队列中删除。</li>
</ul>
<p>注意：上面的三种场景都是消费者处理完之后才能返回，不是刚接收到消息就返回。<br>因为SpringAMQP已经实现了消息确认功能，所以只需要在配置文件中配置处理方式，有三种方式：  </p>
<ul>
<li>none：不处理，即消息投递给消费者后，不管消息是否处理成功，MQ服务都会将消息从队列中删除（默认方式）；  </li>
<li>manual：手动模式，需要自己在业务代码中调用api，发送ACK或REJECT，这种方式可能存在业务入侵；  </li>
<li>auto：自动模式，SpringAMQP利用AOP实现了功能，自动返回不同的结果。</li>
</ul>
<p>在消息接收服务配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">listener:</span> </span><br><span class="line">	  <span class="attr">simple:</span></span><br><span class="line">	    <span class="attr">acknowledge-mode:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<p>针对上面消费者确认机制中的第二种场景，返回NACK，如果消费者（即消息接收服务）一直处理失败，MQ服务就会一直投递，这是不可取的，会让MQ服务有很大压力，所以我们还需要设置<code>失败重试机制</code>。<br>在消息接收服务配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">listener:</span> </span><br><span class="line">	  <span class="attr">simple:</span> </span><br><span class="line">	    <span class="attr">retry:</span> </span><br><span class="line">		  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试，默认时关闭的</span></span><br><span class="line">		  <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初始的失败等待时长为1s</span></span><br><span class="line">		  <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数，下次等待时长 = multiplier * initial-interval</span></span><br><span class="line">		  <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">		  <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># 是否无状态，true无状态，false有状态，如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure>
<p>注意：<br>（1）如果<code>stateless</code>设置为false，表示有事务，那么<code>max-attempts</code>属性将失效，因为涉及到事务，所以不能重试；<br>（2）如果<code>stateless</code>设置为true，表示无事务，那么<code>max-attempts</code>属性生效，可以重试。<br>这里介绍下重试策略：<br>在开启重试模式后，重试次数耗尽，如果消息依然存在，则需要有<code>MessageRecoverer</code>接口来处理，它有三种不同实现：  </p>
<ul>
<li>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject拒绝消息，丢弃消息，不再重试（默认方式）；  </li>
<li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回NACK，消息重新入队等待消费；  </li>
<li>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机。<br>将重试策略修改为<code>RepublishMessageRecoverer</code>，在消息接收服务创建配置类：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建定义交换机</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> DirectExchange <span class="title function_">errorExchange</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;交换机名字&quot;</span>); <span class="comment">// error.direct</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建定义队列</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;队列名字&quot;</span>); <span class="comment">// error.queue</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 绑定交换机和队列</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Binding <span class="title function_">errorQueueBinding</span><span class="params">(Queue errorQueue, DirectExchange errorExchange)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> BindingBuilder.bind(errorQueue)</span><br><span class="line">		                     .to(errorExchange)</span><br><span class="line">		                     .with(<span class="string">&quot;路由键名字&quot;</span>); <span class="comment">// error</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重试策略</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> MessageRecoverer <span class="title function_">messageRecoverer</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// return new RepublishMessageRecoverer(rabbitTemplate, &quot;error.direct&quot;, &quot;error&quot;);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;交换机名字&quot;</span>, <span class="string">&quot;路由键名字&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
现在还有这么一个问题，就是消费者重复处理问题，比如消费者处理完消息后，要返回状态给MQ服务，此时因为网络原因，MQ服务没有收到消费者的恢复，MQ服务就会将消息重新投递给消费者，导致消费者重复处理消息。<br>解决方法一：<code>唯一消息id</code><br>给每个消息都设置一个唯一id，利用id区分是否是重复消息：<br>（1）每一条消息都生成一个唯一的id，与消息一起投递给消费者；<br>（2）消费者接收到消息后处理自己的业务，业务处理成功后将消息id保存到数据库；<br>（3）如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息，放弃处理。<br>在消息发送服务（消息提供者）修改消息转换器，让消息转换器帮我们生成消息id：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">Jackson2JsonMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">	converter.setCreateMessageIds(<span class="literal">true</span>); <span class="comment">// 开启消息id生成</span></span><br><span class="line">	<span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在消息接收服务（消费者）接收消息id：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 之前是消息发送服务发送的是什么类型的消息，消息接收服务接收消息就是什么类型的消息</span></span><br><span class="line"><span class="comment"> * 现在修改为使用Message类来接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;queue.name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">	<span class="comment">// 获取消息id</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> message.getMessageProperties().getMessageId();</span><br><span class="line">	<span class="comment">// 获取消息内容</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">	System.out.println(<span class="string">&quot;消息id：&quot;</span> + messageId);</span><br><span class="line">	System.out.println(<span class="string">&quot;消息内容：&quot;</span> + content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>解决方法二：<code>基于业务判断</code><br>在MQ服务第一次投递给消费者处理之前，先查询数据库，判断消息是否已经处理过，如果处理过则直接返回ACK，不再处理。具体例子查看<a href="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#spring-cloud-54">SpringCloud学习笔记第五点其他问题的第4点</a>。  </p>
<h4 id="（4）延迟消息"><a href="#（4）延迟消息" class="headerlink" title="（4）延迟消息"></a>（4）延迟消息</h4><p>1、使用场景<br>保证服务A和服务B一致性，通常是基于消息队列，由服务A通知服务B，去保证一致性。但是因为某个原因，导致这种方案就是不能成功（不能保证一致性），所以此时就必须有一个兜底方案，就是消息延迟。<br>延迟消息：发送者发送消息时指定一个时间，消费者不会立刻收到消息，而是在指定时间之后才收到消息。<br>就比如通常情况下，都是服务A通知服务B，延迟消息就是有一个<code>专门接收延迟消息的消息队列</code>，服务A通知服务B的同时，也发一个延迟消息给这个消息队列（设置一个延迟时间，比如15分钟），然后服务A等待服务B回执15分钟，如果15分钟之后还是没有服务B的回执，那服务A就主动去远程查询（调用）服务B。<br>2、实现方式<br>（1）死信交换机<br>（2）延迟消息插件<br>3、<code>死信交换机</code><br>（1）解释<br>当一个队列中的消息满足下列情况之一时，就会成为死信：  </p>
<ul>
<li>消费者使用<code>reject</code>或<code>nack</code>返回消费失败，并且消息被设置成不想重新投递（消息的requeue参数设置为false）；  </li>
<li>消息是一个过期消息（达到了队列或消息本身设置的过期时间），超时无人消费；  </li>
<li>要投递的队列消息堆积满了，最早的消息可能成为死信。</li>
</ul>
<p>默认情况下，消息成为死信会被删除。<br>如果队列通过dead-letter-exchange属性指定了一个交换机，那么该队列中的消息成为死信后，就会投递到被指定的这个交换机中，这个交换机就是<code>死信交换机（DLX）</code>。<br>所以<code>死信交换机</code>：就是专门用来接收死信的交换机。<br>现在使用<code>死信交换机</code>来做<code>延迟消息</code>，下图所示：  </p>
<img src="/2024/12/18/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png" class="">  
<p>注意：如果使用了key，那么死信交换机、死信队列要和上面交换机、队列的key保持一致。<br>（2）代码实现<br>定义一个死信交换机和死信队列：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">  value = @Queue(name = &quot;dlx.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">  exchange = @Exchange(name = &quot;dlx.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">  key = &#123;&quot;hi&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDlxQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;接收到死信队列的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能使用上面的方法来定义交换机、队列，因为使用上面的方法就会有消费者监听。需要使用传统的方式定义一个普通交换机、普通队列，并设置死信交换机：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建定义交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">normalExchange</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;normal.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建定义队列，并设置dead-letter-exchange属性，绑定一个死信交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">normalQueue</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;normal.queue&quot;</span>)</span><br><span class="line">					 .deadLetterExchange(<span class="string">&quot;dlx.direct&quot;</span>)</span><br><span class="line">					 .build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定交换机和队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">normalExchangeBinding</span><span class="params">(Queue normalQueue, DirectExchange normalExchange)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送消息：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：交换机名字</span></span><br><span class="line"><span class="comment">	 * 第二个参数：路由键名字</span></span><br><span class="line"><span class="comment">	 * 第三个参数：消息内容</span></span><br><span class="line"><span class="comment">	 * 第四个参数：MessagePostProcessor是消息后置处理器，可以用来对消息进行处理，比如设置消息过期时间</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;normal.direct&quot;</span>, <span class="string">&quot;hi&quot;</span>, <span class="string">&quot;hello world&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">      <span class="comment">// 设置消息过期时间10s</span></span><br><span class="line">      message.getMessageProperties().setExpiration(<span class="string">&quot;10000&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> message;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、<code>延迟消息插件</code>（DelayExchange插件）<br>因为上面<code>死信交换机</code>实现比较繁琐，需要创建定义多个交换机和队列，容易出错，所以可以使用<code>延迟消息插件</code>。<br>这个插件可以将普通交换机改造为支持延迟消息功能的交换机，当消息投递到交换机后可以暂存一定时间，到期后再投递到队列。<br><a href="https://blog.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq#installing-the-plugin">关于插件下载请点击</a>，插件版本要和MQ版本保持一致，比如MQ是3.8，那么插件也要3.8。<br>（1）安装插件（基于Docker安装）<br>如果MQ是基于Docker安装的，才看这个。<br>先查看RabbitMQ的插件目录对应的数据卷：<code>docker volume inspect mq-plugins</code>，<code>mq-plugins</code>是数据卷的名字，如果挂载的数据卷名字不是这个，需要根据自己的数据卷名字修改，可以使用<code>docker volume ls</code>查看所有数据卷列表。<br>可以看到<code>Mountpoint</code>属性，表示插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，上传下载下来的插件到该目录。<br>然后执行命令，安装插件：<code>docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code>，<code>-it</code>后面的mq是容器的名字，根据自己的容器名修改。<br>（2）使用<br>通过注解方式：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// delayed属性设为true，表示是延迟交换机</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">  value = @Queue(name = &quot;队列名字&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">  exchange = @Exchange(name = &quot;交换机名字&quot;, type = ExchangeTypes.DIRECT, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">  key = &#123;&quot;hi&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;接收到延迟队列的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过代码方式：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">			.directExchange(<span class="string">&quot;交换机名字&quot;</span>)</span><br><span class="line">			.delayed() <span class="comment">// 设置delay属性为true</span></span><br><span class="line">			.durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">			.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送消息是需要通过消息头<code>x-delay</code>来设置过期时间：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 第一个参数：交换机名字</span></span><br><span class="line"><span class="comment">	 * 第二个参数：路由键名字</span></span><br><span class="line"><span class="comment">	 * 第三个参数：消息内容</span></span><br><span class="line"><span class="comment">	 * 第四个参数：MessagePostProcessor是消息后置处理器，可以用来对消息进行处理，比如设置消息过期时间</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;hi&quot;</span>, <span class="string">&quot;hello world&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">      <span class="comment">// 设置消息过期时间10s</span></span><br><span class="line">      message.getMessageProperties().setDelay(<span class="number">10000</span>);</span><br><span class="line">      <span class="keyword">return</span> message;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、具体使用<code>延迟消息插件</code>示例<br>请查看<a href="/2024/11/27/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#spring-cloud-55">SpringCloud学习笔记中其他问题章节的第5点</a>。  </p>
]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch学习笔记</title>
    <url>/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br/>


<hr>
<br/>


<h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><p>本笔记中所用到的所有资料可在这里获取：<a href="https://pan.baidu.com/s/1jo-0f6Ge5p8B-_dK2dP0eg?pwd=78ly">链接</a><br>提取码：78ly  </p>
<h3 id="1、简介和安装"><a href="#1、简介和安装" class="headerlink" title="1、简介和安装"></a>1、简介和安装</h3><h4 id="1-官网"><a href="#1-官网" class="headerlink" title="(1)官网"></a>(1)官网</h4><p><a href="https://www.elastic.co/cn/elasticsearch">地址链接</a>。  </p>
<h4 id="2-介绍"><a href="#2-介绍" class="headerlink" title="(2)介绍"></a>(2)介绍</h4><p>Elasticsearch是由elastic公司开发的一套搜索引擎技术，它是elastic技术栈中的一部分，是基于Java语言的搜索引擎类库<a href="https://lucene.apache.org/">Lucene</a>（优势：易扩展、基于<a href="#elasticsearch114">倒排索引</a>实现、高性能）研发的。完整的技术栈包括：  </p>
<ul>
<li>Elasticsearch：用于数据存储、计算和搜索  </li>
<li>Logstash&#x2F;Beats：用于数据收集、抓取  </li>
<li>Kibana：用于数据可视化</li>
</ul>
<p>整套技术栈被称为ELK，经常用来做日志收集、系统监控和状态分析等等。<br>但是现在只需要两部分：elasticsearch（存储、搜索和运算）和kibana（图形化展示）。<br>使用elasticsearch是为了数据存储、搜索、分析的；使用kibana是因为它有Elasticsearch对外提供的是Restful风格的API，任何操作都可以通过发送http请求来完成，并且它针对elasticsearch的api提供了语法提示。<br>elasticsearch是面向文档（Document）存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中。因此，原本数据库中的一行数据就是ES中的一个JSON文档；而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的字段（Field）。<br>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档、用户的文档、订单文档等等。所有文档都散乱存放显然非常混乱，也不方便管理。因此，我们要将类型相同的文档集中在一起管理，称为索引（Index）：所有用户文档，就可以组织在一起，称为用户的索引；所有商品的文档，可以组织在一起，称为商品的索引；所有订单的文档，可以组织在一起，称为订单的索引。<br>因此，我们可以把索引当做是数据库中的表。<br>Mysql和Elasticsearch中概念对比：  </p>
<table>
<thead>
<tr>
<th align="center">Mysql</th>
<th align="center">Elasticsearch</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Table</td>
<td align="center">Index</td>
<td align="center">索引(index)，就是文档的集合，类似数据库的表(table)</td>
</tr>
<tr>
<td align="center">Row</td>
<td align="center">Document</td>
<td align="center">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>
</tr>
<tr>
<td align="center">Column</td>
<td align="center">Field</td>
<td align="center">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>
</tr>
<tr>
<td align="center">Schema</td>
<td align="center">Mapping</td>
<td align="center">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>
</tr>
<tr>
<td align="center">SQL</td>
<td align="center">DSL</td>
<td align="center">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>
</tr>
</tbody></table>
<p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性。<br>Elasticsearch：擅长海量数据的搜索、分析、计算。<br>因此在企业中，往往是两者结合使用：  </p>
<ul>
<li>对安全性要求较高的写操作，使用mysql实现；  </li>
<li>对查询性能要求较高的搜索需求，使用elasticsearch实现；  </li>
<li>两者再基于某种方式，实现数据的同步，保证一致性。<br><code>可以考虑采用MQ异步通知实现</code>和<code>可以使用mysql的bin_log文件与cannal,通过解析mysql的bin_log文件，来去更新es索引库</code>等等方法。</li>
</ul>
<h4 id="3-安装"><a href="#3-安装" class="headerlink" title="(3)安装"></a>(3)安装</h4><p>1、基于docker安装<br>（1）基于<code>docker</code>命令安装<code>elasticsearch</code>单机版本：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \</span><br><span class="line">  -e &quot;discovery.type=single-node&quot; \</span><br><span class="line">  -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">  -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network hm-net \</span><br><span class="line">  -p 9200:9200 \</span><br><span class="line">  -p 9300:9300 \</span><br><span class="line">  elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：因为elasticsearch是java写的，底层运行的时候，需要配置jvm的最大和最小内存，这里是最低的内存配置，不能再低了；  </li>
<li><code>-e &quot;discovery.type=single-node&quot;</code>：运行模式，单机运行；  </li>
<li><code>v es-data:/usr/share/elasticsearch/data</code>：数据卷挂载，挂载数据存储目录；  </li>
<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：数据卷挂载，挂载插件目录；  </li>
<li><code>--privileged</code>：权限，elasticsearch需要root权限；  </li>
<li><code>--network hm-net</code>：网络，使用自定义的docker网络；  </li>
<li><code>-p 9200:9200</code>：端口映射，访问http的端口号；  </li>
<li><code>-p 9300:9300</code>：端口映射，elasticsearch集群部署时之间的通信端口号；  </li>
<li><code>elasticsearch:7.12.1</code>：镜像名和版本号。</li>
</ul>
<p>注意，这里采用的是elasticsearch的7.12.1版本，由于8以上版本的JavaAPI变化很大，在企业中应用并不广泛，企业中应用较多的还是8以下的版本。<br>如果拉取镜像困难，可以直接从资料<code>Elasticsearch01</code>目录中获取<code>es.tar</code>镜像包导入。<br>安装完成后，访问9200端口，即可看到响应的Elasticsearch服务的基本信息，说明安装成功。<br>（2）安装<code>Kibana</code>，通过下面docker命令，即可部署：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=hm-net \</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure>
<p><code>-e ELASTICSEARCH_HOSTS=http://es:9200</code>：设置elasticsearch的地址，kibana需要连接elasticsearch，才能展示数据。<br><code>elasticsearch</code>和<code>kibana</code>的docker镜像包，可以从资料<code>Elasticsearch01</code>目录中获取<code>kibana.tar</code>镜像包导入。<br>安装完成后，访问<code>http://ip:5601</code>即可看到kibana的界面，选择<code>Explore on my own</code>之后进入主页面，选中<code>Dev tools</code>进入开发工具页面：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" class="">  
<p>（3）安装<code>IK分词器</code><br>Elasticsearch的关键就是倒排索引，而倒排索引依赖于对文档内容的分词，而分词则需要高效、精准的分词算法，IK分词器就是这样一个中文分词算法。<br>注意：IK分词器要和Elasticsearch版本一致，否则安装失败。<br>安装方式一：<code>在线安装</code><br>运行一个命令即可：<code>docker exec -it es ./bin/elasticsearch-plugin  install https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-7.12.1.zip</code>。<br>然后重启es容器：<code>docker restart es</code>。<br>安装方式二：<code>离线安装</code><br>如果网速较差，也可以选择离线安装。<br>首先，查看之前安装的Elasticsearch容器的plugins数据卷目录：<code>docker volume inspect es-plugins</code>，可以看到elasticsearch的插件挂载到了<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录，需要把IK分词器上传至这个目录，在资料中找到<code>elasticsearch-analysis-ik-7.12.1.zip</code>包，上传到虚拟机的<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录中ik目录再进行解压（ik目录需要新建），然后重启es容器。  </p>
<p>2、基于本地安装，请自行查阅。  </p>
<p><a id="elasticsearch114"></a>  </p>
<h4 id="4-正向索引和倒排索引"><a href="#4-正向索引和倒排索引" class="headerlink" title="(4)正向索引和倒排索引"></a>(4)正向索引和倒排索引</h4><p>1、正向索引<br>讲倒排索引之前，先解释下正向索引：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 表ta_goods</span><br><span class="line">id（索引） <span class="operator">|</span>    name    <span class="operator">|</span> price <span class="operator">|</span> description</span><br><span class="line"><span class="number">1</span>          <span class="operator">|</span>  小米手机  <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span> 描述</span><br><span class="line"><span class="number">2</span>          <span class="operator">|</span>  华为手机  <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span> 描述</span><br><span class="line"><span class="number">3</span>          <span class="operator">|</span>  华为电脑  <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span> 描述</span><br><span class="line"><span class="number">4</span>          <span class="operator">|</span>  小米手环  <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span> 描述</span><br><span class="line"><span class="number">5</span>          <span class="operator">|</span>  小米电脑  <span class="operator">|</span> <span class="number">5000</span>  <span class="operator">|</span> 描述</span><br><span class="line"><span class="number">6</span>          <span class="operator">|</span>  小米电视  <span class="operator">|</span> <span class="number">3000</span>  <span class="operator">|</span> 描述</span><br></pre></td></tr></table></figure>
<p>其中的id字段已经创建了索引，由于索引底层采用了B+树结构，因此我们根据id搜索的速度会非常快。但是其他字段例如name，只在叶子节点上存在，因此要根据name搜索的时候只能遍历树中的每一个叶子节点，判断name数据是否符合要求。<br>比如sql：<code>select * from tb_goods where name like &#39;%手机%&#39;;</code>，执行这条语句，针对正向索引，执行逻辑就是：  </p>
<ol>
<li>检查到搜索条件为like ‘%手机%’，需要找到name中包含手机的数据；  </li>
<li>逐条遍历每行数据（每个叶子节点），比如第1次拿到id为1的数据；  </li>
<li>判断数据中的name字段值是否符合条件；  </li>
<li>如果符合则放入结果集，不符合则丢弃；  </li>
<li>回到1.继续执行。</li>
</ol>
<p>综上，根据id精确匹配时，可以走索引，查询效率较高。而当搜索条件为模糊匹配时，由于索引无法生效，导致从索引查询退化为全表扫描，效率很差。<br>因此，正向索引适合于根据索引字段的精确搜索，不适合基于部分词条的模糊匹配，而倒排索引恰好解决的就是根据部分词条模糊匹配的问题。<br>2、倒排索引<br>倒排索引中有两个非常重要的概念：  </p>
<ul>
<li>文档（Document）：用来搜索的数据，其中的每一条数据就是一个文档；  </li>
<li>词条（Term）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条。</li>
</ul>
<p>创建倒排索引是对正向索引的一种特殊处理和应用，流程如下：  </p>
<ul>
<li>将每一个文档的数据利用分词算法根据语义拆分，得到一个个词条，例如上面ta_goods表中，第一条数据（也就是文档）拆分可得：小米、手机；  </li>
<li>创建表，每行数据包括词条、词条所在文档id、位置等信息，例如：小米这个词条，对应的id有1、4、5、6，手机这个词条对应的id有1、2。<br>可得倒排索引：  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">词条（索引）<span class="operator">|</span>  文档id</span><br><span class="line">小米        <span class="operator">|</span>  <span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">手机        <span class="operator">|</span>  <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">华为        <span class="operator">|</span>  <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">电脑        <span class="operator">|</span>  <span class="number">3</span>,<span class="number">5</span></span><br><span class="line">手环        <span class="operator">|</span>  <span class="number">4</span></span><br><span class="line">电视        <span class="operator">|</span>  <span class="number">6</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>倒排索引搜索流程（根据上面得到的倒排索引）：  </p>
<ol>
<li>用户输入条件”华为手机”进行搜索；  </li>
<li>对用户输入条件分词，得到词条：华为、手机；  </li>
<li>拿着词条在倒排索引中查找（由于词条有索引，查询效率很高），即可得到包含词条的文档id：1、2、3；  </li>
<li>拿着文档id到正向索引中查找具体文档即可（由于id也有索引，查询效率也很高）。</li>
</ol>
<p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。<br>3、两者区别和优缺点<br>（1）区别：<br><code>正向索引</code>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是根据文档找词条的过程。<br><code>倒排索引</code>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是根据词条找文档的过程。<br>（2）<code>正向索引</code>优缺点<br>优点：  </p>
<ul>
<li>可以给多个字段创建索引  </li>
<li>根据索引字段搜索、排序速度非常快</li>
</ul>
<p>缺点：<br>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。<br>（3）<code>倒排索引</code>优缺点<br>优点：<br>根据词条搜索、模糊搜索时，速度非常快。<br>缺点：  </p>
<ul>
<li>只能给词条创建索引，而不是字段  </li>
<li>无法根据字段做排序</li>
</ul>
<h4 id="5-IK分词器"><a href="#5-IK分词器" class="headerlink" title="(5)IK分词器"></a>(5)IK分词器</h4><p>1、说明<br>Elasticsearch中提供的标准分词器<code>standard</code>不满足需求，因为这个分词器只能将中文句子一个字一个字分离出来（例如：这个手机good，这句话，使用标准分词器分得：这、个、手、机、good），因此需要IK分词器。<br>IK分词器有两种模式：  </p>
<ul>
<li><code>ik_smart</code>：智能语义切分；<br>例如：这个手机good，这句话，使用ik_smart分得：这个、手机、good。  </li>
<li><code>ik_max_word</code>：最细粒度切分。</li>
</ul>
<p>2、扩展词典<br>有可能有些词条IK分词器不认识，比如：泰裤辣，因此需要扩展词典。<br>（1）打开IK分词器config目录，注意，如果采用在线安装的通过，默认是没有config目录的，需要把资料中提供的ik下的config上传至对应目录；<br>（2）在IKAnalyzer.cfg.xml配置文件内容添加：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）在IK分词器的config目录新建一个ext.dic（对应IKAnalyzer.cfg.xml配置中的扩展词典名），可以参考config目录下复制一个配置文件进行修改，文件格式为utf-8；<br>（4）将需要添加的词条添加到ext.dic中，比如将泰裤辣这个词直接添加到文件中，一个词占一行，重启Elasticsearch即可。  </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">泰裤辣</span><br><span class="line">其他词1</span><br><span class="line">其他词2</span><br></pre></td></tr></table></figure>

<p>3、总结<br>（1）分词器的作用是什么？  </p>
<ul>
<li>创建倒排索引时，对文档分词  </li>
<li>用户搜索时，对输入的内容分词</li>
</ul>
<p>（2）IK分词器有几种模式？  </p>
<ul>
<li>ik_smart：智能切分，粗粒度  </li>
<li>ik_max_word：最细切分，细粒度</li>
</ul>
<p>（3）IK分词器如何拓展词条？如何停用词条？  </p>
<ul>
<li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典  </li>
<li>在词典中添加拓展词条或者停用词条</li>
</ul>
<h3 id="2、Kibana中索引库操作"><a href="#2、Kibana中索引库操作" class="headerlink" title="2、Kibana中索引库操作"></a>2、Kibana中索引库操作</h3><p>Index就类似数据库表，Mapping映射就类似表的结构，要向es中存储数据，必须先创建Index和Mapping。<br>Mapping是对索引库中文档的约束，常见的Mapping属性包括：  </p>
<ul>
<li>type：字段数据类型，常见的简单类型有：</li>
</ul>
<ol>
<li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）  </li>
<li>数值：long、integer、short、byte、double、float  </li>
<li>布尔：boolean  </li>
<li>日期：date  </li>
<li>对象：object</li>
</ol>
<ul>
<li>index：是否创建索引，默认为true，一般需要搜索的属性都为true  </li>
<li>analyzer：使用哪种分词器  </li>
<li>properties：该字段的子字段</li>
</ul>
<p>例如下面的json文档：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span> <span class="comment">// 字段类型为integer，参与搜索，不分词</span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">52.1</span><span class="punctuation">,</span> <span class="comment">// 字段类型为float，参与搜索，不分词</span></span><br><span class="line">    <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 字段类型boolean，参与搜索，不分词</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span> <span class="comment">// 字段类型text，参与搜索，分词</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span> <span class="comment">// 字段类型keyword，不参与搜索，不分词</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">99.1</span><span class="punctuation">,</span> <span class="number">99.5</span><span class="punctuation">,</span> <span class="number">98.9</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 字段类型float，参与搜索，不分词</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span> <span class="comment">// 字段类型keyword，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span> <span class="comment">// 字段类型keyword，参与搜索，不分词</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>1、创建索引库和映射<br>Kibana的DevTools来编写请求。<br>（1）创建索引库和映射<br>基本语法：  </p>
<ul>
<li>请求方式：PUT；  </li>
<li>请求路径：&#x2F;索引库名，自定义；  </li>
<li>请求参数：mapping映射。</li>
</ul>
<p>格式：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;子字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima <span class="comment">// 创建heima索引库</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// info是属性名</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// emil是属性名</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span> <span class="comment">// email不参与搜索，不需要建索引</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// name是属性名</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>2、查询索引库<br>基本语法：  </p>
<ul>
<li>请求方式：GET；  </li>
<li>请求路径：&#x2F;索引库名；  </li>
<li>请求参数：无。</li>
</ul>
<p>格式：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima</span><br></pre></td></tr></table></figure>

<p>3、删除索引库<br>基本语法：  </p>
<ul>
<li>请求方式：DELETE  </li>
<li>请求路径：&#x2F;索引库名  </li>
<li>请求参数：无</li>
</ul>
<p>格式：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /heima</span><br></pre></td></tr></table></figure>

<p>4、修改索引库<br>索引库不能修改，但是可以向原有的索引库中添加新的字段：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：<br>向heima索引库中添加age字段，类型为integer。  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="3、Kibana中文档操作"><a href="#3、Kibana中文档操作" class="headerlink" title="3、Kibana中文档操作"></a>3、Kibana中文档操作</h3><p>有了索引库，接下来就可以向索引库中添加数据了。<br>1、新增文档<br>语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_doc/<span class="number">1</span> <span class="comment">// 向heima索引库中添加一条数据（文档），1表示id</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>2、查询文档<br>语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名称<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>3、删除文档<br>语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/id值</span><br></pre></td></tr></table></figure>
<p>示例：<br>从heima索引库中删除id为1的文档（数据）。  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>4、修改文档<br>修改有两种方式：  </p>
<ul>
<li>全量修改：直接覆盖原来的文档；  </li>
<li>局部修改：修改文档中的部分字段。</li>
</ul>
<p>（1）全量修改<br>全量修改是覆盖原来的文档（也就是覆盖原来的数据），其本质是两步操作：  </p>
<ol>
<li>根据指定的id删除原来的文档；  </li>
<li>新增一个相同id的新文档。</li>
</ol>
<p>注意：如果根据id删除时，id不存在，第二步新增也会执行，也就从修改变成了新增操作了。<br>语法：<br>注意：字段必须所有字段都提供。  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员高级Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>（2）局部修改<br>局部修改是只修改指定id匹配的文档中的部分字段。<br>语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意：全局修改是<code>PUT请求</code>，并且路径中是<code>_doc</code>；而局部修改是<code>POST请求</code>，并且路径中是<code>_update</code>。<br>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>5、批处理<br>批处理采用POST请求，基本语法如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准语法</span></span><br><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span> <span class="comment">// 如果报错，把中间空格删除</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;field1&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;value1&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;delete&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;create&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;field1&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;value3&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;update&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;doc&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;field2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;value2&quot;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>（1）index：代表新增操作；<br>（2）_index：指定索引库名；<br>（3）_id指定要操作的文档id；<br>（4）{ “field1” : “value1” }：则是要操作的文档内容。<br>示例：<br>批量新增：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;heima&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员C++讲师&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ww@itcast.cn&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;五&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;王&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;heima&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员前端讲师&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan@itcast.cn&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;张&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>批量删除：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;heima&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;heima&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<br/>


<hr>
<br/>


<h1 id="二、Java代码操作"><a href="#二、Java代码操作" class="headerlink" title="二、Java代码操作"></a>二、Java代码操作</h1><h3 id="1、官网地址"><a href="#1、官网地址" class="headerlink" title="1、官网地址"></a>1、官网地址</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官网地址</a>。  </p>
<h3 id="2、说明"><a href="#2、说明" class="headerlink" title="2、说明"></a>2、说明</h3><p>老版本的客户端已经被标记为过时，而这里采用的是7.12版本，因此只能使用老版本客户端：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" class="">  
<p>注意：7.15以后的新版本都是基于lambda表达式的写法了。<br>然后选择7.12版本，HighLevelRestClient版本：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class="">  

<h3 id="3、操作前准备"><a href="#3、操作前准备" class="headerlink" title="3、操作前准备"></a>3、操作前准备</h3><p>1、创建索引库前分析<br>搜索页面的效果如图所示：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" class="">  
<p>根据上图分析得到需要创建的索引库：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /items</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// id参与搜索，而且一般是keyword，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 商品名词，参与搜索，分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 价格，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 图片，不参与搜索，所以index为false，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 分类，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 品牌，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 销量，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commentCount&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 评价数，不参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 是否为广告推广，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 更新时间，参与搜索，不分词</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>2、初始化elasticsearch客户端<br>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。<br>（1）在需要使用elasticsearch的服务中引入依赖；  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）因为SpringBoot默认的ES版本是7.17.10，所以我们需要覆盖默认的ES版本：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）初始化RestHighLevelClient对象：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果加了<span class="doctag">@SpringBootTest</span>，需要去指定启动的环境，</span></span><br><span class="line"><span class="comment"> * 默认是dev环境，可以通过<span class="doctag">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class="line"><span class="comment"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在Java单元测试中，<span class="doctag">@BeforeEach</span> 和 <span class="doctag">@AfterEach</span> 是JUnit框架提供的注解，用于在每个测试方法执行之前和之后执行特定的代码。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@BeforeEach</span> 注解的方法会在每个测试方法执行之前运行，通常用于设置测试环境或初始化对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterEach</span> 注解的方法会在每个测试方法执行之后运行，通常用于清理资源或重置状态。</span></span><br><span class="line"><span class="comment">     * 这两个注解帮助确保每个测试都是独立的，避免测试之间的相互影响。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@BeforeEach</span>修饰在方法上，</span></span><br><span class="line"><span class="comment">	 * 在每一个测试方法（所有<span class="doctag">@Test</span>、<span class="doctag">@RepeatedTest</span>、<span class="doctag">@ParameterizedTest</span>或者<span class="doctag">@TestFactory</span>注解的方法）之前执行一次。</span></span><br><span class="line"><span class="comment">     * 例如：一个测试类有2个测试方法testA()和testB()，</span></span><br><span class="line"><span class="comment">	 * 还有一个<span class="doctag">@BeforeEach</span>的方法，执行这个测试类，<span class="doctag">@BeforeEach</span>的方法会在testA()之前执行一次，</span></span><br><span class="line"><span class="comment">	 * 在testB()之前又执行一次。</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@BeforeEach</span>的方法一共执行了2次。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、索引库操作"><a href="#4、索引库操作" class="headerlink" title="4、索引库操作"></a>4、索引库操作</h3><p>以下操作都是基于<code>3、操作前准备</code>的<code>2、初始化elasticsearch客户端</code>中创建的<code>IndexTest</code>类来弄的。  </p>
<h4 id="1-创建索引库"><a href="#1-创建索引库" class="headerlink" title="(1)创建索引库"></a>(1)创建索引库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1.创建Request对象</span></span><br><span class="line"><span class="comment">	 * CreateIndexRequest应该导包org.elasticsearch.client.indices.CreateIndexRequest，</span></span><br><span class="line"><span class="comment">	 * 而不是org.elasticsearch.action.admin.indices.create。</span></span><br><span class="line"><span class="comment">	 * items是索引库名。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 2.准备请求参数</span></span><br><span class="line"><span class="comment">	 * 其实就是Json格式的Mapping映射参数。</span></span><br><span class="line"><span class="comment">	 * 因为json字符串很长，</span></span><br><span class="line"><span class="comment">	 * 这里是定义了静态字符串常量MAPPING_TEMPLATE，</span></span><br><span class="line"><span class="comment">	 * 让代码看起来更加优雅。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 3.发送请求</span></span><br><span class="line"><span class="comment">	 * client.indices()方法的返回值是IndicesClient类型，</span></span><br><span class="line"><span class="comment">	 * 封装了所有与索引库操作有关的方法。</span></span><br><span class="line"><span class="comment">	 * 例如创建索引、删除索引、判断索引是否存在等。</span></span><br><span class="line"><span class="comment">	 * 第二个参数：请求可选项，直接走默认。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;image\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;category\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;sold\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;commentCount\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;isAD\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;boolean\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;updateTime\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;date\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-删除索引库"><a href="#2-删除索引库" class="headerlink" title="(2)删除索引库"></a>(2)删除索引库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DELETE /hotel</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象，items是索引库名</span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-判断索引库是否存在"><a href="#3-判断索引库是否存在" class="headerlink" title="(3)判断索引库是否存在"></a>(3)判断索引库是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /hotel</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistsIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象</span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.输出</span></span><br><span class="line">    System.err.println(exists ? <span class="string">&quot;索引库已经存在！&quot;</span> : <span class="string">&quot;索引库不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="5、文档操作"><a href="#5、文档操作" class="headerlink" title="5、文档操作"></a>5、文档操作</h3><p>操作前准备，创建文档，需要从数据库查询出来数据，再存入elasticsearch中，所以需要使用配置文件：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmall.item.service.IItemService;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">// 激活配置文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认是dev环境，可以通过<span class="doctag">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class="line"><span class="comment"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local，</span></span><br><span class="line"><span class="comment"> * 也可以使用下面的方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest(properties = &quot;spring.profiles.active=local&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DocumentTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 注入service，用于查询数据库</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建对应索引库的实体类：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;索引库实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemDoc</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;商品id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;商品名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;价格（分）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;商品图片&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;类目名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;品牌名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;评论数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer commentCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否是推广广告，true/false&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下操作都是在<code>DocumentTest</code>类中添加。  </p>
<h4 id="1-新增文档"><a href="#1-新增文档" class="headerlink" title="(1)新增文档"></a>(1)新增文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POST /&#123;索引库名&#125;/_doc/1</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *  &quot;name&quot;: &quot;Jack&quot;,</span></span><br><span class="line"><span class="comment"> *  &quot;age&quot;: 21</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.根据id查询商品数据</span></span><br><span class="line">    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemService.getById(<span class="number">100002644680L</span>);</span><br><span class="line">    <span class="comment">// 2.转换为文档类型</span></span><br><span class="line">    <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class="line">    <span class="comment">// 3.将ItemDTO转json</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">doc</span> <span class="operator">=</span> JSONUtil.toJsonStr(itemDoc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.准备Request对象，items是索引库名</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;items&quot;</span>).id(itemDoc.getId());</span><br><span class="line">    <span class="comment">// 2.准备Json文档</span></span><br><span class="line">    request.source(doc, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-查询文档"><a href="#2-查询文档" class="headerlink" title="(2)查询文档"></a>(2)查询文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /&#123;索引库名&#125;/_doc/&#123;id&#125;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;items&quot;</span>).id(<span class="string">&quot;100002644680&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.获取响应结果中的source，source就是数据结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line">    </span><br><span class="line">    <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;itemDoc= &quot;</span> + ItemDoc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-删除文档"><a href="#3-删除文档" class="headerlink" title="(3)删除文档"></a>(3)删除文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DELETE /hotel/_doc/&#123;id&#125;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request，两个参数，第一个是索引库名，第二个是文档id</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;item&quot;</span>, <span class="string">&quot;100002644680&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-修改文档"><a href="#4-修改文档" class="headerlink" title="(4)修改文档"></a>(4)修改文档</h4><p>之前说过修改有两种方式：全量修改和局部修改，这里没有区分：  </p>
<ul>
<li>如果新增时，id已经存在，则为修改；  </li>
<li>如果新增时，id不存在，则为新建。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POST /&#123;索引库名&#125;/_update/&#123;id&#125;</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *  &quot;doc&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *    &quot;字段名&quot;: &quot;字段值&quot;,</span></span><br><span class="line"><span class="comment"> *    &quot;字段名&quot;: &quot;字段值&quot;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;items&quot;</span>, <span class="string">&quot;100002644680&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备请求参数，修改价格和评论数</span></span><br><span class="line">    request.doc(</span><br><span class="line">            <span class="string">&quot;price&quot;</span>, <span class="number">58800</span>,</span><br><span class="line">            <span class="string">&quot;commentCount&quot;</span>, <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-批量新增文档"><a href="#5-批量新增文档" class="headerlink" title="(5)批量新增文档"></a>(5)批量新增文档</h4><p>在之前的案例中，我们都是操作单个文档。而数据库中的商品数据实际会达到数十万条，某些项目中可能达到数百万条。<br>我们如果要将这些数据导入索引库，肯定不能逐条导入，而是采用批处理方案。常见的方案有：<br>（1）利用Logstash批量导入；  </p>
<ul>
<li>需要安装Logstash；  </li>
<li>对数据的再加工能力较弱；</li>
<li>无需编码，但要学习编写Logstash导入配置。</li>
</ul>
<p>（2）利用JavaAPI批量导入。  </p>
<ul>
<li>需要编码，但基于JavaAPI，学习成本低；  </li>
<li>更加灵活，可以任意对数据做再加工处理后写入索引库。</li>
</ul>
<p>接下来，我们就学习下如何利用JavaAPI实现批量文档导入。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLoadItemDocs</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 分页查询商品数据</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 因为商品数据量较大，所以采用分页查询，每次查询1000条，</span></span><br><span class="line"><span class="comment">	 * 所以这里循环，直到查询不到数据为止。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        Page&lt;Item&gt; page = itemService.lambdaQuery().eq(Item::getStatus, <span class="number">1</span>).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;Item&gt;(pageNo, size));</span><br><span class="line">        <span class="comment">// 非空校验</span></span><br><span class="line">        List&lt;Item&gt; items = page.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;加载第&#123;&#125;页数据，共&#123;&#125;条&quot;</span>, pageNo, items.size());</span><br><span class="line">        <span class="comment">// 1.创建Request</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备参数，添加多个新增的Request</span></span><br><span class="line">        <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">            <span class="comment">// 2.1.转换为文档类型ItemDTO</span></span><br><span class="line">            <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class="line">            <span class="comment">// 2.2.创建新增文档的Request对象</span></span><br><span class="line">            request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>()</span><br><span class="line">                            .id(itemDoc.getId())</span><br><span class="line">                            .source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 翻页</span></span><br><span class="line">        pageNo++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="6、DSL查询"><a href="#6、DSL查询" class="headerlink" title="6、DSL查询"></a>6、DSL查询</h3><p>上面对文档的操作都是根据id操作的，而我们想要应对复杂查询就得使用DSL查询。<br>DSL查询：就是Json格式来定义查询条件，一般分为两类：<br>（1）叶子查询：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。<br>（2）复合查询：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。<br>然后在查询以后，还可以对查询结果继续做处理，包括：<br>（1）排序：按照1个或多个字段值进行排序；<br>（2）分页：根据<code>from</code>和<code>size</code>做分页，类似mysql；<br>（3）高亮：对搜索结果中的关键字添加特殊样式，使其更加醒目；<br>（4）聚合：对搜索结果做数据统计以形成报表。  </p>
<h4 id="1-Kibana中操作DSL"><a href="#1-Kibana中操作DSL" class="headerlink" title="(1)Kibana中操作DSL"></a>(1)Kibana中操作DSL</h4><p><strong>1、基本语法</strong>  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;查询类型&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// .. 查询条件</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>说明：<code>GET /&#123;索引库名&#125;/_search</code>：其中的<code>_search</code>是固定路径，不能修改。<br>例如，我们以最简单的无条件查询为例，查询items索引库中的数据，无条件查询的类型是：<code>match_all</code>，因此其查询语句如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>发现发现虽然是<code>match_all</code>，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条，这是因为处于安全考虑，elasticsearch设置了默认的查询页数。  </p>
<p><strong>2、叶子查询</strong><br>叶子查询的类型也可以做进一步细分，详情大家可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html">官网文档</a>。<br>这里列举一些常见的，例如：  </p>
<ul>
<li><code>Full Text Queries</code>（全文检索查询）：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。  </li>
<li><code>Term-level queries</code>（精确查询）：不会对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。  </li>
<li>地理坐标查询：用于搜索地理位置，搜索方式很多。</li>
</ul>
<p>（1）<code>全文检索查询</code><br>全文检索的种类也很多，详情可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html">官网文档</a>。<br>这里以全文检索中的<code>match</code>为例，语法如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" class="">  
<p>与<code>match</code>类似的还有<code>multi_match</code>，区别在于可以同时对多个字段搜索，而且多个字段都要满足，语法示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;字段1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;字段2&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" class="">  

<p>（2）<code>精确查询</code><br>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询，也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配，因此推荐查找keyword、数值、日期、boolean类型的字段。例如：id、price、城市、地名、人名等等，作为一个整体才有含义的字段。<br>详情可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html">官网文档</a>。<br>这里以查询<code>term</code>索引库为例，语法如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索条件&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png" class="">  
<p>如果查询条件是：华为 小米，因为不做分词，所以是查询不到结果的。<br>再来看下<code>range</code>查询，语法如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>最小值<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>最大值<span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>说明：<code>range</code>是范围查询，对于范围筛选的关键字有：<code>gte</code>（大于等于）、<code>gt</code>（大于）、<code>lte</code>（小于等于）、<code>lt</code>（小于）。<br>示例：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png" class="">  

<p><strong>3、复合查询</strong><br>复合查询大致可以分为两类：  </p>
<ul>
<li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如：bool；  </li>
<li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：function_score、dis_max。</li>
</ul>
<p>其它复合查询及相关语法可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html">官网文档</a>。<br>（1）<code>算分函数查询</code><br>当我们利用<code>match</code>查询时，文档结果会根据与搜索词条的<strong>关联度打分（_score）</strong>，返回结果时按照分值降序排列。<br>例如，我们搜索 “手机”，结果如下：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png" class="">  
<p>从elasticsearch5.1开始，采用的相关性打分算法是BM25算法，公式如下：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png" class="">  
<p>基于这套公式，就可以判断出某个文档与用户搜索的关键字之间的关联度，还是比较准确的，但是，在实际业务需求中，常常会有竞价排名的功能，不是相关度越高排名越靠前，而是掏的钱多的排名靠前，例如在百度中搜索Java培训，排名靠前的就是广告推广。<br>要想人为控制相关性算分，就需要利用elasticsearch中的<code>function score</code>查询了。<br><code>function score</code>查询中包含四部分内容：  </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、原始查询条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，原始算分（query score)。</span><br><span class="line"><span class="number">2</span>、过滤条件：<span class="built_in">filter</span>部分，符合该条件的文档才会重新算分。</span><br><span class="line"><span class="number">3</span>、算分函数：符合<span class="built_in">filter</span>条件的文档要根据这个函数做运算，得到的函数算分（<span class="function"><span class="keyword">function</span> <span class="title">score</span>），有四种函数： </span></span><br><span class="line">（<span class="number">1</span>）weight：函数结果是常量；</span><br><span class="line">（<span class="number">2</span>）field_value_factor：以文档中的某个字段值作为函数结果；</span><br><span class="line">（<span class="number">3</span>）random_score：以随机数作为函数结果；</span><br><span class="line">（<span class="number">4</span>）script_score：自定义算分函数算法。</span><br><span class="line"><span class="number">4</span>、运算模式：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： </span><br><span class="line">（<span class="number">1</span>）<span class="built_in">multiply</span>：相乘；</span><br><span class="line">（<span class="number">2</span>）<span class="built_in">replace</span>：用<span class="function"><span class="keyword">function</span> <span class="title">score</span>替换<span class="title">query</span> <span class="title">score</span>；</span></span><br><span class="line">（<span class="number">3</span>）其它，例如：<span class="built_in">sum</span>、<span class="built_in">avg</span>、<span class="built_in">max</span>、<span class="built_in">min</span>。</span><br></pre></td></tr></table></figure>
<p><code>function score</code>的运行流程如下：  </p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、根据原始条件查询搜索文档，并且计算相关性算分，称为原始算分（query <span class="variable language_">score</span>）；</span><br><span class="line"><span class="number">2</span>、根据过滤条件，过滤文档；</span><br><span class="line"><span class="number">3</span>、符合过滤条件的文档，基于算分函数运算，得到函数算分（<span class="keyword">function</span> <span class="variable language_">score</span>）；</span><br><span class="line"><span class="number">4</span>、将原始算分（query <span class="variable language_">score</span>）和函数算分（<span class="keyword">function</span> <span class="variable language_">score</span>）基于运算模式做运算，得到最终结果，作为相关性算分。</span><br></pre></td></tr></table></figure>
<p>因此，其中的关键点是：  </p>
<ul>
<li>过滤条件：决定哪些文档的算分被修改；  </li>
<li>算分函数：决定函数算分的算法；  </li>
<li>运算模式：决定最终算分结果。</li>
</ul>
<p>示例：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给IPhone这个品牌的手机算分提高十倍，分析如下：</span></span><br><span class="line"><span class="comment"> * 1.过滤条件：品牌必须为IPhone；</span></span><br><span class="line"><span class="comment"> * 2.算分函数：常量weight，值为10；</span></span><br><span class="line"><span class="comment"> * 3.算分模式：相乘multiply。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  .... <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 原始查询，可以是任意条件</span></span><br><span class="line">      <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 算分函数</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 满足的条件，品牌必须是Iphone</span></span><br><span class="line">            <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Iphone&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="comment">// 算分权重为2</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;multipy&quot;</span> <span class="comment">// 加权模式，求乘积</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>（2）<code>bool查询</code><br>bool查询：就是利用逻辑运算来组合一个或多个查询子句的组合。<br>bool查询支持的逻辑运算有：  </p>
<ul>
<li>must：必须匹配每个子查询，类似“与”；  </li>
<li>should：选择性匹配子查询，类似“或”；  </li>
<li>must_not：必须不匹配，不参与算分，类似“非”；  </li>
<li>filter：必须匹配，不参与算分。</li>
</ul>
<p>基本语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vivo&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">2500</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>出于性能考虑，与搜索关键字无关的查询尽量采用<code>must_not</code>或<code>filter</code>逻辑运算，避免参与相关性算分。  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png" class="">  
<p>例如：在上面商城网站，其中输入框的搜索条件肯定要参与相关性算分，可以采用<code>must</code>，但是价格范围过滤、品牌过滤、分类过滤等尽量采用<code>filter</code>，不要参与相关性算分。<br>比如，要在搜索框中搜索手机，但品牌必须是华为，价格必须是900~1599，那么可以这样写：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">90000</span><span class="punctuation">,</span> <span class="attr">&quot;lt&quot;</span><span class="punctuation">:</span> <span class="number">159900</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>（3）<code>排序</code><br>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序，不过分词字段无法排序，能参与排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。<br>详细说明可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/sort-search-results.html">官网文档</a>。<br>基本语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;排序字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;排序方式asc升序和desc降序&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例，按照商品价格排序：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 下面可简写成：</span></span><br><span class="line"><span class="comment">   * &quot;sort&quot;: [&#123;&quot;price&quot;: &quot;asc&quot;&#125;]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> <span class="comment">// order这个是代表排序，不是订单</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>（4）<code>基础分页</code><br>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。<br>elasticsearch中通过修改<code>from</code>（从第几个文档开始）、<code>size</code>（总共查询几个文档）参数来控制要返回的分页结果，类似于mysql中的<code>limit ?, ?</code>，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html">官网文档</a>。<br>基本语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>  <span class="comment">// 每页文档数量，默认10</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>（5）<code>深度分页</code>（应用场景：数据迁移、手机滚动查询）<br>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上，这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。<br>elasticsearch会禁止<code>from+size</code>超过10000的请求。<br>针对深度分页，elasticsearch提供了两种解决方案：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html">详情见文档</a>  </p>
<ul>
<li>search after（官方推荐使用的方式）：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据；<br>将上一页的最后一个数据的排序值作为查询下一页时的条件之一，加上此条件后查询下一页就还是相当于在查“第一页”（在上一页之后的数据中的第一页）。<br>例如：假设每页10条记录，相当于查询第一页时设置了查询条件并且只获取10条记录。想要查询第二页的数据时，查询条件不变和获取记录条数不变，多了一个search_after&#x3D;第一页最后的记录，这样就会返回第一页最后记录之后的10条记录。  </li>
<li>scroll（官方已经不推荐使用）：原理将排序后的文档id形成快照，保存下来，基于快照做分页。</li>
</ul>
<p>注意：<br>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。<br>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。  </p>
<p>（6）<code>高亮</code><br>使用<code>&lt;em&gt;</code>标签包裹住需要被高亮显示的字符串，返回给前端，前端在写css样式。<br>基本语法：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;搜索字段&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索关键字&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;高亮字段名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意：  </p>
<ul>
<li>搜索必须有查询条件，而且是全文检索类型的查询条件，例如<code>match</code>；  </li>
<li>参与高亮的字段必须是<code>text</code>类型的字段；  </li>
<li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code>。</li>
</ul>
<p>示例：  </p>
<img src="/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.png" class="">  

<p><strong>4、数据聚合</strong><br>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算。例如：  </p>
<ul>
<li>什么品牌的手机最受欢迎？  </li>
<li>这些手机的平均价格、最高价格、最低价格？  </li>
<li>这些手机每月的销售情况如何？</li>
</ul>
<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/search-aggregations.html">官网文档</a>。<br>聚合常见的有三类：  </p>
<ul>
<li>桶（Bucket）聚合：用来对文档做分组（相当于mysql中的group by）。</li>
</ul>
<ol>
<li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组；  </li>
<li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组。</li>
</ol>
<ul>
<li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等 。</li>
</ul>
<ol>
<li>Avg：求平均值；  </li>
<li>Max：求最大值；  </li>
<li>Min：求最小值；  </li>
<li>Stats：同时求max、min、avg、sum等。</li>
</ol>
<ul>
<li>管道（pipeline）聚合：其它聚合的结果为基础做进一步运算。</li>
</ul>
<p>注意：参加聚合的字段必须是不分词的字段，例如：keyword、日期、数值、布尔类型。<br>（1）<code>Bucket聚合</code><br>例如我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组，category值一样的放在同一组，属于Bucket聚合中的Term聚合。<br>基本语法如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * size是查数据时需要返回的每页的大小，</span></span><br><span class="line"><span class="comment">   * 每页大小默认是10，返回十条数据，</span></span><br><span class="line"><span class="comment">   * 这里给0的目的是避免返回聚合结果也返回搜索的文档数据结果返回出来，</span></span><br><span class="line"><span class="comment">   * 如果不想看搜索的文档数据，</span></span><br><span class="line"><span class="comment">   * 仅仅只想做聚合的情况下就增加了网络传输的负担，所以这里是0。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="comment">// 设置size为0，就是每页查0条，则结果中就不包含文档，只包含聚合</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;category_agg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合名称，自定义，但不能重复</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合的类型，按分类聚合，所以用term</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category&quot;</span><span class="punctuation">,</span> <span class="comment">// 参与聚合的字段名称，如果这里使用category报错，则换成category.keyword</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">// 希望返回的聚合结果的最大数量</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>上面是对所有文档进行聚合，现在加入条件聚合，例如：我想知道价格高于3000元的手机品牌有哪些？搜索条件为价格高于3000和必须是手机，并且统计的是品牌。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;category&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gte&quot;</span>: <span class="number">300000</span> <span class="comment">// 单位为分，所以3000元要写成300000</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;brand_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>Metric聚合</code><br>我们统计了价格高于3000的手机品牌，形成了一个个桶，现在我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。<br>这就要用到Metric聚合了，例如stats聚合，就可以同时获取min、max、avg等结果。<br>基本语法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;category&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gte&quot;</span>: <span class="number">300000</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;brand_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;brand&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;stats_meric&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;stats&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 可以看到我们在brand_agg聚合的内部，</span></span><br><span class="line"><span class="comment"> * 我们新加了一个aggs参数。</span></span><br><span class="line"><span class="comment"> * 这个聚合就是brand_agg的子聚合，</span></span><br><span class="line"><span class="comment"> * 会对brand_agg形成的每个桶中的文档分别统计。</span></span><br><span class="line"><span class="comment"> * stats_meric：聚合名称</span></span><br><span class="line"><span class="comment"> * stats：聚合类型，stats是metric聚合的一种</span></span><br><span class="line"><span class="comment"> * field：聚合字段，这里选择price，统计价格</span></span><br><span class="line"><span class="comment"> * 由于stats是对brand_agg形成的每个品牌桶内文档分别做统计，</span></span><br><span class="line"><span class="comment"> * 因此每个品牌都会统计出自己的价格最小、最大、平均值。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="2-Java代码操作DSL"><a href="#2-Java代码操作DSL" class="headerlink" title="(2)Java代码操作DSL"></a>(2)Java代码操作DSL</h4><p><strong>1、查询所有文档</strong>（无查询条件）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数，QueryBuilders构建查询条件</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 1.获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.遍历结果数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 3.得到_source，也就是原始json文档</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 4.反序列化并打印</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">item</span> <span class="operator">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：<br>elasticsearch返回的结果是一个JSON字符串，结构包含：<br>（1）hits：命中的结果，其中包含：  </p>
<ul>
<li>total：总条数，其中的value是具体的总条数值；  </li>
<li>max_score：所有结果中得分最高的文档的相关性算分；  </li>
<li>hits：搜索结果的文档数组，其中的每个文档都是一个json对象：<br>_source：文档中的原始数据，也是json对象。</li>
</ul>
<p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：<br>（1）SearchHits：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果；<br>（2）SearchHits#getTotalHits().value：获取总条数信息；<br>（3）SearchHits#getHits()：获取SearchHit数组，也就是文档数组；<br>（4）SearchHit#getSourceAsString()：获取文档结果中的_source，也就是原始的json文档数据。  </p>
<p><strong>2、叶子查询</strong><br>所有的查询条件都是由<code>QueryBuilders</code>来构建的，叶子查询也不例外，因此整套代码中变化的部分仅仅是<code>query</code>条件构造的方式，其它不动。<br>先将解析响应操作提取出来当作一个方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析响应简单的查询所有文档并解析原文档为json字符串并转（函数复用）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="type">SearchHits</span>  <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="keyword">if</span> (hits.getTotalHits() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数=========&gt;&quot;</span>+total);</span><br><span class="line">    &#125;</span><br><span class="line">    SearchHit[] searchHits = hits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">        <span class="comment">//将json字符串转换为对象获取json格式的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//将json字符串转换为对象</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;itemDoc=========&gt;&quot;</span>+itemDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）<code>match</code>查询  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;脱脂牛奶&quot;</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>multi_match</code>查询  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMultiMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    request.source().query(QueryBuilders.multiMatchQuery(<span class="string">&quot;脱脂牛奶&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;category&quot;</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）<code>range</code>查询  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRange</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    request.source().query(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(<span class="number">10000</span>).lte(<span class="number">30000</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）<code>term</code>查询  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testTerm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 可以用GET /items/_mapping查看索引的字段类型，</span></span><br><span class="line"><span class="comment">	 * 如果brand字段是keyword类型则适合精确匹配，</span></span><br><span class="line"><span class="comment">	 * 直接termQuery(&quot;brand&quot;, &quot;华为&quot;)即可。</span></span><br><span class="line"><span class="comment">	 * 注意：</span></span><br><span class="line"><span class="comment">	 * 如果brand字段是text类型，需要使用keyword子字段进行精确匹配，</span></span><br><span class="line"><span class="comment">	 * 则需要termQuery(&quot;brand.keyword&quot;, &quot;华为&quot;)。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    request.source().query(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;华为&quot;</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、复合查询</strong><br>复合查询也是由QueryBuilders来构建，以bool查询为例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    <span class="comment">// 2.1.准备bool查询</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">bool</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.2.关键字搜索</span></span><br><span class="line">    bool.must(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;脱脂牛奶&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.3.品牌过滤，查不到结果的得改成brand.keyword</span></span><br><span class="line">    bool.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;德亚&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.4.价格过滤</span></span><br><span class="line">	<span class="comment">// lt：less than 小于 </span></span><br><span class="line">	<span class="comment">// lte : less than equal 小于等于</span></span><br><span class="line">	<span class="comment">// gt : greater than 大于 </span></span><br><span class="line">	<span class="comment">// gte : greater then equal 大于等于</span></span><br><span class="line">    bool.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">30000</span>));</span><br><span class="line">    request.source().query(bool);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、排序和分页</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageAndSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>, pageSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    <span class="comment">// 2.1.搜索条件参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;脱脂牛奶&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.2.排序参数</span></span><br><span class="line">    request.source().sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">    <span class="comment">// 2.3.分页参数</span></span><br><span class="line">    request.source().from((pageNo - <span class="number">1</span>) * pageSize).size(pageSize);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、高亮</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.组织请求参数</span></span><br><span class="line">    <span class="comment">// 2.1.query条件</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;脱脂牛奶&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.2.高亮条件</span></span><br><span class="line">    request.source().highlighter(</span><br><span class="line">            SearchSourceBuilder.highlight()</span><br><span class="line">                    .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                    .preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>)</span><br><span class="line">                    .postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 1.获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.遍历结果数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 3.得到_source，也就是原始json文档</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 4.反序列化</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">item</span> <span class="operator">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class="line">        <span class="comment">// 5.获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isNotEmpty(hfs)) &#123;</span><br><span class="line">            <span class="comment">// 5.1.有高亮结果，获取name的高亮结果</span></span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">hf</span> <span class="operator">=</span> hfs.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (hf != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 5.2.获取第一个高亮结果片段，就是商品名称的高亮值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">hfName</span> <span class="operator">=</span> hf.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                item.setName(hfName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、聚合</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAgg</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备请求参数</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">bool</span> <span class="operator">=</span> QueryBuilders.boolQuery()</span><br><span class="line">            .filter(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;手机&quot;</span>))</span><br><span class="line">            .filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(<span class="number">300000</span>));</span><br><span class="line">    request.source().query(bool).size(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 3.聚合参数</span></span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders.terms(<span class="string">&quot;brand_agg&quot;</span>).field(<span class="string">&quot;brand&quot;</span>).size(<span class="number">5</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 4.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 5.解析聚合结果</span></span><br><span class="line">    <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">    <span class="comment">// 5.1.获取品牌聚合</span></span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brand_agg&quot;</span>);</span><br><span class="line">    <span class="comment">// 5.2.获取聚合中的桶</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="comment">// 5.3.遍历桶内数据</span></span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 5.4.获取桶内key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        System.out.print(<span class="string">&quot;brand = &quot;</span> + brand);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">        System.out.println(<span class="string">&quot;; count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>工作技能</category>
      </categories>
      <tags>
        <tag>工作技能</tag>
        <tag>后端</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
</search>
