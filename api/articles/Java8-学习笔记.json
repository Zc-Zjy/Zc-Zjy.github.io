{"title":"Java8 学习笔记","slug":"Java8-学习笔记","date":"2024-01-16T03:10:19.000Z","updated":"2024-07-12T07:43:37.639Z","comments":true,"path":"api/articles/Java8-学习笔记.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、Lambda表达式\"><a href=\"#一、Lambda表达式\" class=\"headerlink\" title=\"一、Lambda表达式\"></a>一、Lambda表达式</h1><p>使用<code>Lambda</code>表达式，接口必须是函数式接口（只有一个方法的接口），并且函数式接口需要用注解<code>@FunctionalInterface</code>修饰（检查接口是不是函数式接口）。<br>一、Java内置的函数式接口<br>1、<code>Consumer&lt;T&gt;</code> 消费型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>2、<code>Supplier&lt;T&gt;</code> 供给型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">get</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>Function&lt;T,R&gt;</code> 函数型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>4、<code>Predicate&lt;T&gt;</code> 断言型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>5、<code>BiFunction&lt;T,U,R&gt;</code> 双参数函数型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R <span class=\"title function_\">apply</span><span class=\"params\">(T t,U u)</span></span><br></pre></td></tr></table></figure>\n<p>6、<code>UnaryOperator&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>7、<code>BinaryOperatoy&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">apply</span><span class=\"params\">(T t1,T ,t2)</span></span><br></pre></td></tr></table></figure>\n<p>8、<code>BiConsumer&lt;T,U&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t,U u)</span></span><br></pre></td></tr></table></figure>\n<p>9、<code>ToIntFunction&lt;T&gt;、ToLongFunction&lt;T&gt;、ToDoubleFunction&lt;T&gt;</code><br>分别计算int、long、double值的函数式接口<br><a href=\"https://www.cnblogs.com/lwjQAQ/p/16321930.html\">链接教程请点击</a><br>二、例子<br>1、使用内置接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、无参数，无返回值</span></span><br><span class=\"line\">  <span class=\"comment\">//使用函数式接口Runnable</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 匿名内部类使用方式：</span></span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>（）&#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用</span></span><br><span class=\"line\">    r.run();</span><br><span class=\"line\">    <span class=\"comment\">// Lambda方式使用：</span></span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用</span></span><br><span class=\"line\">    r1.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2、多个参数(如果只有一个参数小括号可以省略，如果方法体有多条语句必须写大括号)，无返回值</span></span><br><span class=\"line\">  <span class=\"comment\">// 一个参数使用Consumer接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个参数使用Comparator接口</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class=\"line\">    con.accept(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 3、两个参数，有返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Integer.compare(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    com.compare(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用自定义接口<br>（1）场景一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数式接口</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyFun</span>&lt;T,R&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> R <span class=\"title function_\">getValue</span><span class=\"params\">(T t1,T t2)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operator</span><span class=\"params\">(Integer x,Integer y,MyFun&lt;Integer,Integer&gt; m)</span> &#123;</span><br><span class=\"line\">    System.out.println(m.getValue(x,y));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x + y); <span class=\"comment\">// 计算x+y等于5</span></span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x * y); <span class=\"comment\">// 计算x*y等于6</span></span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x - y); <span class=\"comment\">// 计算x-y等于1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）场景二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个接口</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Myfun</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getValue</span><span class=\"params\">(Integer num)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Integer <span class=\"title function_\">operation</span><span class=\"params\">(Integer num,Myfun m)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.getValue(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> operation(<span class=\"number\">100</span>,x -&gt; x + x);</span><br><span class=\"line\">    System.out.println(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、其他使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个user类</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(Integer id,String name,Integer age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给users排序，先按年龄排序，年龄相同按姓名排序</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">  List&lt;User&gt; users = Arrays.asList(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">101</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">102</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">59</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">103</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">28</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">104</span>,<span class=\"string\">&quot;赵六&quot;</span>,<span class=\"number\">8</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">105</span>,<span class=\"string\">&quot;田七&quot;</span>,<span class=\"number\">38</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Collections.sort(users,(item1,item2) -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item1.getAge() == item2.getAge()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item1.getName().compareTo(item2.getName());</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -Integer.compare(item1.getAge(),item2.getAge()); <span class=\"comment\">// 加个“-”号表示倒序排序</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 测试</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (User user:users) &#123;</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、使用方法\"><a href=\"#二、使用方法\" class=\"headerlink\" title=\"二、使用方法\"></a>二、使用方法</h1><h3 id=\"1、获取指定元素的下标\"><a href=\"#1、获取指定元素的下标\" class=\"headerlink\" title=\"1、获取指定元素的下标\"></a>1、获取指定元素的下标</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加测试数据</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test1&quot;</span>);list.add(<span class=\"string\">&quot;test2&quot;</span>);list.add(<span class=\"string\">&quot;test3&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test4&quot;</span>);list.add(<span class=\"string\">&quot;test5&quot;</span>);list.add(<span class=\"string\">&quot;test6&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test7&quot;</span>);list.add(<span class=\"string\">&quot;test8&quot;</span>);list.add(<span class=\"string\">&quot;test9&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">AtomicInteger</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.stream()</span><br><span class=\"line\">    <span class=\"comment\">//指定匹配逻辑</span></span><br><span class=\"line\">    .filter(s -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每比对一个元素，数值加1</span></span><br><span class=\"line\">        index.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.equals(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .findFirst();</span><br><span class=\"line\">\t</span><br><span class=\"line\">System.out.println(index.get());</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、reduce（归约）使用方法\"><a href=\"#2、reduce（归约）使用方法\" class=\"headerlink\" title=\"2、reduce（归约）使用方法\"></a>2、<code>reduce（归约）</code>使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子：执行1+2+3+4+5</span></span><br><span class=\"line\"><span class=\"comment\">// 传统的方法：</span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Integer i : list)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;sum = &quot;</span> + sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用java8方法：</span></span><br><span class=\"line\"><span class=\"comment\">// reduce解释：0是初始值，相当于第一次是0+a+b，</span></span><br><span class=\"line\"><span class=\"comment\">// 然后将0+a+b的值返回给初始值；第二次循环计算的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 初始值就不是0了，变成了0+a+b的值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum2</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>,(a,b) -&gt; a + b);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;sum2 = &quot;</span> + sum2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、分组使用方法\"><a href=\"#3、分组使用方法\" class=\"headerlink\" title=\"3、分组使用方法\"></a>3、分组使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将数组按数组每项的长度分组</span></span><br><span class=\"line\"><span class=\"comment\">// 传统方法</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;banana&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">Map&lt;Integer,List&lt;String&gt;&gt; groups = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : list) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"comment\">// groups没有包含length长度才执行if里面的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!groups.containsKey(length))&#123;</span><br><span class=\"line\">        groups.put(length,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    groups.get(length).add(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(groups);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java8方法，下面的Collectors是java8中的</span></span><br><span class=\"line\">Map&lt;Integer,List&lt;String&gt;&gt; groups2 = list.stream().collect(Collectors.groupingBy(String::length));</span><br><span class=\"line\">System.out.println(groups2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、合并list的方式\"><a href=\"#4、合并list的方式\" class=\"headerlink\" title=\"4、合并list的方式\"></a>4、合并list的方式</h3><p>一、使用<code>addAll()</code>方法<br><strong>说明：</strong>这种方式简单直接，适用于两个List元素类型相同的场景。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">result.addAll(list1);</span><br><span class=\"line\">result.addAll(list2);</span><br></pre></td></tr></table></figure>\n<p>二、使用<code>Stream</code>的<code>concat()</code>方法<br><strong>说明：</strong>这也是一种简单的合并方式，同样要求两个List元素类型相同。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = Stream.concat(list1.stream(), list2.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>三、使用<code>Stream</code>的<code>flatMap()</code>方法<br><strong>说明：</strong>这种方式通过Stream的flatMap()先将两个List展开为元素流，再使用collect()收集到一个List，更加灵活。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = Stream.of(list1, list2).flatMap(list -&gt; list.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>四、如果两个List元素类型不同,可以：<br>1、先将每个List映射为对应的Stream，然后再concat：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; result = Stream.concat(list1.stream().map(x -&gt; (Object)x),</span><br><span class=\"line\">                             list2.stream().map(x -&gt; (Object)x))</span><br><span class=\"line\">                            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>2、或者使用flatMap()并在映射过程中统一元素类型：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; result =  Stream.of(list1, list2) .flatMap(list -&gt; list.stream().map(x -&gt;(Object)x))</span><br><span class=\"line\">                                               .collect(Collectors.toList()); </span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、API\"><a href=\"#三、API\" class=\"headerlink\" title=\"三、API\"></a>三、API</h1><h3 id=\"1、AtomicInteger类-原子计数器（线程安全）\"><a href=\"#1、AtomicInteger类-原子计数器（线程安全）\" class=\"headerlink\" title=\"1、AtomicInteger类 原子计数器（线程安全）\"></a>1、AtomicInteger类 原子计数器（线程安全）</h3><h3 id=\"2、LocalDate类（时间）\"><a href=\"#2、LocalDate类（时间）\" class=\"headerlink\" title=\"2、LocalDate类（时间）\"></a>2、LocalDate类（时间）</h3><p>一、获取当前时间  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">today</span> <span class=\"operator\">=</span> LocalDate.now();</span><br></pre></td></tr></table></figure>\n<p>二、自定义获取时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">formatDate</span> <span class=\"operator\">=</span> LocalDate.of(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt1</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2018</span>,<span class=\"number\">9</span>,<span class=\"number\">17</span>,<span class=\"number\">9</span>,<span class=\"number\">17</span>,<span class=\"number\">17</span>);</span><br></pre></td></tr></table></figure>\n<p>三、获取月份</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(ldt.getMonth()); <span class=\"comment\">// 获取英文的月份 SEPTEMBER</span></span><br><span class=\"line\">System.out.println(ldt.getMonthValue()); <span class=\"comment\">// 获取数字 9</span></span><br><span class=\"line\">System.out.println(ldt.getDayOfMonth()); <span class=\"comment\">// 获取当前月份有多少天 30</span></span><br></pre></td></tr></table></figure>\n<p>四、获取下个或者上个当前时间（plusX()、minusX()）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">System.out.println(ldt); <span class=\"comment\">// 当前时间 2023-09-20T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.plusDays(<span class=\"number\">1</span>)); <span class=\"comment\">// 明天的当前时间 2023-09-21T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.plusWeeks(<span class=\"number\">1</span>)); <span class=\"comment\">// 下周也就是7天后的当前时间 2023-09-27T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.minusMonths(<span class=\"number\">1</span>)); <span class=\"comment\">// 上个月的当前时间 2023-08-20T17:30:56.492057200</span></span><br></pre></td></tr></table></figure>\n<p>五、其它用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同环比日期计算</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstWeekDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.previous(DayOfWeek.MONDAY));</span><br><span class=\"line\">System.out.println(firstWeekDay); <span class=\"comment\">// 2020-02-03 本周第一天</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstMonthDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class=\"line\">System.out.println(firstMonthDay); <span class=\"comment\">// 2020-02-01 本月第一天</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstYearDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.firstDayOfYear());</span><br><span class=\"line\">System.out.println(firstYearDay); <span class=\"comment\">// 2020-01-01 本年第一天</span></span><br><span class=\"line\"><span class=\"comment\">// 判断两个日期前后</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> formatDate.isBefore(today);</span><br><span class=\"line\">System.out.println(param); <span class=\"comment\">// true 判断a是否早于b</span></span><br><span class=\"line\"><span class=\"comment\">// 计算两个日期的间隔天数</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> LocalDate.parse(<span class=\"string\">&quot;2019-12-01&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> LocalDate.parse(<span class=\"string\">&quot;2020-02-05&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">days</span> <span class=\"operator\">=</span> start.until(end, ChronoUnit.DAYS);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;days: &quot;</span> + days); <span class=\"comment\">// days: 66</span></span><br></pre></td></tr></table></figure>\n<p>六、<code>LocalDate</code>转<code>String</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">fmt</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">dateStr</span> <span class=\"operator\">=</span> date.format(fmt);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;LocalDate转String:&quot;</span>+dateStr); <span class=\"comment\">// LocalDate转String:2023-09-21</span></span><br></pre></td></tr></table></figure>\n<p>七、<code>String</code>转<code>LocalDate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">dateParam</span> <span class=\"operator\">=</span> LocalDate.parse(dateStr, df);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;String =&gt; LocalDate: &quot;</span> + dateParam);</span><br></pre></td></tr></table></figure>","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、Lambda表达式\"><a href=\"#一、Lambda表达式\" class=\"headerlink\" title=\"一、Lambda表达式\"></a>一、Lambda表达式</h1><p>使用<code>Lambda</code>表达式，接口必须是函数式接口（只有一个方法的接口），并且函数式接口需要用注解<code>@FunctionalInterface</code>修饰（检查接口是不是函数式接口）。<br>一、Java内置的函数式接口<br>1、<code>Consumer&lt;T&gt;</code> 消费型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>2、<code>Supplier&lt;T&gt;</code> 供给型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">get</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>Function&lt;T,R&gt;</code> 函数型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>4、<code>Predicate&lt;T&gt;</code> 断言型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>5、<code>BiFunction&lt;T,U,R&gt;</code> 双参数函数型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R <span class=\"title function_\">apply</span><span class=\"params\">(T t,U u)</span></span><br></pre></td></tr></table></figure>\n<p>6、<code>UnaryOperator&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span></span><br></pre></td></tr></table></figure>\n<p>7、<code>BinaryOperatoy&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">apply</span><span class=\"params\">(T t1,T ,t2)</span></span><br></pre></td></tr></table></figure>\n<p>8、<code>BiConsumer&lt;T,U&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t,U u)</span></span><br></pre></td></tr></table></figure>\n<p>9、<code>ToIntFunction&lt;T&gt;、ToLongFunction&lt;T&gt;、ToDoubleFunction&lt;T&gt;</code><br>分别计算int、long、double值的函数式接口<br><a href=\"https://www.cnblogs.com/lwjQAQ/p/16321930.html\">链接教程请点击</a><br>二、例子<br>1、使用内置接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1、无参数，无返回值</span></span><br><span class=\"line\">  <span class=\"comment\">//使用函数式接口Runnable</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 匿名内部类使用方式：</span></span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>（）&#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用</span></span><br><span class=\"line\">    r.run();</span><br><span class=\"line\">    <span class=\"comment\">// Lambda方式使用：</span></span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用</span></span><br><span class=\"line\">    r1.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2、多个参数(如果只有一个参数小括号可以省略，如果方法体有多条语句必须写大括号)，无返回值</span></span><br><span class=\"line\">  <span class=\"comment\">// 一个参数使用Consumer接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 两个参数使用Comparator接口</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class=\"line\">    con.accept(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 3、两个参数，有返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Integer.compare(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    com.compare(<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用自定义接口<br>（1）场景一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数式接口</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyFun</span>&lt;T,R&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> R <span class=\"title function_\">getValue</span><span class=\"params\">(T t1,T t2)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operator</span><span class=\"params\">(Integer x,Integer y,MyFun&lt;Integer,Integer&gt; m)</span> &#123;</span><br><span class=\"line\">    System.out.println(m.getValue(x,y));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x + y); <span class=\"comment\">// 计算x+y等于5</span></span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x * y); <span class=\"comment\">// 计算x*y等于6</span></span><br><span class=\"line\">    operator(<span class=\"number\">3</span>,<span class=\"number\">2</span>,(x,y) -&gt; x - y); <span class=\"comment\">// 计算x-y等于1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）场景二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个接口</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Myfun</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getValue</span><span class=\"params\">(Integer num)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Integer <span class=\"title function_\">operation</span><span class=\"params\">(Integer num,Myfun m)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.getValue(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> operation(<span class=\"number\">100</span>,x -&gt; x + x);</span><br><span class=\"line\">    System.out.println(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、其他使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个user类</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(Integer id,String name,Integer age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给users排序，先按年龄排序，年龄相同按姓名排序</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">  List&lt;User&gt; users = Arrays.asList(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">101</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">102</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">59</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">103</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">28</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">104</span>,<span class=\"string\">&quot;赵六&quot;</span>,<span class=\"number\">8</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">105</span>,<span class=\"string\">&quot;田七&quot;</span>,<span class=\"number\">38</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Collections.sort(users,(item1,item2) -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item1.getAge() == item2.getAge()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item1.getName().compareTo(item2.getName());</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -Integer.compare(item1.getAge(),item2.getAge()); <span class=\"comment\">// 加个“-”号表示倒序排序</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 测试</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (User user:users) &#123;</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、使用方法\"><a href=\"#二、使用方法\" class=\"headerlink\" title=\"二、使用方法\"></a>二、使用方法</h1><h3 id=\"1、获取指定元素的下标\"><a href=\"#1、获取指定元素的下标\" class=\"headerlink\" title=\"1、获取指定元素的下标\"></a>1、获取指定元素的下标</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加测试数据</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test1&quot;</span>);list.add(<span class=\"string\">&quot;test2&quot;</span>);list.add(<span class=\"string\">&quot;test3&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test4&quot;</span>);list.add(<span class=\"string\">&quot;test5&quot;</span>);list.add(<span class=\"string\">&quot;test6&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;test7&quot;</span>);list.add(<span class=\"string\">&quot;test8&quot;</span>);list.add(<span class=\"string\">&quot;test9&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">AtomicInteger</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.stream()</span><br><span class=\"line\">    <span class=\"comment\">//指定匹配逻辑</span></span><br><span class=\"line\">    .filter(s -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每比对一个元素，数值加1</span></span><br><span class=\"line\">        index.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.equals(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .findFirst();</span><br><span class=\"line\">\t</span><br><span class=\"line\">System.out.println(index.get());</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、reduce（归约）使用方法\"><a href=\"#2、reduce（归约）使用方法\" class=\"headerlink\" title=\"2、reduce（归约）使用方法\"></a>2、<code>reduce（归约）</code>使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子：执行1+2+3+4+5</span></span><br><span class=\"line\"><span class=\"comment\">// 传统的方法：</span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Integer i : list)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;sum = &quot;</span> + sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用java8方法：</span></span><br><span class=\"line\"><span class=\"comment\">// reduce解释：0是初始值，相当于第一次是0+a+b，</span></span><br><span class=\"line\"><span class=\"comment\">// 然后将0+a+b的值返回给初始值；第二次循环计算的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 初始值就不是0了，变成了0+a+b的值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum2</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>,(a,b) -&gt; a + b);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;sum2 = &quot;</span> + sum2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、分组使用方法\"><a href=\"#3、分组使用方法\" class=\"headerlink\" title=\"3、分组使用方法\"></a>3、分组使用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将数组按数组每项的长度分组</span></span><br><span class=\"line\"><span class=\"comment\">// 传统方法</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;banana&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">Map&lt;Integer,List&lt;String&gt;&gt; groups = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : list) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"comment\">// groups没有包含length长度才执行if里面的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!groups.containsKey(length))&#123;</span><br><span class=\"line\">        groups.put(length,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    groups.get(length).add(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(groups);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java8方法，下面的Collectors是java8中的</span></span><br><span class=\"line\">Map&lt;Integer,List&lt;String&gt;&gt; groups2 = list.stream().collect(Collectors.groupingBy(String::length));</span><br><span class=\"line\">System.out.println(groups2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、合并list的方式\"><a href=\"#4、合并list的方式\" class=\"headerlink\" title=\"4、合并list的方式\"></a>4、合并list的方式</h3><p>一、使用<code>addAll()</code>方法<br><strong>说明：</strong>这种方式简单直接，适用于两个List元素类型相同的场景。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">result.addAll(list1);</span><br><span class=\"line\">result.addAll(list2);</span><br></pre></td></tr></table></figure>\n<p>二、使用<code>Stream</code>的<code>concat()</code>方法<br><strong>说明：</strong>这也是一种简单的合并方式，同样要求两个List元素类型相同。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = Stream.concat(list1.stream(), list2.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>三、使用<code>Stream</code>的<code>flatMap()</code>方法<br><strong>说明：</strong>这种方式通过Stream的flatMap()先将两个List展开为元素流，再使用collect()收集到一个List，更加灵活。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Type&gt; result = Stream.of(list1, list2).flatMap(list -&gt; list.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>四、如果两个List元素类型不同,可以：<br>1、先将每个List映射为对应的Stream，然后再concat：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; result = Stream.concat(list1.stream().map(x -&gt; (Object)x),</span><br><span class=\"line\">                             list2.stream().map(x -&gt; (Object)x))</span><br><span class=\"line\">                            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>2、或者使用flatMap()并在映射过程中统一元素类型：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; result =  Stream.of(list1, list2) .flatMap(list -&gt; list.stream().map(x -&gt;(Object)x))</span><br><span class=\"line\">                                               .collect(Collectors.toList()); </span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、API\"><a href=\"#三、API\" class=\"headerlink\" title=\"三、API\"></a>三、API</h1><h3 id=\"1、AtomicInteger类-原子计数器（线程安全）\"><a href=\"#1、AtomicInteger类-原子计数器（线程安全）\" class=\"headerlink\" title=\"1、AtomicInteger类 原子计数器（线程安全）\"></a>1、AtomicInteger类 原子计数器（线程安全）</h3><h3 id=\"2、LocalDate类（时间）\"><a href=\"#2、LocalDate类（时间）\" class=\"headerlink\" title=\"2、LocalDate类（时间）\"></a>2、LocalDate类（时间）</h3><p>一、获取当前时间  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">today</span> <span class=\"operator\">=</span> LocalDate.now();</span><br></pre></td></tr></table></figure>\n<p>二、自定义获取时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">formatDate</span> <span class=\"operator\">=</span> LocalDate.of(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt1</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2018</span>,<span class=\"number\">9</span>,<span class=\"number\">17</span>,<span class=\"number\">9</span>,<span class=\"number\">17</span>,<span class=\"number\">17</span>);</span><br></pre></td></tr></table></figure>\n<p>三、获取月份</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(ldt.getMonth()); <span class=\"comment\">// 获取英文的月份 SEPTEMBER</span></span><br><span class=\"line\">System.out.println(ldt.getMonthValue()); <span class=\"comment\">// 获取数字 9</span></span><br><span class=\"line\">System.out.println(ldt.getDayOfMonth()); <span class=\"comment\">// 获取当前月份有多少天 30</span></span><br></pre></td></tr></table></figure>\n<p>四、获取下个或者上个当前时间（plusX()、minusX()）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">System.out.println(ldt); <span class=\"comment\">// 当前时间 2023-09-20T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.plusDays(<span class=\"number\">1</span>)); <span class=\"comment\">// 明天的当前时间 2023-09-21T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.plusWeeks(<span class=\"number\">1</span>)); <span class=\"comment\">// 下周也就是7天后的当前时间 2023-09-27T17:30:56.492057200</span></span><br><span class=\"line\">System.out.println(ldt.minusMonths(<span class=\"number\">1</span>)); <span class=\"comment\">// 上个月的当前时间 2023-08-20T17:30:56.492057200</span></span><br></pre></td></tr></table></figure>\n<p>五、其它用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同环比日期计算</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstWeekDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.previous(DayOfWeek.MONDAY));</span><br><span class=\"line\">System.out.println(firstWeekDay); <span class=\"comment\">// 2020-02-03 本周第一天</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstMonthDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class=\"line\">System.out.println(firstMonthDay); <span class=\"comment\">// 2020-02-01 本月第一天</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">firstYearDay</span> <span class=\"operator\">=</span> formatDate.with(TemporalAdjusters.firstDayOfYear());</span><br><span class=\"line\">System.out.println(firstYearDay); <span class=\"comment\">// 2020-01-01 本年第一天</span></span><br><span class=\"line\"><span class=\"comment\">// 判断两个日期前后</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> formatDate.isBefore(today);</span><br><span class=\"line\">System.out.println(param); <span class=\"comment\">// true 判断a是否早于b</span></span><br><span class=\"line\"><span class=\"comment\">// 计算两个日期的间隔天数</span></span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> LocalDate.parse(<span class=\"string\">&quot;2019-12-01&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> LocalDate.parse(<span class=\"string\">&quot;2020-02-05&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">days</span> <span class=\"operator\">=</span> start.until(end, ChronoUnit.DAYS);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;days: &quot;</span> + days); <span class=\"comment\">// days: 66</span></span><br></pre></td></tr></table></figure>\n<p>六、<code>LocalDate</code>转<code>String</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">fmt</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">dateStr</span> <span class=\"operator\">=</span> date.format(fmt);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;LocalDate转String:&quot;</span>+dateStr); <span class=\"comment\">// LocalDate转String:2023-09-21</span></span><br></pre></td></tr></table></figure>\n<p>七、<code>String</code>转<code>LocalDate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">dateParam</span> <span class=\"operator\">=</span> LocalDate.parse(dateStr, df);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;String =&gt; LocalDate: &quot;</span> + dateParam);</span><br></pre></td></tr></table></figure>","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}