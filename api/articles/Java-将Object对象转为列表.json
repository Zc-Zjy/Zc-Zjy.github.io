{"title":"Java 将Object对象转为列表","slug":"Java-将Object对象转为列表","date":"2024-01-16T02:51:26.000Z","updated":"2024-07-12T07:43:37.638Z","comments":true,"path":"api/articles/Java-将Object对象转为列表.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<p><strong>说明：</strong>在Java编程中，我们经常需要将一个对象（Object）转换为列表（List）的形式进行处理。这种转换通常用于数据的整理、存储和展示等操作。本文将介绍几种常用的方法来实现将Object转为列表的操作，并提供相应的代码示例。  </p>\n<h1 id=\"方法一：手动转换\"><a href=\"#方法一：手动转换\" class=\"headerlink\" title=\"方法一：手动转换\"></a>方法一：手动转换</h1><p><strong>说明：</strong>最简单的方法是手动将Object的属性逐个提取出来，再将其添加到列表中。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"comment\">// get、set方法...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    list.add(person.getName());</span><br><span class=\"line\">    list.add(person.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title function_\">objToList</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> ArrayList&lt;?&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : (List&lt;?&gt;) obj) &#123;</span><br><span class=\"line\">            list.add(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是灵活性较高，可以根据实际需求选择需要转换的属性。但是缺点是代码较为冗长，对于复杂的对象结构，需要编写大量的代码。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法二：Apache-Commons-BeanUtils\"><a href=\"#方法二：Apache-Commons-BeanUtils\" class=\"headerlink\" title=\"方法二：Apache Commons BeanUtils\"></a>方法二：Apache Commons BeanUtils</h1><p><strong>说明：</strong>Apache Commons BeanUtils是一个常用的Java工具库，其中提供了一个BeanUtils类，可以方便地将Java对象的属性转换为Map对象。然后，我们可以将Map对象转换为列表。    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String, object&gt; map = BeanUtils.describe(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(map.values());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是代码简洁，不需要手动提取对象的属性。但是缺点是需要引入额外的依赖库。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法三：使用反射\"><a href=\"#方法三：使用反射\" class=\"headerlink\" title=\"方法三：使用反射\"></a>方法三：使用反射</h1><p><strong>说明：</strong>反射是Java编程中的一个重要特性，可以在运行时动态地获取和操作对象的属性和方法。我们可以利用反射机制将Java对象的属性逐个提取出来，再将其添加到列表中。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IllegalAccessException&#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field:fields)&#123;</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        list.add(field.get(obj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是灵活性较高，可以适用于任意类型的对象。但是缺点是性能较差，对于大量的对象转换操作，会有一定的性能影响。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法四：使用Jackson库\"><a href=\"#方法四：使用Jackson库\" class=\"headerlink\" title=\"方法四：使用Jackson库\"></a>方法四：使用Jackson库</h1><p><strong>说明：</strong>Jackson是一个流行的Java库，可以方便地将Java对象转换为JSON格式的字符串。我们可以利用Jackson库将Java对象转换为JSON字符串，再将其解析为列表。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> objectMapper.writeValueAsString(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objectMapper.readValue(json, List.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是简洁、效率较高，并且可以处理复杂的对象结构。但是缺点是需要引入额外的依赖库。</p>\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<p><strong>说明：</strong>在Java编程中，我们经常需要将一个对象（Object）转换为列表（List）的形式进行处理。这种转换通常用于数据的整理、存储和展示等操作。本文将介绍几种常用的方法来实现将Object转为列表的操作，并提供相应的代码示例。  </p>\n<h1 id=\"方法一：手动转换\"><a href=\"#方法一：手动转换\" class=\"headerlink\" title=\"方法一：手动转换\"></a>方法一：手动转换</h1><p><strong>说明：</strong>最简单的方法是手动将Object的属性逐个提取出来，再将其添加到列表中。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"comment\">// get、set方法...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    list.add(person.getName());</span><br><span class=\"line\">    list.add(person.getAge());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title function_\">objToList</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> ArrayList&lt;?&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : (List&lt;?&gt;) obj) &#123;</span><br><span class=\"line\">            list.add(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是灵活性较高，可以根据实际需求选择需要转换的属性。但是缺点是代码较为冗长，对于复杂的对象结构，需要编写大量的代码。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法二：Apache-Commons-BeanUtils\"><a href=\"#方法二：Apache-Commons-BeanUtils\" class=\"headerlink\" title=\"方法二：Apache Commons BeanUtils\"></a>方法二：Apache Commons BeanUtils</h1><p><strong>说明：</strong>Apache Commons BeanUtils是一个常用的Java工具库，其中提供了一个BeanUtils类，可以方便地将Java对象的属性转换为Map对象。然后，我们可以将Map对象转换为列表。    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String, object&gt; map = BeanUtils.describe(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(map.values());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是代码简洁，不需要手动提取对象的属性。但是缺点是需要引入额外的依赖库。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法三：使用反射\"><a href=\"#方法三：使用反射\" class=\"headerlink\" title=\"方法三：使用反射\"></a>方法三：使用反射</h1><p><strong>说明：</strong>反射是Java编程中的一个重要特性，可以在运行时动态地获取和操作对象的属性和方法。我们可以利用反射机制将Java对象的属性逐个提取出来，再将其添加到列表中。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IllegalAccessException&#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field:fields)&#123;</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        list.add(field.get(obj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是灵活性较高，可以适用于任意类型的对象。但是缺点是性能较差，对于大量的对象转换操作，会有一定的性能影响。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"方法四：使用Jackson库\"><a href=\"#方法四：使用Jackson库\" class=\"headerlink\" title=\"方法四：使用Jackson库\"></a>方法四：使用Jackson库</h1><p><strong>说明：</strong>Jackson是一个流行的Java库，可以方便地将Java对象转换为JSON格式的字符串。我们可以利用Jackson库将Java对象转换为JSON字符串，再将其解析为列表。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title function_\">convertObjectToList</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> objectMapper.writeValueAsString(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objectMapper.readValue(json, List.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方法的优点是简洁、效率较高，并且可以处理复杂的对象结构。但是缺点是需要引入额外的依赖库。</p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}