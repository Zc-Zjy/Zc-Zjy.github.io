{"title":"设计模式","slug":"设计模式","date":"2023-11-24T01:57:49.000Z","updated":"2025-04-29T09:34:37.647Z","comments":true,"path":"api/articles/设计模式.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n<hr>\n<h1 id=\"一、策略模式（行为型模式）\"><a href=\"#一、策略模式（行为型模式）\" class=\"headerlink\" title=\"一、策略模式（行为型模式）\"></a>一、策略模式（行为型模式）</h1><h3 id=\"1、后端\"><a href=\"#1、后端\" class=\"headerlink\" title=\"1、后端\"></a>1、后端</h3><p>1、说明：<br>定义一组算法，将每个算法都封装起来，并且使它们之间可以根据需求互换使用。<br><strong>重点理解：</strong>就是把策略算法行为提出来，写成接口，然后再创建各种策略算法行为去实现这个接口，然后在需要使用到的地方，通过传入不同的参数来使用不同的策略算法行为。<br>比如：有一个<code>鸭子接口</code>，这个<code>接口</code>中有<code>颜色</code>、<code>飞行</code>两个方法，然后这个<code>接口</code>一开始有两个实现类：白鸭和红鸭，它们都实现了颜色和飞行的方法。<br>现在，需要新增一个黄鸭实现类，但是这个黄鸭是不会飞的，所以如果实现这个鸭子接口，就需要重写飞行的方法，但是这样就会导致代码重复，而且代码结<br>构看上去不是很合理，所以就可以使用策略模式，有两种方案，两种方案都是将飞行的方法提出来，将飞行的方法写成一个接口，都创建这个飞行接口，并在<br>这个飞行接口中添加飞行方法：<br>（1）第一种方案<br>白鸭和红鸭都去实现这个飞行接口，然后黄鸭不实现这个飞行接口。<br>（2）第二种方案<br>创建两个实现类：会飞和不会飞去实现该接口，具体看下面代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建鸭子接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建飞行接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建两个实现类去实现飞行接口</span></span><br><span class=\"line\"><span class=\"comment\">// 会飞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyWithWings</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m flying with wings!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不会飞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I can&#x27;t fly!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后，我们实现具体的 Duck 类，并在其中使用 FlyBehavior</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MallardDuck</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MallardDuck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = <span class=\"keyword\">new</span> <span class=\"title class_\">FlyWithWings</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m a mallard duck with green head.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RubberDuck</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RubberDuck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = <span class=\"keyword\">new</span> <span class=\"title class_\">FlyNoWay</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m a yellow rubber duck.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuckTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Duck</span> <span class=\"variable\">mallard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MallardDuck</span>();</span><br><span class=\"line\">        mallard.color();</span><br><span class=\"line\">        mallard.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Duck</span> <span class=\"variable\">rubber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RubberDuck</span>();</span><br><span class=\"line\">        rubber.color();</span><br><span class=\"line\">        rubber.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态改变 rubber duck 的飞行行为</span></span><br><span class=\"line\">        rubber.setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">FlyWithWings</span>());</span><br><span class=\"line\">        rubber.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、场景一：<br>（1）有一个系统，一开始只支持Mysql；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    MysqlDemo(String username,String password) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doServiceDemo</span> <span class=\"params\">(MysqlDemo mysqlDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + mysqlDemo.getClass().getSimpleName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + mysqlDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + mysqlDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MysqlDemo</span> <span class=\"variable\">mysqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MysqlDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceDemo</span>().doServiceDemo(mysqlDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：MysqlDemo</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n<p>（2）因为系统升级，开始支持SqlService、Oracle、Postgresql，修改代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 DataBasesDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBasesDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer type;</span><br><span class=\"line\"></span><br><span class=\"line\">    DataBasesDemo(String username,String password,Integer type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 DataBasesType</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库类型 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">DataBasesType</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Msql(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SqlService(<span class=\"number\">1</span>),</span><br><span class=\"line\">    Oracle(<span class=\"number\">2</span>),</span><br><span class=\"line\">    Postgresql(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    DataBasesType(Integer code) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doServiceDemo</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.Msql.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.SqlService.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.SqlService);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.Oracle, dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Postgresql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">mySqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">sqlServiceDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;SqlService&quot;</span>, <span class=\"string\">&quot;SqlService&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">oracleDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Oracle&quot;</span>, <span class=\"string\">&quot;Oracle&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">postgresqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Postgresql&quot;</span>, <span class=\"string\">&quot;Postgresql&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceDemo</span>().doServiceDemo(sqlServiceDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：SqlService</span><br><span class=\"line\">使用的数据库用户名：SqlService</span><br><span class=\"line\">使用的数据库密码：SqlService</span><br></pre></td></tr></table></figure>\n<p>查看<code>ServiceDemo</code>业务处理，有多个<code>if...else if...if</code>，这样如果以后再新增一个数据库，还要去修改<code>if...else</code>，代码看着很臃肿，不利于维护，有可能还要修改旧的代码，不可取的。依据面向对象设计原则中<code>开放封闭原则</code>（对扩展开放，对修改封闭），使用<code>策略模式</code>。<br>（3）使用策略模式（实体类和枚举不变，只修改业务）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 用来扩展，每个数据库都会实现这个接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span><span class=\"params\">(DataBasesDemo dataBasesDemo)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 Mysql业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlServiceDemoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 Oracle业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OracleServiceDemoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Mysql</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MysqlServiceDemoImpl</span>().doService(<span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：Msql</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n<p>说明：这样不用在业务里再写<code>if...else...</code>了，如果新增了一个数据库，直接实现<code>ServiceDemo</code>接口就行了，对修改关闭，对扩展开放。（还可以使用<code>Lambda</code>表达式来进行简化，不需要上面的实现类）<br>（4）使用Lambda简化（实体类、枚举类和ServiceDemo接口不变，删除<code>MysqlServiceDemoImpl</code>和<code>OracleServiceDemoImpl</code>类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Mysql</span></span><br><span class=\"line\">        doService(<span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"number\">0</span>), dataBasesDemo -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span><span class=\"params\">(DataBasesDemo dataBasesDemo, ServiceDemo serviceDemo)</span> &#123;</span><br><span class=\"line\">        serviceDemo.doService(dataBasesDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：Msql</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、前端\"><a href=\"#2、前端\" class=\"headerlink\" title=\"2、前端\"></a>2、前端</h3><p>1、使用<code>if...else...</code>的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">tag, num1, num2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tag == <span class=\"string\">&#x27;add&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;sub&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;mul&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tag == <span class=\"string\">&#x27;div&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;add&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sub&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;mul&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;div&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span> (tag, num1, num2) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data[tag](num1, num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、使用策略模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StrategyDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// strategy指代下面的Add、Sub、Mul、Div类</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">setStrategy</span>(<span class=\"params\">strategy</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span> = strategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">result</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span>.<span class=\"title function_\">do</span>(num1, num2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mul</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Div</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">test</span>:</span><br><span class=\"line\"><span class=\"keyword\">let</span> strategyDemo = <span class=\"keyword\">new</span> <span class=\"title class_\">StrategyDemo</span>();</span><br><span class=\"line\">strategyDemo.<span class=\"title function_\">setStrategy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Add</span>());</span><br><span class=\"line\">strategyDemo.<span class=\"title function_\">result</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、示例一：基础使用\"><a href=\"#3、示例一：基础使用\" class=\"headerlink\" title=\"3、示例一：基础使用\"></a>3、示例一：基础使用</h3><p>1、创建一个策略接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、创建具体的策略类，然后去实现策略接口<br>（1）策略一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 具体策略实现</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcelStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;xlsx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理Excel逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）策略二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PdfStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pdf&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理PDF逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、创建一个策略工厂类，使用springboot依赖注入简化策略管理和通过自动配置实现策略自动发现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, FileStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动注入所有策略实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileStrategyFactory</span><span class=\"params\">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getType(), strategy));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(String fileType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;不存在该策略&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、示例二：使用枚举管理策略类型\"><a href=\"#4、示例二：使用枚举管理策略类型\" class=\"headerlink\" title=\"4、示例二：使用枚举管理策略类型\"></a>4、示例二：使用枚举管理策略类型</h3><p>通过枚举集中管理策略类型，避免散落的字符串导致的类型安全问题。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口增强</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    FileType <span class=\"title function_\">getFileType</span><span class=\"params\">()</span>; <span class=\"comment\">// 返回枚举类型</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">FileType</span> &#123;</span><br><span class=\"line\">    EXCEL(<span class=\"string\">&quot;xlsx&quot;</span>, <span class=\"string\">&quot;Excel文件处理器&quot;</span>),</span><br><span class=\"line\">    PDF(<span class=\"string\">&quot;pdf&quot;</span>, <span class=\"string\">&quot;PDF文件处理器&quot;</span>),</span><br><span class=\"line\">    WORD(<span class=\"string\">&quot;docx&quot;</span>, <span class=\"string\">&quot;Word文件处理器&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String extension;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    FileType(String extension, String description) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.extension = extension;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据扩展名获取枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FileType <span class=\"title function_\">fromExtension</span><span class=\"params\">(String ext)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(values())</span><br><span class=\"line\">                   .filter(t -&gt; t.extension.equalsIgnoreCase(ext))</span><br><span class=\"line\">                   .findFirst()</span><br><span class=\"line\">                   .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;未知文件类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略实现示例</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcelStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileType <span class=\"title function_\">getFileType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FileType.EXCEL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 具体处理逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略工厂优化</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;FileType, FileStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">EnumMap</span>&lt;&gt;(FileType.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileStrategyFactory</span><span class=\"params\">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getFileType(), strategy));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(FileType fileType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;未支持的文件类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在控制器中使用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileExt</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xlsx&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">FileType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> FileType.fromExtension(fileExt);</span><br><span class=\"line\"><span class=\"type\">FileStrategy</span> <span class=\"variable\">strategy</span> <span class=\"operator\">=</span> factory.getStrategy(type);</span><br><span class=\"line\">strategy.process(file);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、示例五：结合条件注解的动态策略\"><a href=\"#5、示例五：结合条件注解的动态策略\" class=\"headerlink\" title=\"5、示例五：结合条件注解的动态策略\"></a>5、示例五：结合条件注解的动态策略</h3><p>根据运行环境或配置动态启用不同的策略实现。<br>缓存策略选择：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span>;</span><br><span class=\"line\">    Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Redis实现（当cache.type=redis时启用）</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;redis&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisCacheStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 连接Redis进行存储</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从Redis获取数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地缓存实现（默认启用）</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConditionalOnProperty</span>(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、name = &quot;cache.type&quot;：检查配置属性 cache.type 的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、havingValue = &quot;local&quot;：如果配置文件中cache.type的值是 &quot;local&quot;，则条件成立。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、matchIfMissing = true：如果配置文件中属性cache.type不存在，也认为条件成立。</span></span><br><span class=\"line\"><span class=\"comment\"> * 综合起来，这个注解表示：当配置文件中属性cache.type的值是&quot;local&quot;或者该配置属性不存在时，装配这个Bean；否则，不装配这个 Bean。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalCacheStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; cache = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        cache.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略工厂</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CacheStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CacheStrategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CacheStrategyFactory</span><span class=\"params\">(CacheStrategy strategy)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CacheStrategy <span class=\"title function_\">getCurrentStrategy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​配置方式​：  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">redis</span> <span class=\"comment\"># 切换为redis策略</span></span><br></pre></td></tr></table></figure>\n<p>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 业务层使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CacheStrategy cache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProductService</span><span class=\"params\">(CacheStrategyFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache = factory.getCurrentStrategy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProduct</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> (Product) cache.get(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (product == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            product = loadFromDB(id);</span><br><span class=\"line\">            cache.put(id, product);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、示例六：策略模式-模板方法\"><a href=\"#6、示例六：策略模式-模板方法\" class=\"headerlink\" title=\"6、示例六：策略模式+模板方法\"></a>6、示例六：策略模式+模板方法</h3><p>在策略模式中复用公共逻辑，保持扩展性。<br>（支付策略）下面的示例，要想使用AbstractPaymentStrategy，就必须有一个类去继承它。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象模板类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractPaymentStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板方法定义处理流程</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> PaymentResult <span class=\"title function_\">pay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        validateRequest(request);</span><br><span class=\"line\">        checkBalance(request);</span><br><span class=\"line\">        <span class=\"type\">PaymentResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> doPay(request);</span><br><span class=\"line\">        recordLog(request, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 公共校验方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">validateRequest</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getAmount().compareTo(BigDecimal.ZERO) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;金额必须大于零&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法由子类实现</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 公共日志方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recordLog</span><span class=\"params\">(PaymentRequest request, PaymentResult result)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录支付日志</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体策略实现</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlipayStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查支付宝余额</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用支付宝接口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaymentResult</span>(<span class=\"literal\">true</span>, <span class=\"string\">&quot;支付成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WechatPayStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查微信支付余额</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用微信支付接口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaymentResult</span>(<span class=\"literal\">true</span>, <span class=\"string\">&quot;支付成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、示例七：默认为本地存储，添加配置后使用远程存储\"><a href=\"#7、示例七：默认为本地存储，添加配置后使用远程存储\" class=\"headerlink\" title=\"7、示例七：默认为本地存储，添加配置后使用远程存储\"></a>7、示例七：默认为本地存储，添加配置后使用远程存储</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 策略接口定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 策略自动注册工厂</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StorageStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;StorageType, StorageStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动收集所有实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StorageStrategyFactory</span><span class=\"params\">(List&lt;StorageStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getType(), strategy)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(StorageType type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(type))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">StorageException</span>(<span class=\"string\">&quot;未支持的存储类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 具体策略实现（阿里云OSS）</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;oss&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OssStorageStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StorageType.OSS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用OSS SDK实现上传</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 本地存储策略（默认启用）</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalStorageStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StorageType.LOCAL_DISK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 保存到本地磁盘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">oss</span> <span class=\"comment\"># 切换存储策略</span></span><br><span class=\"line\">  <span class=\"attr\">oss:</span></span><br><span class=\"line\">    <span class=\"attr\">endpoint:</span> <span class=\"string\">oss-cn-shanghai.aliyuncs.com</span></span><br><span class=\"line\">    <span class=\"attr\">access-key:</span> <span class=\"string\">AKIDxxxx</span></span><br><span class=\"line\">    <span class=\"attr\">secret-key:</span> <span class=\"string\">xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、代理模式（结构型模式）\"><a href=\"#二、代理模式（结构型模式）\" class=\"headerlink\" title=\"二、代理模式（结构型模式）\"></a>二、代理模式（结构型模式）</h1><p>什么是静态代理和动态代理？<br>比如有一个中介公司，中介公司里面有3个中介，分别是小红、小明、小江，然后有一个房东，有很多套房子，想要将房子租出去，房东将第一套房子交给中介小红帮他出租，结果小红能力很强，房东以后就将自己所有房子都交给小红，固定不变，这就是静态代理；<br>房东将房子交给中介公司，我不管谁能力强，我只需要将房子租出去，由公司动态将房子随机分配给小红、小明、小江三人，这就是动态代理。  </p>\n<h3 id=\"1、静态代理模式\"><a href=\"#1、静态代理模式\" class=\"headerlink\" title=\"1、静态代理模式\"></a>1、静态代理模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个房东类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Landlord landlord;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(Landlord landlord)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.landlord = landlord;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 可以写新的业务逻辑</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原本的业务逻辑</span></span><br><span class=\"line\">\t\tlandlord.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">landlord</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Landlord</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Proxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(landlord);</span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、动态代理模式\"><a href=\"#2、动态代理模式\" class=\"headerlink\" title=\"2、动态代理模式\"></a>2、动态代理模式</h3><p>说明：由上面的例子可以得知，是由公司动态分配，而这个公司，在java这里只有两家，分别是<code>JDK动态代理</code>和<code>cglib</code>。<br><code>JDK动态代理</code>：（java原生自带的）JDK原生的实现方式，需要被代理的目标类必须有接口（也就是目标类必须有实现的接口，如果只有一个没有实现接口的普通类是不行的）！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（<strong>如果有接口就用</strong>）<br><code>cglib</code>：（第三方的，导入spring包就有）通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（<strong>如果没有接口就用</strong>）<br>1、<code>JDK动态代理</code><br>JDK动态代理使用<code>java.lang.reflect.Proxy</code>这个类来进行实现的（JDK动态代理只能对接口中的方法进行增强）。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个jdk动态代理工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> target.getClass().getClassLoader();</span><br><span class=\"line\">\t\tClass&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class=\"line\">\t\t<span class=\"type\">InvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * invoke方法：就是代理对象执行的代理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * proxy：代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * method：代理对象需要实现的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * args：method所对应的方法参数</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * newProxyInstance()：创建一个代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 其中有三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、handler：设置代理对象实现目标对象方法的过程，也就是代理类所要执行的业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"comment\">// 目标方法要实现的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建目标类</span></span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">landlord</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Landlord</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建代理工厂</span></span><br><span class=\"line\">\t\t<span class=\"type\">ProxyFactory</span> <span class=\"variable\">proxyFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(landlord);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建代理对象，这里注意：必须转成接口类型，因为JDK动态代理是基于接口的！</span></span><br><span class=\"line\">\t\t<span class=\"type\">Rent</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Rent) proxyFactory.getProxy();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面也可以使用万能动态代理工具类来实现：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态代理有两个类Proxy和InvocationHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * Proxy类是 生成得到代理类</span></span><br><span class=\"line\"><span class=\"comment\"> * InvocationHandler类是 处理代理实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//被代理的接口</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTarget</span><span class=\"params\">(Object target)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//生成得到代理类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"built_in\">this</span>.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"built_in\">this</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理代理实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log(method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target,args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加一个日志功能</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">log</span><span class=\"params\">(String log)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在执行的操作是：&quot;</span> + log);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在时间是：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接使用JDK动态代理：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标方法要实现的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Rent</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Rent)Proxy.newProxyInstance(Test.class.getClassLoader(), Landlord.class.getInterfaces(), <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、<code>Cglib</code>动态代理<br>使用<code>org.springframework.cglib.proxy.Enhancer</code>类进行实现的。<br>前提条件：必须引入<code>spring-context</code>依赖。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将要代理的目标对象设置给代理对象</span></span><br><span class=\"line\">\t\tenhancer.setSuperclass(Landlord.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置回调函数，MethodInterceptor是回调类的实现类</span></span><br><span class=\"line\">\t\tenhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * obj：代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * method：目标方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * args：目标方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * proxy：目标方法的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> proxy.invokeSuper(obj, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Landlord) enhancer.create();</span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、工厂模式（创建型模式）\"><a href=\"#三、工厂模式（创建型模式）\" class=\"headerlink\" title=\"三、工厂模式（创建型模式）\"></a>三、工厂模式（创建型模式）</h1><p>工厂模式分为：简单工厂模式、工厂方法模式、抽象工厂模式。<br>三者区别：<br>1、简单工厂模式，工厂是个类，负责创建具体的产品A类、产品B类；<br>2、工厂方法模式，将工厂变为接口（包含创建产品的抽象方法，这个创建产品的抽象方法由子类去实现），具体创建哪个产品由它的子类去创建；<br>3、抽象工厂模式，本来要创建的产品之前只有A、B两类，现在如果每个类都出现了两个型号（产品Aa型号、产品Ab型号、产品Ba型号和产品Bb型号），按照工厂方法模式的话，就需要新建四个工厂类（分别创建四个型号）去实现工厂接口。现在使用抽象工厂模式，直接在抽象工厂接口中增加创建产品Bb型号的方法，然后创建一个工厂类去实现这个抽象工厂接口，这个工厂类就可以创建Aa型号和Ab型号，也可以创建Ba型号和Bb型号。  </p>\n<h3 id=\"1、简单工厂模式\"><a href=\"#1、简单工厂模式\" class=\"headerlink\" title=\"1、简单工厂模式\"></a>1、简单工厂模式</h3><p>简单工厂模式：定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例通常都具有共同的父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Car接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;Benz&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;BMW&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面工厂类中，如果需要增加一个<code>Audi</code>类，那么就需要修改工厂类中的代码，违反了开闭原则。<br>我们可以在工厂中使用反射来创建对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂类二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">(Class&lt;? extends Car&gt; carClass)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> carClass.getDeclaredConstructor().newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者使用<code>工厂方法模式</code>（是简单工厂模式的升级版），将工厂类中方法抽象出来，让子类实现工厂方法，返回不同实例。  </p>\n<h3 id=\"2、工厂方法模式\"><a href=\"#2、工厂方法模式\" class=\"headerlink\" title=\"2、工厂方法模式\"></a>2、工厂方法模式</h3><p>（1）将原来的工厂类抽象，定义一个工厂接口，让要创建的实体类的工厂类去实现这个接口。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;这是Benz（奔驰汽车）工厂，只创建Benz（奔驰）&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;这是BMW（宝马汽车）工厂，只创建BMW（宝马）&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）原来的Car接口和实现类不变。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Car接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">CarFactory</span> <span class=\"variable\">benzFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">benz</span> <span class=\"operator\">=</span> benzFactory.createCar();</span><br><span class=\"line\">\t\tbenz.print();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">CarFactory</span> <span class=\"variable\">bmwFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">bmw</span> <span class=\"operator\">=</span> bmwFactory.createCar();</span><br><span class=\"line\">\t\tbmw.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、抽象工厂模式\"><a href=\"#3、抽象工厂模式\" class=\"headerlink\" title=\"3、抽象工厂模式\"></a>3、抽象工厂模式</h3><p>抽象工厂模式相当于工厂方法模式的升级版，工厂方法模式中，一个工厂只能生产一种产品，而抽象工厂模式中，一个工厂可以生产多种产品。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象工厂接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象产品接口一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象产品接口二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzEngine</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWEngine</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类三</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzEngine</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BenzEngine&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类四</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWEngine</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMWEngine&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">AbstractFactory</span> <span class=\"variable\">benzFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">benz</span> <span class=\"operator\">=</span> benzFactory.createCar();</span><br><span class=\"line\">\t\tbenz.print();</span><br><span class=\"line\">\t\t<span class=\"type\">Engine</span> <span class=\"variable\">benzEngine</span> <span class=\"operator\">=</span> benzFactory.createEngine();</span><br><span class=\"line\">\t\tbenzEngine.print();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">AbstractFactory</span> <span class=\"variable\">bmwFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">bmw</span> <span class=\"operator\">=</span> bmwFactory.createCar();</span><br><span class=\"line\">\t\tbmw.print();</span><br><span class=\"line\">\t\t<span class=\"type\">Engine</span> <span class=\"variable\">bmwEngine</span> <span class=\"operator\">=</span> bmwFactory.createEngine();</span><br><span class=\"line\">\t\tbmwEngine.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"四、单例模式\"><a href=\"#四、单例模式\" class=\"headerlink\" title=\"四、单例模式\"></a>四、单例模式</h1><p>作用：确保某个类只能创建一个对象。  </p>\n<h3 id=\"1、饿汉式单例模式（预加载）\"><a href=\"#1、饿汉式单例模式（预加载）\" class=\"headerlink\" title=\"1、饿汉式单例模式（预加载）\"></a>1、饿汉式单例模式（预加载）</h3><p>获取对象时，对象早就创建好了（很饿）。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量，并new一个对象；<br>（3）定义一个静态方法，将上面new的对象返回。<br>很明显，没有使用该单例对象，该对象就被加载到了内存，会造成内存的浪费。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量，并new一个对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，将上面new的对象返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了避免内存的浪费，我们可以采用懒加载，即用到该单例对象的时候再创建。  </p>\n<h3 id=\"2、懒汉式单例模式（懒加载）\"><a href=\"#2、懒汉式单例模式（懒加载）\" class=\"headerlink\" title=\"2、懒汉式单例模式（懒加载）\"></a>2、懒汉式单例模式（懒加载）</h3><p>要用对象时，才开始创建创建对象。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量；<br>（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、单例模式和线程安全\"><a href=\"#3、单例模式和线程安全\" class=\"headerlink\" title=\"3、单例模式和线程安全\"></a>3、单例模式和线程安全</h3><p>1、预加载只有一条语句return instance,这显然可以保证线程安全。但是，我们知道预加载会造成内存的浪费。<br>2、懒加载不浪费内存，但是无法保证线程的安全。首先，if判断以及其内存执行代码是非原子性的。其次，new Singleton()无法保证执行的顺序性。<br>不满足原子性或者顺序性，线程肯定是不安全的，这是基本的常识，不再赘述。我主要讲一下为什么new Singleton()无法保证顺序性。我们知道创建一个对象分三步：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory=allocate();<span class=\"comment\">//1:初始化内存空间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ctorInstance(memory);<span class=\"comment\">//2:初始化对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">instance=memory();<span class=\"comment\">//3:设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure>\n<p>jvm为了提高程序执行性能，会对没有依赖关系的代码进行重排序，上面2和3行代码可能被重新排序。我们用两个线程来说明线程是不安全的。线程A和线程B都创建对象。其中，A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象（线程不安全）。<br>3、保证懒加载的线程安全<br>我们首先想到的就是使用synchronized关键字：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"comment\">// 使用synchronized关键字保证线程安全</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>synchronized加载getInstace()函数上确实保证了线程的安全。但是，如果要经常的调用getInstance()方法，不管有没有初始化实例，都会唤醒和阻塞线程。为了避免线程的上下文切换消耗大量时间，如果对象已经实例化了，我们没有必要再使用synchronized加锁，直接返回对象，所以我们把sychronized加在if(instance&#x3D;&#x3D;null)判断语句里面，保证instance未实例化的时候才加锁，这里我们还需要使用另一个关键字volatile保证对象实例化过程的顺序性：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"comment\">// 使用synchronized关键字保证线程安全</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (B.class) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、模板方法设计模式（行为型模式）\"><a href=\"#五、模板方法设计模式（行为型模式）\" class=\"headerlink\" title=\"五、模板方法设计模式（行为型模式）\"></a>五、模板方法设计模式（行为型模式）</h1><p>作用：提供一个方法作为完成某类功能的模板，具体实现让子类去实现。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 具体方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 具体的业务处理</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;相同的业务处理....&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里的处理根据子类不同而不同，调用模板方法</span></span><br><span class=\"line\">\t\ttemplateMethod();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;相同的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 模板方法，具体实现交给子类</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SonOne</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类一的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SonTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类二的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">sonOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SonOne</span>();</span><br><span class=\"line\">\t\tsonOne.method();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">sonTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SonTwo</span>();</span><br><span class=\"line\">\t\tsonTwo.method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n\n","more":"<br/>\n\n<hr>\n<h1 id=\"一、策略模式（行为型模式）\"><a href=\"#一、策略模式（行为型模式）\" class=\"headerlink\" title=\"一、策略模式（行为型模式）\"></a>一、策略模式（行为型模式）</h1><h3 id=\"1、后端\"><a href=\"#1、后端\" class=\"headerlink\" title=\"1、后端\"></a>1、后端</h3><p>1、说明：<br>定义一组算法，将每个算法都封装起来，并且使它们之间可以根据需求互换使用。<br><strong>重点理解：</strong>就是把策略算法行为提出来，写成接口，然后再创建各种策略算法行为去实现这个接口，然后在需要使用到的地方，通过传入不同的参数来使用不同的策略算法行为。<br>比如：有一个<code>鸭子接口</code>，这个<code>接口</code>中有<code>颜色</code>、<code>飞行</code>两个方法，然后这个<code>接口</code>一开始有两个实现类：白鸭和红鸭，它们都实现了颜色和飞行的方法。<br>现在，需要新增一个黄鸭实现类，但是这个黄鸭是不会飞的，所以如果实现这个鸭子接口，就需要重写飞行的方法，但是这样就会导致代码重复，而且代码结<br>构看上去不是很合理，所以就可以使用策略模式，有两种方案，两种方案都是将飞行的方法提出来，将飞行的方法写成一个接口，都创建这个飞行接口，并在<br>这个飞行接口中添加飞行方法：<br>（1）第一种方案<br>白鸭和红鸭都去实现这个飞行接口，然后黄鸭不实现这个飞行接口。<br>（2）第二种方案<br>创建两个实现类：会飞和不会飞去实现该接口，具体看下面代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建鸭子接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建飞行接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建两个实现类去实现飞行接口</span></span><br><span class=\"line\"><span class=\"comment\">// 会飞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyWithWings</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m flying with wings!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不会飞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I can&#x27;t fly!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后，我们实现具体的 Duck 类，并在其中使用 FlyBehavior</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MallardDuck</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MallardDuck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = <span class=\"keyword\">new</span> <span class=\"title class_\">FlyWithWings</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m a mallard duck with green head.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RubberDuck</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RubberDuck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = <span class=\"keyword\">new</span> <span class=\"title class_\">FlyNoWay</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">color</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I&#x27;m a yellow rubber duck.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuckTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Duck</span> <span class=\"variable\">mallard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MallardDuck</span>();</span><br><span class=\"line\">        mallard.color();</span><br><span class=\"line\">        mallard.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Duck</span> <span class=\"variable\">rubber</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RubberDuck</span>();</span><br><span class=\"line\">        rubber.color();</span><br><span class=\"line\">        rubber.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态改变 rubber duck 的飞行行为</span></span><br><span class=\"line\">        rubber.setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">FlyWithWings</span>());</span><br><span class=\"line\">        rubber.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、场景一：<br>（1）有一个系统，一开始只支持Mysql；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    MysqlDemo(String username,String password) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doServiceDemo</span> <span class=\"params\">(MysqlDemo mysqlDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + mysqlDemo.getClass().getSimpleName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + mysqlDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + mysqlDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MysqlDemo</span> <span class=\"variable\">mysqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MysqlDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceDemo</span>().doServiceDemo(mysqlDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：MysqlDemo</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n<p>（2）因为系统升级，开始支持SqlService、Oracle、Postgresql，修改代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 DataBasesDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库实体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataBasesDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer type;</span><br><span class=\"line\"></span><br><span class=\"line\">    DataBasesDemo(String username,String password,Integer type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 DataBasesType</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 数据库类型 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">DataBasesType</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Msql(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SqlService(<span class=\"number\">1</span>),</span><br><span class=\"line\">    Oracle(<span class=\"number\">2</span>),</span><br><span class=\"line\">    Postgresql(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    DataBasesType(Integer code) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doServiceDemo</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 0:Mysql 1:SqlService 2:Oracle 3:Postgresql</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.Msql.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.SqlService.getCode(), dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.SqlService);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(DataBasesType.Oracle, dataBasesDemo.getType())) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Postgresql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">mySqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">sqlServiceDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;SqlService&quot;</span>, <span class=\"string\">&quot;SqlService&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">oracleDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Oracle&quot;</span>, <span class=\"string\">&quot;Oracle&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">DataBasesDemo</span> <span class=\"variable\">postgresqlDemo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Postgresql&quot;</span>, <span class=\"string\">&quot;Postgresql&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceDemo</span>().doServiceDemo(sqlServiceDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：SqlService</span><br><span class=\"line\">使用的数据库用户名：SqlService</span><br><span class=\"line\">使用的数据库密码：SqlService</span><br></pre></td></tr></table></figure>\n<p>查看<code>ServiceDemo</code>业务处理，有多个<code>if...else if...if</code>，这样如果以后再新增一个数据库，还要去修改<code>if...else</code>，代码看着很臃肿，不利于维护，有可能还要修改旧的代码，不可取的。依据面向对象设计原则中<code>开放封闭原则</code>（对扩展开放，对修改封闭），使用<code>策略模式</code>。<br>（3）使用策略模式（实体类和枚举不变，只修改业务）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 ServiceDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 用来扩展，每个数据库都会实现这个接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span><span class=\"params\">(DataBasesDemo dataBasesDemo)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 Mysql业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlServiceDemoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 MysqlServiceDemoImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 Oracle业务处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OracleServiceDemoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServiceDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span> <span class=\"params\">(DataBasesDemo dataBasesDemo)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Oracle);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Mysql</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MysqlServiceDemoImpl</span>().doService(<span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"string\">&quot;Mysql&quot;</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：Msql</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n<p>说明：这样不用在业务里再写<code>if...else...</code>了，如果新增了一个数据库，直接实现<code>ServiceDemo</code>接口就行了，对修改关闭，对扩展开放。（还可以使用<code>Lambda</code>表达式来进行简化，不需要上面的实现类）<br>（4）使用Lambda简化（实体类、枚举类和ServiceDemo接口不变，删除<code>MysqlServiceDemoImpl</code>和<code>OracleServiceDemoImpl</code>类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建人 zjy</span></span><br><span class=\"line\"><span class=\"comment\"> * @文件名 Test</span></span><br><span class=\"line\"><span class=\"comment\"> * @创建时间 2023/11/24</span></span><br><span class=\"line\"><span class=\"comment\"> * @描述 test</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Mysql</span></span><br><span class=\"line\">        doService(<span class=\"keyword\">new</span> <span class=\"title class_\">DataBasesDemo</span>(<span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"string\">&quot;Mysql&quot;</span>, <span class=\"number\">0</span>), dataBasesDemo -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库：&quot;</span> + DataBasesType.Msql);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库用户名：&quot;</span> + dataBasesDemo.getUsername());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;使用的数据库密码：&quot;</span> + dataBasesDemo.getPassword());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doService</span><span class=\"params\">(DataBasesDemo dataBasesDemo, ServiceDemo serviceDemo)</span> &#123;</span><br><span class=\"line\">        serviceDemo.doService(dataBasesDemo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">使用的数据库：Msql</span><br><span class=\"line\">使用的数据库用户名：Mysql</span><br><span class=\"line\">使用的数据库密码：Mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、前端\"><a href=\"#2、前端\" class=\"headerlink\" title=\"2、前端\"></a>2、前端</h3><p>1、使用<code>if...else...</code>的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">tag, num1, num2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tag == <span class=\"string\">&#x27;add&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;sub&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag == <span class=\"string\">&#x27;mul&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tag == <span class=\"string\">&#x27;div&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;add&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sub&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;mul&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;div&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span> (tag, num1, num2) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data[tag](num1, num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、使用策略模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StrategyDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// strategy指代下面的Add、Sub、Mul、Div类</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">setStrategy</span>(<span class=\"params\">strategy</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span> = strategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">result</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">strategy</span>.<span class=\"title function_\">do</span>(num1, num2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mul</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Div</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">do</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 / num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">test</span>:</span><br><span class=\"line\"><span class=\"keyword\">let</span> strategyDemo = <span class=\"keyword\">new</span> <span class=\"title class_\">StrategyDemo</span>();</span><br><span class=\"line\">strategyDemo.<span class=\"title function_\">setStrategy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Add</span>());</span><br><span class=\"line\">strategyDemo.<span class=\"title function_\">result</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、示例一：基础使用\"><a href=\"#3、示例一：基础使用\" class=\"headerlink\" title=\"3、示例一：基础使用\"></a>3、示例一：基础使用</h3><p>1、创建一个策略接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、创建具体的策略类，然后去实现策略接口<br>（1）策略一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 具体策略实现</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcelStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;xlsx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理Excel逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）策略二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PdfStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pdf&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理PDF逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、创建一个策略工厂类，使用springboot依赖注入简化策略管理和通过自动配置实现策略自动发现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, FileStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动注入所有策略实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileStrategyFactory</span><span class=\"params\">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getType(), strategy));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(String fileType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;不存在该策略&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、示例二：使用枚举管理策略类型\"><a href=\"#4、示例二：使用枚举管理策略类型\" class=\"headerlink\" title=\"4、示例二：使用枚举管理策略类型\"></a>4、示例二：使用枚举管理策略类型</h3><p>通过枚举集中管理策略类型，避免散落的字符串导致的类型安全问题。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口增强</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    FileType <span class=\"title function_\">getFileType</span><span class=\"params\">()</span>; <span class=\"comment\">// 返回枚举类型</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">FileType</span> &#123;</span><br><span class=\"line\">    EXCEL(<span class=\"string\">&quot;xlsx&quot;</span>, <span class=\"string\">&quot;Excel文件处理器&quot;</span>),</span><br><span class=\"line\">    PDF(<span class=\"string\">&quot;pdf&quot;</span>, <span class=\"string\">&quot;PDF文件处理器&quot;</span>),</span><br><span class=\"line\">    WORD(<span class=\"string\">&quot;docx&quot;</span>, <span class=\"string\">&quot;Word文件处理器&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String extension;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    FileType(String extension, String description) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.extension = extension;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据扩展名获取枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FileType <span class=\"title function_\">fromExtension</span><span class=\"params\">(String ext)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(values())</span><br><span class=\"line\">                   .filter(t -&gt; t.extension.equalsIgnoreCase(ext))</span><br><span class=\"line\">                   .findFirst()</span><br><span class=\"line\">                   .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;未知文件类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略实现示例</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcelStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FileStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileType <span class=\"title function_\">getFileType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FileType.EXCEL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 具体处理逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略工厂优化</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;FileType, FileStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">EnumMap</span>&lt;&gt;(FileType.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileStrategyFactory</span><span class=\"params\">(List&lt;FileStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getFileType(), strategy));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FileStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(FileType fileType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(fileType))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;未支持的文件类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在控制器中使用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileExt</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xlsx&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">FileType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> FileType.fromExtension(fileExt);</span><br><span class=\"line\"><span class=\"type\">FileStrategy</span> <span class=\"variable\">strategy</span> <span class=\"operator\">=</span> factory.getStrategy(type);</span><br><span class=\"line\">strategy.process(file);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、示例五：结合条件注解的动态策略\"><a href=\"#5、示例五：结合条件注解的动态策略\" class=\"headerlink\" title=\"5、示例五：结合条件注解的动态策略\"></a>5、示例五：结合条件注解的动态策略</h3><p>根据运行环境或配置动态启用不同的策略实现。<br>缓存策略选择：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 策略接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span>;</span><br><span class=\"line\">    Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Redis实现（当cache.type=redis时启用）</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;redis&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisCacheStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 连接Redis进行存储</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从Redis获取数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地缓存实现（默认启用）</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConditionalOnProperty</span>(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、name = &quot;cache.type&quot;：检查配置属性 cache.type 的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、havingValue = &quot;local&quot;：如果配置文件中cache.type的值是 &quot;local&quot;，则条件成立。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、matchIfMissing = true：如果配置文件中属性cache.type不存在，也认为条件成立。</span></span><br><span class=\"line\"><span class=\"comment\"> * 综合起来，这个注解表示：当配置文件中属性cache.type的值是&quot;local&quot;或者该配置属性不存在时，装配这个Bean；否则，不装配这个 Bean。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;cache.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalCacheStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CacheStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; cache = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        cache.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 策略工厂</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CacheStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CacheStrategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CacheStrategyFactory</span><span class=\"params\">(CacheStrategy strategy)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CacheStrategy <span class=\"title function_\">getCurrentStrategy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​配置方式​：  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">redis</span> <span class=\"comment\"># 切换为redis策略</span></span><br></pre></td></tr></table></figure>\n<p>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 业务层使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CacheStrategy cache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProductService</span><span class=\"params\">(CacheStrategyFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache = factory.getCurrentStrategy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProduct</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> (Product) cache.get(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (product == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            product = loadFromDB(id);</span><br><span class=\"line\">            cache.put(id, product);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、示例六：策略模式-模板方法\"><a href=\"#6、示例六：策略模式-模板方法\" class=\"headerlink\" title=\"6、示例六：策略模式+模板方法\"></a>6、示例六：策略模式+模板方法</h3><p>在策略模式中复用公共逻辑，保持扩展性。<br>（支付策略）下面的示例，要想使用AbstractPaymentStrategy，就必须有一个类去继承它。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象模板类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractPaymentStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板方法定义处理流程</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> PaymentResult <span class=\"title function_\">pay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        validateRequest(request);</span><br><span class=\"line\">        checkBalance(request);</span><br><span class=\"line\">        <span class=\"type\">PaymentResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> doPay(request);</span><br><span class=\"line\">        recordLog(request, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 公共校验方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">validateRequest</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getAmount().compareTo(BigDecimal.ZERO) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;金额必须大于零&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法由子类实现</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 公共日志方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recordLog</span><span class=\"params\">(PaymentRequest request, PaymentResult result)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录支付日志</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体策略实现</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlipayStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查支付宝余额</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用支付宝接口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaymentResult</span>(<span class=\"literal\">true</span>, <span class=\"string\">&quot;支付成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WechatPayStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractPaymentStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkBalance</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查微信支付余额</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> PaymentResult <span class=\"title function_\">doPay</span><span class=\"params\">(PaymentRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用微信支付接口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaymentResult</span>(<span class=\"literal\">true</span>, <span class=\"string\">&quot;支付成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、示例七：默认为本地存储，添加配置后使用远程存储\"><a href=\"#7、示例七：默认为本地存储，添加配置后使用远程存储\" class=\"headerlink\" title=\"7、示例七：默认为本地存储，添加配置后使用远程存储\"></a>7、示例七：默认为本地存储，添加配置后使用远程存储</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 策略接口定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 策略自动注册工厂</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StorageStrategyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;StorageType, StorageStrategy&gt; strategyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动收集所有实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StorageStrategyFactory</span><span class=\"params\">(List&lt;StorageStrategy&gt; strategies)</span> &#123;</span><br><span class=\"line\">        strategies.forEach(strategy -&gt; </span><br><span class=\"line\">            strategyMap.put(strategy.getType(), strategy)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageStrategy <span class=\"title function_\">getStrategy</span><span class=\"params\">(StorageType type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(strategyMap.get(type))</span><br><span class=\"line\">                .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">StorageException</span>(<span class=\"string\">&quot;未支持的存储类型&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 具体策略实现（阿里云OSS）</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;oss&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OssStorageStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StorageType.OSS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用OSS SDK实现上传</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 本地存储策略（默认启用）</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;storage.type&quot;, havingValue = &quot;local&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalStorageStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StorageStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StorageType <span class=\"title function_\">getType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StorageType.LOCAL_DISK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(File file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 保存到本地磁盘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">oss</span> <span class=\"comment\"># 切换存储策略</span></span><br><span class=\"line\">  <span class=\"attr\">oss:</span></span><br><span class=\"line\">    <span class=\"attr\">endpoint:</span> <span class=\"string\">oss-cn-shanghai.aliyuncs.com</span></span><br><span class=\"line\">    <span class=\"attr\">access-key:</span> <span class=\"string\">AKIDxxxx</span></span><br><span class=\"line\">    <span class=\"attr\">secret-key:</span> <span class=\"string\">xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、代理模式（结构型模式）\"><a href=\"#二、代理模式（结构型模式）\" class=\"headerlink\" title=\"二、代理模式（结构型模式）\"></a>二、代理模式（结构型模式）</h1><p>什么是静态代理和动态代理？<br>比如有一个中介公司，中介公司里面有3个中介，分别是小红、小明、小江，然后有一个房东，有很多套房子，想要将房子租出去，房东将第一套房子交给中介小红帮他出租，结果小红能力很强，房东以后就将自己所有房子都交给小红，固定不变，这就是静态代理；<br>房东将房子交给中介公司，我不管谁能力强，我只需要将房子租出去，由公司动态将房子随机分配给小红、小明、小江三人，这就是动态代理。  </p>\n<h3 id=\"1、静态代理模式\"><a href=\"#1、静态代理模式\" class=\"headerlink\" title=\"1、静态代理模式\"></a>1、静态代理模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个房东类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Landlord landlord;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(Landlord landlord)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.landlord = landlord;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 可以写新的业务逻辑</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原本的业务逻辑</span></span><br><span class=\"line\">\t\tlandlord.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">landlord</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Landlord</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Proxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(landlord);</span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、动态代理模式\"><a href=\"#2、动态代理模式\" class=\"headerlink\" title=\"2、动态代理模式\"></a>2、动态代理模式</h3><p>说明：由上面的例子可以得知，是由公司动态分配，而这个公司，在java这里只有两家，分别是<code>JDK动态代理</code>和<code>cglib</code>。<br><code>JDK动态代理</code>：（java原生自带的）JDK原生的实现方式，需要被代理的目标类必须有接口（也就是目标类必须有实现的接口，如果只有一个没有实现接口的普通类是不行的）！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（<strong>如果有接口就用</strong>）<br><code>cglib</code>：（第三方的，导入spring包就有）通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（<strong>如果没有接口就用</strong>）<br>1、<code>JDK动态代理</code><br>JDK动态代理使用<code>java.lang.reflect.Proxy</code>这个类来进行实现的（JDK动态代理只能对接口中的方法进行增强）。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个jdk动态代理工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> target.getClass().getClassLoader();</span><br><span class=\"line\">\t\tClass&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class=\"line\">\t\t<span class=\"type\">InvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * invoke方法：就是代理对象执行的代理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * proxy：代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * method：代理对象需要实现的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * args：method所对应的方法参数</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * newProxyInstance()：创建一个代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 其中有三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、handler：设置代理对象实现目标对象方法的过程，也就是代理类所要执行的业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"comment\">// 目标方法要实现的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建目标类</span></span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">landlord</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Landlord</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建代理工厂</span></span><br><span class=\"line\">\t\t<span class=\"type\">ProxyFactory</span> <span class=\"variable\">proxyFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(landlord);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建代理对象，这里注意：必须转成接口类型，因为JDK动态代理是基于接口的！</span></span><br><span class=\"line\">\t\t<span class=\"type\">Rent</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Rent) proxyFactory.getProxy();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面也可以使用万能动态代理工具类来实现：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态代理有两个类Proxy和InvocationHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * Proxy类是 生成得到代理类</span></span><br><span class=\"line\"><span class=\"comment\"> * InvocationHandler类是 处理代理实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//被代理的接口</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTarget</span><span class=\"params\">(Object target)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//生成得到代理类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"built_in\">this</span>.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"built_in\">this</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理代理实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log(method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target,args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加一个日志功能</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">log</span><span class=\"params\">(String log)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在执行的操作是：&quot;</span> + log);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在时间是：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接使用JDK动态代理：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标方法要实现的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Rent</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Rent</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Rent)Proxy.newProxyInstance(Test.class.getClassLoader(), Landlord.class.getInterfaces(), <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 代理对象只要执行接口中的方法，就会执行invoke方法</span></span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、<code>Cglib</code>动态代理<br>使用<code>org.springframework.cglib.proxy.Enhancer</code>类进行实现的。<br>前提条件：必须引入<code>spring-context</code>依赖。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Landlord</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;我是房东，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将要代理的目标对象设置给代理对象</span></span><br><span class=\"line\">\t\tenhancer.setSuperclass(Landlord.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置回调函数，MethodInterceptor是回调类的实现类</span></span><br><span class=\"line\">\t\tenhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * obj：代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * method：目标方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * args：目标方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * proxy：目标方法的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;我是代理，我要出租房子&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 调用目标方法，执行原来目标方法的业务逻辑</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> proxy.invokeSuper(obj, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"type\">Landlord</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Landlord) enhancer.create();</span><br><span class=\"line\">\t\tproxy.rent();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、工厂模式（创建型模式）\"><a href=\"#三、工厂模式（创建型模式）\" class=\"headerlink\" title=\"三、工厂模式（创建型模式）\"></a>三、工厂模式（创建型模式）</h1><p>工厂模式分为：简单工厂模式、工厂方法模式、抽象工厂模式。<br>三者区别：<br>1、简单工厂模式，工厂是个类，负责创建具体的产品A类、产品B类；<br>2、工厂方法模式，将工厂变为接口（包含创建产品的抽象方法，这个创建产品的抽象方法由子类去实现），具体创建哪个产品由它的子类去创建；<br>3、抽象工厂模式，本来要创建的产品之前只有A、B两类，现在如果每个类都出现了两个型号（产品Aa型号、产品Ab型号、产品Ba型号和产品Bb型号），按照工厂方法模式的话，就需要新建四个工厂类（分别创建四个型号）去实现工厂接口。现在使用抽象工厂模式，直接在抽象工厂接口中增加创建产品Bb型号的方法，然后创建一个工厂类去实现这个抽象工厂接口，这个工厂类就可以创建Aa型号和Ab型号，也可以创建Ba型号和Bb型号。  </p>\n<h3 id=\"1、简单工厂模式\"><a href=\"#1、简单工厂模式\" class=\"headerlink\" title=\"1、简单工厂模式\"></a>1、简单工厂模式</h3><p>简单工厂模式：定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例通常都具有共同的父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Car接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;Benz&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;BMW&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面工厂类中，如果需要增加一个<code>Audi</code>类，那么就需要修改工厂类中的代码，违反了开闭原则。<br>我们可以在工厂中使用反射来创建对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂类二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">(Class&lt;? extends Car&gt; carClass)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> carClass.getDeclaredConstructor().newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者使用<code>工厂方法模式</code>（是简单工厂模式的升级版），将工厂类中方法抽象出来，让子类实现工厂方法，返回不同实例。  </p>\n<h3 id=\"2、工厂方法模式\"><a href=\"#2、工厂方法模式\" class=\"headerlink\" title=\"2、工厂方法模式\"></a>2、工厂方法模式</h3><p>（1）将原来的工厂类抽象，定义一个工厂接口，让要创建的实体类的工厂类去实现这个接口。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;这是Benz（奔驰汽车）工厂，只创建Benz（奔驰）&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;这是BMW（宝马汽车）工厂，只创建BMW（宝马）&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）原来的Car接口和实现类不变。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Car接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Benz类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BMW类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">CarFactory</span> <span class=\"variable\">benzFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">benz</span> <span class=\"operator\">=</span> benzFactory.createCar();</span><br><span class=\"line\">\t\tbenz.print();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">CarFactory</span> <span class=\"variable\">bmwFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">bmw</span> <span class=\"operator\">=</span> bmwFactory.createCar();</span><br><span class=\"line\">\t\tbmw.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、抽象工厂模式\"><a href=\"#3、抽象工厂模式\" class=\"headerlink\" title=\"3、抽象工厂模式\"></a>3、抽象工厂模式</h3><p>抽象工厂模式相当于工厂方法模式的升级版，工厂方法模式中，一个工厂只能生产一种产品，而抽象工厂模式中，一个工厂可以生产多种产品。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象工厂接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象产品接口一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象产品接口二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzEngine</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">createCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMW</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Engine <span class=\"title function_\">createEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWEngine</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Benz&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMW</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类三</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzEngine</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BenzEngine&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品类四</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWEngine</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Engine</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BMWEngine&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">AbstractFactory</span> <span class=\"variable\">benzFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">benz</span> <span class=\"operator\">=</span> benzFactory.createCar();</span><br><span class=\"line\">\t\tbenz.print();</span><br><span class=\"line\">\t\t<span class=\"type\">Engine</span> <span class=\"variable\">benzEngine</span> <span class=\"operator\">=</span> benzFactory.createEngine();</span><br><span class=\"line\">\t\tbenzEngine.print();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">AbstractFactory</span> <span class=\"variable\">bmwFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMWFactory</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Car</span> <span class=\"variable\">bmw</span> <span class=\"operator\">=</span> bmwFactory.createCar();</span><br><span class=\"line\">\t\tbmw.print();</span><br><span class=\"line\">\t\t<span class=\"type\">Engine</span> <span class=\"variable\">bmwEngine</span> <span class=\"operator\">=</span> bmwFactory.createEngine();</span><br><span class=\"line\">\t\tbmwEngine.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"四、单例模式\"><a href=\"#四、单例模式\" class=\"headerlink\" title=\"四、单例模式\"></a>四、单例模式</h1><p>作用：确保某个类只能创建一个对象。  </p>\n<h3 id=\"1、饿汉式单例模式（预加载）\"><a href=\"#1、饿汉式单例模式（预加载）\" class=\"headerlink\" title=\"1、饿汉式单例模式（预加载）\"></a>1、饿汉式单例模式（预加载）</h3><p>获取对象时，对象早就创建好了（很饿）。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量，并new一个对象；<br>（3）定义一个静态方法，将上面new的对象返回。<br>很明显，没有使用该单例对象，该对象就被加载到了内存，会造成内存的浪费。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量，并new一个对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，将上面new的对象返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了避免内存的浪费，我们可以采用懒加载，即用到该单例对象的时候再创建。  </p>\n<h3 id=\"2、懒汉式单例模式（懒加载）\"><a href=\"#2、懒汉式单例模式（懒加载）\" class=\"headerlink\" title=\"2、懒汉式单例模式（懒加载）\"></a>2、懒汉式单例模式（懒加载）</h3><p>要用对象时，才开始创建创建对象。<br>1、实现步骤：<br>（1）将类的构造器私有；<br>（2）定义一个静态变量；<br>（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、单例模式和线程安全\"><a href=\"#3、单例模式和线程安全\" class=\"headerlink\" title=\"3、单例模式和线程安全\"></a>3、单例模式和线程安全</h3><p>1、预加载只有一条语句return instance,这显然可以保证线程安全。但是，我们知道预加载会造成内存的浪费。<br>2、懒加载不浪费内存，但是无法保证线程的安全。首先，if判断以及其内存执行代码是非原子性的。其次，new Singleton()无法保证执行的顺序性。<br>不满足原子性或者顺序性，线程肯定是不安全的，这是基本的常识，不再赘述。我主要讲一下为什么new Singleton()无法保证顺序性。我们知道创建一个对象分三步：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory=allocate();<span class=\"comment\">//1:初始化内存空间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ctorInstance(memory);<span class=\"comment\">//2:初始化对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">instance=memory();<span class=\"comment\">//3:设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure>\n<p>jvm为了提高程序执行性能，会对没有依赖关系的代码进行重排序，上面2和3行代码可能被重新排序。我们用两个线程来说明线程是不安全的。线程A和线程B都创建对象。其中，A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象（线程不安全）。<br>3、保证懒加载的线程安全<br>我们首先想到的就是使用synchronized关键字：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"comment\">// 使用synchronized关键字保证线程安全</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>synchronized加载getInstace()函数上确实保证了线程的安全。但是，如果要经常的调用getInstance()方法，不管有没有初始化实例，都会唤醒和阻塞线程。为了避免线程的上下文切换消耗大量时间，如果对象已经实例化了，我们没有必要再使用synchronized加锁，直接返回对象，所以我们把sychronized加在if(instance&#x3D;&#x3D;null)判断语句里面，保证instance未实例化的时候才加锁，这里我们还需要使用另一个关键字volatile保证对象实例化过程的顺序性：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//（1）将类的构造器私有</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（2）定义一个静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> B b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//（3）定义一个静态方法，判断类变量是否为null，如果为null，则new一个对象，并返回</span></span><br><span class=\"line\">\t<span class=\"comment\">// 使用synchronized关键字保证线程安全</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (B.class) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tb = <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、模板方法设计模式（行为型模式）\"><a href=\"#五、模板方法设计模式（行为型模式）\" class=\"headerlink\" title=\"五、模板方法设计模式（行为型模式）\"></a>五、模板方法设计模式（行为型模式）</h1><p>作用：提供一个方法作为完成某类功能的模板，具体实现让子类去实现。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 具体方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 具体的业务处理</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;相同的业务处理....&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里的处理根据子类不同而不同，调用模板方法</span></span><br><span class=\"line\">\t\ttemplateMethod();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;相同的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 模板方法，具体实现交给子类</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SonOne</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类一的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SonTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">templateMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;子类二的业务处理....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">sonOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SonOne</span>();</span><br><span class=\"line\">\t\tsonOne.method();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">sonTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SonTwo</span>();</span><br><span class=\"line\">\t\tsonTwo.method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}