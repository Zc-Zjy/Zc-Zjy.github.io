{"title":"常用注解","slug":"常用注解","date":"2024-01-31T08:38:55.000Z","updated":"2025-06-11T03:32:22.606Z","comments":true,"path":"api/articles/常用注解.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、元注解\"><a href=\"#一、元注解\" class=\"headerlink\" title=\"一、元注解\"></a>一、元注解</h1><h3 id=\"1、-Target\"><a href=\"#1、-Target\" class=\"headerlink\" title=\"1、@Target\"></a>1、@Target</h3><p>用于描述注解得使用范围（即：被描述得注解可以用在什么地方）。  </p>\n<h3 id=\"2、-Retention\"><a href=\"#2、-Retention\" class=\"headerlink\" title=\"2、@Retention\"></a>2、@Retention</h3><p>表示需要在什么级别保存该注释信息，用于描述注解得生命周期，说明白点这个注解表示在什么地方有效（SOURCE&lt;CLASS&lt;RUNTIME)，常用RUNTIME，运行时有效。  </p>\n<h3 id=\"3、-Document\"><a href=\"#3、-Document\" class=\"headerlink\" title=\"3、@Document\"></a>3、@Document</h3><p>说明该注解将被包含在javadoc中。  </p>\n<h3 id=\"4、-Inherited\"><a href=\"#4、-Inherited\" class=\"headerlink\" title=\"4、@Inherited\"></a>4、@Inherited</h3><p>用于放在注解上，说明子类可以继承父类中得该注解，假如@Inherited放在了注解@A上，类B上注解了@A，类C继承了类B，类C也有注解@A。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> A&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@A</span>  <span class=\"comment\">// 这个是继承了类B的注解A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、注解定义与使用\"><a href=\"#二、注解定义与使用\" class=\"headerlink\" title=\"二、注解定义与使用\"></a>二、注解定义与使用</h1><h3 id=\"1、-RequestMapping\"><a href=\"#1、-RequestMapping\" class=\"headerlink\" title=\"1、@RequestMapping\"></a>1、@RequestMapping</h3><p>1、说明：<br><code>@RequestMapping</code>注解是将Web请求与请求处理类中的方法进行映射。<code>SpringMvc</code>和<code>SpringWebFlux</code>都通过<code>RequestMappingHandlerMapping</code>和<code>RequestMappingHandlerAdapter</code>两个类来提供对<code>@RequestMapping</code>注解的支持。<br>2、注解属性：<br>（1）<code>value</code>：映射的请求Url或者其别名；<br>（2）<code>method</code>：兼容HTTP的方法名；<br>（3）<code>params</code>：根据HTTP参数的存在、缺省或值对请求进行过滤；<br>（4）<code>header</code>：根据HTTP Header的存在、缺省或值对请求进行过滤；<br>（5）<code>consume</code>：设定在HTTP请求正文中允许使用的媒体类型；<br>（6）<code>product</code>：在HTTP响应体中允许使用的媒体类型。<br>3、注意：<br>在使用<code>@RequestMapping</code>之前，请求处理类还需要使用<code>@Controller</code>或<code>@RestController</code>注解进行标注。<br>4、示例：<br>（1）示例一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/demo&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">demo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;/demo&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问路径：/demo</span></span><br></pre></td></tr></table></figure>\n<p>（2）示例二<br>说明：<code>@RequestMapping</code>注解还可以对类进行标记，这样类中的处理方法在映射请求路径时，会自动将类上的<code>@RequestMapping</code>设置的<code>value</code>拼接到方法映射路径之前。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value=&quot;/demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/test&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">demo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;/demo&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问路径：/demo/test</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、-RequestBody\"><a href=\"#2、-RequestBody\" class=\"headerlink\" title=\"2、@RequestBody\"></a>2、@RequestBody</h3><p>1、说明：<br><code>@RequestBody</code>注解在<code>Controller</code>类的方法参数中使用，将请求体的参数绑定到一个对象上，请求体参数通过<code>HttpMessageConverter</code>传递，根据请求体中的参数名与对象的属性名进行匹配并绑定，此外，还可以通过<code>@Valid</code>注解对请求体中的参数进行校验。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// @Valid：是根据User类中属性上的校验规则来校验</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> User <span class=\"title function_\">createUser</span><span class=\"params\">(<span class=\"meta\">@Valid</span> <span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.createUser(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、-GetMapping\"><a href=\"#3、-GetMapping\" class=\"headerlink\" title=\"3、@GetMapping\"></a>3、@GetMapping</h3><p>1、说明：<br><code>@GetMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.GET)</code>一样，用于查询数据时，是幂等。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/findUsers&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping(&quot;/findUsers&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.finUsers();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、-PostMapping\"><a href=\"#4、-PostMapping\" class=\"headerlink\" title=\"4、@PostMapping\"></a>4、@PostMapping</h3><p>1、说明：<br><code>@PostMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.POST)</code>一样，用于新增数据时，是非幂等（多次访问对rest服务产生的结果每次都会有改变），意思就是告诉开发人员，使用<code>@PostMapping</code>注解标注的接口每次请求，都会使数据库中的数据发生改变。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class=\"line\">\t<span class=\"meta\">@PostMapping(&quot;/createUser&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> User <span class=\"title function_\">createUser</span><span class=\"params\">(<span class=\"meta\">@Valid</span> <span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.createUser();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、-PutMapping\"><a href=\"#5、-PutMapping\" class=\"headerlink\" title=\"5、@PutMapping\"></a>5、@PutMapping</h3><p>1、说明：<br><code>@PutMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PUT)</code>一样，用于更新数据时，它是全局更新（替换）,是幂等（多次访问对rest服务产生的结果都不会改变），意思就是告诉开发人员，使用<code>@PutMapping</code>注解标注的接口每次请求，不会使结果改变。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/updateUser&quot;,method=RequestMethod.PUT)</span></span><br><span class=\"line\">\t<span class=\"meta\">@PutMapping(&quot;/updateUser&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;User&gt; <span class=\"title function_\">updateUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> <span class=\"keyword\">throws</span> UserNotFoundException&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">userFind</span> <span class=\"operator\">=</span> userService.findById(user.getId)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t.orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;没有此用户！&quot;</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Result.ok(userService.updateUser(user));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、-DeleteMapping\"><a href=\"#6、-DeleteMapping\" class=\"headerlink\" title=\"6、@DeleteMapping\"></a>6、@DeleteMapping</h3><p>1、说明：<br><code>@DeleteMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.DELETE)</code>一样，用于删除数据时，是幂等。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> calss UserController &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@DeleteMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;User&gt; <span class=\"title function_\">deleteUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span>String id)</span> <span class=\"keyword\">throws</span> UserNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.findById(id)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t.orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;没有此用户！&quot;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tuserService.deleteUser(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Result.ok();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7、-PatchMapping\"><a href=\"#7、-PatchMapping\" class=\"headerlink\" title=\"7、@PatchMapping\"></a>7、@PatchMapping</h3><p>1、说明：<br><code>@PatchMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PATCH)</code>一样，用于更新数据时，它是部分更新（只更新部分），是非幂等的。  </p>\n<h3 id=\"8、-ControllerAdvice\"><a href=\"#8、-ControllerAdvice\" class=\"headerlink\" title=\"8、@ControllerAdvice\"></a>8、@ControllerAdvice</h3><p>1、说明：<br><code>@ControllerAdvice</code>注解是<code>@Component</code>注解的一个衍生注解，Spring会自动扫描并检测被<code>@ControllerAdvice</code>注解所标注的类；<code>@ControllerAdvice</code>注解需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code>注解搭配使用，主要用来处理控制器所抛出的异常信息。<br>2、使用方法：<br>（1）我们需要定义一个被<code>@ControllerAdvice</code>所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用<code>@ExceptionHandler</code>注解进行标注；<br>（2）在有必要的时候，可以使用<code>@InitBinder</code>注解（使用方法在第9点）在类中进行全局配置，还可以使用<code>@ModelAttribute</code>配置与视图相关的参数；<br>（3）使用<code>@ControllerAdvice</code>注解，可以快速创建统一的、自定义的异常处理类，详细也可以查看第9点。<br>3、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice(basePackages=&#123;&quot;com.zjy.controller&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserControllerAdvice</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@InitBinder</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">binder</span><span class=\"params\">(WebDataBinder binder)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">\t\tformat.setLenient(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\tbinder.registerCustomEditor(Date.class, <span class=\"string\">&quot;user&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">CustomDateFormat</span>(format, <span class=\"literal\">true</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modelAttribute</span><span class=\"params\">(Model model)</span> &#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;User not found exception.&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">userNotFoundExceptionHandler</span><span class=\"params\">(UerNotFoundException ex)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">\t\tmodelAndView.addObject(<span class=\"string\">&quot;exception&quot;</span>, ex);</span><br><span class=\"line\">\t\tmodelAndView.setViewName(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、-InitBinder\"><a href=\"#9、-InitBinder\" class=\"headerlink\" title=\"9、@InitBinder\"></a>9、@InitBinder</h3><p><a href=\"https://blog.csdn.net/weixin_43888891/article/details/127348918\">使用方法链接</a></p>\n<h3 id=\"10、-ExceptionHandler\"><a href=\"#10、-ExceptionHandler\" class=\"headerlink\" title=\"10、@ExceptionHandler\"></a>10、@ExceptionHandler</h3><p>1、说明：<br><code>@ExceptionHandler</code>注解用于标注处理特定类型异常类所抛出的异常的方法。当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法。<br>2、用法：<br>用法是统一一个异常接口，比如如果每个方法都有try…catch来弄的话，代码量太多，这个时候统一一个方法，在这个方法上加上这个注解，一旦出现异常就会执行这个方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doError</span><span class=\"params\">(Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    ex.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ex.getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、示例：<br>（1）示例一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;Object&gt; <span class=\"title function_\">userNotFoundExceptionHandler</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Result.error(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）示例二<br>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">ex</span><span class=\"params\">(Exception ex)</span>&#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、-ResponseBody\"><a href=\"#11、-ResponseBody\" class=\"headerlink\" title=\"11、@ResponseBody\"></a>11、@ResponseBody</h3><p>1、说明：<br><code>@ResponseBody</code>会自动将控制器中方法的返回值写入到HTTP响应中。注意，<code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标注的类中，如果在被<code>@RestController</code>注解标注的类中，则不必使用<code>@ResponseBody</code>，<code>@restController</code>相当于是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">findByUserId</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserId(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、-ResponseStatus\"><a href=\"#12、-ResponseStatus\" class=\"headerlink\" title=\"12、@ResponseStatus\"></a>12、@ResponseStatus</h3><p>1、说明：<br><code>@ResponseStatus</code>注解可以标注请求处理方法。使用此注解，可以指定响应所需要的HTTP STATUS状态码。特别地，我们可以使用<code>HttpStatus</code>类对该注解的<code>value</code>或者<code>code</code>属性进行赋值。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例，如果没有使用<code>@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</code>，返回的状态码是200；使用之后，返回的状态码是500。  </p>\n<h3 id=\"13、-PathVariable和-RequestParam\"><a href=\"#13、-PathVariable和-RequestParam\" class=\"headerlink\" title=\"13、@PathVariable和@RequestParam\"></a>13、@PathVariable和@RequestParam</h3><p>1、@PathVariable<br>（1）说明：<br><code>@PathVariable</code>注解是将方法中的参数绑定到请求URL中的模板变量上，通过<code>@RequestMapping</code>注解来指定URL的模板变量，然后使用<code>@PathVariable</code>注解将方法中的参数绑定到模板变量上。<br>（2）示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@PathVariable(name=&quot;id&quot;)</span>String id, <span class=\"meta\">@PathVariable(value=&quot;roleId&quot;)</span>String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>模板变量名需要使用<code>&#123;&#125;</code>进行包裹，如果方法的参数名与URL模板变量名一致，则在<code>@PathVariable</code>中就可以省略别名的定义：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id, <span class=\"meta\">@PathVariable</span> String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、@RequestParam<br>（1）说明：<br><code>@RequestParam</code>注解用于将方法的参数与Web请求传递的参数进行绑定，使用<code>@RequestParam</code>可以获取请求URL路径中的参数值<br>（2）示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/roles&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String id, <span class=\"meta\">@RequestParam</span> String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、@RequestParam注解和@PathVariable注解的区别<br><a href=\"https://blog.csdn.net/qq_33355821/article/details/85619692\">区别链接详情请点击</a>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost:8080/springmvc/hello/101?param1=10&amp;param2=20</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDetails</span><span class=\"params\">(<span class=\"meta\">@PathVariable(value=&quot;id&quot;)</span> String id,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@RequestParam(value=&quot;param1&quot;, required=true)</span> String param1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@RequestParam(value=&quot;param2&quot;, required=false)</span> String param2)</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、-ModelAttribute\"><a href=\"#14、-ModelAttribute\" class=\"headerlink\" title=\"14、@ModelAttribute\"></a>14、@ModelAttribute</h3><p><a href=\"https://www.cnblogs.com/youth-man/p/14224652.html\">使用方法</a></p>\n<h3 id=\"15、-CrossOrigin\"><a href=\"#15、-CrossOrigin\" class=\"headerlink\" title=\"15、@CrossOrigin\"></a>15、@CrossOrigin</h3><p>1、说明：<br><code>@CrossOrigin</code>注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CrossOrigin</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/home&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">userDetails</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"16、-ComponentScan\"><a href=\"#16、-ComponentScan\" class=\"headerlink\" title=\"16、@ComponentScan\"></a>16、@ComponentScan</h3><p>1、说明：<br><code>@ComponentScan</code>注解用于配置Spring需要扫描的被组件注解注释的类所在的包。可以通过配置其basePackages属性或者value属性来配置需要扫描的包路径。  </p>\n<h3 id=\"17、-Mapper和-Repository\"><a href=\"#17、-Mapper和-Repository\" class=\"headerlink\" title=\"17、@Mapper和@Repository\"></a>17、@Mapper和@Repository</h3><p>1、说明：<br><code>@Mapper</code>和<code>@Repository</code>注解是<code>@Component</code>注解的延伸，与<code>@Component</code>注解一样，被此注解标注的类会被Spring自动管理起来，用于标注DAO层的数据持久化类。<br>2、区别：<br>（1）<code>@Mapper</code>不需要配置扫描地址，可以单独使用如果有多个mapper文件的话，可以在项目启动类中加入<code>@MapperScan(“mapper文件所在包”)</code>，这样就不需要每个mapper文件都加<code>@Mapper注解了</code>；<br>（2）<code>@Repository</code>不可以单独使用，否则会报错误找不到bean，这是因为项目启动的时候没有去扫描使用<code>@Repository</code>注解的文件，所以使用<code>@Repository</code>需要配置扫描地址，但在idea中，使用<code>@Repository</code>可以消除在业务层中注入mapper对象时的错误。  </p>\n<h3 id=\"18、-DependsOn\"><a href=\"#18、-DependsOn\" class=\"headerlink\" title=\"18、@DependsOn\"></a>18、@DependsOn</h3><p>1、说明：<br><code>@DependsOn</code>注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;firstBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@DependsOn(value=&#123;&quot;secondBean&quot;, &quot;thirdBean&quot;&#125;)</span> <span class=\"comment\">// 先初始化这里两个bean对象，再初始化firstBean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> FirstBean <span class=\"title function_\">firstBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;secondBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> SecondBean <span class=\"title function_\">secondBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;thirdBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ThirdBean <span class=\"title function_\">thirdBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"19、-PostConstruct与-PreDestroy\"><a href=\"#19、-PostConstruct与-PreDestroy\" class=\"headerlink\" title=\"19、@PostConstruct与@PreDestroy\"></a>19、@PostConstruct与@PreDestroy</h3><p>1、说明：<br>（1）<code>@PostConstruct</code>注解用于标注在Bean被Spring初始化之后需要执行的方法。<br>（2）<code>@PreDestroy</code>注解用于标注Bean被销毁前需要执行的方法。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponent</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArraryList</span>&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tlist.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"20、-RestController\"><a href=\"#20、-RestController\" class=\"headerlink\" title=\"20、@RestController\"></a>20、@RestController</h3><p><code>@RestController</code> &#x3D; <code>@ResponseBody</code> + <code>@Controller</code>，JSON对象，不会通过视图解析器。  </p>\n<h3 id=\"21、-Controller\"><a href=\"#21、-Controller\" class=\"headerlink\" title=\"21、@Controller\"></a>21、@Controller</h3><p>通过视图解析器返回。  </p>\n<h3 id=\"22、-Scope\"><a href=\"#22、-Scope\" class=\"headerlink\" title=\"22、@Scope\"></a>22、@Scope</h3><p>@Scope（“单例&#x2F;原型模式”）。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Scope</span>(scopeName <span class=\"operator\">=</span> ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"23、-PathParam\"><a href=\"#23、-PathParam\" class=\"headerlink\" title=\"23、@PathParam\"></a>23、@PathParam</h3><p>这个注解是和spring的pathVariable是一样的，也是基于模板的，但是这个是jboss包下面的一个实现，上面的是spring的一个实现，都要导包。  </p>\n<h3 id=\"24、-Autowired和-Resource\"><a href=\"#24、-Autowired和-Resource\" class=\"headerlink\" title=\"24、@Autowired和@Resource\"></a>24、@Autowired和@Resource</h3><p>1、@Autowired<br>自动装配通过类型。（可以不需要set方法）<br>（1）<code>required</code>属性：默认为true，表示必须要有bean赋值给它，不然就报错，为false不报错。<br>（2）如果有多个相同类型的bean，那么会根据名字（成员变量名）进行匹配，如果名字也相同，那么就会报错。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// service接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service实现类1</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserOneServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;UserOneServiceImpl&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service实现类2</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTwoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;UserTwoServiceImpl&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// controller</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userOneServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userTwoServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        userOneServiceImpl.print();</span><br><span class=\"line\">        userTwoServiceImpl.print();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">UserOneServiceImpl</span><br><span class=\"line\">UserTwoServiceImpl</span><br></pre></td></tr></table></figure>\n\n<p>2、@Resource（属于java的注解）<br>自动装配通过名称，等同与@Qualifier(“xxx”)和@Autowired连用的效果。  </p>\n<p>3、区别<br><code>@Resource</code>是jdk提供，按照名称注入；<code>@Autowired</code>是spring提供，按照类型注入  </p>\n<h3 id=\"25、-Qualifier\"><a href=\"#25、-Qualifier\" class=\"headerlink\" title=\"25、@Qualifier\"></a>25、@Qualifier</h3><p><code>@Qualifier（value=&quot;xxx&quot;)</code>如果属性名字不唯一，可以通过这个注解标记。和<code>@Autowired</code>一起使用，当比如接口UserService接口有很多实现类，单单<code>@Autowired</code>是无法找到是哪一个实现类，所以需要加上<code>@Qualifier（value=&quot;实现类的名字&quot;)</code>，让系统找到指定类。  </p>\n<h3 id=\"26、-Nullable\"><a href=\"#26、-Nullable\" class=\"headerlink\" title=\"26、@Nullable\"></a>26、@Nullable</h3><p>字段标记了这个注解，说明这个字段可以为null。  </p>\n<h3 id=\"27、-Primary\"><a href=\"#27、-Primary\" class=\"headerlink\" title=\"27、@Primary\"></a>27、@Primary</h3><p>加在service实现类上，代表了如果有两个相同的service同时注入到容器中，使用这个注解可以实现要将哪个类实现调用。  </p>\n<h3 id=\"28、-XmlRootElement\"><a href=\"#28、-XmlRootElement\" class=\"headerlink\" title=\"28、@XmlRootElement\"></a>28、@XmlRootElement</h3><p>使标注的类序列化为xml或者json格式，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@XmlRootElement(name=&quot;User&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Int age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 序列化为</span></span><br><span class=\"line\"><span class=\"comment\"> * XML格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;User&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;name&gt; &lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;age&gt; &lt;/age&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/User&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * JSON格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;&quot;User&quot;:</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;name&quot;:  ,</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;age&quot;:  </span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"29、-ComponentScan\"><a href=\"#29、-ComponentScan\" class=\"headerlink\" title=\"29、@ComponentScan\"></a>29、@ComponentScan</h3><p><a href=\"https://blog.csdn.net/huangjhai/article/details/104600328\">用法链接</a>  </p>\n<h3 id=\"30、-JsonIgnore\"><a href=\"#30、-JsonIgnore\" class=\"headerlink\" title=\"30、@JsonIgnore\"></a>30、@JsonIgnore</h3><p>使用在某个属性上，这样在序列化和反序列化的时候都会忽略这个属性，最直接的效果就是返回的JSON属性是没有这个属性的，一般作用于密码这系列的属性。  </p>\n<h3 id=\"31、-JsonInclude\"><a href=\"#31、-JsonInclude\" class=\"headerlink\" title=\"31、@JsonInclude\"></a>31、@JsonInclude</h3><p>使用在某个属性上，配合它的属性<code>Value=JsonInclude.Include.NON_NULL</code>，表示的是如果这个属性的属性值为空那么在返回前端的时候不可见。  </p>\n<h3 id=\"32、-JsonProperty\"><a href=\"#32、-JsonProperty\" class=\"headerlink\" title=\"32、@JsonProperty\"></a>32、@JsonProperty</h3><p>使用在某个属性上，这个注解有两个作用，第一是修改返回JSON数据的时候key值为value指定值，第二个作用是配合属性access&#x3D;JsonProperty.Access.WRITE_ONLY表示属性只可以进行序列化而不能进行反序列化，直观效果就是返回的数据没有该属性。  </p>\n<h3 id=\"33、-JsonIgnoreProperties\"><a href=\"#33、-JsonIgnoreProperties\" class=\"headerlink\" title=\"33、@JsonIgnoreProperties\"></a>33、@JsonIgnoreProperties</h3><p>作用在类声明处，它和<code>@JsonIgnore</code>注解的区别就是可以对多个属性作用，直接在value属性后面使用大括号逗号隔开即可，它的ignoreUnknow属性为true表示忽略未定义的属性。<br>1、<code>ignoreUnknow</code>属性用法：标注在实体类上面，使用场景为：前端传参，后端实体类没有对应属性（会报错），此时后端实体类使用<code>@JsonIgnoreProperties(ignoreUnknown = true)</code>忽略未定义的属性，这样后端实体类就不会报错，而是直接忽略未定义的属性。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;t_detection_rule&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionRule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 规则id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"34、-RequestHeader\"><a href=\"#34、-RequestHeader\" class=\"headerlink\" title=\"34、@RequestHeader\"></a>34、@RequestHeader</h3><p>在后端controller获取前端请求头信息，里面有三个参数：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value:表示将前端请求头里的Host 赋值给host，</span></span><br><span class=\"line\"><span class=\"comment\">// required：true表示前端请求头必须有Host才能访问此方法</span></span><br><span class=\"line\"><span class=\"comment\">// defaultValue ：表示如果请求头没有value的值，就把defaultValue值赋值给host</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"meta\">@RequestHeader(value = &quot;Host&quot;,required = true,defaultValue = &quot;haha&quot;)</span> String host)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"35、-SpringBootConfiguration\"><a href=\"#35、-SpringBootConfiguration\" class=\"headerlink\" title=\"35、@SpringBootConfiguration\"></a>35、@SpringBootConfiguration</h3><p>和<code>@Configuration</code>是一样的，都是配置注解，只不过<code>@SpringBootConfiguration</code>是springboot里的注解。  </p>\n<h3 id=\"36、-EnableAutoConfiguration\"><a href=\"#36、-EnableAutoConfiguration\" class=\"headerlink\" title=\"36、@EnableAutoConfiguration\"></a>36、@EnableAutoConfiguration</h3><p>表示自动配置。  </p>\n<h3 id=\"37、-ConfigurationProperties\"><a href=\"#37、-ConfigurationProperties\" class=\"headerlink\" title=\"37、@ConfigurationProperties\"></a>37、@ConfigurationProperties</h3><p>想将配置文件中的数据提取出来，使用这个注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;xxx&quot;)</span> <span class=\"comment\">//xxx 表示配置文件里的前缀</span></span><br><span class=\"line\">--------------------------------------------------------------</span><br><span class=\"line\">配置文件application.properties的内容如下：</span><br><span class=\"line\">xxx.name=zjy <span class=\"comment\">//xxx 就是配置文件里的前缀</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"38、-ConditionalOnMissingBean\"><a href=\"#38、-ConditionalOnMissingBean\" class=\"headerlink\" title=\"38、@ConditionalOnMissingBean\"></a>38、@ConditionalOnMissingBean</h3><p><code>@ConditionalOnMissingBean(xxx.class)</code>容器中没有xxx.class才生效。  </p>\n<h3 id=\"39、-ConditionalOnClass\"><a href=\"#39、-ConditionalOnClass\" class=\"headerlink\" title=\"39、@ConditionalOnClass\"></a>39、@ConditionalOnClass</h3><p><code>@ConditionalOnClass(&#123;xxx.class,xxx.class,xxx.class&#125;)</code>容器中存在{xxx.class,xxx.class,xxx.class}这些才生效。  </p>\n<h3 id=\"40、-AutoConfiguration\"><a href=\"#40、-AutoConfiguration\" class=\"headerlink\" title=\"40、@AutoConfiguration\"></a>40、@AutoConfiguration</h3><p><code>@AutoConfiguration(after = &#123;xxx.class,xxx.class&#125;)</code>after的意思是 在 {xxx.class,xxx.class} 这些自动配置类配置之后再配置。  </p>\n<h3 id=\"41、-Order\"><a href=\"#41、-Order\" class=\"headerlink\" title=\"41、@Order\"></a>41、@Order</h3><p><code>@Order（1）</code>存在多个增强类对同一个类中的同一个方法进行增强，设置增强类执行的优先级。标注在增强类上，括号里面数字越小，优先级越高，越高的前置类型的方法先执行，后置后执行。  </p>\n<h3 id=\"42、-Transactional事务注解\"><a href=\"#42、-Transactional事务注解\" class=\"headerlink\" title=\"42、@Transactional事务注解\"></a>42、@Transactional事务注解</h3><p>1、<code>rollbackFor</code><br>默认情况下，只有出现<code>RuntimeException</code>才回滚异常，<code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务。<br>2、<code>propagation</code>传播行为<br>（1）<code>PROPAGATION_REQUIRED</code>（<code>@Transactional</code>默认的事务传播行为）<br>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。更确切地意思是：  </p>\n<ul>\n<li>如果外部方法没有开启事务的话，Propagation.REQUIRED 修饰的内部方法会开启自己的事务，且开启的事务相互独立，互不干扰；  </li>\n<li>如果外部方法开启事务并且是 Propagation.REQUIRED 的话，所有 Propagation.REQUIRED 修饰的内部方法和外部方法均属于同一事务 ，只要一个方法回滚，整个事务都需要回滚。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> aMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\tb.bMethod();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class B &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> bMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<code>aMethod</code>调用了<code>bMethod</code>，只要其中一个方法回滚，整个事务均回滚。<br>（2）<code>PROPAGATION_REQUIRES_NEW</code><br>创建一个新事物，并在新事务中执行；如果当前存在事务，则挂起当前事务，即便新事务抛出异常，也不会影响当前事务。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> aMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\tb.bMethod();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class B &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.REQUIRES_NEW)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> bMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n如果<code>aMethod</code>发生异常回滚，<code>bMethod</code>不会跟着回滚，因为<code>bMethod</code>开启了独立的事务。但是，如果<code>bMethod</code>抛出了未被捕获的异常并且这个异常满足事务回滚规则的话，<code>aMethod</code>同样也会回滚。<br>（3）<code>PROPAGATION_NESTED</code><br>如果当前存在事务，就在当前事务内执行；否则，就执行与<code>PROPAGATION_REQUIRED</code>类似的操作。<br>（4）<code>PROPAGATION_MANDATORY</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。<br>（5）<code>PROPAGATION_SUPPORTS</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。<br>（6）<code>PROPAGATION_NOT_SUPPORTED</code><br>以非事务方式运行，如果当前存在事务，则把当前事务挂起。<br>（7）<code>PROPAGATION_NEVER</code><br>以非事务方式运行，如果当前存在事务，则抛出异常。<br>（3、4、5、6、7 这 5 种事务传播方式不常用，了解即可。）</li>\n</ul>\n<h3 id=\"43、-Import\"><a href=\"#43、-Import\" class=\"headerlink\" title=\"43、@Import\"></a>43、@Import</h3><p><code>@Import</code>注解用于导入一个或多个配置类，可以导入Spring的配置类，也可以导入第三方库的配置类。<br>配置类A：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigA</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> A <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将配置类A导入到配置类B中：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(ConfigA.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigB</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> B <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"44、-JsonFormat\"><a href=\"#44、-JsonFormat\" class=\"headerlink\" title=\"44、@JsonFormat\"></a>44、@JsonFormat</h3><p>1、用途：用于定义 Java 对象的字段在序列化和反序列化为 JSON 时的格式。常用于日期、时间、数字等字段的格式化。<br>2、用法：可以指定格式模式（如日期格式），时区等。它常用于日期时间字段，以便将 Java Date 或 LocalDateTime 格式化为特定的字符串格式，或将字符串解析回特定格式的日期对象。<br>3、常见属性<br>（1）<code>pattern</code>：定义格式化的模式（如<code>yyyy-MM-dd HH:mm:ss</code>）；<br>（2）<code>timezone</code>：指定时区；<br>（3）<code>shape</code>：指定数据的序列化形状（如<code>JsonFormat.Shape.STRING</code>）。<br>4、示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime registrationDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）<code>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</code>：指定<code>registrationDate</code>字段在序列化为JSON时的格式为”yyyy-MM-dd HH:mm:ss”，并使用UTC时区。<br>（2）在序列化过程中，LocalDateTime对象将被转换为指定的字符串格式。在反序列化过程中，符合该格式的字符串也将被正确解析为 LocalDateTime对象。  </p>\n<h3 id=\"45、-JsonUnwrapped\"><a href=\"#45、-JsonUnwrapped\" class=\"headerlink\" title=\"45、@JsonUnwrapped\"></a>45、@JsonUnwrapped</h3><p>1、用途：<code>@JsonUnwrapped</code>用于将Java对象的嵌套属性“展开”到JSON中，使得嵌套对象的字段直接在父级对象中显示，而不是嵌套为子对象。它主要用于消除JSON嵌套，使得JSON结构更加平坦（扁平化）。<br>2、用法：<code>@JsonUnwrapped</code>常用于那些包含另一个对象的 Java 对象，将嵌套对象的字段直接合并到父级对象的JSON表示中。<br>3、常见属性<br>（1）<code>prefix</code>：为展开的字段添加前缀。<br>（2）<code>suffix</code>：为展开的字段添加后缀。<br>4、示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonUnwrapped</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<code>@JsonUnwrapped</code>注解在<code>address</code>字段上。序列化时，<code>address</code>中的字段将直接展开为<code>User</code>的JSON 字段，而不是作为一个嵌套的对象。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;street&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123 Main St&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;city&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果没有<code>@JsonUnwrapped</code>注解，默认的JSON输出将是：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;street&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123 Main St&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;city&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"46、-JsonTypeInfo和-JsonSubTypes\"><a href=\"#46、-JsonTypeInfo和-JsonSubTypes\" class=\"headerlink\" title=\"46、@JsonTypeInfo和@JsonSubTypes\"></a>46、@JsonTypeInfo和@JsonSubTypes</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1、应用场景<br>jackson可以将多态类型JSON序列化. 但在反序列化时会因为找不到具体的类而失败。<br>（1）举例<br>创建4个POJO类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HiveTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schema;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HBaseTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String columnFamily;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Statistics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;AbstractTarget&gt; targets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">    <span class=\"type\">Statistics</span> <span class=\"variable\">statistics</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Statistics</span>();</span><br><span class=\"line\">    List&lt;AbstractTarget&gt; targets = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    statistics.setTargets(targets);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">HiveTarget</span> <span class=\"variable\">hiveTarget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HiveTarget</span>();</span><br><span class=\"line\">    hiveTarget.setSchema(<span class=\"string\">&quot;s1&quot;</span>);</span><br><span class=\"line\">    hiveTarget.setTable(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">    hiveTarget.setColumn(<span class=\"string\">&quot;c1&quot;</span>);</span><br><span class=\"line\">    targets.add(hiveTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    HBaseTarget hBaseTarget= <span class=\"keyword\">new</span> <span class=\"title class_\">HBaseTarget</span>();</span><br><span class=\"line\">    hBaseTarget.setNamespace(<span class=\"string\">&quot;ns2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setTable(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setColumnFamily(<span class=\"string\">&quot;cf2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setColumn(<span class=\"string\">&quot;c2&quot;</span>);</span><br><span class=\"line\">    targets.add(hBaseTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">statisticsStr</span> <span class=\"operator\">=</span> mapper.writeValueAsString(statistics);</span><br><span class=\"line\">    System.out.println(statisticsStr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">    <span class=\"type\">Statistics</span> <span class=\"variable\">parsedStatistics</span> <span class=\"operator\">=</span> mapper.readValue(statisticsStr, Statistics.class);</span><br><span class=\"line\">    System.out.println(parsedStatistics);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c1&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c2&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">com.fasterxml.jackson.databind.exc.InvalidDefinitionException<span class=\"punctuation\">:</span> Cannot construct instance of `fresh.json.AbstractTarget` (no Creators<span class=\"punctuation\">,</span> like default constructor<span class=\"punctuation\">,</span> exist)<span class=\"punctuation\">:</span> abstract types either need to be mapped to concrete types<span class=\"punctuation\">,</span> have custom deserializer<span class=\"punctuation\">,</span> or contain additional type information</span><br><span class=\"line\"> at <span class=\"punctuation\">[</span>Source<span class=\"punctuation\">:</span> (String)<span class=\"string\">&quot;&#123;&quot;</span>targets<span class=\"string\">&quot;:[&#123;&quot;</span>schema<span class=\"string\">&quot;:&quot;</span>s1<span class=\"string\">&quot;,&quot;</span>table<span class=\"string\">&quot;:&quot;</span>t1<span class=\"string\">&quot;,&quot;</span>column<span class=\"string\">&quot;:&quot;</span>c1<span class=\"string\">&quot;&#125;,&#123;&quot;</span>namespace<span class=\"string\">&quot;:&quot;</span>ns2<span class=\"string\">&quot;,&quot;</span>table<span class=\"string\">&quot;:&quot;</span>t2<span class=\"string\">&quot;,&quot;</span>columnFamily<span class=\"string\">&quot;:&quot;</span>cf2<span class=\"string\">&quot;,&quot;</span>column<span class=\"string\">&quot;:&quot;</span>c2<span class=\"string\">&quot;&#125;]&#125;&quot;</span>; line<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> column<span class=\"punctuation\">:</span> <span class=\"number\">13</span><span class=\"punctuation\">]</span> (through reference chain<span class=\"punctuation\">:</span> fresh.json.Statistics<span class=\"punctuation\">[</span><span class=\"string\">&quot;targets&quot;</span><span class=\"punctuation\">]</span>-&gt;java.util.ArrayList<span class=\"punctuation\">[</span><span class=\"number\">0</span><span class=\"punctuation\">]</span>)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>因此若要正确的反序列化，需要指定具体子类的标识。<br>要想解决该办法，可以使用<code>@JsonTypeInfo</code>和<code>@JsonSubTypes</code>注解。<br>2、解决方式<br>（1）方式一：使用类名作为标识<br>如下：使用类名作为标识符，并将标识符作为属性序列化，属性名称指定为”@class”。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,</span></span><br><span class=\"line\"><span class=\"meta\">        include = JsonTypeInfo.As.PROPERTY, \t</span></span><br><span class=\"line\"><span class=\"meta\">        property = &quot;@class&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"comment\">//等于@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS), 另外两个为类名作为标识的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话，序列化结果时会自动生成一个“@class”属性，反序列化时就会根据“@class”找到具体的类。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HBaseTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>实测发现当直接使用List序列化时（targets）会丢失”@class”属性，嵌套的列表和单独对象都没有这个问题：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing nested array-------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(statistics));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing object-------------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(hiveTarget));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing array--------------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(targets));</span><br></pre></td></tr></table></figure>\n<p>输出结果：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializing nested array-------</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HBaseTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">serializing object-------------</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c1&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">serializing array--------------</span><br><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>（2）方式二：使用属性值作为标识<br>使用属性值做为标识，配置较为繁琐，适合类中已经存在标识属性的情况。<br>如下：AbstractTarget存在type属性，并且在两个子类中设置了固定且不同的值，使用@JsonTypeInfo指定type属性作为”类标识“，同时需要使用@JsonSubTypes指定 具体类 和 type属性值 的关系。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,</span></span><br><span class=\"line\"><span class=\"meta\">        include = JsonTypeInfo.As.EXISTING_PROPERTY,</span></span><br><span class=\"line\"><span class=\"meta\">        property = &quot;type&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@JsonSubTypes(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @JsonSubTypes.Type(value = HiveTarget.class, name = HiveTarget.TYPE),</span></span><br><span class=\"line\"><span class=\"meta\">        @JsonSubTypes.Type(value = HBaseTarget.class, name = HBaseTarget.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HiveTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schema;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hive&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HiveTarget</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        setType(TYPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HBaseTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String columnFamily;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hbase&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HBaseTarget</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        setType(TYPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"47、-Conditional\"><a href=\"#47、-Conditional\" class=\"headerlink\" title=\"47、@Conditional\"></a>47、@Conditional</h3><p>用于根据条件是否成立创建Bean。<br>用法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebServerAutoConfiguration</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果TomcatCondition返回true，则创建这个Bean，下面jettyServer()同理</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@Conditional(TomcatCondition.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebServer <span class=\"title function_\">tomcatServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatServer</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@Conditional(JettyCondition.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebServer <span class=\"title function_\">jettyServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JettyServer</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TomcatCondition，JettyCondition同理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TomcatCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 获取类加载器，用于加载类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span>  <span class=\"operator\">=</span> context.getClassLoader();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果类加载器加载了Tomcat的类，则返回true，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 而是否有Tomcat的类，是根据pom依赖，如果引入了Tomcat的依赖，就会加载到Tomcat的类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tclassLoader.loadClass(<span class=\"string\">&quot;org.apache.catalina.startup.Tomcat&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：@Conditional注解只能用于方法上，不能用于类上。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、Java提供的注解\"><a href=\"#三、Java提供的注解\" class=\"headerlink\" title=\"三、Java提供的注解\"></a>三、Java提供的注解</h1><h3 id=\"1、JSR-175\"><a href=\"#1、JSR-175\" class=\"headerlink\" title=\"1、JSR-175\"></a>1、JSR-175</h3><p>这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解，主要包含以下几种标准注解：<br>1、<code>@Deprecated</code>：标识一个程序元素（如：类、方法或字段）已过时，并且在将来的版本中可能会被删除。<br>2、<code>@Override</code>：标识一个方法重写了父类中的方法。<br>3、<code>@SuppressWarnings</code>：抑制编译时产生的警告消息。<br>4、<code>@SafeVarargs</code>：标识一个有安全性警告的可变参数方法。<br>5、<code>@FunctionalInterface</code>：标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。  </p>\n<h3 id=\"2、JSR-250\"><a href=\"#2、JSR-250\" class=\"headerlink\" title=\"2、JSR-250\"></a>2、JSR-250</h3><p>这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注释，包括：<br>1、<code>@Resource</code>：标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。<br>2、<code>@PostConstruce</code>：标识一个方法作为初始化方法。<br>3、<code>@PreDestroy</code>：标识一个方法作为销毁方法。<br>4、<code>@Resource.AuthenticationType</code>：标识注入的资源的身份验证类型。<br>5、<code>@RolesAllowed</code>：标识授权角色。<br>6、<code>@RermitAll</code>：标识一个活动无需进行身份验证。<br>7、<code>@DenyAll</code>：标识不提供针对该方法的访问控制。<br>8、<code>@DeclareRoles</code>：声明安全角色。  </p>\n<h3 id=\"3、JSR-269\"><a href=\"#3、JSR-269\" class=\"headerlink\" title=\"3、JSR-269\"></a>3、JSR-269</h3><p>这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：<br>1、<code>@SupportedAnnotationTypes</code>：标识注解处理器所处理的注解类型。<br>2、<code>@SupportedSourceVersion</code>：标识注解处理器支持的Java源码版本。  </p>\n<h3 id=\"4、JSR-330\"><a href=\"#4、JSR-330\" class=\"headerlink\" title=\"4、JSR-330\"></a>4、JSR-330</h3><p>该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准。<br>1、<code>@Named</code>：标识一个被依赖注入的组件的名词。<br>2、<code>@Inject</code>：标识一个需要被注入的依赖组件。<br>3、<code>@Singleton</code>：标识一个组件的生命周期只有一个唯一的实例。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Spring提供的注解\"><a href=\"#四、Spring提供的注解\" class=\"headerlink\" title=\"四、Spring提供的注解\"></a>四、Spring提供的注解</h1><h3 id=\"1、-Component\"><a href=\"#1、-Component\" class=\"headerlink\" title=\"1、@Component\"></a>1、@Component</h3><p>将类声明为Spring组件。  </p>\n<h3 id=\"2、-Controller\"><a href=\"#2、-Controller\" class=\"headerlink\" title=\"2、@Controller\"></a>2、@Controller</h3><p><code>@Component</code>衍生注解，用在controller类。  </p>\n<h3 id=\"3、-Service\"><a href=\"#3、-Service\" class=\"headerlink\" title=\"3、@Service\"></a>3、@Service</h3><p><code>@Component</code>衍生注解，用在service类。  </p>\n<h3 id=\"4、-Repository\"><a href=\"#4、-Repository\" class=\"headerlink\" title=\"4、@Repository\"></a>4、@Repository</h3><p><code>@Component</code>衍生注解，用在dao类。  </p>\n<h3 id=\"5、-Autowired\"><a href=\"#5、-Autowired\" class=\"headerlink\" title=\"5、@Autowired\"></a>5、@Autowired</h3><p>按照类型自动注入。  </p>\n<h3 id=\"6、-Qualifier\"><a href=\"#6、-Qualifier\" class=\"headerlink\" title=\"6、@Qualifier\"></a>6、@Qualifier</h3><p>与@Autowired一起使用，用于指定注入的bean的名称。  </p>\n<h3 id=\"7、-Resource\"><a href=\"#7、-Resource\" class=\"headerlink\" title=\"7、@Resource\"></a>7、@Resource</h3><p>自动注入，支持按名称注入，等于<code>@Autowired</code>和<code>@Qualifier</code>一起使用。  </p>\n<h3 id=\"8、-Value\"><a href=\"#8、-Value\" class=\"headerlink\" title=\"8、@Value\"></a>8、@Value</h3><p>用于注入基本类型、String类型和配置文件中的属性值。<br>1、用法<br>（1）注入String类型，直接为字段赋值，无需依赖配置文件  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;Hello, World!&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String greeting;</span><br></pre></td></tr></table></figure>\n<p>（2）从配置文件注入属性值<br>注意：如果同名属性在多个配置源中存在（如环境变量、配置文件），Spring 会按优先级选择值（如环境变量 &gt; application.yml）。<br>application.properties文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app.welcomeMessage</span>=<span class=\"string\">Welcome to Spring!</span></span><br></pre></td></tr></table></figure>\n<p>或者application.yml文件：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app:</span></span><br><span class=\"line\">  <span class=\"attr\">welcomeMessage:</span> <span class=\"string\">Welcome</span> <span class=\"string\">to</span> <span class=\"string\">Spring!</span></span><br></pre></td></tr></table></figure>\n<p>java类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :号后为默认值</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;app.welcomeMessage:Default Value&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String welcomeMessage;</span><br></pre></td></tr></table></figure>\n<p>（3）注入系统环境变量<br>直接读取操作系统环境变量：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;#&#123;systemEnvironment[&#x27;JAVA_HOME&#x27;]&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String javaHome;</span><br></pre></td></tr></table></figure>\n<p>（4）注入集合类型<br>application.properties文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app.colors</span>=<span class=\"string\">red,blue,green</span></span><br><span class=\"line\"><span class=\"attr\">app.config</span>=<span class=\"string\">&#123;key1=value1, key2=value2&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;&#x27;$&#123;app.colors&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span> <span class=\"comment\">// 转换为 List&lt;String&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;$&#123;app.config&#125;&#125;&quot;)</span> <span class=\"comment\">// 转换为 Map&lt;String, String&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.yml文件：  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表（List/Array）</span></span><br><span class=\"line\"><span class=\"attr\">myapp1:</span></span><br><span class=\"line\">  <span class=\"attr\">hobbies:</span> [<span class=\"string\">爬山</span>, <span class=\"string\">羽毛球</span>, <span class=\"string\">篮球</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 映射（Map）  </span></span><br><span class=\"line\"><span class=\"attr\">myapp2:</span></span><br><span class=\"line\">  <span class=\"attr\">colors:</span></span><br><span class=\"line\">    <span class=\"attr\">red:</span> <span class=\"string\">&quot;#FF0000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">blue:</span> <span class=\"string\">&quot;#0000FF&quot;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 嵌套集合</span></span><br><span class=\"line\"><span class=\"attr\">myapp3:</span></span><br><span class=\"line\">  <span class=\"attr\">nested:</span></span><br><span class=\"line\">    <span class=\"attr\">list:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">item1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">item2</span></span><br><span class=\"line\">    <span class=\"attr\">map:</span></span><br><span class=\"line\">      <span class=\"attr\">key1:</span> <span class=\"string\">value1</span></span><br><span class=\"line\">      <span class=\"attr\">key2:</span> <span class=\"string\">value2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从 YAML 注入列表</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;&#x27;$&#123;myapp1.hobbies&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span>  <span class=\"comment\">// 将逗号分隔的字符串转换为 List</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; hobbies;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp2.colors&#125;&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; colors;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp3.nested.list&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; nestedList;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp3.nested.map&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; nestedMap;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 如果 YAML 中未定义某个属性，可以通过 : 指定默认值</span></span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;T(java.util.Collections).emptyList() ?: $&#123;myapp.emptyList&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; emptyList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（5）使用SpEL表达式<br>通过SpEL动态计算值：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、SpEL 表达式可能影响性能：复杂的表达式会增加运行时开销。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、避免过度依赖 SpEL：对于简单场景，优先使用直接属性注入。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用其他 Bean 的属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;someBean.someValue * 2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> doubleValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随机数生成</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> randomValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（6）静态字段注入  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigApp</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;greeting:Hello&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Value 不支持直接注入静态字段，因为 Spring 容器管理的是 Bean 实例而非类本身。解决方法：</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getStaticGreeting</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConfigApp.greeting; <span class=\"comment\">// 通过非静态字段间接获取</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、-Scope\"><a href=\"#9、-Scope\" class=\"headerlink\" title=\"9、@Scope\"></a>9、@Scope</h3><p>用于指定Spring Bean的作用域。<br>1、<code>@Scope(&quot;singleton&quot;)</code>：默认值，单例模式，整个应用程序中只有一个实例。<br>2、<code>@Scope(&quot;prototype&quot;)</code>：每次请求都会创建一个新的实例。<br>3、<code>@Scope(&quot;request&quot;)</code>：在Web应用中，每个HTTP请求都会创建一个新的实例。<br>4、<code>@Scope(&quot;session&quot;)</code>：在Web应用中，每个HTTP会话都会创建一个新的实例。<br>5、<code>@Scope(&quot;application&quot;)</code>：在Web应用中，整个Web应用程序中只有一个实例。  </p>\n<h3 id=\"10、-PreDestroy\"><a href=\"#10、-PreDestroy\" class=\"headerlink\" title=\"10、@PreDestroy\"></a>10、@PreDestroy</h3><p>标识一个方法在Bean销毁之前执行。  </p>\n<h3 id=\"11、-PostConstruct\"><a href=\"#11、-PostConstruct\" class=\"headerlink\" title=\"11、@PostConstruct\"></a>11、@PostConstruct</h3><p>标识一个方法在Bean初始化之后执行。  </p>\n<h3 id=\"12、-Configuration\"><a href=\"#12、-Configuration\" class=\"headerlink\" title=\"12、@Configuration\"></a>12、@Configuration</h3><p>声明一个类为配置类，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"13、-ComponentScan\"><a href=\"#13、-ComponentScan\" class=\"headerlink\" title=\"13、@ComponentScan\"></a>13、@ComponentScan</h3><p>指定Spring在创建容器时，要扫描的包路径，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"14、-Bean\"><a href=\"#14、-Bean\" class=\"headerlink\" title=\"14、@Bean\"></a>14、@Bean</h3><p>用于把当前方法的返回值作为bean对象存入Spring的IOC容器中，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"15、-Import\"><a href=\"#15、-Import\" class=\"headerlink\" title=\"15、@Import\"></a>15、@Import</h3><p>用于导入其他配置类，当我们使用了Import注解后，有Import注解的类就是主配置类，而被导入的都是子配置类，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"16、-PropertySource\"><a href=\"#16、-PropertySource\" class=\"headerlink\" title=\"16、@PropertySource\"></a>16、@PropertySource</h3><p>用于指定properties配置文件的位置。<br>示例：<br>jdbcConfig.properties配置文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/test</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n<p>JdbcConfig配置类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcConfig</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">DruidDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">\t\tdataSource.setDriverClassName(driver);</span><br><span class=\"line\">\t\tdataSource.setUrl(url);</span><br><span class=\"line\">\t\tdataSource.setUsername(username);</span><br><span class=\"line\">\t\tdataSource.setPassword(password);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主配置类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">// 指定当前类为配置文件类</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.demo&quot;)</span> <span class=\"comment\">// 指定Spring在创建容器的时候，扫描的包</span></span><br><span class=\"line\"><span class=\"meta\">@Import(JdbcConfig.class)</span> <span class=\"comment\">// 引入其他配置类</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span> <span class=\"comment\">// 指定properties配置文件的位置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里面暂时什么都还没配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、元注解\"><a href=\"#一、元注解\" class=\"headerlink\" title=\"一、元注解\"></a>一、元注解</h1><h3 id=\"1、-Target\"><a href=\"#1、-Target\" class=\"headerlink\" title=\"1、@Target\"></a>1、@Target</h3><p>用于描述注解得使用范围（即：被描述得注解可以用在什么地方）。  </p>\n<h3 id=\"2、-Retention\"><a href=\"#2、-Retention\" class=\"headerlink\" title=\"2、@Retention\"></a>2、@Retention</h3><p>表示需要在什么级别保存该注释信息，用于描述注解得生命周期，说明白点这个注解表示在什么地方有效（SOURCE&lt;CLASS&lt;RUNTIME)，常用RUNTIME，运行时有效。  </p>\n<h3 id=\"3、-Document\"><a href=\"#3、-Document\" class=\"headerlink\" title=\"3、@Document\"></a>3、@Document</h3><p>说明该注解将被包含在javadoc中。  </p>\n<h3 id=\"4、-Inherited\"><a href=\"#4、-Inherited\" class=\"headerlink\" title=\"4、@Inherited\"></a>4、@Inherited</h3><p>用于放在注解上，说明子类可以继承父类中得该注解，假如@Inherited放在了注解@A上，类B上注解了@A，类C继承了类B，类C也有注解@A。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> A&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@A</span>  <span class=\"comment\">// 这个是继承了类B的注解A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、注解定义与使用\"><a href=\"#二、注解定义与使用\" class=\"headerlink\" title=\"二、注解定义与使用\"></a>二、注解定义与使用</h1><h3 id=\"1、-RequestMapping\"><a href=\"#1、-RequestMapping\" class=\"headerlink\" title=\"1、@RequestMapping\"></a>1、@RequestMapping</h3><p>1、说明：<br><code>@RequestMapping</code>注解是将Web请求与请求处理类中的方法进行映射。<code>SpringMvc</code>和<code>SpringWebFlux</code>都通过<code>RequestMappingHandlerMapping</code>和<code>RequestMappingHandlerAdapter</code>两个类来提供对<code>@RequestMapping</code>注解的支持。<br>2、注解属性：<br>（1）<code>value</code>：映射的请求Url或者其别名；<br>（2）<code>method</code>：兼容HTTP的方法名；<br>（3）<code>params</code>：根据HTTP参数的存在、缺省或值对请求进行过滤；<br>（4）<code>header</code>：根据HTTP Header的存在、缺省或值对请求进行过滤；<br>（5）<code>consume</code>：设定在HTTP请求正文中允许使用的媒体类型；<br>（6）<code>product</code>：在HTTP响应体中允许使用的媒体类型。<br>3、注意：<br>在使用<code>@RequestMapping</code>之前，请求处理类还需要使用<code>@Controller</code>或<code>@RestController</code>注解进行标注。<br>4、示例：<br>（1）示例一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/demo&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">demo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;/demo&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问路径：/demo</span></span><br></pre></td></tr></table></figure>\n<p>（2）示例二<br>说明：<code>@RequestMapping</code>注解还可以对类进行标记，这样类中的处理方法在映射请求路径时，会自动将类上的<code>@RequestMapping</code>设置的<code>value</code>拼接到方法映射路径之前。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value=&quot;/demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/test&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">demo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;/demo&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问路径：/demo/test</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、-RequestBody\"><a href=\"#2、-RequestBody\" class=\"headerlink\" title=\"2、@RequestBody\"></a>2、@RequestBody</h3><p>1、说明：<br><code>@RequestBody</code>注解在<code>Controller</code>类的方法参数中使用，将请求体的参数绑定到一个对象上，请求体参数通过<code>HttpMessageConverter</code>传递，根据请求体中的参数名与对象的属性名进行匹配并绑定，此外，还可以通过<code>@Valid</code>注解对请求体中的参数进行校验。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// @Valid：是根据User类中属性上的校验规则来校验</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> User <span class=\"title function_\">createUser</span><span class=\"params\">(<span class=\"meta\">@Valid</span> <span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.createUser(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、-GetMapping\"><a href=\"#3、-GetMapping\" class=\"headerlink\" title=\"3、@GetMapping\"></a>3、@GetMapping</h3><p>1、说明：<br><code>@GetMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.GET)</code>一样，用于查询数据时，是幂等。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/findUsers&quot;,method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping(&quot;/findUsers&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.finUsers();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、-PostMapping\"><a href=\"#4、-PostMapping\" class=\"headerlink\" title=\"4、@PostMapping\"></a>4、@PostMapping</h3><p>1、说明：<br><code>@PostMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.POST)</code>一样，用于新增数据时，是非幂等（多次访问对rest服务产生的结果每次都会有改变），意思就是告诉开发人员，使用<code>@PostMapping</code>注解标注的接口每次请求，都会使数据库中的数据发生改变。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/createUser&quot;,method=RequestMethod.POST)</span></span><br><span class=\"line\">\t<span class=\"meta\">@PostMapping(&quot;/createUser&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> User <span class=\"title function_\">createUser</span><span class=\"params\">(<span class=\"meta\">@Valid</span> <span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userService.createUser();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、-PutMapping\"><a href=\"#5、-PutMapping\" class=\"headerlink\" title=\"5、@PutMapping\"></a>5、@PutMapping</h3><p>1、说明：<br><code>@PutMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PUT)</code>一样，用于更新数据时，它是全局更新（替换）,是幂等（多次访问对rest服务产生的结果都不会改变），意思就是告诉开发人员，使用<code>@PutMapping</code>注解标注的接口每次请求，不会使结果改变。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 同 @RequestMapping(value=&quot;/updateUser&quot;,method=RequestMethod.PUT)</span></span><br><span class=\"line\">\t<span class=\"meta\">@PutMapping(&quot;/updateUser&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;User&gt; <span class=\"title function_\">updateUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> <span class=\"keyword\">throws</span> UserNotFoundException&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">userFind</span> <span class=\"operator\">=</span> userService.findById(user.getId)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t.orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;没有此用户！&quot;</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Result.ok(userService.updateUser(user));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、-DeleteMapping\"><a href=\"#6、-DeleteMapping\" class=\"headerlink\" title=\"6、@DeleteMapping\"></a>6、@DeleteMapping</h3><p>1、说明：<br><code>@DeleteMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.DELETE)</code>一样，用于删除数据时，是幂等。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> calss UserController &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@DeleteMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;User&gt; <span class=\"title function_\">deleteUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span>String id)</span> <span class=\"keyword\">throws</span> UserNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.findById(id)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t.orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;没有此用户！&quot;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tuserService.deleteUser(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Result.ok();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7、-PatchMapping\"><a href=\"#7、-PatchMapping\" class=\"headerlink\" title=\"7、@PatchMapping\"></a>7、@PatchMapping</h3><p>1、说明：<br><code>@PatchMapping</code>注解是<code>@RequestMapping</code>注解的衍生注解，和<code>@RequestMapping(method=RequestMethod.PATCH)</code>一样，用于更新数据时，它是部分更新（只更新部分），是非幂等的。  </p>\n<h3 id=\"8、-ControllerAdvice\"><a href=\"#8、-ControllerAdvice\" class=\"headerlink\" title=\"8、@ControllerAdvice\"></a>8、@ControllerAdvice</h3><p>1、说明：<br><code>@ControllerAdvice</code>注解是<code>@Component</code>注解的一个衍生注解，Spring会自动扫描并检测被<code>@ControllerAdvice</code>注解所标注的类；<code>@ControllerAdvice</code>注解需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code>注解搭配使用，主要用来处理控制器所抛出的异常信息。<br>2、使用方法：<br>（1）我们需要定义一个被<code>@ControllerAdvice</code>所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用<code>@ExceptionHandler</code>注解进行标注；<br>（2）在有必要的时候，可以使用<code>@InitBinder</code>注解（使用方法在第9点）在类中进行全局配置，还可以使用<code>@ModelAttribute</code>配置与视图相关的参数；<br>（3）使用<code>@ControllerAdvice</code>注解，可以快速创建统一的、自定义的异常处理类，详细也可以查看第9点。<br>3、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice(basePackages=&#123;&quot;com.zjy.controller&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserControllerAdvice</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@InitBinder</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">binder</span><span class=\"params\">(WebDataBinder binder)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">\t\tformat.setLenient(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\tbinder.registerCustomEditor(Date.class, <span class=\"string\">&quot;user&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">CustomDateFormat</span>(format, <span class=\"literal\">true</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modelAttribute</span><span class=\"params\">(Model model)</span> &#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;User not found exception.&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">userNotFoundExceptionHandler</span><span class=\"params\">(UerNotFoundException ex)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">\t\tmodelAndView.addObject(<span class=\"string\">&quot;exception&quot;</span>, ex);</span><br><span class=\"line\">\t\tmodelAndView.setViewName(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、-InitBinder\"><a href=\"#9、-InitBinder\" class=\"headerlink\" title=\"9、@InitBinder\"></a>9、@InitBinder</h3><p><a href=\"https://blog.csdn.net/weixin_43888891/article/details/127348918\">使用方法链接</a></p>\n<h3 id=\"10、-ExceptionHandler\"><a href=\"#10、-ExceptionHandler\" class=\"headerlink\" title=\"10、@ExceptionHandler\"></a>10、@ExceptionHandler</h3><p>1、说明：<br><code>@ExceptionHandler</code>注解用于标注处理特定类型异常类所抛出的异常的方法。当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法。<br>2、用法：<br>用法是统一一个异常接口，比如如果每个方法都有try…catch来弄的话，代码量太多，这个时候统一一个方法，在这个方法上加上这个注解，一旦出现异常就会执行这个方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doError</span><span class=\"params\">(Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    ex.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ex.getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、示例：<br>（1）示例一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;Object&gt; <span class=\"title function_\">userNotFoundExceptionHandler</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Result.error(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）示例二<br>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">ex</span><span class=\"params\">(Exception ex)</span>&#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、-ResponseBody\"><a href=\"#11、-ResponseBody\" class=\"headerlink\" title=\"11、@ResponseBody\"></a>11、@ResponseBody</h3><p>1、说明：<br><code>@ResponseBody</code>会自动将控制器中方法的返回值写入到HTTP响应中。注意，<code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标注的类中，如果在被<code>@RestController</code>注解标注的类中，则不必使用<code>@ResponseBody</code>，<code>@restController</code>相当于是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">findByUserId</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserId(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、-ResponseStatus\"><a href=\"#12、-ResponseStatus\" class=\"headerlink\" title=\"12、@ResponseStatus\"></a>12、@ResponseStatus</h3><p>1、说明：<br><code>@ResponseStatus</code>注解可以标注请求处理方法。使用此注解，可以指定响应所需要的HTTP STATUS状态码。特别地，我们可以使用<code>HttpStatus</code>类对该注解的<code>value</code>或者<code>code</code>属性进行赋值。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例，如果没有使用<code>@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</code>，返回的状态码是200；使用之后，返回的状态码是500。  </p>\n<h3 id=\"13、-PathVariable和-RequestParam\"><a href=\"#13、-PathVariable和-RequestParam\" class=\"headerlink\" title=\"13、@PathVariable和@RequestParam\"></a>13、@PathVariable和@RequestParam</h3><p>1、@PathVariable<br>（1）说明：<br><code>@PathVariable</code>注解是将方法中的参数绑定到请求URL中的模板变量上，通过<code>@RequestMapping</code>注解来指定URL的模板变量，然后使用<code>@PathVariable</code>注解将方法中的参数绑定到模板变量上。<br>（2）示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@PathVariable(name=&quot;id&quot;)</span>String id, <span class=\"meta\">@PathVariable(value=&quot;roleId&quot;)</span>String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>模板变量名需要使用<code>&#123;&#125;</code>进行包裹，如果方法的参数名与URL模板变量名一致，则在<code>@PathVariable</code>中就可以省略别名的定义：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/&#123;id&#125;/roles/&#123;roleId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id, <span class=\"meta\">@PathVariable</span> String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、@RequestParam<br>（1）说明：<br><code>@RequestParam</code>注解用于将方法的参数与Web请求传递的参数进行绑定，使用<code>@RequestParam</code>可以获取请求URL路径中的参数值<br>（2）示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/roles&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Role <span class=\"title function_\">getUserRole</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String id, <span class=\"meta\">@RequestParam</span> String roleId)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userService.findByUserIdAndRoleId(id, roleId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、@RequestParam注解和@PathVariable注解的区别<br><a href=\"https://blog.csdn.net/qq_33355821/article/details/85619692\">区别链接详情请点击</a>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost:8080/springmvc/hello/101?param1=10&amp;param2=20</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDetails</span><span class=\"params\">(<span class=\"meta\">@PathVariable(value=&quot;id&quot;)</span> String id,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@RequestParam(value=&quot;param1&quot;, required=true)</span> String param1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@RequestParam(value=&quot;param2&quot;, required=false)</span> String param2)</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、-ModelAttribute\"><a href=\"#14、-ModelAttribute\" class=\"headerlink\" title=\"14、@ModelAttribute\"></a>14、@ModelAttribute</h3><p><a href=\"https://www.cnblogs.com/youth-man/p/14224652.html\">使用方法</a></p>\n<h3 id=\"15、-CrossOrigin\"><a href=\"#15、-CrossOrigin\" class=\"headerlink\" title=\"15、@CrossOrigin\"></a>15、@CrossOrigin</h3><p>1、说明：<br><code>@CrossOrigin</code>注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CrossOrigin</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/users/home&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">userDetails</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"16、-ComponentScan\"><a href=\"#16、-ComponentScan\" class=\"headerlink\" title=\"16、@ComponentScan\"></a>16、@ComponentScan</h3><p>1、说明：<br><code>@ComponentScan</code>注解用于配置Spring需要扫描的被组件注解注释的类所在的包。可以通过配置其basePackages属性或者value属性来配置需要扫描的包路径。  </p>\n<h3 id=\"17、-Mapper和-Repository\"><a href=\"#17、-Mapper和-Repository\" class=\"headerlink\" title=\"17、@Mapper和@Repository\"></a>17、@Mapper和@Repository</h3><p>1、说明：<br><code>@Mapper</code>和<code>@Repository</code>注解是<code>@Component</code>注解的延伸，与<code>@Component</code>注解一样，被此注解标注的类会被Spring自动管理起来，用于标注DAO层的数据持久化类。<br>2、区别：<br>（1）<code>@Mapper</code>不需要配置扫描地址，可以单独使用如果有多个mapper文件的话，可以在项目启动类中加入<code>@MapperScan(“mapper文件所在包”)</code>，这样就不需要每个mapper文件都加<code>@Mapper注解了</code>；<br>（2）<code>@Repository</code>不可以单独使用，否则会报错误找不到bean，这是因为项目启动的时候没有去扫描使用<code>@Repository</code>注解的文件，所以使用<code>@Repository</code>需要配置扫描地址，但在idea中，使用<code>@Repository</code>可以消除在业务层中注入mapper对象时的错误。  </p>\n<h3 id=\"18、-DependsOn\"><a href=\"#18、-DependsOn\" class=\"headerlink\" title=\"18、@DependsOn\"></a>18、@DependsOn</h3><p>1、说明：<br><code>@DependsOn</code>注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;firstBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@DependsOn(value=&#123;&quot;secondBean&quot;, &quot;thirdBean&quot;&#125;)</span> <span class=\"comment\">// 先初始化这里两个bean对象，再初始化firstBean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> FirstBean <span class=\"title function_\">firstBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;secondBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> SecondBean <span class=\"title function_\">secondBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(&quot;thirdBean&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ThirdBean <span class=\"title function_\">thirdBean</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"19、-PostConstruct与-PreDestroy\"><a href=\"#19、-PostConstruct与-PreDestroy\" class=\"headerlink\" title=\"19、@PostConstruct与@PreDestroy\"></a>19、@PostConstruct与@PreDestroy</h3><p>1、说明：<br>（1）<code>@PostConstruct</code>注解用于标注在Bean被Spring初始化之后需要执行的方法。<br>（2）<code>@PreDestroy</code>注解用于标注Bean被销毁前需要执行的方法。<br>2、示例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponent</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArraryList</span>&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tlist.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"20、-RestController\"><a href=\"#20、-RestController\" class=\"headerlink\" title=\"20、@RestController\"></a>20、@RestController</h3><p><code>@RestController</code> &#x3D; <code>@ResponseBody</code> + <code>@Controller</code>，JSON对象，不会通过视图解析器。  </p>\n<h3 id=\"21、-Controller\"><a href=\"#21、-Controller\" class=\"headerlink\" title=\"21、@Controller\"></a>21、@Controller</h3><p>通过视图解析器返回。  </p>\n<h3 id=\"22、-Scope\"><a href=\"#22、-Scope\" class=\"headerlink\" title=\"22、@Scope\"></a>22、@Scope</h3><p>@Scope（“单例&#x2F;原型模式”）。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Scope</span>(scopeName <span class=\"operator\">=</span> ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"23、-PathParam\"><a href=\"#23、-PathParam\" class=\"headerlink\" title=\"23、@PathParam\"></a>23、@PathParam</h3><p>这个注解是和spring的pathVariable是一样的，也是基于模板的，但是这个是jboss包下面的一个实现，上面的是spring的一个实现，都要导包。  </p>\n<h3 id=\"24、-Autowired和-Resource\"><a href=\"#24、-Autowired和-Resource\" class=\"headerlink\" title=\"24、@Autowired和@Resource\"></a>24、@Autowired和@Resource</h3><p>1、@Autowired<br>自动装配通过类型。（可以不需要set方法）<br>（1）<code>required</code>属性：默认为true，表示必须要有bean赋值给它，不然就报错，为false不报错。<br>（2）如果有多个相同类型的bean，那么会根据名字（成员变量名）进行匹配，如果名字也相同，那么就会报错。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// service接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service实现类1</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserOneServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;UserOneServiceImpl&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service实现类2</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTwoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;UserTwoServiceImpl&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// controller</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userOneServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userTwoServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        userOneServiceImpl.print();</span><br><span class=\"line\">        userTwoServiceImpl.print();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">UserOneServiceImpl</span><br><span class=\"line\">UserTwoServiceImpl</span><br></pre></td></tr></table></figure>\n\n<p>2、@Resource（属于java的注解）<br>自动装配通过名称，等同与@Qualifier(“xxx”)和@Autowired连用的效果。  </p>\n<p>3、区别<br><code>@Resource</code>是jdk提供，按照名称注入；<code>@Autowired</code>是spring提供，按照类型注入  </p>\n<h3 id=\"25、-Qualifier\"><a href=\"#25、-Qualifier\" class=\"headerlink\" title=\"25、@Qualifier\"></a>25、@Qualifier</h3><p><code>@Qualifier（value=&quot;xxx&quot;)</code>如果属性名字不唯一，可以通过这个注解标记。和<code>@Autowired</code>一起使用，当比如接口UserService接口有很多实现类，单单<code>@Autowired</code>是无法找到是哪一个实现类，所以需要加上<code>@Qualifier（value=&quot;实现类的名字&quot;)</code>，让系统找到指定类。  </p>\n<h3 id=\"26、-Nullable\"><a href=\"#26、-Nullable\" class=\"headerlink\" title=\"26、@Nullable\"></a>26、@Nullable</h3><p>字段标记了这个注解，说明这个字段可以为null。  </p>\n<h3 id=\"27、-Primary\"><a href=\"#27、-Primary\" class=\"headerlink\" title=\"27、@Primary\"></a>27、@Primary</h3><p>加在service实现类上，代表了如果有两个相同的service同时注入到容器中，使用这个注解可以实现要将哪个类实现调用。  </p>\n<h3 id=\"28、-XmlRootElement\"><a href=\"#28、-XmlRootElement\" class=\"headerlink\" title=\"28、@XmlRootElement\"></a>28、@XmlRootElement</h3><p>使标注的类序列化为xml或者json格式，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@XmlRootElement(name=&quot;User&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Int age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 序列化为</span></span><br><span class=\"line\"><span class=\"comment\"> * XML格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;User&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;name&gt; &lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;age&gt; &lt;/age&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/User&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * JSON格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;&quot;User&quot;:</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;name&quot;:  ,</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;age&quot;:  </span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"29、-ComponentScan\"><a href=\"#29、-ComponentScan\" class=\"headerlink\" title=\"29、@ComponentScan\"></a>29、@ComponentScan</h3><p><a href=\"https://blog.csdn.net/huangjhai/article/details/104600328\">用法链接</a>  </p>\n<h3 id=\"30、-JsonIgnore\"><a href=\"#30、-JsonIgnore\" class=\"headerlink\" title=\"30、@JsonIgnore\"></a>30、@JsonIgnore</h3><p>使用在某个属性上，这样在序列化和反序列化的时候都会忽略这个属性，最直接的效果就是返回的JSON属性是没有这个属性的，一般作用于密码这系列的属性。  </p>\n<h3 id=\"31、-JsonInclude\"><a href=\"#31、-JsonInclude\" class=\"headerlink\" title=\"31、@JsonInclude\"></a>31、@JsonInclude</h3><p>使用在某个属性上，配合它的属性<code>Value=JsonInclude.Include.NON_NULL</code>，表示的是如果这个属性的属性值为空那么在返回前端的时候不可见。  </p>\n<h3 id=\"32、-JsonProperty\"><a href=\"#32、-JsonProperty\" class=\"headerlink\" title=\"32、@JsonProperty\"></a>32、@JsonProperty</h3><p>使用在某个属性上，这个注解有两个作用，第一是修改返回JSON数据的时候key值为value指定值，第二个作用是配合属性access&#x3D;JsonProperty.Access.WRITE_ONLY表示属性只可以进行序列化而不能进行反序列化，直观效果就是返回的数据没有该属性。  </p>\n<h3 id=\"33、-JsonIgnoreProperties\"><a href=\"#33、-JsonIgnoreProperties\" class=\"headerlink\" title=\"33、@JsonIgnoreProperties\"></a>33、@JsonIgnoreProperties</h3><p>作用在类声明处，它和<code>@JsonIgnore</code>注解的区别就是可以对多个属性作用，直接在value属性后面使用大括号逗号隔开即可，它的ignoreUnknow属性为true表示忽略未定义的属性。<br>1、<code>ignoreUnknow</code>属性用法：标注在实体类上面，使用场景为：前端传参，后端实体类没有对应属性（会报错），此时后端实体类使用<code>@JsonIgnoreProperties(ignoreUnknown = true)</code>忽略未定义的属性，这样后端实体类就不会报错，而是直接忽略未定义的属性。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;t_detection_rule&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionRule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 规则id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"34、-RequestHeader\"><a href=\"#34、-RequestHeader\" class=\"headerlink\" title=\"34、@RequestHeader\"></a>34、@RequestHeader</h3><p>在后端controller获取前端请求头信息，里面有三个参数：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value:表示将前端请求头里的Host 赋值给host，</span></span><br><span class=\"line\"><span class=\"comment\">// required：true表示前端请求头必须有Host才能访问此方法</span></span><br><span class=\"line\"><span class=\"comment\">// defaultValue ：表示如果请求头没有value的值，就把defaultValue值赋值给host</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"meta\">@RequestHeader(value = &quot;Host&quot;,required = true,defaultValue = &quot;haha&quot;)</span> String host)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"35、-SpringBootConfiguration\"><a href=\"#35、-SpringBootConfiguration\" class=\"headerlink\" title=\"35、@SpringBootConfiguration\"></a>35、@SpringBootConfiguration</h3><p>和<code>@Configuration</code>是一样的，都是配置注解，只不过<code>@SpringBootConfiguration</code>是springboot里的注解。  </p>\n<h3 id=\"36、-EnableAutoConfiguration\"><a href=\"#36、-EnableAutoConfiguration\" class=\"headerlink\" title=\"36、@EnableAutoConfiguration\"></a>36、@EnableAutoConfiguration</h3><p>表示自动配置。  </p>\n<h3 id=\"37、-ConfigurationProperties\"><a href=\"#37、-ConfigurationProperties\" class=\"headerlink\" title=\"37、@ConfigurationProperties\"></a>37、@ConfigurationProperties</h3><p>想将配置文件中的数据提取出来，使用这个注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;xxx&quot;)</span> <span class=\"comment\">//xxx 表示配置文件里的前缀</span></span><br><span class=\"line\">--------------------------------------------------------------</span><br><span class=\"line\">配置文件application.properties的内容如下：</span><br><span class=\"line\">xxx.name=zjy <span class=\"comment\">//xxx 就是配置文件里的前缀</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"38、-ConditionalOnMissingBean\"><a href=\"#38、-ConditionalOnMissingBean\" class=\"headerlink\" title=\"38、@ConditionalOnMissingBean\"></a>38、@ConditionalOnMissingBean</h3><p><code>@ConditionalOnMissingBean(xxx.class)</code>容器中没有xxx.class才生效。  </p>\n<h3 id=\"39、-ConditionalOnClass\"><a href=\"#39、-ConditionalOnClass\" class=\"headerlink\" title=\"39、@ConditionalOnClass\"></a>39、@ConditionalOnClass</h3><p><code>@ConditionalOnClass(&#123;xxx.class,xxx.class,xxx.class&#125;)</code>容器中存在{xxx.class,xxx.class,xxx.class}这些才生效。  </p>\n<h3 id=\"40、-AutoConfiguration\"><a href=\"#40、-AutoConfiguration\" class=\"headerlink\" title=\"40、@AutoConfiguration\"></a>40、@AutoConfiguration</h3><p><code>@AutoConfiguration(after = &#123;xxx.class,xxx.class&#125;)</code>after的意思是 在 {xxx.class,xxx.class} 这些自动配置类配置之后再配置。  </p>\n<h3 id=\"41、-Order\"><a href=\"#41、-Order\" class=\"headerlink\" title=\"41、@Order\"></a>41、@Order</h3><p><code>@Order（1）</code>存在多个增强类对同一个类中的同一个方法进行增强，设置增强类执行的优先级。标注在增强类上，括号里面数字越小，优先级越高，越高的前置类型的方法先执行，后置后执行。  </p>\n<h3 id=\"42、-Transactional事务注解\"><a href=\"#42、-Transactional事务注解\" class=\"headerlink\" title=\"42、@Transactional事务注解\"></a>42、@Transactional事务注解</h3><p>1、<code>rollbackFor</code><br>默认情况下，只有出现<code>RuntimeException</code>才回滚异常，<code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务。<br>2、<code>propagation</code>传播行为<br>（1）<code>PROPAGATION_REQUIRED</code>（<code>@Transactional</code>默认的事务传播行为）<br>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。更确切地意思是：  </p>\n<ul>\n<li>如果外部方法没有开启事务的话，Propagation.REQUIRED 修饰的内部方法会开启自己的事务，且开启的事务相互独立，互不干扰；  </li>\n<li>如果外部方法开启事务并且是 Propagation.REQUIRED 的话，所有 Propagation.REQUIRED 修饰的内部方法和外部方法均属于同一事务 ，只要一个方法回滚，整个事务都需要回滚。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> aMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\tb.bMethod();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class B &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> bMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<code>aMethod</code>调用了<code>bMethod</code>，只要其中一个方法回滚，整个事务均回滚。<br>（2）<code>PROPAGATION_REQUIRES_NEW</code><br>创建一个新事物，并在新事务中执行；如果当前存在事务，则挂起当前事务，即便新事务抛出异常，也不会影响当前事务。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.PROPAGATION_REQUIRED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> aMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t\tb.bMethod();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class B &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation=Propagation.REQUIRES_NEW)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> bMethod &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n如果<code>aMethod</code>发生异常回滚，<code>bMethod</code>不会跟着回滚，因为<code>bMethod</code>开启了独立的事务。但是，如果<code>bMethod</code>抛出了未被捕获的异常并且这个异常满足事务回滚规则的话，<code>aMethod</code>同样也会回滚。<br>（3）<code>PROPAGATION_NESTED</code><br>如果当前存在事务，就在当前事务内执行；否则，就执行与<code>PROPAGATION_REQUIRED</code>类似的操作。<br>（4）<code>PROPAGATION_MANDATORY</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。<br>（5）<code>PROPAGATION_SUPPORTS</code><br>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。<br>（6）<code>PROPAGATION_NOT_SUPPORTED</code><br>以非事务方式运行，如果当前存在事务，则把当前事务挂起。<br>（7）<code>PROPAGATION_NEVER</code><br>以非事务方式运行，如果当前存在事务，则抛出异常。<br>（3、4、5、6、7 这 5 种事务传播方式不常用，了解即可。）</li>\n</ul>\n<h3 id=\"43、-Import\"><a href=\"#43、-Import\" class=\"headerlink\" title=\"43、@Import\"></a>43、@Import</h3><p><code>@Import</code>注解用于导入一个或多个配置类，可以导入Spring的配置类，也可以导入第三方库的配置类。<br>配置类A：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigA</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> A <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将配置类A导入到配置类B中：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(ConfigA.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigB</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> B <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"44、-JsonFormat\"><a href=\"#44、-JsonFormat\" class=\"headerlink\" title=\"44、@JsonFormat\"></a>44、@JsonFormat</h3><p>1、用途：用于定义 Java 对象的字段在序列化和反序列化为 JSON 时的格式。常用于日期、时间、数字等字段的格式化。<br>2、用法：可以指定格式模式（如日期格式），时区等。它常用于日期时间字段，以便将 Java Date 或 LocalDateTime 格式化为特定的字符串格式，或将字符串解析回特定格式的日期对象。<br>3、常见属性<br>（1）<code>pattern</code>：定义格式化的模式（如<code>yyyy-MM-dd HH:mm:ss</code>）；<br>（2）<code>timezone</code>：指定时区；<br>（3）<code>shape</code>：指定数据的序列化形状（如<code>JsonFormat.Shape.STRING</code>）。<br>4、示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime registrationDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）<code>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;UTC&quot;)</code>：指定<code>registrationDate</code>字段在序列化为JSON时的格式为”yyyy-MM-dd HH:mm:ss”，并使用UTC时区。<br>（2）在序列化过程中，LocalDateTime对象将被转换为指定的字符串格式。在反序列化过程中，符合该格式的字符串也将被正确解析为 LocalDateTime对象。  </p>\n<h3 id=\"45、-JsonUnwrapped\"><a href=\"#45、-JsonUnwrapped\" class=\"headerlink\" title=\"45、@JsonUnwrapped\"></a>45、@JsonUnwrapped</h3><p>1、用途：<code>@JsonUnwrapped</code>用于将Java对象的嵌套属性“展开”到JSON中，使得嵌套对象的字段直接在父级对象中显示，而不是嵌套为子对象。它主要用于消除JSON嵌套，使得JSON结构更加平坦（扁平化）。<br>2、用法：<code>@JsonUnwrapped</code>常用于那些包含另一个对象的 Java 对象，将嵌套对象的字段直接合并到父级对象的JSON表示中。<br>3、常见属性<br>（1）<code>prefix</code>：为展开的字段添加前缀。<br>（2）<code>suffix</code>：为展开的字段添加后缀。<br>4、示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonUnwrapped</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter and Setter methods</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<code>@JsonUnwrapped</code>注解在<code>address</code>字段上。序列化时，<code>address</code>中的字段将直接展开为<code>User</code>的JSON 字段，而不是作为一个嵌套的对象。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;street&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123 Main St&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;city&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果没有<code>@JsonUnwrapped</code>注解，默认的JSON输出将是：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;street&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123 Main St&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;city&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"46、-JsonTypeInfo和-JsonSubTypes\"><a href=\"#46、-JsonTypeInfo和-JsonSubTypes\" class=\"headerlink\" title=\"46、@JsonTypeInfo和@JsonSubTypes\"></a>46、@JsonTypeInfo和@JsonSubTypes</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1、应用场景<br>jackson可以将多态类型JSON序列化. 但在反序列化时会因为找不到具体的类而失败。<br>（1）举例<br>创建4个POJO类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HiveTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schema;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HBaseTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String columnFamily;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Statistics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;AbstractTarget&gt; targets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">    <span class=\"type\">Statistics</span> <span class=\"variable\">statistics</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Statistics</span>();</span><br><span class=\"line\">    List&lt;AbstractTarget&gt; targets = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    statistics.setTargets(targets);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">HiveTarget</span> <span class=\"variable\">hiveTarget</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HiveTarget</span>();</span><br><span class=\"line\">    hiveTarget.setSchema(<span class=\"string\">&quot;s1&quot;</span>);</span><br><span class=\"line\">    hiveTarget.setTable(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">    hiveTarget.setColumn(<span class=\"string\">&quot;c1&quot;</span>);</span><br><span class=\"line\">    targets.add(hiveTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    HBaseTarget hBaseTarget= <span class=\"keyword\">new</span> <span class=\"title class_\">HBaseTarget</span>();</span><br><span class=\"line\">    hBaseTarget.setNamespace(<span class=\"string\">&quot;ns2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setTable(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setColumnFamily(<span class=\"string\">&quot;cf2&quot;</span>);</span><br><span class=\"line\">    hBaseTarget.setColumn(<span class=\"string\">&quot;c2&quot;</span>);</span><br><span class=\"line\">    targets.add(hBaseTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">statisticsStr</span> <span class=\"operator\">=</span> mapper.writeValueAsString(statistics);</span><br><span class=\"line\">    System.out.println(statisticsStr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">    <span class=\"type\">Statistics</span> <span class=\"variable\">parsedStatistics</span> <span class=\"operator\">=</span> mapper.readValue(statisticsStr, Statistics.class);</span><br><span class=\"line\">    System.out.println(parsedStatistics);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c1&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c2&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">com.fasterxml.jackson.databind.exc.InvalidDefinitionException<span class=\"punctuation\">:</span> Cannot construct instance of `fresh.json.AbstractTarget` (no Creators<span class=\"punctuation\">,</span> like default constructor<span class=\"punctuation\">,</span> exist)<span class=\"punctuation\">:</span> abstract types either need to be mapped to concrete types<span class=\"punctuation\">,</span> have custom deserializer<span class=\"punctuation\">,</span> or contain additional type information</span><br><span class=\"line\"> at <span class=\"punctuation\">[</span>Source<span class=\"punctuation\">:</span> (String)<span class=\"string\">&quot;&#123;&quot;</span>targets<span class=\"string\">&quot;:[&#123;&quot;</span>schema<span class=\"string\">&quot;:&quot;</span>s1<span class=\"string\">&quot;,&quot;</span>table<span class=\"string\">&quot;:&quot;</span>t1<span class=\"string\">&quot;,&quot;</span>column<span class=\"string\">&quot;:&quot;</span>c1<span class=\"string\">&quot;&#125;,&#123;&quot;</span>namespace<span class=\"string\">&quot;:&quot;</span>ns2<span class=\"string\">&quot;,&quot;</span>table<span class=\"string\">&quot;:&quot;</span>t2<span class=\"string\">&quot;,&quot;</span>columnFamily<span class=\"string\">&quot;:&quot;</span>cf2<span class=\"string\">&quot;,&quot;</span>column<span class=\"string\">&quot;:&quot;</span>c2<span class=\"string\">&quot;&#125;]&#125;&quot;</span>; line<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span> column<span class=\"punctuation\">:</span> <span class=\"number\">13</span><span class=\"punctuation\">]</span> (through reference chain<span class=\"punctuation\">:</span> fresh.json.Statistics<span class=\"punctuation\">[</span><span class=\"string\">&quot;targets&quot;</span><span class=\"punctuation\">]</span>-&gt;java.util.ArrayList<span class=\"punctuation\">[</span><span class=\"number\">0</span><span class=\"punctuation\">]</span>)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>因此若要正确的反序列化，需要指定具体子类的标识。<br>要想解决该办法，可以使用<code>@JsonTypeInfo</code>和<code>@JsonSubTypes</code>注解。<br>2、解决方式<br>（1）方式一：使用类名作为标识<br>如下：使用类名作为标识符，并将标识符作为属性序列化，属性名称指定为”@class”。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,</span></span><br><span class=\"line\"><span class=\"meta\">        include = JsonTypeInfo.As.PROPERTY, \t</span></span><br><span class=\"line\"><span class=\"meta\">        property = &quot;@class&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"comment\">//等于@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS), 另外两个为类名作为标识的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话，序列化结果时会自动生成一个“@class”属性，反序列化时就会根据“@class”找到具体的类。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HBaseTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>实测发现当直接使用List序列化时（targets）会丢失”@class”属性，嵌套的列表和单独对象都没有这个问题：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing nested array-------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(statistics));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing object-------------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(hiveTarget));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;serializing array--------------&quot;</span>);</span><br><span class=\"line\">System.out.println(mapper.writeValueAsString(targets));</span><br></pre></td></tr></table></figure>\n<p>输出结果：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializing nested array-------</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fresh.json.HBaseTarget&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">serializing object-------------</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;fresh.json.HiveTarget&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;c1&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">serializing array--------------</span><br><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ns2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;table&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;t2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;columnFamily&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cf2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c2&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>（2）方式二：使用属性值作为标识<br>使用属性值做为标识，配置较为繁琐，适合类中已经存在标识属性的情况。<br>如下：AbstractTarget存在type属性，并且在两个子类中设置了固定且不同的值，使用@JsonTypeInfo指定type属性作为”类标识“，同时需要使用@JsonSubTypes指定 具体类 和 type属性值 的关系。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,</span></span><br><span class=\"line\"><span class=\"meta\">        include = JsonTypeInfo.As.EXISTING_PROPERTY,</span></span><br><span class=\"line\"><span class=\"meta\">        property = &quot;type&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@JsonSubTypes(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @JsonSubTypes.Type(value = HiveTarget.class, name = HiveTarget.TYPE),</span></span><br><span class=\"line\"><span class=\"meta\">        @JsonSubTypes.Type(value = HBaseTarget.class, name = HBaseTarget.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HiveTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schema;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hive&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HiveTarget</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        setType(TYPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HBaseTarget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTarget</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String table;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String columnFamily;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String column;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hbase&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HBaseTarget</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        setType(TYPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"47、-Conditional\"><a href=\"#47、-Conditional\" class=\"headerlink\" title=\"47、@Conditional\"></a>47、@Conditional</h3><p>用于根据条件是否成立创建Bean。<br>用法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebServerAutoConfiguration</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果TomcatCondition返回true，则创建这个Bean，下面jettyServer()同理</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@Conditional(TomcatCondition.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebServer <span class=\"title function_\">tomcatServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatServer</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@Conditional(JettyCondition.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebServer <span class=\"title function_\">jettyServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JettyServer</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TomcatCondition，JettyCondition同理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TomcatCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 获取类加载器，用于加载类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span>  <span class=\"operator\">=</span> context.getClassLoader();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果类加载器加载了Tomcat的类，则返回true，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 而是否有Tomcat的类，是根据pom依赖，如果引入了Tomcat的依赖，就会加载到Tomcat的类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tclassLoader.loadClass(<span class=\"string\">&quot;org.apache.catalina.startup.Tomcat&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：@Conditional注解只能用于方法上，不能用于类上。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、Java提供的注解\"><a href=\"#三、Java提供的注解\" class=\"headerlink\" title=\"三、Java提供的注解\"></a>三、Java提供的注解</h1><h3 id=\"1、JSR-175\"><a href=\"#1、JSR-175\" class=\"headerlink\" title=\"1、JSR-175\"></a>1、JSR-175</h3><p>这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解，主要包含以下几种标准注解：<br>1、<code>@Deprecated</code>：标识一个程序元素（如：类、方法或字段）已过时，并且在将来的版本中可能会被删除。<br>2、<code>@Override</code>：标识一个方法重写了父类中的方法。<br>3、<code>@SuppressWarnings</code>：抑制编译时产生的警告消息。<br>4、<code>@SafeVarargs</code>：标识一个有安全性警告的可变参数方法。<br>5、<code>@FunctionalInterface</code>：标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。  </p>\n<h3 id=\"2、JSR-250\"><a href=\"#2、JSR-250\" class=\"headerlink\" title=\"2、JSR-250\"></a>2、JSR-250</h3><p>这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注释，包括：<br>1、<code>@Resource</code>：标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。<br>2、<code>@PostConstruce</code>：标识一个方法作为初始化方法。<br>3、<code>@PreDestroy</code>：标识一个方法作为销毁方法。<br>4、<code>@Resource.AuthenticationType</code>：标识注入的资源的身份验证类型。<br>5、<code>@RolesAllowed</code>：标识授权角色。<br>6、<code>@RermitAll</code>：标识一个活动无需进行身份验证。<br>7、<code>@DenyAll</code>：标识不提供针对该方法的访问控制。<br>8、<code>@DeclareRoles</code>：声明安全角色。  </p>\n<h3 id=\"3、JSR-269\"><a href=\"#3、JSR-269\" class=\"headerlink\" title=\"3、JSR-269\"></a>3、JSR-269</h3><p>这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：<br>1、<code>@SupportedAnnotationTypes</code>：标识注解处理器所处理的注解类型。<br>2、<code>@SupportedSourceVersion</code>：标识注解处理器支持的Java源码版本。  </p>\n<h3 id=\"4、JSR-330\"><a href=\"#4、JSR-330\" class=\"headerlink\" title=\"4、JSR-330\"></a>4、JSR-330</h3><p>该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准。<br>1、<code>@Named</code>：标识一个被依赖注入的组件的名词。<br>2、<code>@Inject</code>：标识一个需要被注入的依赖组件。<br>3、<code>@Singleton</code>：标识一个组件的生命周期只有一个唯一的实例。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Spring提供的注解\"><a href=\"#四、Spring提供的注解\" class=\"headerlink\" title=\"四、Spring提供的注解\"></a>四、Spring提供的注解</h1><h3 id=\"1、-Component\"><a href=\"#1、-Component\" class=\"headerlink\" title=\"1、@Component\"></a>1、@Component</h3><p>将类声明为Spring组件。  </p>\n<h3 id=\"2、-Controller\"><a href=\"#2、-Controller\" class=\"headerlink\" title=\"2、@Controller\"></a>2、@Controller</h3><p><code>@Component</code>衍生注解，用在controller类。  </p>\n<h3 id=\"3、-Service\"><a href=\"#3、-Service\" class=\"headerlink\" title=\"3、@Service\"></a>3、@Service</h3><p><code>@Component</code>衍生注解，用在service类。  </p>\n<h3 id=\"4、-Repository\"><a href=\"#4、-Repository\" class=\"headerlink\" title=\"4、@Repository\"></a>4、@Repository</h3><p><code>@Component</code>衍生注解，用在dao类。  </p>\n<h3 id=\"5、-Autowired\"><a href=\"#5、-Autowired\" class=\"headerlink\" title=\"5、@Autowired\"></a>5、@Autowired</h3><p>按照类型自动注入。  </p>\n<h3 id=\"6、-Qualifier\"><a href=\"#6、-Qualifier\" class=\"headerlink\" title=\"6、@Qualifier\"></a>6、@Qualifier</h3><p>与@Autowired一起使用，用于指定注入的bean的名称。  </p>\n<h3 id=\"7、-Resource\"><a href=\"#7、-Resource\" class=\"headerlink\" title=\"7、@Resource\"></a>7、@Resource</h3><p>自动注入，支持按名称注入，等于<code>@Autowired</code>和<code>@Qualifier</code>一起使用。  </p>\n<h3 id=\"8、-Value\"><a href=\"#8、-Value\" class=\"headerlink\" title=\"8、@Value\"></a>8、@Value</h3><p>用于注入基本类型、String类型和配置文件中的属性值。<br>1、用法<br>（1）注入String类型，直接为字段赋值，无需依赖配置文件  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;Hello, World!&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String greeting;</span><br></pre></td></tr></table></figure>\n<p>（2）从配置文件注入属性值<br>注意：如果同名属性在多个配置源中存在（如环境变量、配置文件），Spring 会按优先级选择值（如环境变量 &gt; application.yml）。<br>application.properties文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app.welcomeMessage</span>=<span class=\"string\">Welcome to Spring!</span></span><br></pre></td></tr></table></figure>\n<p>或者application.yml文件：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app:</span></span><br><span class=\"line\">  <span class=\"attr\">welcomeMessage:</span> <span class=\"string\">Welcome</span> <span class=\"string\">to</span> <span class=\"string\">Spring!</span></span><br></pre></td></tr></table></figure>\n<p>java类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :号后为默认值</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;app.welcomeMessage:Default Value&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String welcomeMessage;</span><br></pre></td></tr></table></figure>\n<p>（3）注入系统环境变量<br>直接读取操作系统环境变量：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;#&#123;systemEnvironment[&#x27;JAVA_HOME&#x27;]&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String javaHome;</span><br></pre></td></tr></table></figure>\n<p>（4）注入集合类型<br>application.properties文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">app.colors</span>=<span class=\"string\">red,blue,green</span></span><br><span class=\"line\"><span class=\"attr\">app.config</span>=<span class=\"string\">&#123;key1=value1, key2=value2&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;&#x27;$&#123;app.colors&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span> <span class=\"comment\">// 转换为 List&lt;String&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;$&#123;app.config&#125;&#125;&quot;)</span> <span class=\"comment\">// 转换为 Map&lt;String, String&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.yml文件：  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表（List/Array）</span></span><br><span class=\"line\"><span class=\"attr\">myapp1:</span></span><br><span class=\"line\">  <span class=\"attr\">hobbies:</span> [<span class=\"string\">爬山</span>, <span class=\"string\">羽毛球</span>, <span class=\"string\">篮球</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 映射（Map）  </span></span><br><span class=\"line\"><span class=\"attr\">myapp2:</span></span><br><span class=\"line\">  <span class=\"attr\">colors:</span></span><br><span class=\"line\">    <span class=\"attr\">red:</span> <span class=\"string\">&quot;#FF0000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">blue:</span> <span class=\"string\">&quot;#0000FF&quot;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 嵌套集合</span></span><br><span class=\"line\"><span class=\"attr\">myapp3:</span></span><br><span class=\"line\">  <span class=\"attr\">nested:</span></span><br><span class=\"line\">    <span class=\"attr\">list:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">item1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">item2</span></span><br><span class=\"line\">    <span class=\"attr\">map:</span></span><br><span class=\"line\">      <span class=\"attr\">key1:</span> <span class=\"string\">value1</span></span><br><span class=\"line\">      <span class=\"attr\">key2:</span> <span class=\"string\">value2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从 YAML 注入列表</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;&#x27;$&#123;myapp1.hobbies&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span>  <span class=\"comment\">// 将逗号分隔的字符串转换为 List</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; hobbies;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp2.colors&#125;&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; colors;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp3.nested.list&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; nestedList;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;$&#123;myapp3.nested.map&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; nestedMap;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 如果 YAML 中未定义某个属性，可以通过 : 指定默认值</span></span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;#&#123;T(java.util.Collections).emptyList() ?: $&#123;myapp.emptyList&#125;&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; emptyList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（5）使用SpEL表达式<br>通过SpEL动态计算值：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、SpEL 表达式可能影响性能：复杂的表达式会增加运行时开销。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、避免过度依赖 SpEL：对于简单场景，优先使用直接属性注入。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用其他 Bean 的属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;someBean.someValue * 2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> doubleValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随机数生成</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> randomValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（6）静态字段注入  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigApp</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;greeting:Hello&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Value 不支持直接注入静态字段，因为 Spring 容器管理的是 Bean 实例而非类本身。解决方法：</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getStaticGreeting</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConfigApp.greeting; <span class=\"comment\">// 通过非静态字段间接获取</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、-Scope\"><a href=\"#9、-Scope\" class=\"headerlink\" title=\"9、@Scope\"></a>9、@Scope</h3><p>用于指定Spring Bean的作用域。<br>1、<code>@Scope(&quot;singleton&quot;)</code>：默认值，单例模式，整个应用程序中只有一个实例。<br>2、<code>@Scope(&quot;prototype&quot;)</code>：每次请求都会创建一个新的实例。<br>3、<code>@Scope(&quot;request&quot;)</code>：在Web应用中，每个HTTP请求都会创建一个新的实例。<br>4、<code>@Scope(&quot;session&quot;)</code>：在Web应用中，每个HTTP会话都会创建一个新的实例。<br>5、<code>@Scope(&quot;application&quot;)</code>：在Web应用中，整个Web应用程序中只有一个实例。  </p>\n<h3 id=\"10、-PreDestroy\"><a href=\"#10、-PreDestroy\" class=\"headerlink\" title=\"10、@PreDestroy\"></a>10、@PreDestroy</h3><p>标识一个方法在Bean销毁之前执行。  </p>\n<h3 id=\"11、-PostConstruct\"><a href=\"#11、-PostConstruct\" class=\"headerlink\" title=\"11、@PostConstruct\"></a>11、@PostConstruct</h3><p>标识一个方法在Bean初始化之后执行。  </p>\n<h3 id=\"12、-Configuration\"><a href=\"#12、-Configuration\" class=\"headerlink\" title=\"12、@Configuration\"></a>12、@Configuration</h3><p>声明一个类为配置类，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"13、-ComponentScan\"><a href=\"#13、-ComponentScan\" class=\"headerlink\" title=\"13、@ComponentScan\"></a>13、@ComponentScan</h3><p>指定Spring在创建容器时，要扫描的包路径，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"14、-Bean\"><a href=\"#14、-Bean\" class=\"headerlink\" title=\"14、@Bean\"></a>14、@Bean</h3><p>用于把当前方法的返回值作为bean对象存入Spring的IOC容器中，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"15、-Import\"><a href=\"#15、-Import\" class=\"headerlink\" title=\"15、@Import\"></a>15、@Import</h3><p>用于导入其他配置类，当我们使用了Import注解后，有Import注解的类就是主配置类，而被导入的都是子配置类，示例在<code>@PropertySource</code>中查看。  </p>\n<h3 id=\"16、-PropertySource\"><a href=\"#16、-PropertySource\" class=\"headerlink\" title=\"16、@PropertySource\"></a>16、@PropertySource</h3><p>用于指定properties配置文件的位置。<br>示例：<br>jdbcConfig.properties配置文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/test</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n<p>JdbcConfig配置类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcConfig</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">DruidDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">\t\tdataSource.setDriverClassName(driver);</span><br><span class=\"line\">\t\tdataSource.setUrl(url);</span><br><span class=\"line\">\t\tdataSource.setUsername(username);</span><br><span class=\"line\">\t\tdataSource.setPassword(password);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主配置类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">// 指定当前类为配置文件类</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.demo&quot;)</span> <span class=\"comment\">// 指定Spring在创建容器的时候，扫描的包</span></span><br><span class=\"line\"><span class=\"meta\">@Import(JdbcConfig.class)</span> <span class=\"comment\">// 引入其他配置类</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span> <span class=\"comment\">// 指定properties配置文件的位置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里面暂时什么都还没配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Spring","path":"api/tags/Spring.json"}]}