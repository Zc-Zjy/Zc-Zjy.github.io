{"title":"Springboot源码中可扩展的接口","slug":"Springboot源码中可扩展的接口","date":"2025-06-10T02:06:08.000Z","updated":"2025-06-12T01:47:08.997Z","comments":true,"path":"api/articles/Springboot源码中可扩展的接口.json","realPath":null,"excerpt":null,"covers":["/2025/06/10/Springboot%E6%BA%90%E7%A0%81%E4%B8%AD%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%8E%A5%E5%8F%A3/1.jpg"],"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n\n\n<p>下面是<code>Springboot</code><strong>可扩展的接口启动调用顺序图：</strong>  </p>\n<img src=\"/2025/06/10/Springboot%E6%BA%90%E7%A0%81%E4%B8%AD%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%8E%A5%E5%8F%A3/1.jpg\" class=\"\">  \n\n<h3 id=\"1、ApplicationContextInitializer\"><a href=\"#1、ApplicationContextInitializer\" class=\"headerlink\" title=\"1、ApplicationContextInitializer\"></a>1、ApplicationContextInitializer</h3><p><code>org.springframework.context.ApplicationContextInitializer</code>（这是个接口）<br>这是整个spring容器在刷新之前，初始化<code>ConfigurableApplicationContext</code>的回调接口，简单来说，就是在容器刷新之前调用此类的initialize方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。<br>上面的意思是<code>ApplicationContextInitializer</code>是<code>ConfigurableApplicationContext</code>的回调接口，先执行<code>ConfigurableApplicationContext</code>，然后<code>ConfigurableApplicationContext</code>会去主动调用<code>ApplicationContextInitializer</code>。<br>这里先讲解下回调函数：<br>A是B的回调接口，回调的核心思想：<code>A为B回调接口，C去实现A接口，B执行完某个操作后，会主动去调用A，调用的方法为C的实现方法</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Spring 框架定义的接口（A）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ApplicationContextInitializer</span>&lt;C <span class=\"keyword\">extends</span> <span class=\"title class_\">ConfigurableApplicationContext</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(C applicationContext)</span>; <span class=\"comment\">// 回调方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 开发者实现接口（C）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 操作 context（例如添加属性）</span></span><br><span class=\"line\">        context.getEnvironment().getSystemProperties().put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Spring 框架内部调用（B）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigurableApplicationContext</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在刷新前调用所有初始化器</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ApplicationContextInitializer initializer : getInitializers()) &#123;</span><br><span class=\"line\">            initializer.initialize(<span class=\"built_in\">this</span>); <span class=\"comment\">// 调用开发者实现的方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 继续刷新逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、解释<code>ConfigurableApplicationContext</code><br><code>ConfigurableApplicationContext</code>继承了<code>ApplicationContext</code>，提供了配置和生命周期管理的方法。这个接口允许在上下文刷新之前进行设置，并且可以在运行时关闭上下文。<br>（1）什么是<code>ApplicationContext</code>？<br>想象Spring是一个 “工厂”，它负责创建和管理你的代码组件（比如UserService、OrderDao等）。<code>ApplicationContext</code>就是这个工厂的“大脑”，它知道如何创建这些组件，以及它们之间的关系。<br>（2）为什么会有<code>ConfigurableApplicationContext</code>？<br><code>ApplicationContext</code>就是一个“只读”大脑：你只能用它已有的配置。<br><code>ConfigurableApplicationContext</code>是一个“可读写”大脑，允许你：  </p>\n<ul>\n<li>启动前修改配置：比如添加一些自定义设置；  </li>\n<li>控制生命周期：像开关一样启动或关闭这个工厂；  </li>\n<li>监听事件：比如知道工厂什么时候开工、停工。</li>\n</ul>\n<p>（3）<code>ConfigurableApplicationContext</code>接口的常见实现类  </p>\n<ul>\n<li>AnnotationConfigApplicationContext：基于 Java 注解配置的上下文；  </li>\n<li>ClassPathXmlApplicationContext：基于 XML 配置文件的上下文；  </li>\n<li>FileSystemXmlApplicationContext：从文件系统加载 XML 配置的上下文；  </li>\n<li>XmlWebApplicationContext：Web 应用中使用的 XML 配置上下文。</li>\n</ul>\n<p>（4）简单说明  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------启动前的配置----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个可配置的&quot;工厂大脑&quot;</span></span><br><span class=\"line\"><span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\"><span class=\"comment\">// 启动前添加一些自定义设置（比如指定数据库地址）</span></span><br><span class=\"line\">context.getEnvironment().setProperty(<span class=\"string\">&quot;db.url&quot;</span>, <span class=\"string\">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 启动工厂！</span></span><br><span class=\"line\">context.refresh(); <span class=\"comment\">// 这行代码会创建所有组件并让它们就绪</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------启动后获取组件----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 从工厂里拿一个组件来用</span></span><br><span class=\"line\"><span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> context.getBean(UserService.class);</span><br><span class=\"line\">userService.createUser(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------关闭工厂----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 用完后关闭工厂，释放资源（比如断开数据库连接）</span></span><br><span class=\"line\">context.close(); <span class=\"comment\">// 这行代码会销毁所有组件</span></span><br></pre></td></tr></table></figure>\n<p>注意：  </p>\n<ul>\n<li>refresh方法只能在上下文未刷新时调用一次，多次调用会抛出异常；  </li>\n<li>调用close方法后，上下文不能再被使用，需创建新的实例；  </li>\n<li>在Web应用中，通常由容器管理上下文生命周期，无需手动调用close方法。</li>\n</ul>\n<p>常见问题：  </p>\n<ul>\n<li>Q：为什么要手动关闭？<br>A：如果不关闭，某些资源（如数据库连接）可能不会被释放，就像你离开房间却不关灯。  </li>\n<li>Q：refresh方法能调用多次吗？<br>A：不能！就像工厂不能反复“开工”，否则会报错。  </li>\n<li>Q：我在Web项目中需要手动关闭吗？<br>A：不需要！Web项目有专门的机制自动管理，就像商场有专门的管理员关灯。</li>\n</ul>\n<p>2、<code>ConfigurableApplicationContext</code>扩展方式  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[ApplicationContextInitializer]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：<br>（1）在启动类中用<code>springApplication.addInitializers(new TestApplicationContextInitializer())</code>语句加入；<br>（2）配置文件配置<code>context.initializer.classes=com.example.demo.TestApplicationContextInitializer</code>；<br>（3）Spring SPI扩展，在spring.factories中加入<code>org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer</code>。  </p>\n<ol>\n<li><p>Spring SPI扩展机制概述<br>Spring SPI（Service Provider Interface）是一种基于Java SPI（ServiceLoader）的扩展机制，允许第三方组件在不修改Spring核心代码的情况下扩展其功能。这种模式遵循”开闭原则”（对扩展开放，对修改关闭），是Spring框架设计的核心思想之一。  </p>\n</li>\n<li><p>Spring SPI的工作原理<br>Spring SPI机制的核心是通过spring.factories文件实现的：<br>配置文件位置：在classpath下的META-INF&#x2F;spring.factories文件中声明扩展组件；<br>键值对格式：文件内容采用接口全限定名&#x3D;实现类全限定名的格式；<br>加载机制：Spring在启动时会自动扫描所有JAR包中的spring.factories文件，并实例化对应的实现类。  </p>\n</li>\n<li><p>Spring框架提供了多个可扩展的SPI接口可使用<br>ApplicationContextInitializer：用于在应用上下文刷新前自定义初始化；<br>ApplicationListener：事件监听器，用于监听Spring应用事件；<br>EnvironmentPostProcessor：环境后置处理器，用于在应用环境加载后修改配置；<br>BeanFactoryPostProcessor：Bean工厂后置处理器，用于在Bean定义加载后修改定义；<br>AutoConfigurationImportSelector：自动配置导入选择器，用于自定义自动配置逻辑。  </p>\n</li>\n<li><p>简单Spring SPI扩展的步骤<br>如果不使用Spring框架提供的SPI接口，也可以自定义SPI接口。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义SPI接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现扩展接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行自定义服务逻辑&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建spring.factories文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在src/main/resources/META-INF/spring.factories中添加</span></span><br><span class=\"line\"><span class=\"attr\">com.example.MyService</span>=<span class=\"string\">com.example.MyServiceImpl</span></span><br></pre></td></tr></table></figure>\n<p>Spring会在启动时自动扫描并实例化MyServiceImpl类。</p>\n</li>\n</ol>\n<h3 id=\"2、BeanDefinitionRegistryPostProcessor\"><a href=\"#2、BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"2、BeanDefinitionRegistryPostProcessor\"></a>2、BeanDefinitionRegistryPostProcessor</h3><p><code>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor</code><br>这个接口在读取项目中的beanDefinition之后执行，提供一个补充的扩展点。<br>使用场景：你可以在这里动态注册自己的beanDefinition，可以加载classpath之外的bean。<br>扩展方式为:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanDefinitionRegistryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、BeanFactoryPostProcessor\"><a href=\"#3、BeanFactoryPostProcessor\" class=\"headerlink\" title=\"3、BeanFactoryPostProcessor\"></a>3、BeanFactoryPostProcessor</h3><p><code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code><br>这个接口是beanFactory的扩展接口，调用时机在spring在读取beanDefinition信息之后，实例化bean之前。<br>在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的beanDefinition的元信息。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanFactoryPostProcessor]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、InstantiationAwareBeanPostProcessor\"><a href=\"#4、InstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"4、InstantiationAwareBeanPostProcessor\"></a>4、InstantiationAwareBeanPostProcessor</h3><p><code>org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor</code><br>该接口继承了BeanPostProcess接口，区别如下：<br>BeanPostProcess接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而InstantiationAwareBeanPostProcessor接口在此基础上增加了3个方法，把可扩展的范围增加了<strong>实例化阶段</strong>和<strong>属性注入</strong>阶段。<br>该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：<strong>实例化阶段</strong>和<strong>初始化阶段</strong>，下面一起进行说明，按调用顺序为：<br>（1）postProcessBeforeInstantiation：实例化bean之前，相当于new这个bean之前；<br>（2）postProcessAfterInstantiation：实例化bean之后，相当于new这个bean之后；<br>（3）postProcessPropertyValues：bean已经实例化完成，在属性注入时阶段触发，@Autowired，@Resource等注解原理基于此方法实现；<br>（4）postProcessBeforeInitialization：初始化bean之前，相当于把bean注入spring上下文之前；<br>（5）postProcessAfterInitialization：初始化bean之后，相当于把bean注入spring上下文之后。<br>使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInstantiationAwareBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInstantiation</span><span class=\"params\">(Class&lt;?&gt; beanClass, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        returnnull;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">postProcessAfterInstantiation</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        returntrue;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PropertyValues <span class=\"title function_\">postProcessPropertyValues</span><span class=\"params\">(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pvs;      </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、SmartInstantiationAwareBeanPostProcessor\"><a href=\"#5、SmartInstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"5、SmartInstantiationAwareBeanPostProcessor\"></a>5、SmartInstantiationAwareBeanPostProcessor</h3><p><code>org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor</code><br>该扩展接口有3个触发点方法：<br>（1）predictBeanType：该触发点发生在postProcessBeforeInstantiation之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用BeanFactory.getType(name)时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息；<br>（2）determineCandidateConstructors：该触发点发生在postProcessBeforeInstantiation之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean；<br>（3）getEarlyBeanReference：该触发点发生在postProcessAfterInstantiation之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInstantiationAwareBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmartInstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanClass;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors &quot;</span> + beanName);      </span><br><span class=\"line\">        returnnull;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getEarlyBeanReference</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、BeanFactoryAware\"><a href=\"#6、BeanFactoryAware\" class=\"headerlink\" title=\"6、BeanFactoryAware\"></a>6、BeanFactoryAware</h3><p><code>org.springframework.beans.factory.BeanFactoryAware</code><br>这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为setBeanFactory，可以拿到BeanFactory这个属性。<br>使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 BeanFactory，在这个时候，可以对每个bean作特殊化的定制。也或者可以把BeanFactory拿到进行缓存，日后使用。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryAware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryAware</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanFactory</span><span class=\"params\">(BeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestBeanFactoryAware] &quot;</span> + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7、ApplicationContextAwareProcessor\"><a href=\"#7、ApplicationContextAwareProcessor\" class=\"headerlink\" title=\"7、ApplicationContextAwareProcessor\"></a>7、ApplicationContextAwareProcessor</h3><p><code>org.springframework.context.support.ApplicationContextAwareProcessor</code><br>该类本身并没有扩展点，但是该类内部却有7个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这段代码源自springboot源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EnvironmentAware) &#123;</span><br><span class=\"line\">        ((EnvironmentAware)bean).setEnvironment(<span class=\"built_in\">this</span>.applicationContext.getEnvironment());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class=\"line\">        ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class=\"built_in\">this</span>.embeddedValueResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class=\"line\">        ((ResourceLoaderAware)bean).setResourceLoader(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class=\"line\">        ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> MessageSourceAware) &#123;</span><br><span class=\"line\">        ((MessageSourceAware)bean).setMessageSource(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationStartupAware) &#123;</span><br><span class=\"line\">        ((ApplicationStartupAware)bean).setApplicationStartup(<span class=\"built_in\">this</span>.applicationContext.getApplicationStartup());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">        ((ApplicationContextAware)bean).setApplicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上if中的扩展接口，来获取对应容器的变量，所以这里应该来说是有7个扩展点，这里就放一起来说了：<br>（1）EnvironmentAware：用于获取EnviromentAware的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得；<br>（2）EmbeddedValueResolverAware：用于获取StringValueResolver的一个扩展类， StringValueResolver用于获取基于String类型的properties的变量，一般我们都用@Value的方式去获取，如果实现了这个Aware接口，把StringValueResolver缓存起来，通过这个类去获取String类型的变量，效果是一样的；<br>（3）ResourceLoaderAware：用于获取ResourceLoader的一个扩展类，ResourceLoader可以用于获取classpath内所有的资源对象，可以扩展此类来拿到ResourceLoader对象；<br>（4）ApplicationEventPublisherAware：用于获取ApplicationEventPublisher的一个扩展类，ApplicationEventPublisher可以用来发布事件，结合ApplicationListener来共同使用，下文在介绍ApplicationListener时会详细提到，这个对象也可以通过spring注入的方式来获得；<br>（5）MessageSourceAware：用于获取MessageSource的一个扩展类，MessageSource主要用来做国际化；<br>（6）ApplicationContextAware：用来获取ApplicationContext的一个扩展类，ApplicationContext应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时ApplicationContext也实现了BeanFactory，MessageSource，ApplicationEventPublisher等接口，也可以用来做相关接口的事情。  </p>\n<h3 id=\"8、BeanNameAware\"><a href=\"#8、BeanNameAware\" class=\"headerlink\" title=\"8、BeanNameAware\"></a>8、BeanNameAware</h3><p><code>org.springframework.beans.factory.BeanNameAware</code><br>可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是postProcessBeforeInitialization之前，这个类的触发点方法只有一个：setBeanName。<br>使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanNameAware</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NormalBeanA</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanName</span><span class=\"params\">(String name)</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanNameAware] &quot;</span> + name);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、-PostConstruct\"><a href=\"#9、-PostConstruct\" class=\"headerlink\" title=\"9、@PostConstruct\"></a>9、@PostConstruct</h3><p><code>javax.annotation.PostConstruct</code><br>这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postProcessBeforeInitialization之后，InitializingBean.afterPropertiesSet之前。<br>使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NormalBeanA</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[PostConstruct] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"10、InitializingBean\"><a href=\"#10、InitializingBean\" class=\"headerlink\" title=\"10、InitializingBean\"></a>10、InitializingBean</h3><p><code>org.springframework.beans.factory.InitializingBean</code><br>这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只包括afterPropertiesSet方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在postProcessAfterInitialization之前。<br>使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>&#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[InitializingBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、FactoryBean\"><a href=\"#11、FactoryBean\" class=\"headerlink\" title=\"11、FactoryBean\"></a>11、FactoryBean</h3><p><code>org.springframework.beans.factory.FactoryBean</code><br>一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。<br>FactoryBean接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为FactoryBean<T>的形式。<br>使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿ProxyFactoryBean的功能。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;TestFactoryBean.TestFactoryInnerBean&gt; &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> TestFactoryBean.TestFactoryInnerBean <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[FactoryBean] getObject&quot;</span>);      </span><br><span class=\"line\">        returnnew TestFactoryBean.TestFactoryInnerBean();      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> TestFactoryBean.TestFactoryInnerBean.class;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        returntrue;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    publicstaticclass TestFactoryInnerBean&#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、SmartInitializingSingleton\"><a href=\"#12、SmartInitializingSingleton\" class=\"headerlink\" title=\"12、SmartInitializingSingleton\"></a>12、SmartInitializingSingleton</h3><p><code>org.springframework.beans.factory.SmartInitializingSingleton</code><br>这个接口中只有一个方法afterSingletonsInstantiated，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）实例化完成之后调用的回调接口。其触发时机为postProcessAfterInitialization之后。<br><strong>更准确的说法是：</strong>SmartInitializingSingleton.afterSingletonsInstantiated()的触发时机是所有非懒加载单例 Bean 的实例化（Instantiation）和依赖注入（DI）完成之后，但某些初始化逻辑（如 @PostConstruct、InitializingBean）可能尚未执行。<br>使用场景：用户可以扩展此接口在对所有单例对象实例化完毕后，做一些后置的业务处理。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInitializingSingleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmartInitializingSingleton</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSingletonsInstantiated</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInitializingSingleton]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"13、CommandLineRunner\"><a href=\"#13、CommandLineRunner\" class=\"headerlink\" title=\"13、CommandLineRunner\"></a>13、CommandLineRunner</h3><p><code>org.springframework.boot.CommandLineRunner</code><br>这个接口也只有一个方法：run(String… args)，触发时机为整个项目启动完毕后，自动执行。如果有多个CommandLineRunner，可以利用@Order来进行排序。<br>使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestCommandLineRunner]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"14、DisposableBean\"><a href=\"#14、DisposableBean\" class=\"headerlink\" title=\"14、DisposableBean\"></a>14、DisposableBean</h3><p><code>org.springframework.beans.factory.DisposableBean</code><br>这个扩展点也只有一个方法：destroy()，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行applicationContext.registerShutdownHook时，就会触发这个方法。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DisposableBean</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[DisposableBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"15、ApplicationListener\"><a href=\"#15、ApplicationListener\" class=\"headerlink\" title=\"15、ApplicationListener\"></a>15、ApplicationListener</h3><p><code>org.springframework.context.ApplicationListener</code><br>准确的说，这个应该不算spring&amp;springboot当中的一个扩展点，ApplicationListener可以监听某个事件的event，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。<br>但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。<br>接下来罗列下spring主要的内置事件：<br>（1）ContextRefreshedEvent<br>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在ConfigurableApplicationContext接口中使用 refresh()方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext容器已就绪可用。<br>（2）ContextStartedEvent<br>当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。<br>（3）ContextStoppedEvent<br>当使用 ConfigurableApplicationContext接口中的 stop()停止ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。<br>（4）ContextClosedEvent<br>当使用 ConfigurableApplicationContext接口中的 close()方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。<br>（5）RequestHandledEvent<br>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件。  </p>\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n\n\n<p>下面是<code>Springboot</code><strong>可扩展的接口启动调用顺序图：</strong>  </p>\n<img src=\"/2025/06/10/Springboot%E6%BA%90%E7%A0%81%E4%B8%AD%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%8E%A5%E5%8F%A3/1.jpg\" class=\"\">  \n\n<h3 id=\"1、ApplicationContextInitializer\"><a href=\"#1、ApplicationContextInitializer\" class=\"headerlink\" title=\"1、ApplicationContextInitializer\"></a>1、ApplicationContextInitializer</h3><p><code>org.springframework.context.ApplicationContextInitializer</code>（这是个接口）<br>这是整个spring容器在刷新之前，初始化<code>ConfigurableApplicationContext</code>的回调接口，简单来说，就是在容器刷新之前调用此类的initialize方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。<br>上面的意思是<code>ApplicationContextInitializer</code>是<code>ConfigurableApplicationContext</code>的回调接口，先执行<code>ConfigurableApplicationContext</code>，然后<code>ConfigurableApplicationContext</code>会去主动调用<code>ApplicationContextInitializer</code>。<br>这里先讲解下回调函数：<br>A是B的回调接口，回调的核心思想：<code>A为B回调接口，C去实现A接口，B执行完某个操作后，会主动去调用A，调用的方法为C的实现方法</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Spring 框架定义的接口（A）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ApplicationContextInitializer</span>&lt;C <span class=\"keyword\">extends</span> <span class=\"title class_\">ConfigurableApplicationContext</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(C applicationContext)</span>; <span class=\"comment\">// 回调方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 开发者实现接口（C）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 操作 context（例如添加属性）</span></span><br><span class=\"line\">        context.getEnvironment().getSystemProperties().put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Spring 框架内部调用（B）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigurableApplicationContext</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在刷新前调用所有初始化器</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ApplicationContextInitializer initializer : getInitializers()) &#123;</span><br><span class=\"line\">            initializer.initialize(<span class=\"built_in\">this</span>); <span class=\"comment\">// 调用开发者实现的方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 继续刷新逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、解释<code>ConfigurableApplicationContext</code><br><code>ConfigurableApplicationContext</code>继承了<code>ApplicationContext</code>，提供了配置和生命周期管理的方法。这个接口允许在上下文刷新之前进行设置，并且可以在运行时关闭上下文。<br>（1）什么是<code>ApplicationContext</code>？<br>想象Spring是一个 “工厂”，它负责创建和管理你的代码组件（比如UserService、OrderDao等）。<code>ApplicationContext</code>就是这个工厂的“大脑”，它知道如何创建这些组件，以及它们之间的关系。<br>（2）为什么会有<code>ConfigurableApplicationContext</code>？<br><code>ApplicationContext</code>就是一个“只读”大脑：你只能用它已有的配置。<br><code>ConfigurableApplicationContext</code>是一个“可读写”大脑，允许你：  </p>\n<ul>\n<li>启动前修改配置：比如添加一些自定义设置；  </li>\n<li>控制生命周期：像开关一样启动或关闭这个工厂；  </li>\n<li>监听事件：比如知道工厂什么时候开工、停工。</li>\n</ul>\n<p>（3）<code>ConfigurableApplicationContext</code>接口的常见实现类  </p>\n<ul>\n<li>AnnotationConfigApplicationContext：基于 Java 注解配置的上下文；  </li>\n<li>ClassPathXmlApplicationContext：基于 XML 配置文件的上下文；  </li>\n<li>FileSystemXmlApplicationContext：从文件系统加载 XML 配置的上下文；  </li>\n<li>XmlWebApplicationContext：Web 应用中使用的 XML 配置上下文。</li>\n</ul>\n<p>（4）简单说明  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------启动前的配置----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个可配置的&quot;工厂大脑&quot;</span></span><br><span class=\"line\"><span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\"><span class=\"comment\">// 启动前添加一些自定义设置（比如指定数据库地址）</span></span><br><span class=\"line\">context.getEnvironment().setProperty(<span class=\"string\">&quot;db.url&quot;</span>, <span class=\"string\">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 启动工厂！</span></span><br><span class=\"line\">context.refresh(); <span class=\"comment\">// 这行代码会创建所有组件并让它们就绪</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------启动后获取组件----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 从工厂里拿一个组件来用</span></span><br><span class=\"line\"><span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> context.getBean(UserService.class);</span><br><span class=\"line\">userService.createUser(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --------------关闭工厂----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 用完后关闭工厂，释放资源（比如断开数据库连接）</span></span><br><span class=\"line\">context.close(); <span class=\"comment\">// 这行代码会销毁所有组件</span></span><br></pre></td></tr></table></figure>\n<p>注意：  </p>\n<ul>\n<li>refresh方法只能在上下文未刷新时调用一次，多次调用会抛出异常；  </li>\n<li>调用close方法后，上下文不能再被使用，需创建新的实例；  </li>\n<li>在Web应用中，通常由容器管理上下文生命周期，无需手动调用close方法。</li>\n</ul>\n<p>常见问题：  </p>\n<ul>\n<li>Q：为什么要手动关闭？<br>A：如果不关闭，某些资源（如数据库连接）可能不会被释放，就像你离开房间却不关灯。  </li>\n<li>Q：refresh方法能调用多次吗？<br>A：不能！就像工厂不能反复“开工”，否则会报错。  </li>\n<li>Q：我在Web项目中需要手动关闭吗？<br>A：不需要！Web项目有专门的机制自动管理，就像商场有专门的管理员关灯。</li>\n</ul>\n<p>2、<code>ConfigurableApplicationContext</code>扩展方式  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[ApplicationContextInitializer]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：<br>（1）在启动类中用<code>springApplication.addInitializers(new TestApplicationContextInitializer())</code>语句加入；<br>（2）配置文件配置<code>context.initializer.classes=com.example.demo.TestApplicationContextInitializer</code>；<br>（3）Spring SPI扩展，在spring.factories中加入<code>org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer</code>。  </p>\n<ol>\n<li><p>Spring SPI扩展机制概述<br>Spring SPI（Service Provider Interface）是一种基于Java SPI（ServiceLoader）的扩展机制，允许第三方组件在不修改Spring核心代码的情况下扩展其功能。这种模式遵循”开闭原则”（对扩展开放，对修改关闭），是Spring框架设计的核心思想之一。  </p>\n</li>\n<li><p>Spring SPI的工作原理<br>Spring SPI机制的核心是通过spring.factories文件实现的：<br>配置文件位置：在classpath下的META-INF&#x2F;spring.factories文件中声明扩展组件；<br>键值对格式：文件内容采用接口全限定名&#x3D;实现类全限定名的格式；<br>加载机制：Spring在启动时会自动扫描所有JAR包中的spring.factories文件，并实例化对应的实现类。  </p>\n</li>\n<li><p>Spring框架提供了多个可扩展的SPI接口可使用<br>ApplicationContextInitializer：用于在应用上下文刷新前自定义初始化；<br>ApplicationListener：事件监听器，用于监听Spring应用事件；<br>EnvironmentPostProcessor：环境后置处理器，用于在应用环境加载后修改配置；<br>BeanFactoryPostProcessor：Bean工厂后置处理器，用于在Bean定义加载后修改定义；<br>AutoConfigurationImportSelector：自动配置导入选择器，用于自定义自动配置逻辑。  </p>\n</li>\n<li><p>简单Spring SPI扩展的步骤<br>如果不使用Spring框架提供的SPI接口，也可以自定义SPI接口。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义SPI接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现扩展接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行自定义服务逻辑&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建spring.factories文件：  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在src/main/resources/META-INF/spring.factories中添加</span></span><br><span class=\"line\"><span class=\"attr\">com.example.MyService</span>=<span class=\"string\">com.example.MyServiceImpl</span></span><br></pre></td></tr></table></figure>\n<p>Spring会在启动时自动扫描并实例化MyServiceImpl类。</p>\n</li>\n</ol>\n<h3 id=\"2、BeanDefinitionRegistryPostProcessor\"><a href=\"#2、BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"2、BeanDefinitionRegistryPostProcessor\"></a>2、BeanDefinitionRegistryPostProcessor</h3><p><code>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor</code><br>这个接口在读取项目中的beanDefinition之后执行，提供一个补充的扩展点。<br>使用场景：你可以在这里动态注册自己的beanDefinition，可以加载classpath之外的bean。<br>扩展方式为:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanDefinitionRegistryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、BeanFactoryPostProcessor\"><a href=\"#3、BeanFactoryPostProcessor\" class=\"headerlink\" title=\"3、BeanFactoryPostProcessor\"></a>3、BeanFactoryPostProcessor</h3><p><code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code><br>这个接口是beanFactory的扩展接口，调用时机在spring在读取beanDefinition信息之后，实例化bean之前。<br>在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的beanDefinition的元信息。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanFactoryPostProcessor]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、InstantiationAwareBeanPostProcessor\"><a href=\"#4、InstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"4、InstantiationAwareBeanPostProcessor\"></a>4、InstantiationAwareBeanPostProcessor</h3><p><code>org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor</code><br>该接口继承了BeanPostProcess接口，区别如下：<br>BeanPostProcess接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而InstantiationAwareBeanPostProcessor接口在此基础上增加了3个方法，把可扩展的范围增加了<strong>实例化阶段</strong>和<strong>属性注入</strong>阶段。<br>该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：<strong>实例化阶段</strong>和<strong>初始化阶段</strong>，下面一起进行说明，按调用顺序为：<br>（1）postProcessBeforeInstantiation：实例化bean之前，相当于new这个bean之前；<br>（2）postProcessAfterInstantiation：实例化bean之后，相当于new这个bean之后；<br>（3）postProcessPropertyValues：bean已经实例化完成，在属性注入时阶段触发，@Autowired，@Resource等注解原理基于此方法实现；<br>（4）postProcessBeforeInitialization：初始化bean之前，相当于把bean注入spring上下文之前；<br>（5）postProcessAfterInitialization：初始化bean之后，相当于把bean注入spring上下文之后。<br>使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInstantiationAwareBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInstantiation</span><span class=\"params\">(Class&lt;?&gt; beanClass, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        returnnull;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">postProcessAfterInstantiation</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        returntrue;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PropertyValues <span class=\"title function_\">postProcessPropertyValues</span><span class=\"params\">(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pvs;      </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、SmartInstantiationAwareBeanPostProcessor\"><a href=\"#5、SmartInstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"5、SmartInstantiationAwareBeanPostProcessor\"></a>5、SmartInstantiationAwareBeanPostProcessor</h3><p><code>org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor</code><br>该扩展接口有3个触发点方法：<br>（1）predictBeanType：该触发点发生在postProcessBeforeInstantiation之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用BeanFactory.getType(name)时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息；<br>（2）determineCandidateConstructors：该触发点发生在postProcessBeforeInstantiation之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean；<br>（3）getEarlyBeanReference：该触发点发生在postProcessAfterInstantiation之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInstantiationAwareBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmartInstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanClass;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors &quot;</span> + beanName);      </span><br><span class=\"line\">        returnnull;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getEarlyBeanReference</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、BeanFactoryAware\"><a href=\"#6、BeanFactoryAware\" class=\"headerlink\" title=\"6、BeanFactoryAware\"></a>6、BeanFactoryAware</h3><p><code>org.springframework.beans.factory.BeanFactoryAware</code><br>这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为setBeanFactory，可以拿到BeanFactory这个属性。<br>使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 BeanFactory，在这个时候，可以对每个bean作特殊化的定制。也或者可以把BeanFactory拿到进行缓存，日后使用。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryAware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryAware</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanFactory</span><span class=\"params\">(BeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestBeanFactoryAware] &quot;</span> + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7、ApplicationContextAwareProcessor\"><a href=\"#7、ApplicationContextAwareProcessor\" class=\"headerlink\" title=\"7、ApplicationContextAwareProcessor\"></a>7、ApplicationContextAwareProcessor</h3><p><code>org.springframework.context.support.ApplicationContextAwareProcessor</code><br>该类本身并没有扩展点，但是该类内部却有7个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这段代码源自springboot源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EnvironmentAware) &#123;</span><br><span class=\"line\">        ((EnvironmentAware)bean).setEnvironment(<span class=\"built_in\">this</span>.applicationContext.getEnvironment());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class=\"line\">        ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class=\"built_in\">this</span>.embeddedValueResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class=\"line\">        ((ResourceLoaderAware)bean).setResourceLoader(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class=\"line\">        ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> MessageSourceAware) &#123;</span><br><span class=\"line\">        ((MessageSourceAware)bean).setMessageSource(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationStartupAware) &#123;</span><br><span class=\"line\">        ((ApplicationStartupAware)bean).setApplicationStartup(<span class=\"built_in\">this</span>.applicationContext.getApplicationStartup());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">        ((ApplicationContextAware)bean).setApplicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上if中的扩展接口，来获取对应容器的变量，所以这里应该来说是有7个扩展点，这里就放一起来说了：<br>（1）EnvironmentAware：用于获取EnviromentAware的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得；<br>（2）EmbeddedValueResolverAware：用于获取StringValueResolver的一个扩展类， StringValueResolver用于获取基于String类型的properties的变量，一般我们都用@Value的方式去获取，如果实现了这个Aware接口，把StringValueResolver缓存起来，通过这个类去获取String类型的变量，效果是一样的；<br>（3）ResourceLoaderAware：用于获取ResourceLoader的一个扩展类，ResourceLoader可以用于获取classpath内所有的资源对象，可以扩展此类来拿到ResourceLoader对象；<br>（4）ApplicationEventPublisherAware：用于获取ApplicationEventPublisher的一个扩展类，ApplicationEventPublisher可以用来发布事件，结合ApplicationListener来共同使用，下文在介绍ApplicationListener时会详细提到，这个对象也可以通过spring注入的方式来获得；<br>（5）MessageSourceAware：用于获取MessageSource的一个扩展类，MessageSource主要用来做国际化；<br>（6）ApplicationContextAware：用来获取ApplicationContext的一个扩展类，ApplicationContext应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时ApplicationContext也实现了BeanFactory，MessageSource，ApplicationEventPublisher等接口，也可以用来做相关接口的事情。  </p>\n<h3 id=\"8、BeanNameAware\"><a href=\"#8、BeanNameAware\" class=\"headerlink\" title=\"8、BeanNameAware\"></a>8、BeanNameAware</h3><p><code>org.springframework.beans.factory.BeanNameAware</code><br>可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是postProcessBeforeInitialization之前，这个类的触发点方法只有一个：setBeanName。<br>使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanNameAware</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NormalBeanA</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanName</span><span class=\"params\">(String name)</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanNameAware] &quot;</span> + name);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、-PostConstruct\"><a href=\"#9、-PostConstruct\" class=\"headerlink\" title=\"9、@PostConstruct\"></a>9、@PostConstruct</h3><p><code>javax.annotation.PostConstruct</code><br>这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postProcessBeforeInitialization之后，InitializingBean.afterPropertiesSet之前。<br>使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> &#123;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NormalBeanA</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[PostConstruct] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"10、InitializingBean\"><a href=\"#10、InitializingBean\" class=\"headerlink\" title=\"10、InitializingBean\"></a>10、InitializingBean</h3><p><code>org.springframework.beans.factory.InitializingBean</code><br>这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只包括afterPropertiesSet方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在postProcessAfterInitialization之前。<br>使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>&#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[InitializingBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、FactoryBean\"><a href=\"#11、FactoryBean\" class=\"headerlink\" title=\"11、FactoryBean\"></a>11、FactoryBean</h3><p><code>org.springframework.beans.factory.FactoryBean</code><br>一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。<br>FactoryBean接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为FactoryBean<T>的形式。<br>使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿ProxyFactoryBean的功能。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;TestFactoryBean.TestFactoryInnerBean&gt; &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> TestFactoryBean.TestFactoryInnerBean <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[FactoryBean] getObject&quot;</span>);      </span><br><span class=\"line\">        returnnew TestFactoryBean.TestFactoryInnerBean();      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> TestFactoryBean.TestFactoryInnerBean.class;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        returntrue;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    publicstaticclass TestFactoryInnerBean&#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、SmartInitializingSingleton\"><a href=\"#12、SmartInitializingSingleton\" class=\"headerlink\" title=\"12、SmartInitializingSingleton\"></a>12、SmartInitializingSingleton</h3><p><code>org.springframework.beans.factory.SmartInitializingSingleton</code><br>这个接口中只有一个方法afterSingletonsInstantiated，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）实例化完成之后调用的回调接口。其触发时机为postProcessAfterInitialization之后。<br><strong>更准确的说法是：</strong>SmartInitializingSingleton.afterSingletonsInstantiated()的触发时机是所有非懒加载单例 Bean 的实例化（Instantiation）和依赖注入（DI）完成之后，但某些初始化逻辑（如 @PostConstruct、InitializingBean）可能尚未执行。<br>使用场景：用户可以扩展此接口在对所有单例对象实例化完毕后，做一些后置的业务处理。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInitializingSingleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmartInitializingSingleton</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSingletonsInstantiated</span><span class=\"params\">()</span> &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestSmartInitializingSingleton]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"13、CommandLineRunner\"><a href=\"#13、CommandLineRunner\" class=\"headerlink\" title=\"13、CommandLineRunner\"></a>13、CommandLineRunner</h3><p><code>org.springframework.boot.CommandLineRunner</code><br>这个接口也只有一个方法：run(String… args)，触发时机为整个项目启动完毕后，自动执行。如果有多个CommandLineRunner，可以利用@Order来进行排序。<br>使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestCommandLineRunner]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"14、DisposableBean\"><a href=\"#14、DisposableBean\" class=\"headerlink\" title=\"14、DisposableBean\"></a>14、DisposableBean</h3><p><code>org.springframework.beans.factory.DisposableBean</code><br>这个扩展点也只有一个方法：destroy()，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行applicationContext.registerShutdownHook时，就会触发这个方法。<br>扩展方式为：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DisposableBean</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[DisposableBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"15、ApplicationListener\"><a href=\"#15、ApplicationListener\" class=\"headerlink\" title=\"15、ApplicationListener\"></a>15、ApplicationListener</h3><p><code>org.springframework.context.ApplicationListener</code><br>准确的说，这个应该不算spring&amp;springboot当中的一个扩展点，ApplicationListener可以监听某个事件的event，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。<br>但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。<br>接下来罗列下spring主要的内置事件：<br>（1）ContextRefreshedEvent<br>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在ConfigurableApplicationContext接口中使用 refresh()方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext容器已就绪可用。<br>（2）ContextStartedEvent<br>当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。<br>（3）ContextStoppedEvent<br>当使用 ConfigurableApplicationContext接口中的 stop()停止ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。<br>（4）ContextClosedEvent<br>当使用 ConfigurableApplicationContext接口中的 close()方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。<br>（5）RequestHandledEvent<br>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件。  </p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Spring","path":"api/tags/Spring.json"}]}