{"title":"SpringBoot + Tika 实现数据泄露防护、检测敏感信息","slug":"SpringBoot-Tika-实现数据泄露防护、检测敏感信息","date":"2025-06-09T03:37:27.000Z","updated":"2025-06-09T06:27:00.250Z","comments":true,"path":"api/articles/SpringBoot-Tika-实现数据泄露防护、检测敏感信息.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、Tika介绍\"><a href=\"#一、Tika介绍\" class=\"headerlink\" title=\"一、Tika介绍\"></a>一、Tika介绍</h1><p>Apache Tika 是一个功能强大的内容分析工具，它能够从多种文件格式中提取文本、元数据以及其他结构化信息。以下是 Apache Tika 的主要特性：<br>1、多格式支持<br>Tika 通过集成众多开源库（如 Apache POI、PDFBox、Tesseract OCR 等）来支持这些格式的解析。<br>Tika 的最大特点之一就是支持广泛的文件格式。它能够解析和提取多种文档类型的内容，包括但不限于：  </p>\n<ul>\n<li>办公文档： 如 Microsoft Word（.doc, .docx）、Excel（.xls, .xlsx）、PowerPoint（.ppt, .pptx）、OpenOffice（.odt, .ods）等；  </li>\n<li>PDF： 提取 PDF 文档中的文本和元数据；  </li>\n<li>HTML &#x2F; XML： 解析 HTML 和 XML 格式的内容；  </li>\n<li>文本文件： 如 .txt 文件等；  </li>\n<li>图片和音视频： 支持图像格式（如 JPEG、PNG）和音频视频格式（如 MP3、MP4、WAV 等），并能提取相关的元数据；  </li>\n<li>电子邮件： 如 EML 文件格式；  </li>\n<li>压缩文件： 如 ZIP、TAR、GZ 等压缩包中的文件内容。</li>\n</ul>\n<p>2、自动文件类型检测<br>Tika 具有强大的文件类型自动识别功能，可以根据文件内容而非文件扩展名来判断文件的真实类型。它支持多种标准和非标准文件类型的自动识别，确保了高准确度的格式识别。<br><span style=\"background-color: orange; color: white;box-shadow: 1px 1px 2px orange;\">MIME 类型识别：Tika 可以准确识别文件的 MIME 类型，帮助系统判断如何处理和解析文件。</span>  </p>\n<p>3、文本和元数据提取<br>Tika 能够从多种文件中提取出文本内容和元数据。元数据通常包括作者、创建日期、修改日期、文件大小、版权信息等。  </p>\n<ul>\n<li>Tika 能够从多种文件中提取出文本内容和元数据。元数据通常包括作者、创建日期、修改日期、文件大小、版权信息等；  </li>\n<li>元数据提取： 除了文本，Tika 还能提取各种元数据，如作者、标题、关键词、修改时间等，方便进一步的分析或索引。</li>\n</ul>\n<p>4、支持 OCR（光学字符识别）<br>Tika 集成了 OCR 引擎（如 Tesseract），能够从扫描图像或 PDF 文档中的图片提取文本信息。当文件中包含图像时，Tika 可以通过 OCR 功能识别图像中的文字，并提取出来。  </p>\n<p>5、语言检测<br>Tika 具备自动检测文件文本语言的功能。通过分析提取的文本，Tika 可以识别文档的语言（如英语、中文、法语等），这一功能对多语言处理和文档分类非常有用。  </p>\n<p>6、支持嵌入式应用<br>Tika 是以 Java 为主要开发语言的，且它不仅可以作为独立应用使用，还可以嵌入到其他 Java 应用中。Tika 提供了 Java API，使得开发者能够轻松集成到各种应用程序中，进行自动化的文件内容提取和处理。  </p>\n<ul>\n<li>Tika App： 命令行工具，适用于从文件提取内容并输出文本和元数据；  </li>\n<li>Tika Server： 基于 RESTful API 的服务，适合通过 HTTP 协议与外部系统进行交互，支持远程文件解析。</li>\n</ul>\n<p>7、多线程支持<br>Apache Tika 提供了并行处理的能力，允许在处理大批量文件时，通过多线程方式提高处理速度。对于需要批量文件解析和内容提取的场景，Tika 的多线程支持可以显著提高效率。  </p>\n<p>8、内容和元数据格式统一输出<br>Tika 返回统一的输出格式，不论文件类型如何，提取的文本和元数据都会按照标准的方式提供。这使得开发者能够轻松地将不同格式的文件内容统一处理。  </p>\n<ul>\n<li>JSON 格式输出： Tika 可以将提取的内容和元数据以 JSON 格式输出，便于与其他系统集成和处理；  </li>\n<li>XML 格式输出： 除了 JSON 格式，Tika 也支持将内容提取结果以 XML 格式输出，适用于需要更结构化数据的场景。</li>\n</ul>\n<p>9、支持大文件处理<br>Tika 支持处理大型文档和多页文档，能够高效地提取其中的内容而不会占用过多的内存。对于需要处理大量文档或大文档的应用场景（如搜索引擎、大数据处理等），Tika 能够提供可靠的支持。  </p>\n<p>10、与其他工具和库的集成<br>Tika 还可以与其他工具和库进行集成，以扩展其功能：  </p>\n<ul>\n<li>Lucene &#x2F; Solr &#x2F; Elasticsearch： Tika 常常与这些搜索引擎集成，用于全文索引和搜索；  </li>\n<li>Lucene &#x2F; Solr &#x2F; Elasticsearch： Tika 常常与这些搜索引擎集成，用于全文索引和搜索；  </li>\n<li>PDFBox： 用于解析和提取 PDF 文件内容；  </li>\n<li>Tesseract OCR： 用于从图像中提取文本，特别适用于扫描文档和图片内容。</li>\n</ul>\n<p>11、高度可扩展性<br>Tika 提供了灵活的扩展机制，用户可以根据需求自定义解析器、增加新的文件格式支持或调整文本提取策略。通过定制 Tika 配置文件（如 tika-config.xml），开发者可以配置不同类型文件的处理方式、修改默认的解析器和行为等。<br>Apache Tika 的主要特性包括对多种文件格式的支持、自动文件类型检测、文本和元数据提取、OCR 支持、语言检测、多线程处理、统一格式的输出、以及与其他工具的无缝集成。这些特性使得 Tika 成为一个功能强大且灵活的内容分析框架，适用于文档管理、信息提取、搜索引擎、大数据处理等各种应用场景。  </p>\n<p>12、Tika 应用场景<br>Apache Tika 是一个开源的内容分析工具，主要用于从各种文件格式中提取文本、元数据和结构化信息。它支持多种文件格式，包括文档、电子表格、PDF、音频、视频、图片等，具有强大的文件内容解析能力。在真实项目中的应用场景非常广泛，以下是一些典型的应用场景：<br>（1）企业文档管理系统<br>在大型企业或机构中，文档管理系统通常需要处理大量不同格式的文件（如 PDF、Word、Excel 等）。<br>通过 Apache Tika，可以自动化从这些文件中提取文本和元数据（如作者、创建时间、文件大小等），然后将其统一存储到数据库中，便于搜索、管理和索引。这种应用使得企业能够高效地进行文档归档、搜索和分类。<br>示例应用：  </p>\n<ul>\n<li>自动化文档提取： 提取文件中的关键信息，如合同中的条款、报价单中的价格等，帮助员工快速定位重要数据；  </li>\n<li>全文搜索功能： 通过 Tika 提取的文本内容，可以建立索引，提供快速的全文搜索功能，方便用户查找所需的文档。</li>\n</ul>\n<p>（2）内容管理系统（CMS）<br>在内容管理系统中，Apache Tika 可用于自动提取上传文件的内容，并将其转换为可编辑的格式。这对于包含各种文档格式（如文本、PDF、图像等）的内容管理非常有用，尤其是在网站和平台中需要处理大量文件时，Tika 可以提供统一的处理接口。<br>示例应用：  </p>\n<ul>\n<li>网站文件处理： 当用户上传文件到网站时，Tika 会自动提取文件内容（如从文档中提取文本、从图像中提取元数据），以便进一步处理或存储；  </li>\n<li>文件格式转换： Tika 可以将上传的文件转换为统一的格式，方便后续编辑和展示。</li>\n</ul>\n<p>（3）数据分析与大数据平台<br>在大数据分析中，Apache Tika 可以被用于处理非结构化数据（如文本、PDF、图片、音频文件等），并将这些数据转化为结构化数据。通过 Tika 提取的文本可以进一步进行数据清洗、分类、聚类或文本挖掘等分析任务。<br>示例应用：  </p>\n<ul>\n<li>大数据处理： 在数据湖或大数据平台中，Tika 可以帮助从不同来源（如电子邮件、文档、图片等）提取出可分析的文本数据，以便进行机器学习模型训练、情感分析或趋势预测；  </li>\n<li>搜索引擎： 在搜索引擎中，Tika 提供的内容解析能够支持不同类型的文件索引和检索功能，增强搜索结果的准确性和全面性。</li>\n</ul>\n<p>（4）法律与合规性审查<br>在法律和合规性领域，企业常常需要对大量的合同、法律文书、电子邮件等进行分析。Apache Tika 可以帮助自动提取这些文档中的关键信息，比如合同条款、支付细节、法律条文等，供律师和合规人员审查。<br>示例应用：  </p>\n<ul>\n<li>合同审核与分析： Tika 可用于从合同中提取重要的文本信息，如签署日期、金额、条款内容等，帮助审查人员快速识别文档的核心内容；  </li>\n<li>合规性检查： 自动提取和分类文档中的合规信息，帮助企业检测是否符合规定，并减少人工审核的工作量。</li>\n</ul>\n<p>（5）数字资产管理（DAM）<br>数字资产管理系统中，Apache Tika 被广泛应用于提取多媒体文件（如图像、视频、音频文件等）的元数据和内容。通过对图片中的标签、视频中的字幕或音频文件中的元数据进行解析，可以更好地管理和索引数字资产。<br>示例应用：  </p>\n<ul>\n<li>图片和视频内容管理： Tika 可以自动提取图片和视频的元数据（如拍摄时间、相机类型、分辨率等），并帮助构建数字媒体库，提供基于内容的搜索功能；  </li>\n<li>自动分类和标记： Tika 通过分析文件内容和元数据，能够自动进行分类和标记，帮助企业更高效地管理和访问数字资产。</li>\n</ul>\n<p>（6）信息安全与数据泄露防护<br>在信息安全领域，Apache Tika 可以用于扫描文件中的敏感数据。例如，Tika 可以帮助企业检测文件中是否包含敏感的个人信息（如身份证号、信用卡信息等），从而增强企业对数据泄露的防护能力。<br>示例应用：  </p>\n<ul>\n<li>敏感信息识别： 通过 Tika 提取文件内容后，进行自动化的敏感数据检测，识别可能包含个人敏感信息或机密数据的文件；  </li>\n<li>数据泄露防护： 在企业系统中，Tika 可以协助检查文件上传和共享过程中的潜在风险，确保不会无意间泄露敏感信息。</li>\n</ul>\n<p>（7）自动化电子邮件分类<br>Apache Tika 还可以用于从电子邮件中提取内容，帮助自动分类邮件内容。在许多企业或组织中，Tika 可被用于帮助识别电子邮件中的附件、链接或关键信息，进而根据内容进行分类、存档或自动响应。<br>示例应用：  </p>\n<ul>\n<li>邮件内容提取与分类： Tika 能从电子邮件中提取文本，分析邮件的主题、发件人和正文内容，帮助自动化邮件分类并减少人工操作；  </li>\n<li>附件扫描与处理： Tika 可以分析电子邮件中的附件，并根据附件类型和内容自动执行适当的处理程序。</li>\n</ul>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Tika-架构组件\"><a href=\"#二、Tika-架构组件\" class=\"headerlink\" title=\"二、Tika 架构组件\"></a>二、Tika 架构组件</h1><p>Apache Tika 的架构组件主要包括以下几个核心部分，它们共同协作，以支持从各种文件格式中提取文本、元数据和其他信息。以下是 Apache Tika 的主要架构组件：<br>1、Tika Core<br>Tika Core 是 Apache Tika 的核心组件，提供了文件解析、内容提取的基础功能。它包含了最基本的功能，如文档类型识别、解析和提取文本内容。Tika Core 是其他功能和模块的基础。<br>（1）文件解析（Parser）<br>用于解析各种文件格式，返回提取的文本和元数据。<br>（2）内容提取（Content Extraction）<br>提取文件中的内容，包括文本、图片、音频、视频等。<br>（3）文件类型识别（MIME Type Detection）<br>根据文件的内容而不是扩展名，判断文件的实际类型（如 PDF、Word、Excel、HTML 等）。  </p>\n<p>2、Tika Parsers<br>Tika Parsers 是一组负责解析不同类型文件的组件。它们是 Tika 核心的关键组成部分，能处理多种格式，如文本文档、电子表格、PDF、图像、音频等。Tika 会根据文件类型自动选择合适的解析器。<br>（1）文本解析器（Text Parsers）<br>解析普通文本文件（如 .txt、.xml、.html 等）。<br>（2）多媒体解析器（Media Parsers）<br>解析图片、音频、视频等多媒体文件。<br>（3）文档解析器（Document Parsers）<br> 解析各类办公文档，如 Word、Excel、PowerPoint、PDF 等。<br>（4）元数据解析器（Metadata Parsers）<br>提取文件中的元数据，如作者、创建日期、修改日期、文件大小等。<br>Tika 提供了许多内置的解析器（基于其他开源库，如 Apache POI、PDFBox、OCR 等），可以扩展和定制以支持新的文件格式。  </p>\n<p>3、Tika Config (配置管理)<br>Tika Config 是用来管理 Tika 配置的模块，允许用户通过配置文件来定制 Tika 的行为。通过 Tika Config，用户可以指定特定的解析器、提取策略、字符集等设置。<br>（1）配置文件<br>可以通过 tika-config.xml 文件来配置如何解析不同类型的文件。<br>（2）自定义解析器和扩展<br>用户可以自定义自己的解析器，并通过配置文件将其加入到 Tika 系统中。  </p>\n<p>4、Tika App<br>Tika App 是一个命令行工具，提供了一个易于使用的界面来调用 Tika 核心功能。Tika App 可以直接从命令行运行，用于文件内容提取、文本和元数据的提取。它可以作为独立应用，也可以嵌入到其他 Java 应用中。<br>（1）命令行接口（CLI）<br>提供简洁的命令行接口，允许用户从命令行处理文件。<br>（2）文件处理<br>支持批量文件处理，可以提取文本、元数据等信息，并输出到标准输出或文件中。  </p>\n<p>5、Tika Server<br>Tika Server 是基于 RESTful API 的服务端组件，它允许通过 HTTP 协议进行远程调用。Tika Server 为外部应用提供了一个服务端接口，支持文件的上传、内容提取和处理。<br>（1）RESTful API<br>通过 HTTP 请求与 Tika Server 交互，可以上传文件并获取解析后的内容或元数据。<br>（2）远程解析<br>支持异步处理大文件和批量文件，适合与其他系统集成（如搜索引擎、云存储服务等）。  </p>\n<p>6、Tika Language Detection<br>Tika 还提供了内置的语言检测功能，用于自动识别提取文本的语言。语言检测对于多语言支持的项目非常有用，可以帮助在文件内容解析后识别出文本的语言类型，从而决定使用何种处理方式。<br>（1）语言识别<br>基于文本内容，自动检测文档的语言（如英语、中文、法语等）。<br>（2）集成支持<br>语言检测功能可与文本提取、内容分析等流程结合使用，提高内容的多语言处理能力。  </p>\n<p>7、Tika Extractor<br>Tika Extractor 是一个抽象层，提供一种统一的接口来提取文件的内容。它将不同的文件解析器统一成一个接口，简化了对文件内容的提取过程。通过 Tika Extractor，用户可以在不同的文件类型间进行统一的操作，而无需关注具体的解析实现。<br>（1）统一接口<br>通过统一的接口来处理不同格式的文件，简化文件内容的提取流程。<br>（2）自定义扩展<br>允许开发者根据需求扩展提取器，支持更多的文件格式或自定义的内容提取逻辑。  </p>\n<p>8、Tika Metadata<br>Tika Metadata 是用于管理文件元数据的组件。它提取并提供文件的各类元数据，如作者、创建时间、修改时间、版权信息、文件大小等。Tika 支持提取来自各种文件格式的元数据。<br>（1）元数据提取<br>从各种文件中提取出与文件相关的附加信息，如文件属性、作者、标题等。<br>（2）统一格式<br>返回标准化的元数据结构，方便与其他系统集成。  </p>\n<p>9、Tika OCR (Optical Character Recognition)<br>Tika 集成了 OCR 功能，利用开源的 OCR 引擎（如 Tesseract）来提取图像中的文本信息。当文件中包含扫描图像或照片时，OCR 组件可以识别图像中的文字并进行提取。<br>（1）图像文本识别<br>提取图像或扫描文档中的文本内容。<br>（2）集成与扩展<br>可以与其他解析器结合，自动处理包含图像或扫描文档的文件。  </p>\n<p>Apache Tika 的架构组件包括核心的解析器、配置管理、命令行工具、服务器、语言检测、OCR 处理等多个部分。它们协同工作，使得 Tika 能够支持从多种格式中提取文本、元数据和其他信息，广泛应用于企业文档管理、大数据处理、内容管理、搜索引擎等领域。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、使用示例\"><a href=\"#三、使用示例\" class=\"headerlink\" title=\"三、使用示例\"></a>三、使用示例</h1><p>在 Spring Boot 中集成 Apache Tika 用于 敏感信息识别 和 数据泄露防护，我们可以在文件上传时提取文件内容，并在提取的文本中搜索潜在的敏感数据，如身份证号、信用卡信息、电话号码等。以下是一个完整的代码示例，展示了如何实现敏感信息检测和数据泄露防护。<br>1、引入依赖  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Apache Tika --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tika<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tika-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tika<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tika-parsers<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建敏感信息检测逻辑<br>敏感信息的检测通常涉及正则表达式（Regex），你可以使用常见的模式来检测个人信息（如身份证号、信用卡号、电话号码等）。我们将创建一个服务类，用于扫描文件内容并检测这些敏感数据。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.Tika;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.metadata.Metadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.sax.BodyContentHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SensitiveInfoService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Tika</span> <span class=\"variable\">tika</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tika</span>();  <span class=\"comment\">// Tika 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正则表达式模式：身份证号、信用卡号、电话号码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ID_CARD_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;17&#125;[\\\\dXx]|\\\\d&#123;15&#125;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CREDIT_CARD_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PHONE_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;3&#125;-?\\\\d&#123;3&#125;-?\\\\d&#123;4&#125;)|((\\\\d&#123;11&#125;)|(\\\\d&#123;3&#125;)\\\\d&#123;7&#125;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提取文件内容并检测敏感信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">checkSensitiveInfo</span><span class=\"params\">(InputStream fileInputStream)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 使用 Tika 提取文件内容</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileContent</span> <span class=\"operator\">=</span> tika.parseToString(fileInputStream);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行敏感信息检测</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sensitiveInfoDetected</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测身份证号</span></span><br><span class=\"line\">        detectAndAppend(fileContent, ID_CARD_REGEX, <span class=\"string\">&quot;身份证号&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测信用卡号</span></span><br><span class=\"line\">        detectAndAppend(fileContent, CREDIT_CARD_REGEX, <span class=\"string\">&quot;信用卡号&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测电话号码</span></span><br><span class=\"line\">        detectAndAppend(fileContent, PHONE_REGEX, <span class=\"string\">&quot;电话号码&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sensitiveInfoDetected.length() &gt; <span class=\"number\">0</span> ? sensitiveInfoDetected.toString() : <span class=\"string\">&quot;未检测到敏感信息&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通用的检测方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">detectAndAppend</span><span class=\"params\">(String content, String regex, String label, StringBuilder result)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(regex);</span><br><span class=\"line\">        <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            result.append(label).append(<span class=\"string\">&quot;: &quot;</span>).append(matcher.group()).append(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、创建文件上传控制器<br>创建一个控制器，通过 REST API 接受文件上传请求，提取文件内容并检测是否含有敏感信息。文件上传的处理通过 MultipartFile 接收文件。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.tikademo.service.SensitiveInfoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/files&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SensitiveInfoService sensitiveInfoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取上传文件的输入流</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sensitiveInfoService.checkSensitiveInfo(file.getInputStream());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件处理错误: &quot;</span> + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建前端页面（可选）<br>为了更好地测试文件上传功能，可以创建一个简单的 HTML 页面，允许用户上传文件，并显示敏感信息检测结果，index.html (位于 src&#x2F;main&#x2F;resources&#x2F;static&#x2F; 目录)  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Upload File for Sensitive Information Detection<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Upload a File for Sensitive Information Detection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/api/files/upload&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Upload<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、测试项目<br>现在，你可以启动 Spring Boot 应用，访问 <a href=\"http://localhost:8080/\">http://localhost:8080</a> 页面，上传一个文件进行检测。系统会提取文件内容并根据正则表达式检测是否存在身份证号、信用卡号、电话号码等敏感信息，并将检测结果返回给用户。<br>为了测试上面所提到的敏感信息检测功能，你可以使用一个包含以下敏感数据的测试文档。这个文档可以是一个简单的文本文件（.txt），其中包含身份证号、信用卡号和电话号码等信息。  </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">尊敬的用户：</span><br><span class=\"line\"></span><br><span class=\"line\">您好！感谢您使用我们的服务。以下是您的账户信息：</span><br><span class=\"line\"></span><br><span class=\"line\">身份证号：123456789012345678</span><br><span class=\"line\">信用卡号：1234-5678-9876-5432</span><br><span class=\"line\">电话号码：138-1234-5678</span><br><span class=\"line\"></span><br><span class=\"line\">如果您对我们的服务有任何问题，请随时联系客户支持团队。</span><br><span class=\"line\"></span><br><span class=\"line\">谢谢！</span><br><span class=\"line\"></span><br><span class=\"line\">此致，</span><br><span class=\"line\">敬礼！</span><br></pre></td></tr></table></figure>\n<p>返回值：  </p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">身份证号: 123456789012345678</span><br><span class=\"line\">信用卡号: 1234<span class=\"string\">-5678</span><span class=\"string\">-9876</span><span class=\"string\">-5432</span></span><br><span class=\"line\">电话号码: 138<span class=\"string\">-1234</span><span class=\"string\">-5678</span></span><br></pre></td></tr></table></figure>\n\n<p>6、扩展功能<br>（1）更多敏感信息识别<br>你可以添加更多的正则表达式来识别其他类型的敏感信息（例如，电子邮件、地址、社保号码等）。<br>（2）加密存储<br>如果文件中包含敏感信息，可以采取加密存储或数据屏蔽等安全措施。<br>（3）敏感信息日志审计<br>检测到敏感信息后，可以记录日志或通过邮件通知管理员，进一步强化数据泄露防护。  </p>\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、Tika介绍\"><a href=\"#一、Tika介绍\" class=\"headerlink\" title=\"一、Tika介绍\"></a>一、Tika介绍</h1><p>Apache Tika 是一个功能强大的内容分析工具，它能够从多种文件格式中提取文本、元数据以及其他结构化信息。以下是 Apache Tika 的主要特性：<br>1、多格式支持<br>Tika 通过集成众多开源库（如 Apache POI、PDFBox、Tesseract OCR 等）来支持这些格式的解析。<br>Tika 的最大特点之一就是支持广泛的文件格式。它能够解析和提取多种文档类型的内容，包括但不限于：  </p>\n<ul>\n<li>办公文档： 如 Microsoft Word（.doc, .docx）、Excel（.xls, .xlsx）、PowerPoint（.ppt, .pptx）、OpenOffice（.odt, .ods）等；  </li>\n<li>PDF： 提取 PDF 文档中的文本和元数据；  </li>\n<li>HTML &#x2F; XML： 解析 HTML 和 XML 格式的内容；  </li>\n<li>文本文件： 如 .txt 文件等；  </li>\n<li>图片和音视频： 支持图像格式（如 JPEG、PNG）和音频视频格式（如 MP3、MP4、WAV 等），并能提取相关的元数据；  </li>\n<li>电子邮件： 如 EML 文件格式；  </li>\n<li>压缩文件： 如 ZIP、TAR、GZ 等压缩包中的文件内容。</li>\n</ul>\n<p>2、自动文件类型检测<br>Tika 具有强大的文件类型自动识别功能，可以根据文件内容而非文件扩展名来判断文件的真实类型。它支持多种标准和非标准文件类型的自动识别，确保了高准确度的格式识别。<br><span style=\"background-color: orange; color: white;box-shadow: 1px 1px 2px orange;\">MIME 类型识别：Tika 可以准确识别文件的 MIME 类型，帮助系统判断如何处理和解析文件。</span>  </p>\n<p>3、文本和元数据提取<br>Tika 能够从多种文件中提取出文本内容和元数据。元数据通常包括作者、创建日期、修改日期、文件大小、版权信息等。  </p>\n<ul>\n<li>Tika 能够从多种文件中提取出文本内容和元数据。元数据通常包括作者、创建日期、修改日期、文件大小、版权信息等；  </li>\n<li>元数据提取： 除了文本，Tika 还能提取各种元数据，如作者、标题、关键词、修改时间等，方便进一步的分析或索引。</li>\n</ul>\n<p>4、支持 OCR（光学字符识别）<br>Tika 集成了 OCR 引擎（如 Tesseract），能够从扫描图像或 PDF 文档中的图片提取文本信息。当文件中包含图像时，Tika 可以通过 OCR 功能识别图像中的文字，并提取出来。  </p>\n<p>5、语言检测<br>Tika 具备自动检测文件文本语言的功能。通过分析提取的文本，Tika 可以识别文档的语言（如英语、中文、法语等），这一功能对多语言处理和文档分类非常有用。  </p>\n<p>6、支持嵌入式应用<br>Tika 是以 Java 为主要开发语言的，且它不仅可以作为独立应用使用，还可以嵌入到其他 Java 应用中。Tika 提供了 Java API，使得开发者能够轻松集成到各种应用程序中，进行自动化的文件内容提取和处理。  </p>\n<ul>\n<li>Tika App： 命令行工具，适用于从文件提取内容并输出文本和元数据；  </li>\n<li>Tika Server： 基于 RESTful API 的服务，适合通过 HTTP 协议与外部系统进行交互，支持远程文件解析。</li>\n</ul>\n<p>7、多线程支持<br>Apache Tika 提供了并行处理的能力，允许在处理大批量文件时，通过多线程方式提高处理速度。对于需要批量文件解析和内容提取的场景，Tika 的多线程支持可以显著提高效率。  </p>\n<p>8、内容和元数据格式统一输出<br>Tika 返回统一的输出格式，不论文件类型如何，提取的文本和元数据都会按照标准的方式提供。这使得开发者能够轻松地将不同格式的文件内容统一处理。  </p>\n<ul>\n<li>JSON 格式输出： Tika 可以将提取的内容和元数据以 JSON 格式输出，便于与其他系统集成和处理；  </li>\n<li>XML 格式输出： 除了 JSON 格式，Tika 也支持将内容提取结果以 XML 格式输出，适用于需要更结构化数据的场景。</li>\n</ul>\n<p>9、支持大文件处理<br>Tika 支持处理大型文档和多页文档，能够高效地提取其中的内容而不会占用过多的内存。对于需要处理大量文档或大文档的应用场景（如搜索引擎、大数据处理等），Tika 能够提供可靠的支持。  </p>\n<p>10、与其他工具和库的集成<br>Tika 还可以与其他工具和库进行集成，以扩展其功能：  </p>\n<ul>\n<li>Lucene &#x2F; Solr &#x2F; Elasticsearch： Tika 常常与这些搜索引擎集成，用于全文索引和搜索；  </li>\n<li>Lucene &#x2F; Solr &#x2F; Elasticsearch： Tika 常常与这些搜索引擎集成，用于全文索引和搜索；  </li>\n<li>PDFBox： 用于解析和提取 PDF 文件内容；  </li>\n<li>Tesseract OCR： 用于从图像中提取文本，特别适用于扫描文档和图片内容。</li>\n</ul>\n<p>11、高度可扩展性<br>Tika 提供了灵活的扩展机制，用户可以根据需求自定义解析器、增加新的文件格式支持或调整文本提取策略。通过定制 Tika 配置文件（如 tika-config.xml），开发者可以配置不同类型文件的处理方式、修改默认的解析器和行为等。<br>Apache Tika 的主要特性包括对多种文件格式的支持、自动文件类型检测、文本和元数据提取、OCR 支持、语言检测、多线程处理、统一格式的输出、以及与其他工具的无缝集成。这些特性使得 Tika 成为一个功能强大且灵活的内容分析框架，适用于文档管理、信息提取、搜索引擎、大数据处理等各种应用场景。  </p>\n<p>12、Tika 应用场景<br>Apache Tika 是一个开源的内容分析工具，主要用于从各种文件格式中提取文本、元数据和结构化信息。它支持多种文件格式，包括文档、电子表格、PDF、音频、视频、图片等，具有强大的文件内容解析能力。在真实项目中的应用场景非常广泛，以下是一些典型的应用场景：<br>（1）企业文档管理系统<br>在大型企业或机构中，文档管理系统通常需要处理大量不同格式的文件（如 PDF、Word、Excel 等）。<br>通过 Apache Tika，可以自动化从这些文件中提取文本和元数据（如作者、创建时间、文件大小等），然后将其统一存储到数据库中，便于搜索、管理和索引。这种应用使得企业能够高效地进行文档归档、搜索和分类。<br>示例应用：  </p>\n<ul>\n<li>自动化文档提取： 提取文件中的关键信息，如合同中的条款、报价单中的价格等，帮助员工快速定位重要数据；  </li>\n<li>全文搜索功能： 通过 Tika 提取的文本内容，可以建立索引，提供快速的全文搜索功能，方便用户查找所需的文档。</li>\n</ul>\n<p>（2）内容管理系统（CMS）<br>在内容管理系统中，Apache Tika 可用于自动提取上传文件的内容，并将其转换为可编辑的格式。这对于包含各种文档格式（如文本、PDF、图像等）的内容管理非常有用，尤其是在网站和平台中需要处理大量文件时，Tika 可以提供统一的处理接口。<br>示例应用：  </p>\n<ul>\n<li>网站文件处理： 当用户上传文件到网站时，Tika 会自动提取文件内容（如从文档中提取文本、从图像中提取元数据），以便进一步处理或存储；  </li>\n<li>文件格式转换： Tika 可以将上传的文件转换为统一的格式，方便后续编辑和展示。</li>\n</ul>\n<p>（3）数据分析与大数据平台<br>在大数据分析中，Apache Tika 可以被用于处理非结构化数据（如文本、PDF、图片、音频文件等），并将这些数据转化为结构化数据。通过 Tika 提取的文本可以进一步进行数据清洗、分类、聚类或文本挖掘等分析任务。<br>示例应用：  </p>\n<ul>\n<li>大数据处理： 在数据湖或大数据平台中，Tika 可以帮助从不同来源（如电子邮件、文档、图片等）提取出可分析的文本数据，以便进行机器学习模型训练、情感分析或趋势预测；  </li>\n<li>搜索引擎： 在搜索引擎中，Tika 提供的内容解析能够支持不同类型的文件索引和检索功能，增强搜索结果的准确性和全面性。</li>\n</ul>\n<p>（4）法律与合规性审查<br>在法律和合规性领域，企业常常需要对大量的合同、法律文书、电子邮件等进行分析。Apache Tika 可以帮助自动提取这些文档中的关键信息，比如合同条款、支付细节、法律条文等，供律师和合规人员审查。<br>示例应用：  </p>\n<ul>\n<li>合同审核与分析： Tika 可用于从合同中提取重要的文本信息，如签署日期、金额、条款内容等，帮助审查人员快速识别文档的核心内容；  </li>\n<li>合规性检查： 自动提取和分类文档中的合规信息，帮助企业检测是否符合规定，并减少人工审核的工作量。</li>\n</ul>\n<p>（5）数字资产管理（DAM）<br>数字资产管理系统中，Apache Tika 被广泛应用于提取多媒体文件（如图像、视频、音频文件等）的元数据和内容。通过对图片中的标签、视频中的字幕或音频文件中的元数据进行解析，可以更好地管理和索引数字资产。<br>示例应用：  </p>\n<ul>\n<li>图片和视频内容管理： Tika 可以自动提取图片和视频的元数据（如拍摄时间、相机类型、分辨率等），并帮助构建数字媒体库，提供基于内容的搜索功能；  </li>\n<li>自动分类和标记： Tika 通过分析文件内容和元数据，能够自动进行分类和标记，帮助企业更高效地管理和访问数字资产。</li>\n</ul>\n<p>（6）信息安全与数据泄露防护<br>在信息安全领域，Apache Tika 可以用于扫描文件中的敏感数据。例如，Tika 可以帮助企业检测文件中是否包含敏感的个人信息（如身份证号、信用卡信息等），从而增强企业对数据泄露的防护能力。<br>示例应用：  </p>\n<ul>\n<li>敏感信息识别： 通过 Tika 提取文件内容后，进行自动化的敏感数据检测，识别可能包含个人敏感信息或机密数据的文件；  </li>\n<li>数据泄露防护： 在企业系统中，Tika 可以协助检查文件上传和共享过程中的潜在风险，确保不会无意间泄露敏感信息。</li>\n</ul>\n<p>（7）自动化电子邮件分类<br>Apache Tika 还可以用于从电子邮件中提取内容，帮助自动分类邮件内容。在许多企业或组织中，Tika 可被用于帮助识别电子邮件中的附件、链接或关键信息，进而根据内容进行分类、存档或自动响应。<br>示例应用：  </p>\n<ul>\n<li>邮件内容提取与分类： Tika 能从电子邮件中提取文本，分析邮件的主题、发件人和正文内容，帮助自动化邮件分类并减少人工操作；  </li>\n<li>附件扫描与处理： Tika 可以分析电子邮件中的附件，并根据附件类型和内容自动执行适当的处理程序。</li>\n</ul>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Tika-架构组件\"><a href=\"#二、Tika-架构组件\" class=\"headerlink\" title=\"二、Tika 架构组件\"></a>二、Tika 架构组件</h1><p>Apache Tika 的架构组件主要包括以下几个核心部分，它们共同协作，以支持从各种文件格式中提取文本、元数据和其他信息。以下是 Apache Tika 的主要架构组件：<br>1、Tika Core<br>Tika Core 是 Apache Tika 的核心组件，提供了文件解析、内容提取的基础功能。它包含了最基本的功能，如文档类型识别、解析和提取文本内容。Tika Core 是其他功能和模块的基础。<br>（1）文件解析（Parser）<br>用于解析各种文件格式，返回提取的文本和元数据。<br>（2）内容提取（Content Extraction）<br>提取文件中的内容，包括文本、图片、音频、视频等。<br>（3）文件类型识别（MIME Type Detection）<br>根据文件的内容而不是扩展名，判断文件的实际类型（如 PDF、Word、Excel、HTML 等）。  </p>\n<p>2、Tika Parsers<br>Tika Parsers 是一组负责解析不同类型文件的组件。它们是 Tika 核心的关键组成部分，能处理多种格式，如文本文档、电子表格、PDF、图像、音频等。Tika 会根据文件类型自动选择合适的解析器。<br>（1）文本解析器（Text Parsers）<br>解析普通文本文件（如 .txt、.xml、.html 等）。<br>（2）多媒体解析器（Media Parsers）<br>解析图片、音频、视频等多媒体文件。<br>（3）文档解析器（Document Parsers）<br> 解析各类办公文档，如 Word、Excel、PowerPoint、PDF 等。<br>（4）元数据解析器（Metadata Parsers）<br>提取文件中的元数据，如作者、创建日期、修改日期、文件大小等。<br>Tika 提供了许多内置的解析器（基于其他开源库，如 Apache POI、PDFBox、OCR 等），可以扩展和定制以支持新的文件格式。  </p>\n<p>3、Tika Config (配置管理)<br>Tika Config 是用来管理 Tika 配置的模块，允许用户通过配置文件来定制 Tika 的行为。通过 Tika Config，用户可以指定特定的解析器、提取策略、字符集等设置。<br>（1）配置文件<br>可以通过 tika-config.xml 文件来配置如何解析不同类型的文件。<br>（2）自定义解析器和扩展<br>用户可以自定义自己的解析器，并通过配置文件将其加入到 Tika 系统中。  </p>\n<p>4、Tika App<br>Tika App 是一个命令行工具，提供了一个易于使用的界面来调用 Tika 核心功能。Tika App 可以直接从命令行运行，用于文件内容提取、文本和元数据的提取。它可以作为独立应用，也可以嵌入到其他 Java 应用中。<br>（1）命令行接口（CLI）<br>提供简洁的命令行接口，允许用户从命令行处理文件。<br>（2）文件处理<br>支持批量文件处理，可以提取文本、元数据等信息，并输出到标准输出或文件中。  </p>\n<p>5、Tika Server<br>Tika Server 是基于 RESTful API 的服务端组件，它允许通过 HTTP 协议进行远程调用。Tika Server 为外部应用提供了一个服务端接口，支持文件的上传、内容提取和处理。<br>（1）RESTful API<br>通过 HTTP 请求与 Tika Server 交互，可以上传文件并获取解析后的内容或元数据。<br>（2）远程解析<br>支持异步处理大文件和批量文件，适合与其他系统集成（如搜索引擎、云存储服务等）。  </p>\n<p>6、Tika Language Detection<br>Tika 还提供了内置的语言检测功能，用于自动识别提取文本的语言。语言检测对于多语言支持的项目非常有用，可以帮助在文件内容解析后识别出文本的语言类型，从而决定使用何种处理方式。<br>（1）语言识别<br>基于文本内容，自动检测文档的语言（如英语、中文、法语等）。<br>（2）集成支持<br>语言检测功能可与文本提取、内容分析等流程结合使用，提高内容的多语言处理能力。  </p>\n<p>7、Tika Extractor<br>Tika Extractor 是一个抽象层，提供一种统一的接口来提取文件的内容。它将不同的文件解析器统一成一个接口，简化了对文件内容的提取过程。通过 Tika Extractor，用户可以在不同的文件类型间进行统一的操作，而无需关注具体的解析实现。<br>（1）统一接口<br>通过统一的接口来处理不同格式的文件，简化文件内容的提取流程。<br>（2）自定义扩展<br>允许开发者根据需求扩展提取器，支持更多的文件格式或自定义的内容提取逻辑。  </p>\n<p>8、Tika Metadata<br>Tika Metadata 是用于管理文件元数据的组件。它提取并提供文件的各类元数据，如作者、创建时间、修改时间、版权信息、文件大小等。Tika 支持提取来自各种文件格式的元数据。<br>（1）元数据提取<br>从各种文件中提取出与文件相关的附加信息，如文件属性、作者、标题等。<br>（2）统一格式<br>返回标准化的元数据结构，方便与其他系统集成。  </p>\n<p>9、Tika OCR (Optical Character Recognition)<br>Tika 集成了 OCR 功能，利用开源的 OCR 引擎（如 Tesseract）来提取图像中的文本信息。当文件中包含扫描图像或照片时，OCR 组件可以识别图像中的文字并进行提取。<br>（1）图像文本识别<br>提取图像或扫描文档中的文本内容。<br>（2）集成与扩展<br>可以与其他解析器结合，自动处理包含图像或扫描文档的文件。  </p>\n<p>Apache Tika 的架构组件包括核心的解析器、配置管理、命令行工具、服务器、语言检测、OCR 处理等多个部分。它们协同工作，使得 Tika 能够支持从多种格式中提取文本、元数据和其他信息，广泛应用于企业文档管理、大数据处理、内容管理、搜索引擎等领域。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、使用示例\"><a href=\"#三、使用示例\" class=\"headerlink\" title=\"三、使用示例\"></a>三、使用示例</h1><p>在 Spring Boot 中集成 Apache Tika 用于 敏感信息识别 和 数据泄露防护，我们可以在文件上传时提取文件内容，并在提取的文本中搜索潜在的敏感数据，如身份证号、信用卡信息、电话号码等。以下是一个完整的代码示例，展示了如何实现敏感信息检测和数据泄露防护。<br>1、引入依赖  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Apache Tika --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tika<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tika-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tika<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tika-parsers<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建敏感信息检测逻辑<br>敏感信息的检测通常涉及正则表达式（Regex），你可以使用常见的模式来检测个人信息（如身份证号、信用卡号、电话号码等）。我们将创建一个服务类，用于扫描文件内容并检测这些敏感数据。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.Tika;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.metadata.Metadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tika.sax.BodyContentHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SensitiveInfoService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Tika</span> <span class=\"variable\">tika</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tika</span>();  <span class=\"comment\">// Tika 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正则表达式模式：身份证号、信用卡号、电话号码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ID_CARD_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;17&#125;[\\\\dXx]|\\\\d&#123;15&#125;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CREDIT_CARD_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;-?\\\\d&#123;4&#125;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PHONE_REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d&#123;3&#125;-?\\\\d&#123;3&#125;-?\\\\d&#123;4&#125;)|((\\\\d&#123;11&#125;)|(\\\\d&#123;3&#125;)\\\\d&#123;7&#125;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提取文件内容并检测敏感信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">checkSensitiveInfo</span><span class=\"params\">(InputStream fileInputStream)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 使用 Tika 提取文件内容</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileContent</span> <span class=\"operator\">=</span> tika.parseToString(fileInputStream);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行敏感信息检测</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sensitiveInfoDetected</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测身份证号</span></span><br><span class=\"line\">        detectAndAppend(fileContent, ID_CARD_REGEX, <span class=\"string\">&quot;身份证号&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测信用卡号</span></span><br><span class=\"line\">        detectAndAppend(fileContent, CREDIT_CARD_REGEX, <span class=\"string\">&quot;信用卡号&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 检测电话号码</span></span><br><span class=\"line\">        detectAndAppend(fileContent, PHONE_REGEX, <span class=\"string\">&quot;电话号码&quot;</span>, sensitiveInfoDetected);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sensitiveInfoDetected.length() &gt; <span class=\"number\">0</span> ? sensitiveInfoDetected.toString() : <span class=\"string\">&quot;未检测到敏感信息&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通用的检测方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">detectAndAppend</span><span class=\"params\">(String content, String regex, String label, StringBuilder result)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(regex);</span><br><span class=\"line\">        <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            result.append(label).append(<span class=\"string\">&quot;: &quot;</span>).append(matcher.group()).append(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、创建文件上传控制器<br>创建一个控制器，通过 REST API 接受文件上传请求，提取文件内容并检测是否含有敏感信息。文件上传的处理通过 MultipartFile 接收文件。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.tikademo.service.SensitiveInfoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/files&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SensitiveInfoService sensitiveInfoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取上传文件的输入流</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sensitiveInfoService.checkSensitiveInfo(file.getInputStream());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件处理错误: &quot;</span> + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建前端页面（可选）<br>为了更好地测试文件上传功能，可以创建一个简单的 HTML 页面，允许用户上传文件，并显示敏感信息检测结果，index.html (位于 src&#x2F;main&#x2F;resources&#x2F;static&#x2F; 目录)  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Upload File for Sensitive Information Detection<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Upload a File for Sensitive Information Detection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/api/files/upload&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Upload<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、测试项目<br>现在，你可以启动 Spring Boot 应用，访问 <a href=\"http://localhost:8080/\">http://localhost:8080</a> 页面，上传一个文件进行检测。系统会提取文件内容并根据正则表达式检测是否存在身份证号、信用卡号、电话号码等敏感信息，并将检测结果返回给用户。<br>为了测试上面所提到的敏感信息检测功能，你可以使用一个包含以下敏感数据的测试文档。这个文档可以是一个简单的文本文件（.txt），其中包含身份证号、信用卡号和电话号码等信息。  </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">尊敬的用户：</span><br><span class=\"line\"></span><br><span class=\"line\">您好！感谢您使用我们的服务。以下是您的账户信息：</span><br><span class=\"line\"></span><br><span class=\"line\">身份证号：123456789012345678</span><br><span class=\"line\">信用卡号：1234-5678-9876-5432</span><br><span class=\"line\">电话号码：138-1234-5678</span><br><span class=\"line\"></span><br><span class=\"line\">如果您对我们的服务有任何问题，请随时联系客户支持团队。</span><br><span class=\"line\"></span><br><span class=\"line\">谢谢！</span><br><span class=\"line\"></span><br><span class=\"line\">此致，</span><br><span class=\"line\">敬礼！</span><br></pre></td></tr></table></figure>\n<p>返回值：  </p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">身份证号: 123456789012345678</span><br><span class=\"line\">信用卡号: 1234<span class=\"string\">-5678</span><span class=\"string\">-9876</span><span class=\"string\">-5432</span></span><br><span class=\"line\">电话号码: 138<span class=\"string\">-1234</span><span class=\"string\">-5678</span></span><br></pre></td></tr></table></figure>\n\n<p>6、扩展功能<br>（1）更多敏感信息识别<br>你可以添加更多的正则表达式来识别其他类型的敏感信息（例如，电子邮件、地址、社保号码等）。<br>（2）加密存储<br>如果文件中包含敏感信息，可以采取加密存储或数据屏蔽等安全措施。<br>（3）敏感信息日志审计<br>检测到敏感信息后，可以记录日志或通过邮件通知管理员，进一步强化数据泄露防护。  </p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Spring","path":"api/tags/Spring.json"}]}