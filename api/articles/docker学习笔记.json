{"title":"docker学习笔记","slug":"docker学习笔记","date":"2024-11-08T01:55:07.000Z","updated":"2024-11-08T09:35:50.025Z","comments":true,"path":"api/articles/docker学习笔记.json","realPath":null,"excerpt":null,"covers":["/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png","/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png","/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png","/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png"],"cover":null,"content":"<hr>\n<h1 id=\"一、Docker示意图\"><a href=\"#一、Docker示意图\" class=\"headerlink\" title=\"一、Docker示意图\"></a>一、Docker示意图</h1><img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>镜像和容器的区别：<br>镜像：相当于一个模版，模板中又分层，每层又相当于一个镜像，每个镜像里面包含了运行容器所需要的所有文件。<br>容器：相当于一个虚拟机，里面运行了一个操作系统。<br>镜像运行起来就是容器。  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>所以镜像中的基础镜像是可以共用的，就比如本地已经存在mysql镜像，现在再下载redis镜像，下载日志会显示某些镜像已经存在，不需要再下载。  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Docker命令\"><a href=\"#二、Docker命令\" class=\"headerlink\" title=\"二、Docker命令\"></a>二、Docker命令</h1><h3 id=\"1、镜像命令\"><a href=\"#1、镜像命令\" class=\"headerlink\" title=\"1、镜像命令\"></a>1、镜像命令</h3><p>1、<code>docker cp xxx:/xxx.jar ./</code>：将docker里面的xxx服务移动到root根目录下。<br>2、<code>docker build</code>：构建镜像。<br>3、<code>docker images</code>：查看本地镜像。<br>4、<code>docker rmi</code>：删除镜像。<br>例子：<code>docker rmi nginx:latest</code>（也可以是镜像id，删除nginx镜像）<br>5、<code>docker push</code>：推送镜像到服务。<br>6、<code>docker pull</code>：从服务拉取镜像。<br>7、<code>docker save</code>：将镜像保存为一个压缩包。<br>例子：<code>docker save -o nginx.tar nginx:latest</code>（将nginx:latest镜像导出到nginx.tar压缩包中，会自动创建nginx.tar压缩包）<br>8、<code>docker load</code>：加载压缩包为镜像。<br>例子：<code>docker load -i nginx.tar</code>（将nginx.tar压缩包导入进docker容器）<br>9、<code>docker --help</code>：查看docker所有命令。<br>例子：<code>docker images --help</code>（查看images命令用法）  </p>\n<h3 id=\"2、容器命令\"><a href=\"#2、容器命令\" class=\"headerlink\" title=\"2、容器命令\"></a>2、容器命令</h3><p>1、<code>docker run</code>：将镜像运行起来变为容器。<br>例子一：<code>docker run --name 【containerName】 -p 【宿主机端口】:【容器端口】 -d nginx</code><br>（1）<code>docker run</code>：创建并运行一个容器；<br>（2）<code>--name</code>：给容器起一个名字，比如叫mn（docker run –name mn -p 80:80 -d nginx）；<br>（3）<code>-p</code>：将宿主机端口与容器端口映射，用户通过访问宿主机的端口，就能访问到宿主机上的容器内部的端口（docker run –name mn -p 80:80 -d nginx）；<br>（4）<code>-d</code>：后台运行容器。<br>例子二：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>上面命令解释：<br>（1）<code>docker run</code>：创建并运行一个容器，<code>-d</code>是让容器再后台运行；<br>（2）<code>--name mysql</code>：给容器起个名字，必须唯一；<br>（3）<code>-p 3306:3306</code>：设置端口映射（相当于这个mysql容器是一个虚拟机，需要将本机上面的3306端口映射到虚拟机的3306端口）；<br>（4）<code>-e KEY=VALUE</code>：是设置环境变量（这个环境变量的设置需要根据镜像容器来设置，具体查看docker官网某个镜像容器的文档）；<br>（5）<code>mysql</code>：指定运行的镜像的名字。<br>镜像的名字一般分两部分组成：<code>【镜像名字】:【镜像版本】</code>。<br>例如：<code>mysql:8.0</code>，如果没有指定镜像版本，默认为最新版本。<br>2、<code>docker pause 【容器名字】</code>：将运行的容器暂停；<br>3、<code>docker unpause 【容器名字】</code>：将暂停的容器运行；<br>4、<code>docker start 【容器名字】</code>：将停止的容器运行；<br>5、<code>docker stop 【容器名字】</code>：将运行的容器停止；<br>6、<code>docker ps</code>：查看运行中的容器（注意：只能查看运行的容器！）；<br>例子：<code>docker ps -a</code>：查看所有容器；<br>可以执行下面的命令，将输出内容格式化：<br><code>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Name&#125;&#125;&quot;</code>。<br>这里因为上面的命令太长，不方便记忆，可以在Linux中设置别名，具体查看Linux学习笔记中第四大点。<br>7、<code>docker logs 【容器名字】</code>：查看容器运行的日志；<br>例子：<code>docker logs -f mn</code>（查看mn容器运行的日志，<code>-f</code>是实时查看日志）；<br>8、<code>docker exec</code>：进入容器内部执行命令；<br>例子：<code>docker exec -it mn bash</code><br>（1）<code>docker exec</code>：进入容器内部，执行一个命令；<br>（2）<code>-it</code>：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互；<br>（3）<code>mn</code>：要进入的容器的名称；<br>（4）<code>bash</code>：进入容器后执行的命令，bash是一个linux终端交互命令。<br>9、<code>docker rm 【容器名字】</code>：删除指定容器；（不止删除容器，还会删除文件系统）<br>注意：<br>（1）删除指定容器的时候，必须先让容器停止，才能删除；<br>（2）也可以强制删除：<code>docker rm -f mn</code>（强制删除mn容器）。<br>10、<code>docker inspect 【容器名字】</code>：查看运行的容器的详细信息。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、数据卷\"><a href=\"#三、数据卷\" class=\"headerlink\" title=\"三、数据卷\"></a>三、数据卷</h1><h3 id=\"1、什么是数据卷\"><a href=\"#1、什么是数据卷\" class=\"headerlink\" title=\"1、什么是数据卷\"></a>1、什么是数据卷</h3><p>就比如，我们创建了一个mysql容器，然后想要修改mysql的配置，那我们首先需要进入这个运行了mysql的虚拟机（就是mysql容器），执行<code>docker exec -it mysql bash</code>命令进入容器与容器交互，然后执行linux的相关命令，我们会发现执行不了。<br>不是说mysql容器就是装了mysql的linux虚拟机吗？为什么进入liunx系统，执行linux的命令执行不了？<br>这是因为mysql容器是mysql镜像运行之后产生的，而mysql镜像里面并没有包含linux的相关命令，只有关于运行mysql的相关配置文件。<br>那我们如何去修改mysql容器中的mysql配置呢？<br>这就需要使用数据卷了，数据卷就相当于本机目录和mysql容器目录之间的映射桥梁。<br>就比如我在本机某个目录创建了一个目录，然后和mysql容器中的某个目录设置了数据卷进行了映射，那我们在本机这个目录进行的所有操作，都会同步到mysql容器中被映射的目录中，是双向映射。  </p>\n<h3 id=\"2、数据卷命令\"><a href=\"#2、数据卷命令\" class=\"headerlink\" title=\"2、数据卷命令\"></a>2、数据卷命令</h3><p>1、<code>docker volume create 【数据卷名字】</code>：创建数据卷；<br>2、<code>docker volume ls</code>：查看所有数据卷；<br>3、<code>docker volume inspect 【数据卷名字】</code>：查看指定数据卷的详细信息；<br>4、<code>docker volume rm 【数据卷名字】</code>：删除指定数据卷；<br>5、<code>docker volume prune</code>：删除无主的数据卷；<br>6、<code>docker volume --help</code>：查看数据卷命令使用指南。  </p>\n<h3 id=\"3、使用数据卷例子\"><a href=\"#3、使用数据卷例子\" class=\"headerlink\" title=\"3、使用数据卷例子\"></a>3、使用数据卷例子</h3><p><strong>例子一</strong><br>1、需求一：<br>（1）创建nginx容器，修改nginx容器内的html目录下的index.html文件内容；<br>（2）将静态资源放到nginx的html目录中。<br>注意：<br>（1）我们不用刻意去执行<code>docker volume create</code>创建数据卷，数据卷是自动创建的；<br>（2）如果已经存在运行的容器了，是无法进行数据卷挂载的，需要删除，重新创建容器并执行数据卷挂载；<br>在执行<code>docker run</code>命令时，使用<code>-v 数据卷名字:容器内目录</code>可以完成数据卷挂载，当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷。<br>2、步骤：<br>（1）如果本地存在已经运行的nginx容器，先执行<code>docker rm -f nginx</code>删除运行的容器；<br>（2）执行<code>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</code>创建nginx容器，并且挂载数据卷；<br>（3）执行<code>docker volume ls</code>查看已经有的所有数据卷列表；  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>（4）执行<code>docker volume inspect html</code>，查看html数据卷的详细信息；  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n<p>解释：<br>我们创建了一个nginx容器，创建了一个叫html的数据卷，这个html数据卷和nginx容器内的<code>/usr/share/nginx/html</code>目录进行了映射，然后html数据卷又和本地的<code>/var/lib/docker/volums/html/_data</code>目录进行了映射，这样本地和容器就关联成功了。<br>（5）在本机执行<code>cd /var/lib/docker/volumes/html/_data</code>目录之后，执行<code>ll</code>查看目录，会看到有内容，这些内容是容器内<code>/usr/share/nginx/html</code>目录的内容；<br>（6）我们直接在本机<code>/var/lib/docker/volumes/html/_data</code>目录下修改index.html文件，然后刷新浏览器，会发现已经修改成功了。  </p>\n<p><strong>例子二</strong><br>1、需求二：<br>（1）查看mysql容器，判断是否有数据卷挂载；<br>（2）基于本机目录实现mysql数据目录、配置文件、初始化脚本的挂载（可以查看docker官网镜像文档）。<br>说明：<br>（1）我们先运行一个mysql容器，执行<code>docker inspect mysql</code>查看mysql容器的详细信息，找到<code>Mounts</code>，会发现默认挂载了一个数据卷（匿名卷），我们一般是不要这个匿名卷的，我们一般都是自己挂载一个数据卷；<br>（2）可以在执行<code>docker run</code>命令时，使用<code>-v 本地目录:容器内目录</code>来进行数据卷挂载；<br>本地目录必须以<code>/</code>或<code>./</code>开头，如果直接以名称开头，会被识别为数据卷而非本地目录。<br>例如：  </p>\n<ol>\n<li><code>-v mysql:/var/lib/mysql</code>会被识别为一个数据卷叫mysql；  </li>\n<li><code>-v ./mysql:/var/lib/mysql</code>会被识别为当前目录下的mysql目录。</li>\n</ol>\n<p>（3）容器内的mysql数据目录、配置文件、初始化脚本路径在哪里可以查看docker官网mysql镜像文档。<br>2、步骤：<br>（1）如果本地存在已经运行的mysql容器，先执行<code>docker rm -f mysql</code>删除运行的容器；<br>（2）在本机任意目录（就是你想要在哪个目录挂载的父目录，这里用root目录）创建mysql目录，在mysql目录中分别创建data、conf、init目录（记得把各目录的脚本文件放入）；<br>（3）执行下面的命令创建mysql容器，并挂载数据卷。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-v /root/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /root/mysql/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-v /root/mysql/init:/docker-entrypoint-initdb.d \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Dockerfile\"><a href=\"#四、Dockerfile\" class=\"headerlink\" title=\"四、Dockerfile\"></a>四、Dockerfile</h1><h3 id=\"1、Dockerfile是什么\"><a href=\"#1、Dockerfile是什么\" class=\"headerlink\" title=\"1、Dockerfile是什么\"></a>1、Dockerfile是什么</h3><p>Dockerfile是用来构建Docker镜像的文本文件，其中包含了一个个的指令，用这些指令来说明要执行什么操作来构建镜像，最终生成一个Docker镜像。<br>当编写好Dockerfile，可以执行下面的命令来构建镜像：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myImage:1.0 .</span><br></pre></td></tr></table></figure>\n<p><code>-t</code>：是给镜像起名，格式是：【镜像名字】:【镜像版本号】，不指定镜像版本号默认为latest。<br><code>.</code>：最后的.表示Dockerfile所在目录，如果就在当前目录，则指定为<code>.</code>，一般Dockerfile和相关的文件、jar包都放在同一个目录下。<br>构建例子查看下面第3点例子中的实例。  </p>\n<h3 id=\"2、Dockerfile常用指令\"><a href=\"#2、Dockerfile常用指令\" class=\"headerlink\" title=\"2、Dockerfile常用指令\"></a>2、Dockerfile常用指令</h3><p>1、<code>FROM</code>：指定基础镜像，当前新镜像是基于哪个镜像的，例如：<code>FROM centos:6</code>，新镜像基于centos6镜像构建。<br>2、<code>ENV</code>：用来在构建镜像过程中设置环境变量，例如：<code>ENV key value</code>。<br>3、<code>COPY</code>：拷贝本地文件到镜像的指定目录，例如：<code>COPY ./jrel1.tar.gz /tmp</code>，拷贝本地文件jrel1.tar.gz到镜像的tmp目录。<br>4、<code>RUN</code>：在构建镜像过程中执行哪些命令，例如：<code>RUN tar -zxvf /tmp/jrel1.tar.gz &amp;&amp; EXPORTS path=/tmpjrel1:$path</code>，在构建镜像时执行此命令。<br>5、<code>EXPOSE</code>：指定容器运行时监听的端口，是给镜像使用者看的，例如：<code>EXPOSE 8080</code>。<br>6、<code>ENTRYPOINT</code>：镜像中应用的启动命令，容器运行时调用，例如：<code>ENTRYPOINT java -jar xx.jar</code>。<br>更多指令可以查看docker官网。  </p>\n<h3 id=\"3、例子\"><a href=\"#3、例子\" class=\"headerlink\" title=\"3、例子\"></a>3、例子</h3><p>1、例子<br>基于Ubuntu基础镜像，构建一个java项目镜像。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定基础镜像</span></span><br><span class=\"line\">FROM ubuntu:16.04</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置JDK的安装目录</span></span><br><span class=\"line\">ENV JAVA_DIR=/usr/local</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置时区</span></span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jdk和java项目的包</span></span><br><span class=\"line\">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class=\"line\">COPY ./demo.jar /tmp/demp.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装jdk</span></span><br><span class=\"line\">RUN cd $JAVA_DIR &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; mv ./jdk8 ./java8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置环境变量</span></span><br><span class=\"line\">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class=\"line\">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>上面可以直接基于别人构建好jdk镜像来镜像构建，下面是基于jdk11的：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基础镜像</span></span><br><span class=\"line\">FROM openjdk:11.0-jre-buster</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jar包</span></span><br><span class=\"line\">COPY demo.jar /demo.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>特别注意：FROM后面跟的基础镜像，必须是已经存在的镜像，比如要基于openjdk:11.0来构建镜像，那得先从docker仓库拉取openjdk:11.0镜像，才能基于它来构建镜像。  </p>\n<p>2、实例<br>（1）执行<code>docker images</code>查看本机是否有openjdk:11.0-jre-buster镜像，没有先拉取；<br>（2）在demo.jar包所在目录下创建Dockerfile文件，并写入下面代码；  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基础镜像</span></span><br><span class=\"line\">FROM openjdk:11.0-jre-buster</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jar包</span></span><br><span class=\"line\">COPY demo.jar /demo.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>（3）执行<code>docker build -t demoImage .</code>，就构建好了；<br>（4）执行<code>docker images</code>可以查看构建好的镜像；<br>（5）执行<code>docker run -d -p 8080:8080 demoImage</code>，启动容器，并映射端口；<br>（6）执行<code>docker ps</code>可以查看启动的容器；<br>（7）执行<code>curl http://localhost:8080</code>，可以访问到demo项目。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"五、Docker网络\"><a href=\"#五、Docker网络\" class=\"headerlink\" title=\"五、Docker网络\"></a>五、Docker网络</h1><h3 id=\"1、什么是docker网络\"><a href=\"#1、什么是docker网络\" class=\"headerlink\" title=\"1、什么是docker网络\"></a>1、什么是docker网络</h3><p>Docker网络是Docker容器之间的通信方式，Docker容器之间可以通过网络进行通信。Docker网络分为四种：<br>1、bridge：桥接网络，是Docker默认的网络模式，每个Docker容器都会分配一个虚拟网卡，通过桥接网络进行通信。<br>2、host：主机网络，容器和宿主机共享网络，容器可以直接使用宿主机的网络。<br>3、none：无网络，容器没有网络连接，无法进行通信。<br>4、container：容器网络，容器之间共享网络，容器之间可以直接通信。<br>有这么一个场景，我们运行了一个mysql容器，docker就给mysql容器分配了一个虚拟网卡，注意，这个虚拟网卡的ip是随机的，会变，如果我们项目需要连接这个mysql，ip会变，那我们是无法连接的，所以我们需要自定义网络。  </p>\n<h3 id=\"2、docker网络命令\"><a href=\"#2、docker网络命令\" class=\"headerlink\" title=\"2、docker网络命令\"></a>2、docker网络命令</h3><p>1、<code>docker network create 【网络名字】</code>：创建一个网络。<br>2、<code>docker network ls</code>：查看本机所有的网络。<br>3、<code>docker network rm</code>：删除指定网络。<br>4、<code>docker network prune</code>：清除未使用的网络。<br>5、<code>docker network connect 【网络名字】 【镜像名字】</code>：使指定容器加入某网络。<br>6、<code>docker network disconnect</code>：使指定容器离开某网络。<br>7、<code>docker network inspect</code>：查看网络详细信息。<br>8、镜像启动时就加入网络：<code>docker run -d --name 【镜像启动的名字】 -p 8080:8080 --network 【网络名字】 【镜像名字】</code>。  </p>\n<h3 id=\"3、例子-1\"><a href=\"#3、例子-1\" class=\"headerlink\" title=\"3、例子\"></a>3、例子</h3><p>1、自定义一个网络<code>docker network create myNet</code>；<br>2、执行<code>docker network connect myNet mysql</code>，将mysql镜像加入自定义好的网络；<br>3、demo镜像想要连接mysql镜像时，可以使用<code>mysql://mysql:3306</code>，这样就可以连接了。<br>实际开发时，在本地项目中会有两个yml配置文件，一个是本地的，一个是docker的，docker的配置文件中，mysql的地址就是<code>mysql://mysql:3306</code>；本地的地址还是之前的。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、DockerCompose\"><a href=\"#六、DockerCompose\" class=\"headerlink\" title=\"六、DockerCompose\"></a>六、DockerCompose</h1><h3 id=\"1、什么是DockerCompose\"><a href=\"#1、什么是DockerCompose\" class=\"headerlink\" title=\"1、什么是DockerCompose\"></a>1、什么是DockerCompose</h3><p>有这么一个场景，现实中一套系统是由多个项目或服务组成的，比如一个项目由mysql、redis、nginx、java项目组成，那么我们启动的时候就需要一个一个去启动，如果使用docker命令，就需要启动多个命令，这样太麻烦了，还可能会遗漏了，所以就有了DockerCompose，它可以将多个容器组合在一起，通过一个命令启动。<br>DockerCompose通过一个单独的docker-compose.yml模板文件来定义一组相关联的应用容器，帮助我们实现多个相互关联的docker容器的快速部署。<br>一个DockerCompose文件对应一套系统，下面是一个docker-compose.yml文件的内容：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">containerA:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">A</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">A</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">  <span class=\"attr\">containerB:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">B</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">B</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3307:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br></pre></td></tr></table></figure>\n<p>mysql实例：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">\t  <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br></pre></td></tr></table></figure>\n<p>demo.jar实例与mysql实例（不用构建成镜像情况下）：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">\t  <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br><span class=\"line\">  <span class=\"attr\">demo:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span>  <span class=\"comment\"># 指定构建</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span>  <span class=\"comment\"># 在哪里build，.表示在当前目录</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span>  <span class=\"comment\"># 指定dockerfile文件，这里表示在当前目录找dockerfile文件</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">demo</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span> <span class=\"comment\">#指定依赖</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">mysql</span> <span class=\"comment\"># 指定依赖mysql镜像，指定之后就会先构建mysql，再构建demo</span></span><br><span class=\"line\">  <span class=\"attr\">networks:</span>\t<span class=\"comment\"># 这里指定网络之后，不用再去创建网络，会自动创建</span></span><br><span class=\"line\">    <span class=\"attr\">myNet:</span>  <span class=\"comment\"># 网络名</span></span><br><span class=\"line\">\t  <span class=\"attr\">name:</span> <span class=\"string\">myNet</span>  <span class=\"comment\"># 网络名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、DockerCompose命令\"><a href=\"#2、DockerCompose命令\" class=\"headerlink\" title=\"2、DockerCompose命令\"></a>2、DockerCompose命令</h3><p>一般将DockerCompose文件和其他相关的项目、jar包、文件都放在同一个目录下。<br><code>docker compose 【OPTIONS】 【COMMAND】</code><br><code>OPTIONS</code>:<br>（1）<code>-f</code>：指定docker-compose文件的路径和名称。<br>（2）<code>-p</code>：指定项目名称。<br>（3）<code>-d</code>：在后台运行。<br><code>COMMAND</code>:<br>（1）<code>up</code>：创建并启动所有服务。<br>（2）<code>down</code>：停止并删除所有服务。<br>（3）<code>logs</code>：查看指定服务的日志。<br>（4）<code>ps</code>：查看所有服务的状态。<br>（5）<code>stop</code>：停止某个镜像。<br>（6）<code>start</code>：启动某个镜像。<br>（7）<code>restart</code>：重启某个镜像。<br>（8）<code>exec</code>：进入某个镜像。<br>（9）<code>top</code>：查看运行的进程。  </p>\n","more":"<hr>\n<h1 id=\"一、Docker示意图\"><a href=\"#一、Docker示意图\" class=\"headerlink\" title=\"一、Docker示意图\"></a>一、Docker示意图</h1><img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>镜像和容器的区别：<br>镜像：相当于一个模版，模板中又分层，每层又相当于一个镜像，每个镜像里面包含了运行容器所需要的所有文件。<br>容器：相当于一个虚拟机，里面运行了一个操作系统。<br>镜像运行起来就是容器。  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>所以镜像中的基础镜像是可以共用的，就比如本地已经存在mysql镜像，现在再下载redis镜像，下载日志会显示某些镜像已经存在，不需要再下载。  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Docker命令\"><a href=\"#二、Docker命令\" class=\"headerlink\" title=\"二、Docker命令\"></a>二、Docker命令</h1><h3 id=\"1、镜像命令\"><a href=\"#1、镜像命令\" class=\"headerlink\" title=\"1、镜像命令\"></a>1、镜像命令</h3><p>1、<code>docker cp xxx:/xxx.jar ./</code>：将docker里面的xxx服务移动到root根目录下。<br>2、<code>docker build</code>：构建镜像。<br>3、<code>docker images</code>：查看本地镜像。<br>4、<code>docker rmi</code>：删除镜像。<br>例子：<code>docker rmi nginx:latest</code>（也可以是镜像id，删除nginx镜像）<br>5、<code>docker push</code>：推送镜像到服务。<br>6、<code>docker pull</code>：从服务拉取镜像。<br>7、<code>docker save</code>：将镜像保存为一个压缩包。<br>例子：<code>docker save -o nginx.tar nginx:latest</code>（将nginx:latest镜像导出到nginx.tar压缩包中，会自动创建nginx.tar压缩包）<br>8、<code>docker load</code>：加载压缩包为镜像。<br>例子：<code>docker load -i nginx.tar</code>（将nginx.tar压缩包导入进docker容器）<br>9、<code>docker --help</code>：查看docker所有命令。<br>例子：<code>docker images --help</code>（查看images命令用法）  </p>\n<h3 id=\"2、容器命令\"><a href=\"#2、容器命令\" class=\"headerlink\" title=\"2、容器命令\"></a>2、容器命令</h3><p>1、<code>docker run</code>：将镜像运行起来变为容器。<br>例子一：<code>docker run --name 【containerName】 -p 【宿主机端口】:【容器端口】 -d nginx</code><br>（1）<code>docker run</code>：创建并运行一个容器；<br>（2）<code>--name</code>：给容器起一个名字，比如叫mn（docker run –name mn -p 80:80 -d nginx）；<br>（3）<code>-p</code>：将宿主机端口与容器端口映射，用户通过访问宿主机的端口，就能访问到宿主机上的容器内部的端口（docker run –name mn -p 80:80 -d nginx）；<br>（4）<code>-d</code>：后台运行容器。<br>例子二：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>上面命令解释：<br>（1）<code>docker run</code>：创建并运行一个容器，<code>-d</code>是让容器再后台运行；<br>（2）<code>--name mysql</code>：给容器起个名字，必须唯一；<br>（3）<code>-p 3306:3306</code>：设置端口映射（相当于这个mysql容器是一个虚拟机，需要将本机上面的3306端口映射到虚拟机的3306端口）；<br>（4）<code>-e KEY=VALUE</code>：是设置环境变量（这个环境变量的设置需要根据镜像容器来设置，具体查看docker官网某个镜像容器的文档）；<br>（5）<code>mysql</code>：指定运行的镜像的名字。<br>镜像的名字一般分两部分组成：<code>【镜像名字】:【镜像版本】</code>。<br>例如：<code>mysql:8.0</code>，如果没有指定镜像版本，默认为最新版本。<br>2、<code>docker pause 【容器名字】</code>：将运行的容器暂停；<br>3、<code>docker unpause 【容器名字】</code>：将暂停的容器运行；<br>4、<code>docker start 【容器名字】</code>：将停止的容器运行；<br>5、<code>docker stop 【容器名字】</code>：将运行的容器停止；<br>6、<code>docker ps</code>：查看运行中的容器（注意：只能查看运行的容器！）；<br>例子：<code>docker ps -a</code>：查看所有容器；<br>可以执行下面的命令，将输出内容格式化：<br><code>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Name&#125;&#125;&quot;</code>。<br>这里因为上面的命令太长，不方便记忆，可以在Linux中设置别名，具体查看Linux学习笔记中第四大点。<br>7、<code>docker logs 【容器名字】</code>：查看容器运行的日志；<br>例子：<code>docker logs -f mn</code>（查看mn容器运行的日志，<code>-f</code>是实时查看日志）；<br>8、<code>docker exec</code>：进入容器内部执行命令；<br>例子：<code>docker exec -it mn bash</code><br>（1）<code>docker exec</code>：进入容器内部，执行一个命令；<br>（2）<code>-it</code>：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互；<br>（3）<code>mn</code>：要进入的容器的名称；<br>（4）<code>bash</code>：进入容器后执行的命令，bash是一个linux终端交互命令。<br>9、<code>docker rm 【容器名字】</code>：删除指定容器；（不止删除容器，还会删除文件系统）<br>注意：<br>（1）删除指定容器的时候，必须先让容器停止，才能删除；<br>（2）也可以强制删除：<code>docker rm -f mn</code>（强制删除mn容器）。<br>10、<code>docker inspect 【容器名字】</code>：查看运行的容器的详细信息。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、数据卷\"><a href=\"#三、数据卷\" class=\"headerlink\" title=\"三、数据卷\"></a>三、数据卷</h1><h3 id=\"1、什么是数据卷\"><a href=\"#1、什么是数据卷\" class=\"headerlink\" title=\"1、什么是数据卷\"></a>1、什么是数据卷</h3><p>就比如，我们创建了一个mysql容器，然后想要修改mysql的配置，那我们首先需要进入这个运行了mysql的虚拟机（就是mysql容器），执行<code>docker exec -it mysql bash</code>命令进入容器与容器交互，然后执行linux的相关命令，我们会发现执行不了。<br>不是说mysql容器就是装了mysql的linux虚拟机吗？为什么进入liunx系统，执行linux的命令执行不了？<br>这是因为mysql容器是mysql镜像运行之后产生的，而mysql镜像里面并没有包含linux的相关命令，只有关于运行mysql的相关配置文件。<br>那我们如何去修改mysql容器中的mysql配置呢？<br>这就需要使用数据卷了，数据卷就相当于本机目录和mysql容器目录之间的映射桥梁。<br>就比如我在本机某个目录创建了一个目录，然后和mysql容器中的某个目录设置了数据卷进行了映射，那我们在本机这个目录进行的所有操作，都会同步到mysql容器中被映射的目录中，是双向映射。  </p>\n<h3 id=\"2、数据卷命令\"><a href=\"#2、数据卷命令\" class=\"headerlink\" title=\"2、数据卷命令\"></a>2、数据卷命令</h3><p>1、<code>docker volume create 【数据卷名字】</code>：创建数据卷；<br>2、<code>docker volume ls</code>：查看所有数据卷；<br>3、<code>docker volume inspect 【数据卷名字】</code>：查看指定数据卷的详细信息；<br>4、<code>docker volume rm 【数据卷名字】</code>：删除指定数据卷；<br>5、<code>docker volume prune</code>：删除无主的数据卷；<br>6、<code>docker volume --help</code>：查看数据卷命令使用指南。  </p>\n<h3 id=\"3、使用数据卷例子\"><a href=\"#3、使用数据卷例子\" class=\"headerlink\" title=\"3、使用数据卷例子\"></a>3、使用数据卷例子</h3><p><strong>例子一</strong><br>1、需求一：<br>（1）创建nginx容器，修改nginx容器内的html目录下的index.html文件内容；<br>（2）将静态资源放到nginx的html目录中。<br>注意：<br>（1）我们不用刻意去执行<code>docker volume create</code>创建数据卷，数据卷是自动创建的；<br>（2）如果已经存在运行的容器了，是无法进行数据卷挂载的，需要删除，重新创建容器并执行数据卷挂载；<br>在执行<code>docker run</code>命令时，使用<code>-v 数据卷名字:容器内目录</code>可以完成数据卷挂载，当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷。<br>2、步骤：<br>（1）如果本地存在已经运行的nginx容器，先执行<code>docker rm -f nginx</code>删除运行的容器；<br>（2）执行<code>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</code>创建nginx容器，并且挂载数据卷；<br>（3）执行<code>docker volume ls</code>查看已经有的所有数据卷列表；  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>（4）执行<code>docker volume inspect html</code>，查看html数据卷的详细信息；  </p>\n<img src=\"/2024/11/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n<p>解释：<br>我们创建了一个nginx容器，创建了一个叫html的数据卷，这个html数据卷和nginx容器内的<code>/usr/share/nginx/html</code>目录进行了映射，然后html数据卷又和本地的<code>/var/lib/docker/volums/html/_data</code>目录进行了映射，这样本地和容器就关联成功了。<br>（5）在本机执行<code>cd /var/lib/docker/volumes/html/_data</code>目录之后，执行<code>ll</code>查看目录，会看到有内容，这些内容是容器内<code>/usr/share/nginx/html</code>目录的内容；<br>（6）我们直接在本机<code>/var/lib/docker/volumes/html/_data</code>目录下修改index.html文件，然后刷新浏览器，会发现已经修改成功了。  </p>\n<p><strong>例子二</strong><br>1、需求二：<br>（1）查看mysql容器，判断是否有数据卷挂载；<br>（2）基于本机目录实现mysql数据目录、配置文件、初始化脚本的挂载（可以查看docker官网镜像文档）。<br>说明：<br>（1）我们先运行一个mysql容器，执行<code>docker inspect mysql</code>查看mysql容器的详细信息，找到<code>Mounts</code>，会发现默认挂载了一个数据卷（匿名卷），我们一般是不要这个匿名卷的，我们一般都是自己挂载一个数据卷；<br>（2）可以在执行<code>docker run</code>命令时，使用<code>-v 本地目录:容器内目录</code>来进行数据卷挂载；<br>本地目录必须以<code>/</code>或<code>./</code>开头，如果直接以名称开头，会被识别为数据卷而非本地目录。<br>例如：  </p>\n<ol>\n<li><code>-v mysql:/var/lib/mysql</code>会被识别为一个数据卷叫mysql；  </li>\n<li><code>-v ./mysql:/var/lib/mysql</code>会被识别为当前目录下的mysql目录。</li>\n</ol>\n<p>（3）容器内的mysql数据目录、配置文件、初始化脚本路径在哪里可以查看docker官网mysql镜像文档。<br>2、步骤：<br>（1）如果本地存在已经运行的mysql容器，先执行<code>docker rm -f mysql</code>删除运行的容器；<br>（2）在本机任意目录（就是你想要在哪个目录挂载的父目录，这里用root目录）创建mysql目录，在mysql目录中分别创建data、conf、init目录（记得把各目录的脚本文件放入）；<br>（3）执行下面的命令创建mysql容器，并挂载数据卷。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-v /root/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /root/mysql/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-v /root/mysql/init:/docker-entrypoint-initdb.d \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Dockerfile\"><a href=\"#四、Dockerfile\" class=\"headerlink\" title=\"四、Dockerfile\"></a>四、Dockerfile</h1><h3 id=\"1、Dockerfile是什么\"><a href=\"#1、Dockerfile是什么\" class=\"headerlink\" title=\"1、Dockerfile是什么\"></a>1、Dockerfile是什么</h3><p>Dockerfile是用来构建Docker镜像的文本文件，其中包含了一个个的指令，用这些指令来说明要执行什么操作来构建镜像，最终生成一个Docker镜像。<br>当编写好Dockerfile，可以执行下面的命令来构建镜像：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myImage:1.0 .</span><br></pre></td></tr></table></figure>\n<p><code>-t</code>：是给镜像起名，格式是：【镜像名字】:【镜像版本号】，不指定镜像版本号默认为latest。<br><code>.</code>：最后的.表示Dockerfile所在目录，如果就在当前目录，则指定为<code>.</code>，一般Dockerfile和相关的文件、jar包都放在同一个目录下。<br>构建例子查看下面第3点例子中的实例。  </p>\n<h3 id=\"2、Dockerfile常用指令\"><a href=\"#2、Dockerfile常用指令\" class=\"headerlink\" title=\"2、Dockerfile常用指令\"></a>2、Dockerfile常用指令</h3><p>1、<code>FROM</code>：指定基础镜像，当前新镜像是基于哪个镜像的，例如：<code>FROM centos:6</code>，新镜像基于centos6镜像构建。<br>2、<code>ENV</code>：用来在构建镜像过程中设置环境变量，例如：<code>ENV key value</code>。<br>3、<code>COPY</code>：拷贝本地文件到镜像的指定目录，例如：<code>COPY ./jrel1.tar.gz /tmp</code>，拷贝本地文件jrel1.tar.gz到镜像的tmp目录。<br>4、<code>RUN</code>：在构建镜像过程中执行哪些命令，例如：<code>RUN tar -zxvf /tmp/jrel1.tar.gz &amp;&amp; EXPORTS path=/tmpjrel1:$path</code>，在构建镜像时执行此命令。<br>5、<code>EXPOSE</code>：指定容器运行时监听的端口，是给镜像使用者看的，例如：<code>EXPOSE 8080</code>。<br>6、<code>ENTRYPOINT</code>：镜像中应用的启动命令，容器运行时调用，例如：<code>ENTRYPOINT java -jar xx.jar</code>。<br>更多指令可以查看docker官网。  </p>\n<h3 id=\"3、例子\"><a href=\"#3、例子\" class=\"headerlink\" title=\"3、例子\"></a>3、例子</h3><p>1、例子<br>基于Ubuntu基础镜像，构建一个java项目镜像。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定基础镜像</span></span><br><span class=\"line\">FROM ubuntu:16.04</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置JDK的安装目录</span></span><br><span class=\"line\">ENV JAVA_DIR=/usr/local</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置时区</span></span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jdk和java项目的包</span></span><br><span class=\"line\">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class=\"line\">COPY ./demo.jar /tmp/demp.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装jdk</span></span><br><span class=\"line\">RUN cd $JAVA_DIR &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; mv ./jdk8 ./java8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置环境变量</span></span><br><span class=\"line\">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class=\"line\">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>上面可以直接基于别人构建好jdk镜像来镜像构建，下面是基于jdk11的：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基础镜像</span></span><br><span class=\"line\">FROM openjdk:11.0-jre-buster</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jar包</span></span><br><span class=\"line\">COPY demo.jar /demo.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>特别注意：FROM后面跟的基础镜像，必须是已经存在的镜像，比如要基于openjdk:11.0来构建镜像，那得先从docker仓库拉取openjdk:11.0镜像，才能基于它来构建镜像。  </p>\n<p>2、实例<br>（1）执行<code>docker images</code>查看本机是否有openjdk:11.0-jre-buster镜像，没有先拉取；<br>（2）在demo.jar包所在目录下创建Dockerfile文件，并写入下面代码；  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基础镜像</span></span><br><span class=\"line\">FROM openjdk:11.0-jre-buster</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝jar包</span></span><br><span class=\"line\">COPY demo.jar /demo.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">入口，java项目的启动命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>（3）执行<code>docker build -t demoImage .</code>，就构建好了；<br>（4）执行<code>docker images</code>可以查看构建好的镜像；<br>（5）执行<code>docker run -d -p 8080:8080 demoImage</code>，启动容器，并映射端口；<br>（6）执行<code>docker ps</code>可以查看启动的容器；<br>（7）执行<code>curl http://localhost:8080</code>，可以访问到demo项目。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"五、Docker网络\"><a href=\"#五、Docker网络\" class=\"headerlink\" title=\"五、Docker网络\"></a>五、Docker网络</h1><h3 id=\"1、什么是docker网络\"><a href=\"#1、什么是docker网络\" class=\"headerlink\" title=\"1、什么是docker网络\"></a>1、什么是docker网络</h3><p>Docker网络是Docker容器之间的通信方式，Docker容器之间可以通过网络进行通信。Docker网络分为四种：<br>1、bridge：桥接网络，是Docker默认的网络模式，每个Docker容器都会分配一个虚拟网卡，通过桥接网络进行通信。<br>2、host：主机网络，容器和宿主机共享网络，容器可以直接使用宿主机的网络。<br>3、none：无网络，容器没有网络连接，无法进行通信。<br>4、container：容器网络，容器之间共享网络，容器之间可以直接通信。<br>有这么一个场景，我们运行了一个mysql容器，docker就给mysql容器分配了一个虚拟网卡，注意，这个虚拟网卡的ip是随机的，会变，如果我们项目需要连接这个mysql，ip会变，那我们是无法连接的，所以我们需要自定义网络。  </p>\n<h3 id=\"2、docker网络命令\"><a href=\"#2、docker网络命令\" class=\"headerlink\" title=\"2、docker网络命令\"></a>2、docker网络命令</h3><p>1、<code>docker network create 【网络名字】</code>：创建一个网络。<br>2、<code>docker network ls</code>：查看本机所有的网络。<br>3、<code>docker network rm</code>：删除指定网络。<br>4、<code>docker network prune</code>：清除未使用的网络。<br>5、<code>docker network connect 【网络名字】 【镜像名字】</code>：使指定容器加入某网络。<br>6、<code>docker network disconnect</code>：使指定容器离开某网络。<br>7、<code>docker network inspect</code>：查看网络详细信息。<br>8、镜像启动时就加入网络：<code>docker run -d --name 【镜像启动的名字】 -p 8080:8080 --network 【网络名字】 【镜像名字】</code>。  </p>\n<h3 id=\"3、例子-1\"><a href=\"#3、例子-1\" class=\"headerlink\" title=\"3、例子\"></a>3、例子</h3><p>1、自定义一个网络<code>docker network create myNet</code>；<br>2、执行<code>docker network connect myNet mysql</code>，将mysql镜像加入自定义好的网络；<br>3、demo镜像想要连接mysql镜像时，可以使用<code>mysql://mysql:3306</code>，这样就可以连接了。<br>实际开发时，在本地项目中会有两个yml配置文件，一个是本地的，一个是docker的，docker的配置文件中，mysql的地址就是<code>mysql://mysql:3306</code>；本地的地址还是之前的。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、DockerCompose\"><a href=\"#六、DockerCompose\" class=\"headerlink\" title=\"六、DockerCompose\"></a>六、DockerCompose</h1><h3 id=\"1、什么是DockerCompose\"><a href=\"#1、什么是DockerCompose\" class=\"headerlink\" title=\"1、什么是DockerCompose\"></a>1、什么是DockerCompose</h3><p>有这么一个场景，现实中一套系统是由多个项目或服务组成的，比如一个项目由mysql、redis、nginx、java项目组成，那么我们启动的时候就需要一个一个去启动，如果使用docker命令，就需要启动多个命令，这样太麻烦了，还可能会遗漏了，所以就有了DockerCompose，它可以将多个容器组合在一起，通过一个命令启动。<br>DockerCompose通过一个单独的docker-compose.yml模板文件来定义一组相关联的应用容器，帮助我们实现多个相互关联的docker容器的快速部署。<br>一个DockerCompose文件对应一套系统，下面是一个docker-compose.yml文件的内容：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">containerA:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">A</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">A</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">  <span class=\"attr\">containerB:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">B</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">B</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3307:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br></pre></td></tr></table></figure>\n<p>mysql实例：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">\t  <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br></pre></td></tr></table></figure>\n<p>demo.jar实例与mysql实例（不用构建成镜像情况下）：  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span>  <span class=\"comment\"># 指定docker-compose文件格式的版本</span></span><br><span class=\"line\"><span class=\"attr\">services:</span>  <span class=\"comment\"># 定义服务</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  <span class=\"comment\"># 指定环境变量</span></span><br><span class=\"line\">\t  <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span>  <span class=\"comment\"># 指定数据卷</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br><span class=\"line\">  <span class=\"attr\">demo:</span>  <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span>  <span class=\"comment\"># 指定构建</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span>  <span class=\"comment\"># 在哪里build，.表示在当前目录</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span>  <span class=\"comment\"># 指定dockerfile文件，这里表示在当前目录找dockerfile文件</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">demo</span>  <span class=\"comment\"># 指定容器名</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  <span class=\"comment\"># 指定端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span> <span class=\"comment\"># 指定网络</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">myNet</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span> <span class=\"comment\">#指定依赖</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">mysql</span> <span class=\"comment\"># 指定依赖mysql镜像，指定之后就会先构建mysql，再构建demo</span></span><br><span class=\"line\">  <span class=\"attr\">networks:</span>\t<span class=\"comment\"># 这里指定网络之后，不用再去创建网络，会自动创建</span></span><br><span class=\"line\">    <span class=\"attr\">myNet:</span>  <span class=\"comment\"># 网络名</span></span><br><span class=\"line\">\t  <span class=\"attr\">name:</span> <span class=\"string\">myNet</span>  <span class=\"comment\"># 网络名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、DockerCompose命令\"><a href=\"#2、DockerCompose命令\" class=\"headerlink\" title=\"2、DockerCompose命令\"></a>2、DockerCompose命令</h3><p>一般将DockerCompose文件和其他相关的项目、jar包、文件都放在同一个目录下。<br><code>docker compose 【OPTIONS】 【COMMAND】</code><br><code>OPTIONS</code>:<br>（1）<code>-f</code>：指定docker-compose文件的路径和名称。<br>（2）<code>-p</code>：指定项目名称。<br>（3）<code>-d</code>：在后台运行。<br><code>COMMAND</code>:<br>（1）<code>up</code>：创建并启动所有服务。<br>（2）<code>down</code>：停止并删除所有服务。<br>（3）<code>logs</code>：查看指定服务的日志。<br>（4）<code>ps</code>：查看所有服务的状态。<br>（5）<code>stop</code>：停止某个镜像。<br>（6）<code>start</code>：启动某个镜像。<br>（7）<code>restart</code>：重启某个镜像。<br>（8）<code>exec</code>：进入某个镜像。<br>（9）<code>top</code>：查看运行的进程。  </p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}