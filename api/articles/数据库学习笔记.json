{"title":"数据库学习笔记","slug":"数据库学习笔记","date":"2025-05-19T02:05:30.000Z","updated":"2025-05-30T08:36:05.446Z","comments":true,"path":"api/articles/数据库学习笔记.json","realPath":null,"excerpt":null,"covers":["/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.gif","/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png"],"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、树\"><a href=\"#一、树\" class=\"headerlink\" title=\"一、树\"></a>一、树</h1><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">数据结构演示网站请点击</a>  </p>\n<h3 id=\"1、Trie树\"><a href=\"#1、Trie树\" class=\"headerlink\" title=\"1、Trie树\"></a>1、Trie树</h3><p>1、基础介绍<br>Trie树，又称字典树或前缀树，是一种在算法中常用的数据结构。它主要用于解决通过前缀来联想完整单词的问题。想象一下，在Google中搜索“仙剑”两个字时，下面会展示出你曾经搜索过的相关词，这就是Trie树的典型应用。Trie树是一种用于前缀联想与完全匹配的数据结构，其应用包括搜索引擎中的自动补全功能。<br>2、图示  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrieNode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Trie数据结构</span></span><br><span class=\"line\">    Map&lt;Character, TrieNode&gt; children = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否是单词的结尾</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isEnd</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Trie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : word.toCharArray()) &#123;</span><br><span class=\"line\">            node.children.putIfAbsent(c, <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>());</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.isEnd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 搜索完整单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : word.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否存在以某个前缀开头的单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : prefix.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动补全，返回以某个前缀开头的所有单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">autocomplete</span><span class=\"params\">(String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到前缀对应的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : prefix.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 收集所有匹配的单词</span></span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        collect(node, prefix, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归收集完整单词</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">collect</span><span class=\"params\">(TrieNode node, String prefix, List&lt;String&gt; result)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.isEnd) &#123;</span><br><span class=\"line\">            result.add(prefix);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : node.children.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"type\">TrieNode</span> <span class=\"variable\">nextNode</span> <span class=\"operator\">=</span> node.children.get(c);</span><br><span class=\"line\">            collect(nextNode, prefix + c, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Trie</span> <span class=\"variable\">trie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">        trie.insert(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">        trie.insert(<span class=\"string\">&quot;appte&quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; app = trie.autocomplete(<span class=\"string\">&quot;app&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、二叉搜索树\"><a href=\"#2、二叉搜索树\" class=\"headerlink\" title=\"2、二叉搜索树\"></a>2、二叉搜索树</h3><p>1、基础介绍<br>二叉搜索树（Binary Search Tree，简称BST）是一种特殊的二叉树，它具有以下性质：对于每个节点，其左子树中的所有节点的值都小于该节点的值，而其右子树中的所有节点的值都大于该节点的值。二叉搜索树是一种用于高效查找、插入和删除操作的数据结构。<br>（1）前序遍历：根左右，如下示例中为：7、4、3、1、6、11、8、13、14；<br>（2）中序遍历：左根右，如下示例中为：1、3、4、6、7、8、11、13、14；<br>（3）后序遍历：左右根，如下示例中为：1、3、6、4、8、14、13、11、7。<br>2、插入示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.gif\" class=\"\">  \n<p>3、查找示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.gif\" class=\"\">  \n<p>4、删除示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.gif\" class=\"\">  \n<p>可以使用中序前驱<code>3</code>或者中序后继<code>8</code>来替换。<br>5、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> value;</span><br><span class=\"line\">\tTreeNode left;</span><br><span class=\"line\">\tTreeNode right;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTreeNode(<span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TreeNode root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">BinarySearchTree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\troot = insertRecursively(root, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTreeNode <span class=\"title function_\">insertRecursively</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插入新节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插入左子树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\tnode.left = insertRecursively(node.left, value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; node.value) &#123; <span class=\"comment\">// 插入右子树</span></span><br><span class=\"line\">\t\t\tnode.right = insertRecursively(node.right, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回当前节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 查询方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> searchRecursively(root, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">searchRecursively</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 未找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.value == value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在左子树中查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursively(node.left, value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 在右子树中查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursively(node.right, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 删除方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deleteNode</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 删除左子树的节点</span></span><br><span class=\"line\">\t\t\tnode.left = deleteNode(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 删除右子树的节点</span></span><br><span class=\"line\">\t\t\tnode.right = deleteNode(node.right, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (node.left == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 只有右子树或者叶子节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 只有左子树</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> node.left;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 有两个子节点的情况</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到右子树的最小值（中序后继）</span></span><br><span class=\"line\">\t\t\t\tnode.value = findMin(node.right).value;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 删除中序后继节点</span></span><br><span class=\"line\">\t\t\t\tnode.right = deleteNode(node.right, node.value);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TreeNode <span class=\"title function_\">findMin</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnode = node.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、AVL树\"><a href=\"#3、AVL树\" class=\"headerlink\" title=\"3、AVL树\"></a>3、AVL树</h3><p>适合查找的数据结构。<br>1、基础介绍<br>AVL树是一种自平衡的二叉搜索树，它通过旋转操作来保持树的平衡。AVL树中的每个节点都有一个平衡因子，它表示该节点的左子树和右子树的高度差。AVL树要求每个节点的平衡因子绝对值不超过1，即-1、0、1。AVL树的平衡因子可以通过旋转操作进行调整，以保持树的平衡。<br>（1）树的高度  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.gif\" class=\"\">  \n<p>（2）平衡因子  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.gif\" class=\"\">  \n<p>2、插入示例<br>（1）LL右旋<br>node &gt; 1，left &gt;&#x3D; 0  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.gif\" class=\"\">  \n<p>（2）RR左旋<br>node &lt; -1，right &lt;&#x3D; 0  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.gif\" class=\"\">  \n<p>（3）LR左旋+右旋<br>node &gt; 1，left &lt; 0（RL右旋+左旋：node &lt; -1，right &gt; 0）  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.gif\" class=\"\">  \n<p>（4）完整示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.gif\" class=\"\">  \n<p>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AVL树节点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> key;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 节点的高度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> height;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左子节点</span></span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右子节点</span></span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数，初始化节点</span></span><br><span class=\"line\">\tNode(<span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 新节点的高度默认为1</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.height = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AVL树类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 根节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root；</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取节点高度</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getHeight</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (node == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : node.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取节点的平衡因子</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getBalanceFactor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (node == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : getHeight(node.left) - getHeight(node.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> searchRecursive(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">searchRecursive</span><span class=\"params\">(Node node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 未找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key == node.key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 递归查询左子树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursive(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 递归查询右子树</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursive(node.right, key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rightRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1.right;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行右旋</span></span><br><span class=\"line\">\t\tti.right = node;</span><br><span class=\"line\">\t\tnode.left = t2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tt1.height = Math.max(getHeight(t1.left), getHeight(t1.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">leftRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1.left;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行左旋</span></span><br><span class=\"line\">\t\tt1.left = node;</span><br><span class=\"line\">\t\tnode.right = t2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tt1.height = Math.max(getHeight(t1.left), getHeight(t1.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左-右旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">leftRightRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 先对左子节点进行左旋</span></span><br><span class=\"line\">\t\tnode.left = leftRotate(node.left);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后对当前节点进行右旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rightRotate(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右-左旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rightLeftRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 先对右子节点进行右旋</span></span><br><span class=\"line\">\t\tnode.right = rightRotate(node.right);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后对当前节点进行左旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> leftRotate(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 重平衡节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rebalance</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取节点的平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">balanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 左子树更高，需要进行右旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balanceFactor &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左子树的平衡因子</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">leftBalanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node.left);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左-右旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (leftBalanceFactor &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> leftRightRotate(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rightRotate(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右子树更高，需要进行左旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balanceFactor &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右子树的平衡因子</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">rightBalanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node.right);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右-左旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rightBalanceFactor &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> rightLeftRotate(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftRotate(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 节点平衡，无需操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Node node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 递归插入节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">\t\t\tnode.left = insert(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">\t\t\tnode.right = insert(node.right, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 节点已存在，无需插入</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新节点高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重平衡节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rebalance(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\troot = insert(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、红黑树\"><a href=\"#4、红黑树\" class=\"headerlink\" title=\"4、红黑树\"></a>4、红黑树</h3><p>适合插入、删除、查找的数据结构。<br>1、基础介绍<br>红黑树是一种自平衡的二叉搜索树，它通过旋转操作来保持树的平衡。红黑树中的每个节点都有一个颜色属性，它表示该节点的颜色是红色还是黑色。红黑树要求满足以下性质：<br>（1）每个节点要么是红色，要么是黑色。<br>（2）根节点是黑色。<br>（3）每个叶子节点（NIL节点，空节点）是黑色。<br>（4）如果一个节点是红色的，则它的两个子节点都是黑色的。<br>（5）从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（不包括起始节点本身）。<br>（6）从根节点到叶子节点的最长路径，不超过最短路径的两倍。  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n\n\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、树\"><a href=\"#一、树\" class=\"headerlink\" title=\"一、树\"></a>一、树</h1><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">数据结构演示网站请点击</a>  </p>\n<h3 id=\"1、Trie树\"><a href=\"#1、Trie树\" class=\"headerlink\" title=\"1、Trie树\"></a>1、Trie树</h3><p>1、基础介绍<br>Trie树，又称字典树或前缀树，是一种在算法中常用的数据结构。它主要用于解决通过前缀来联想完整单词的问题。想象一下，在Google中搜索“仙剑”两个字时，下面会展示出你曾经搜索过的相关词，这就是Trie树的典型应用。Trie树是一种用于前缀联想与完全匹配的数据结构，其应用包括搜索引擎中的自动补全功能。<br>2、图示  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrieNode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Trie数据结构</span></span><br><span class=\"line\">    Map&lt;Character, TrieNode&gt; children = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否是单词的结尾</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isEnd</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Trie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : word.toCharArray()) &#123;</span><br><span class=\"line\">            node.children.putIfAbsent(c, <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>());</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.isEnd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 搜索完整单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : word.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否存在以某个前缀开头的单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : prefix.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动补全，返回以某个前缀开头的所有单词</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">autocomplete</span><span class=\"params\">(String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TrieNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到前缀对应的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : prefix.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.children.containsKey(c)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children.get(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 收集所有匹配的单词</span></span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        collect(node, prefix, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归收集完整单词</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">collect</span><span class=\"params\">(TrieNode node, String prefix, List&lt;String&gt; result)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.isEnd) &#123;</span><br><span class=\"line\">            result.add(prefix);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : node.children.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"type\">TrieNode</span> <span class=\"variable\">nextNode</span> <span class=\"operator\">=</span> node.children.get(c);</span><br><span class=\"line\">            collect(nextNode, prefix + c, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Trie</span> <span class=\"variable\">trie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">        trie.insert(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">        trie.insert(<span class=\"string\">&quot;appte&quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; app = trie.autocomplete(<span class=\"string\">&quot;app&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、二叉搜索树\"><a href=\"#2、二叉搜索树\" class=\"headerlink\" title=\"2、二叉搜索树\"></a>2、二叉搜索树</h3><p>1、基础介绍<br>二叉搜索树（Binary Search Tree，简称BST）是一种特殊的二叉树，它具有以下性质：对于每个节点，其左子树中的所有节点的值都小于该节点的值，而其右子树中的所有节点的值都大于该节点的值。二叉搜索树是一种用于高效查找、插入和删除操作的数据结构。<br>（1）前序遍历：根左右，如下示例中为：7、4、3、1、6、11、8、13、14；<br>（2）中序遍历：左根右，如下示例中为：1、3、4、6、7、8、11、13、14；<br>（3）后序遍历：左右根，如下示例中为：1、3、6、4、8、14、13、11、7。<br>2、插入示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.gif\" class=\"\">  \n<p>3、查找示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.gif\" class=\"\">  \n<p>4、删除示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.gif\" class=\"\">  \n<p>可以使用中序前驱<code>3</code>或者中序后继<code>8</code>来替换。<br>5、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> value;</span><br><span class=\"line\">\tTreeNode left;</span><br><span class=\"line\">\tTreeNode right;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTreeNode(<span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TreeNode root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">BinarySearchTree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\troot = insertRecursively(root, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTreeNode <span class=\"title function_\">insertRecursively</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插入新节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插入左子树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\tnode.left = insertRecursively(node.left, value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; node.value) &#123; <span class=\"comment\">// 插入右子树</span></span><br><span class=\"line\">\t\t\tnode.right = insertRecursively(node.right, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回当前节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 查询方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> searchRecursively(root, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">searchRecursively</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 未找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.value == value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在左子树中查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursively(node.left, value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 在右子树中查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursively(node.right, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 删除方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deleteNode</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 删除左子树的节点</span></span><br><span class=\"line\">\t\t\tnode.left = deleteNode(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 删除右子树的节点</span></span><br><span class=\"line\">\t\t\tnode.right = deleteNode(node.right, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (node.left == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 只有右子树或者叶子节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 只有左子树</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> node.left;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 有两个子节点的情况</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到右子树的最小值（中序后继）</span></span><br><span class=\"line\">\t\t\t\tnode.value = findMin(node.right).value;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 删除中序后继节点</span></span><br><span class=\"line\">\t\t\t\tnode.right = deleteNode(node.right, node.value);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TreeNode <span class=\"title function_\">findMin</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (node.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnode = node.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、AVL树\"><a href=\"#3、AVL树\" class=\"headerlink\" title=\"3、AVL树\"></a>3、AVL树</h3><p>适合查找的数据结构。<br>1、基础介绍<br>AVL树是一种自平衡的二叉搜索树，它通过旋转操作来保持树的平衡。AVL树中的每个节点都有一个平衡因子，它表示该节点的左子树和右子树的高度差。AVL树要求每个节点的平衡因子绝对值不超过1，即-1、0、1。AVL树的平衡因子可以通过旋转操作进行调整，以保持树的平衡。<br>（1）树的高度  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.gif\" class=\"\">  \n<p>（2）平衡因子  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.gif\" class=\"\">  \n<p>2、插入示例<br>（1）LL右旋<br>node &gt; 1，left &gt;&#x3D; 0  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.gif\" class=\"\">  \n<p>（2）RR左旋<br>node &lt; -1，right &lt;&#x3D; 0  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.gif\" class=\"\">  \n<p>（3）LR左旋+右旋<br>node &gt; 1，left &lt; 0（RL右旋+左旋：node &lt; -1，right &gt; 0）  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.gif\" class=\"\">  \n<p>（4）完整示例  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.gif\" class=\"\">  \n<p>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AVL树节点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> key;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 节点的高度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> height;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左子节点</span></span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右子节点</span></span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数，初始化节点</span></span><br><span class=\"line\">\tNode(<span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 新节点的高度默认为1</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.height = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AVL树类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 根节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root；</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取节点高度</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getHeight</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (node == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : node.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取节点的平衡因子</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getBalanceFactor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (node == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : getHeight(node.left) - getHeight(node.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> searchRecursive(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">searchRecursive</span><span class=\"params\">(Node node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 未找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key == node.key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 递归查询左子树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursive(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 递归查询右子树</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> searchRecursive(node.right, key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rightRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> node.left;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1.right;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行右旋</span></span><br><span class=\"line\">\t\tti.right = node;</span><br><span class=\"line\">\t\tnode.left = t2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tt1.height = Math.max(getHeight(t1.left), getHeight(t1.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">leftRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> node.right;</span><br><span class=\"line\">\t\t<span class=\"type\">Node</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1.left;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行左旋</span></span><br><span class=\"line\">\t\tt1.left = node;</span><br><span class=\"line\">\t\tnode.right = t2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tt1.height = Math.max(getHeight(t1.left), getHeight(t1.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 左-右旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">leftRightRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 先对左子节点进行左旋</span></span><br><span class=\"line\">\t\tnode.left = leftRotate(node.left);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后对当前节点进行右旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rightRotate(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 右-左旋操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rightLeftRotate</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 先对右子节点进行右旋</span></span><br><span class=\"line\">\t\tnode.right = rightRotate(node.right);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后对当前节点进行左旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> leftRotate(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 重平衡节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node <span class=\"title function_\">rebalance</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取节点的平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">balanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 左子树更高，需要进行右旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balanceFactor &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左子树的平衡因子</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">leftBalanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node.left);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左-右旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (leftBalanceFactor &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> leftRightRotate(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rightRotate(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右子树更高，需要进行左旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balanceFactor &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右子树的平衡因子</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">rightBalanceFactor</span> <span class=\"operator\">=</span> getBalanceFactor(node.right);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 右-左旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rightBalanceFactor &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> rightLeftRotate(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 左旋</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftRotate(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 节点平衡，无需操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Node node, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 递归插入节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key &lt; node.key) &#123;</span><br><span class=\"line\">\t\t\tnode.left = insert(node.left, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; node.key) &#123;</span><br><span class=\"line\">\t\t\tnode.right = insert(node.right, key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 节点已存在，无需插入</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 更新节点高度</span></span><br><span class=\"line\">\t\tnode.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重平衡节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rebalance(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">\t\troot = insert(root, key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、红黑树\"><a href=\"#4、红黑树\" class=\"headerlink\" title=\"4、红黑树\"></a>4、红黑树</h3><p>适合插入、删除、查找的数据结构。<br>1、基础介绍<br>红黑树是一种自平衡的二叉搜索树，它通过旋转操作来保持树的平衡。红黑树中的每个节点都有一个颜色属性，它表示该节点的颜色是红色还是黑色。红黑树要求满足以下性质：<br>（1）每个节点要么是红色，要么是黑色。<br>（2）根节点是黑色。<br>（3）每个叶子节点（NIL节点，空节点）是黑色。<br>（4）如果一个节点是红色的，则它的两个子节点都是黑色的。<br>（5）从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（不包括起始节点本身）。<br>（6）从根节点到叶子节点的最长路径，不超过最短路径的两倍。  </p>\n<img src=\"/2025/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}