{"title":"Java 锁学习笔记","slug":"Java-锁学习笔记","date":"2024-02-26T01:56:18.000Z","updated":"2024-07-12T07:43:37.652Z","comments":true,"path":"api/articles/Java-锁学习笔记.json","realPath":null,"excerpt":null,"covers":["/2024/02/26/Java-%E9%94%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png"],"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、概念解释\"><a href=\"#一、概念解释\" class=\"headerlink\" title=\"一、概念解释\"></a>一、概念解释</h1><p>1、可重入锁：一般运用在递归，就是一个线程获取锁之后，又请求获取这个锁时，不会导致死锁。<br>2、不可重入锁：和可重入锁相反，就是一个线程获取锁之后，又请求获取这个锁时，会阻塞，直到锁被释放，然后因为锁已经被自己获取到，自己又请求获取锁，就会产生死锁。<br>3、公平锁：很公平，每个线程必须遵循先来后到原则，排队获取锁。<br>4、非公平锁：不公平，线程不必遵循先来后到原则，不必排队。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h1><p>1、<code>synchronized</code>：可重入锁，非公平的。<br>2、<code>lock</code>：可重入锁，默认非公平（可以自己设置）  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、synchronized和lock的区别\"><a href=\"#三、synchronized和lock的区别\" class=\"headerlink\" title=\"三、synchronized和lock的区别\"></a>三、synchronized和lock的区别</h1><p>1、<code>synchronized</code>是java内置关键字，<code>lock</code>是一个java接口；<br>2、<code>syncronized</code>无法判断获取锁的标志，<code>lock</code>可以判断是否获取到了锁；<br>3、<code>synchronized</code>会自动释放锁，<code>lock</code>必须要手动释放锁，如果不释放锁，会死锁；<br>4、使用<code>synchronized</code>时，线程1获取到锁，线程2就得一直等待锁的释放，使用<code>lock</code>锁就不一定会等待下去；<br>5、<code>synchronized</code>是可重入锁，不可以中断，非公平的，<code>lock</code>是可重入锁，可以判断锁，默认非公平（可以自己设置）;<br>6、<code>synchronized</code>适合锁少量的代码同步问题，<code>lock</code>适合锁大量的同步代码。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"四、线程状态\"><a href=\"#四、线程状态\" class=\"headerlink\" title=\"四、线程状态\"></a>四、线程状态</h1><img src=\"/2024/02/26/Java-%E9%94%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\"> \n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、一些问题\"><a href=\"#五、一些问题\" class=\"headerlink\" title=\"五、一些问题\"></a>五、一些问题</h1><h3 id=\"1、synchronized使用问题\"><a href=\"#1、synchronized使用问题\" class=\"headerlink\" title=\"1、synchronized使用问题\"></a>1、synchronized使用问题</h3><p>1、说明：生产者和消费者的问题，只有两个线程A（生产者）和B（消费者）的情况下，A和B操作同一个变量n，当n为0时，A生产（n + 1）；当A生产好之后（n为1），B消费（n - 1），这是没有问题的。但是，如果是两个生产者（A、B）和两个消费者（C、D）的情况下，就会出现问题（n的值可能出现2、3、4等等的情况）。<br>2、例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建demoService 对象</span></span><br><span class=\"line\">        <span class=\"type\">DemoService</span> <span class=\"variable\">demoService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DemoService</span>();</span><br><span class=\"line\">        <span class=\"comment\">//  A线程 +操作 </span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// B线程 + 操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// C线程 - 操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// D线程 -操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;D&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// + 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n ++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + n);</span><br><span class=\"line\">        <span class=\"comment\">// 通知其它线程，notifyAll方法必须放在synchronized代码块里</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// - 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n --;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + n);</span><br><span class=\"line\">        <span class=\"comment\">// notifyAll方法必须放在synchronized代码块里</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）上面的例子会产生问题，原因：<br>我们在方法上使用<code>synchronized</code>，表示我们锁住的是<code>demoService</code>对象的方法，当两个线程执行同一个方法，线程A进入<code>increment</code>方法，<code>++</code>后释放，线程B进入<code>increment</code>方法，此时n为1，!&#x3D; 0，所以线程B执行<code>wait</code>方法等待，并释放锁；此时线程C进入<code>decrement</code>方法，<code>--</code>后释放，释放的瞬间线程A拿到了锁，进入后<code>++</code>，线程B从<code>wait</code>中被唤醒获取锁，向下执行后<code>++</code>，就产生了问题。<br>（2）解决办法：<br>因为if只执行一次，将if改为while就可以了。<br>（3）为什么是因为if只执行一次？<br>因为当n不为0时，当线程A进入increment方法，执行if判断，n不为0，线程A等待释放锁，此时线程B获取到锁，进入increment方法（线程C和D还没执行–操作），n还是不为0，线程B也等待释放锁，然后当线程C执行完–操作，执行唤醒其它线程操作，线程A和B被唤醒，线程A获取到锁，因为if判断只执行一次，所以线程A直接向下执行++操作，n变为1之后线程A释放锁，然后B获取到锁，也是因为if判断只执行一次，所以线程B也直接向下执行++操作，n就变为了2。如果将if换成while，当线程C执行完–操作之后唤醒其它线程，线程A和B被唤醒，线程A获取到锁，此时if变为了while，需要先进行while条件判断，因为此时n为0，不满足while条件，直接结束while循环，向下执行++操作，n变为1之后线程A释放锁，然后线程B获取到锁，因为是while循环判断，n为1，满足条件，线程B继续wait等待。  </p>\n<h3 id=\"2、线程等待唤醒之后执行逻辑\"><a href=\"#2、线程等待唤醒之后执行逻辑\" class=\"headerlink\" title=\"2、线程等待唤醒之后执行逻辑\"></a>2、线程等待唤醒之后执行逻辑</h3><p>线程执行<code>wait</code>方法等待，然后被唤醒，并不是从头执行，而是从<code>wait</code>方法处往下执行。</p>\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、概念解释\"><a href=\"#一、概念解释\" class=\"headerlink\" title=\"一、概念解释\"></a>一、概念解释</h1><p>1、可重入锁：一般运用在递归，就是一个线程获取锁之后，又请求获取这个锁时，不会导致死锁。<br>2、不可重入锁：和可重入锁相反，就是一个线程获取锁之后，又请求获取这个锁时，会阻塞，直到锁被释放，然后因为锁已经被自己获取到，自己又请求获取锁，就会产生死锁。<br>3、公平锁：很公平，每个线程必须遵循先来后到原则，排队获取锁。<br>4、非公平锁：不公平，线程不必遵循先来后到原则，不必排队。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h1><p>1、<code>synchronized</code>：可重入锁，非公平的。<br>2、<code>lock</code>：可重入锁，默认非公平（可以自己设置）  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、synchronized和lock的区别\"><a href=\"#三、synchronized和lock的区别\" class=\"headerlink\" title=\"三、synchronized和lock的区别\"></a>三、synchronized和lock的区别</h1><p>1、<code>synchronized</code>是java内置关键字，<code>lock</code>是一个java接口；<br>2、<code>syncronized</code>无法判断获取锁的标志，<code>lock</code>可以判断是否获取到了锁；<br>3、<code>synchronized</code>会自动释放锁，<code>lock</code>必须要手动释放锁，如果不释放锁，会死锁；<br>4、使用<code>synchronized</code>时，线程1获取到锁，线程2就得一直等待锁的释放，使用<code>lock</code>锁就不一定会等待下去；<br>5、<code>synchronized</code>是可重入锁，不可以中断，非公平的，<code>lock</code>是可重入锁，可以判断锁，默认非公平（可以自己设置）;<br>6、<code>synchronized</code>适合锁少量的代码同步问题，<code>lock</code>适合锁大量的同步代码。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"四、线程状态\"><a href=\"#四、线程状态\" class=\"headerlink\" title=\"四、线程状态\"></a>四、线程状态</h1><img src=\"/2024/02/26/Java-%E9%94%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\"> \n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、一些问题\"><a href=\"#五、一些问题\" class=\"headerlink\" title=\"五、一些问题\"></a>五、一些问题</h1><h3 id=\"1、synchronized使用问题\"><a href=\"#1、synchronized使用问题\" class=\"headerlink\" title=\"1、synchronized使用问题\"></a>1、synchronized使用问题</h3><p>1、说明：生产者和消费者的问题，只有两个线程A（生产者）和B（消费者）的情况下，A和B操作同一个变量n，当n为0时，A生产（n + 1）；当A生产好之后（n为1），B消费（n - 1），这是没有问题的。但是，如果是两个生产者（A、B）和两个消费者（C、D）的情况下，就会出现问题（n的值可能出现2、3、4等等的情况）。<br>2、例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建demoService 对象</span></span><br><span class=\"line\">        <span class=\"type\">DemoService</span> <span class=\"variable\">demoService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DemoService</span>();</span><br><span class=\"line\">        <span class=\"comment\">//  A线程 +操作 </span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// B线程 + 操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// C线程 - 操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">// D线程 -操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i ++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    demoService.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;D&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// + 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n ++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + n);</span><br><span class=\"line\">        <span class=\"comment\">// 通知其它线程，notifyAll方法必须放在synchronized代码块里</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// - 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待，wait方法必须放在synchronized代码块里</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n --;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + n);</span><br><span class=\"line\">        <span class=\"comment\">// notifyAll方法必须放在synchronized代码块里</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）上面的例子会产生问题，原因：<br>我们在方法上使用<code>synchronized</code>，表示我们锁住的是<code>demoService</code>对象的方法，当两个线程执行同一个方法，线程A进入<code>increment</code>方法，<code>++</code>后释放，线程B进入<code>increment</code>方法，此时n为1，!&#x3D; 0，所以线程B执行<code>wait</code>方法等待，并释放锁；此时线程C进入<code>decrement</code>方法，<code>--</code>后释放，释放的瞬间线程A拿到了锁，进入后<code>++</code>，线程B从<code>wait</code>中被唤醒获取锁，向下执行后<code>++</code>，就产生了问题。<br>（2）解决办法：<br>因为if只执行一次，将if改为while就可以了。<br>（3）为什么是因为if只执行一次？<br>因为当n不为0时，当线程A进入increment方法，执行if判断，n不为0，线程A等待释放锁，此时线程B获取到锁，进入increment方法（线程C和D还没执行–操作），n还是不为0，线程B也等待释放锁，然后当线程C执行完–操作，执行唤醒其它线程操作，线程A和B被唤醒，线程A获取到锁，因为if判断只执行一次，所以线程A直接向下执行++操作，n变为1之后线程A释放锁，然后B获取到锁，也是因为if判断只执行一次，所以线程B也直接向下执行++操作，n就变为了2。如果将if换成while，当线程C执行完–操作之后唤醒其它线程，线程A和B被唤醒，线程A获取到锁，此时if变为了while，需要先进行while条件判断，因为此时n为0，不满足while条件，直接结束while循环，向下执行++操作，n变为1之后线程A释放锁，然后线程B获取到锁，因为是while循环判断，n为1，满足条件，线程B继续wait等待。  </p>\n<h3 id=\"2、线程等待唤醒之后执行逻辑\"><a href=\"#2、线程等待唤醒之后执行逻辑\" class=\"headerlink\" title=\"2、线程等待唤醒之后执行逻辑\"></a>2、线程等待唤醒之后执行逻辑</h3><p>线程执行<code>wait</code>方法等待，然后被唤醒，并不是从头执行，而是从<code>wait</code>方法处往下执行。</p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}