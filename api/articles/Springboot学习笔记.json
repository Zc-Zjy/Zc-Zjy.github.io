{"title":"Springboot学习笔记","slug":"Springboot学习笔记","date":"2023-10-24T01:09:19.000Z","updated":"2025-06-16T07:45:00.629Z","comments":true,"path":"api/articles/Springboot学习笔记.json","realPath":null,"excerpt":null,"covers":["/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot1.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot6.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot2.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot3.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot4.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot5.jpg","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png","/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.jpg"],"cover":null,"content":"<hr>\n<h1 id=\"一、Springboot基础知识记录\"><a href=\"#一、Springboot基础知识记录\" class=\"headerlink\" title=\"一、Springboot基础知识记录\"></a>一、Springboot基础知识记录</h1><h3 id=\"1、Springboot-IOC和DI注入方式\"><a href=\"#1、Springboot-IOC和DI注入方式\" class=\"headerlink\" title=\"1、Springboot IOC和DI注入方式\"></a>1、Springboot IOC和DI注入方式</h3><p>1、按照类型注入（直接在类上使用<code>@Autowired</code>）<br>（1）当只有一个名字相同的类存在：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）当存在多个相同的类名（不在同一个包下）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;a&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;b&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(value=&quot;a&quot;)</span> <span class=\"comment\">// 使用a声明的service注入</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、按照名称注入<br><strong>说明：</strong>直接在类上使用<code>@Resource</code>（<code>@Resource</code>相当于<code>@Autowired + @Qualifier</code>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;a&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;b&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;a&quot;)</span> <span class=\"comment\">// 使用a声明的service注入</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、按照<code>setter</code>方法注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDemoService</span><span class=\"params\">(DemoService demoService)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.demoService = demoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、按照构造器方式注入<br><strong>说明：</strong>构造器注入可以避免<code>Field</code>注入的 循环依赖 问题，比如在<code>Demo1</code>中注入了<code>Demo2</code>，在<code>Demo2</code>中注入了<code>Demo1</code>，使用构造器注入，在项目启动的时候会抛出<code>BeanCurrentlyCreationException</code>提醒循环依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DemoController</span><span class=\"params\">(DemoService demoService)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.demoService = demoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、Springboot-关于使用-AOP\"><a href=\"#2、Springboot-关于使用-AOP\" class=\"headerlink\" title=\"2、Springboot 关于使用 AOP\"></a>2、Springboot 关于使用 AOP</h3><p>1、说明：什么是AOP？<br>AOP就是增强，在没有使用AOP时，对象是原本的对象（比如房东对象），而使用了AOP之后，使用的对象就变成了代理对象，而不是原本的对象（比如中介对象），相当于就是不修改原有的业务逻辑代码的基础上，想要增加额外的逻辑，就是找到原有的代码，切入想要增加的代码，比如日志的记录；<br>2、AOP的工作流程说明<br>（1）Spring容器启动；<br>（2）会去读取被<code>@Aspect</code>和<code>@Component</code>标注的切面类中配置的所有切入点，也就是被<code>@Pointcut</code>标注的方法；<br>（3）初始化所有bean，然后去判断需要被增强的bean对应的类中的方法是否匹配到任意切入点；<br>（4）如果匹配失败，就创建bean对象；<br>（5）如果匹配成功，就创建bean对象的代理对象；<br>（6）获取bean，调用方法并执行，完成操作。<br>3、使用方法<br>（1）导入依赖，在<code>pom.xml</code>中导入AOP的依赖  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）方式一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 将这个类注入到容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">// 使用这个注解标注这个类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoAspect</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 在BookDao类的update方法处切入，相当于想增强update方法</span></span><br><span class=\"line\">\t<span class=\"comment\">// 在void com.xxx.dao.BookDao.update方法处切入，具体怎么切入看使用的是什么通知类型注解</span></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(void com.xxx.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将pt这个切入点配置对应到这个方法上</span></span><br><span class=\"line\">\t<span class=\"comment\">// 相当于上面AOP工作流程说明中的第3点</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果没有这个，切入点就毫无意义，就会匹配失败</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordTime</span><span class=\"params\">(JoinPoint joinPoint)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这个方法是在上面 update方法前调用</span></span><br><span class=\"line\">        .... <span class=\"comment\">// 编写需要增强的业务逻辑代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在启动类上加<code>@EnableAspectJAutoProxy</code>注解，告诉spring，我以注解的方式使用aop。<br>特别说明：为什么不加<code>@EnableAspectJAutoProxy</code>注解AOP一样也会生效？<br>是因为依赖中如果存在<code>spring-boot-starter-web</code>依赖，而这个依赖中包含了<code>spring-boot-autoconfigure</code>依赖，正是这个依赖（自动装配依赖），它会读取<code>spring.factories</code>文件，这个文件中有一个<code>AopAutoConfiguration</code>类，这个等同于<code>@EnableAspectJAutoProxy</code>注解，我们可以在<code>yml</code>配置文件中将它关闭<code>spring.aop.auto=false</code>，这样AOP就不生效了（在不使用<code>@EnableAspectJAutoProxy</code>注解前提下）。<br>所以为了保险期间请一律加上<code>@EnableAspetJAutoProxy</code>注解。<br>（3）方式二（简写形式，省去了<code>@Pointcut</code>）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 将这个类注入到容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">// 使用这个注解标注这个类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoAspect</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下面的注解的意思是在com.xxx.service.*.*(..)切入</span></span><br><span class=\"line\">    <span class=\"comment\">// 意思就是在com.xxx.service.*.*(..)所有方法前后，都会执行下面recordTime中的逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;execution(* com.xxx.service.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordTime</span><span class=\"params\">(ProceedingJoinPoint p)</span>&#123;</span><br><span class=\"line\">        p.proceed(); <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）方式三（注解的形式，灵活）：（比较详细）<br>创建一个注解：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该注解标注的方法会执行切入类中的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 这样就不用写 execution(* com.xxx.service.*.*(..)) 匹配规则了</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> LogUserProjectOperation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">description</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;无法获知此用户的操作行为&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建切面类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectProcessRecordAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解的方式来定切入点</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如我在xxx方法上使用@LogUserProjectOperation注解标注之后，</span></span><br><span class=\"line\">    <span class=\"comment\">// 当执行到xxx方法时，因为使用的@AfterReturning的形式，</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以会在xxx方法后面执行下面的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// joinPoint参数可以获取到xxx方法的各种值</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用returnValue，必须在注解中声明returning = &quot;returnValue&quot;，这个是获取xxx方法返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;@annotation(LogUserProjectOperation)&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logUserProjectOperation</span><span class=\"params\">(JoinPoint joinPoint, Object returnValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是可以获取@LogUserProjectOperation 注解的参数</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"type\">LogUserProjectOperation</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> method.getAnnotation(LogUserProjectOperation.class);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">description</span> <span class=\"operator\">=</span> annotation.description();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx所属的类名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getSimpleName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx方法的参数</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：在需要的方法上使用<code>@LogUserProjectOperation</code>注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/projectCheck&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectCheckController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在需要的方法上使用@LogUserProjectOperation注解</span></span><br><span class=\"line\">    <span class=\"meta\">@LogUserProjectOperation</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/approveOperate&quot;, method = RequestMethod.PUT)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R&lt;Boolean&gt; <span class=\"title function_\">approveOperate</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要想获取http请求的各种参数，比如请求类型（get、post等），使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (attributes == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">       log.error(<span class=\"string\">&quot;正常日志获取attributes为空,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取请求</span></span><br><span class=\"line\"><span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\"><span class=\"comment\">// 获取响应</span></span><br><span class=\"line\"><span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> attributes.getResponse();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (response == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      log.error(<span class=\"string\">&quot;正常日志获取response失败,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、AOP切入点表达式<br>（1）描述<br>描述一（接口）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行com.xxx.dao包下的BookDao接口中的无参数update方法，void是update的返回类型</span></span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.xxx.dao.BookDao.update())</span><br></pre></td></tr></table></figure>\n<p>描述二（类）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行com.xxx.dao.impl包下的BookDaoImpl类中的无参数update方法，void是update的返回类型</span></span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.xxx.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure>\n<p>描述三（<code>*</code>）：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配com.xxx包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</span></span><br><span class=\"line\">execution(<span class=\"keyword\">public</span> * com.xxx.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>\n<p>描述四（<code>..</code>）：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</span></span><br><span class=\"line\">execution(<span class=\"keyword\">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure>\n<p>描述五（<code>+</code>）：专用于匹配子类类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* *..*Service + .*(..))</span><br></pre></td></tr></table></figure>\n<p>（2）表达式格式说明<br>格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口.方法名（参数）异常名）  </p>\n<ul>\n<li>动作关键字：描述切入点的行为动作，例如<code>execution</code>表示执行到指定切入点。  </li>\n<li>访问修饰符：<code>public</code>、<code>private</code>等，可以省略。  </li>\n<li>返回值。  </li>\n<li>包名。  </li>\n<li>类&#x2F;接口名。  </li>\n<li>方法名。  </li>\n<li>参数。  </li>\n<li>异常名：方法定义中抛出指定异常，可以省略。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(<span class=\"keyword\">public</span> User com.xxx.service.UserService.findById(<span class=\"type\">int</span>))</span><br></pre></td></tr></table></figure>\n\n<p>4、通知类型<br>（1）<code>@Around</code> 环绕通知（需要传参<code>ProceedingJoinPoint proce</code>自己调用<code>proce.proceed()</code>方法执行原始方法，下面其他的注解不用调用）<br>此注解标注的通知方法在目标方法前、后都被执行。<br>（2）<code>@Before</code> 前置通知<br>此注解标注的通知方法在目标方法前被执行。<br>（3）<code>@After</code> 后置通知<br>此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。<br>（4）<code>@AfterReturning</code> 返回后通知<br>此注解标注的通知方法在目标方法后被执行，有异常不会执行。<br>（5）<code>@AfterThrowing</code> 异常后通知<br>此注解标注的通知方法发生异常后执行。<br>5、通知类型的参数<br>（1）非环绕通知，可以将<code>org.aspectj.lang.JoinPoint</code>作为通知方法的第1个参数，通过这个参数获取被调用方法的信息；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">JoinPoint</span> &#123;  </span><br><span class=\"line\">    String <span class=\"title function_\">toString</span><span class=\"params\">()</span>;         <span class=\"comment\">//连接点所在位置的相关信息  </span></span><br><span class=\"line\">    String <span class=\"title function_\">toShortString</span><span class=\"params\">()</span>;     <span class=\"comment\">//连接点所在位置的简短相关信息  </span></span><br><span class=\"line\">    String <span class=\"title function_\">toLongString</span><span class=\"params\">()</span>;     <span class=\"comment\">//连接点所在位置的全部相关信息  </span></span><br><span class=\"line\">    Object <span class=\"title function_\">getThis</span><span class=\"params\">()</span>;         <span class=\"comment\">//返回AOP代理对象</span></span><br><span class=\"line\">    Object <span class=\"title function_\">getTarget</span><span class=\"params\">()</span>;       <span class=\"comment\">//返回目标对象  </span></span><br><span class=\"line\">    Object[] getArgs();       <span class=\"comment\">//返回被通知方法参数列表，也就是目前调用目标方法传入的参数  </span></span><br><span class=\"line\">    Signature <span class=\"title function_\">getSignature</span><span class=\"params\">()</span>;  <span class=\"comment\">//返回当前连接点签名，这个可以用来获取目标方法的详细信息，如方法Method对象等</span></span><br><span class=\"line\">    SourceLocation <span class=\"title function_\">getSourceLocation</span><span class=\"params\">()</span>;<span class=\"comment\">//返回连接点方法所在类文件中的位置  </span></span><br><span class=\"line\">    String <span class=\"title function_\">getKind</span><span class=\"params\">()</span>;        <span class=\"comment\">//连接点类型  </span></span><br><span class=\"line\">    StaticPart <span class=\"title function_\">getStaticPart</span><span class=\"params\">()</span>; <span class=\"comment\">//返回连接点静态部分  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）如果是环绕通知，可以将<code>org.aspectj.lang.ProceedingJoinPoint</code>作为方法的第1个参数，通过这个参数获取被调用方法的信息。  </p>\n<h3 id=\"3、关于-Springboot-配置文件\"><a href=\"#3、关于-Springboot-配置文件\" class=\"headerlink\" title=\"3、关于 Springboot 配置文件\"></a>3、关于 Springboot 配置文件</h3><p>1、配置文件加载优先级<br><code>application.properties</code>配置文件 &gt; <code>application.yml</code>配置文件 &gt; <code>application.yaml</code>配置文件。<br>2、<code>properties</code>配置文件名必须是<code>application.properties</code>，如果想更改它的名字，必须在这里配置：</p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot1.jpg\" class=\"\">\n<p>3、不止可以在配置文件中配置，还可以在java属性或者命令行配置<br>（1）idea中设置  </p>\n<ul>\n<li>java属性配置<br>在idea启动配置里有一项配置：VM options<br>例如：可以在VM options里配置端口号：-Dserver.port&#x3D;8080  </li>\n<li>命令行配置<br>同java属性配置，有一项配置：Program arguments<br>例如：在Program arguments里配置端口号：–server.port&#x3D;8080</li>\n</ul>\n<p>（2）在Dos命令行设置  </p>\n<ul>\n<li>java属性配置<br>java -Derver.port&#x3D;8080 -jar demo.jar</li>\n<li>命令行配置<br>java -jar demo.jar –server.port&#x3D;8080</li>\n</ul>\n<p><strong>注意优先级：</strong>命令行 &gt; java属性 &gt; 配置文件<br>4、多个.yml文件的使用方法<br>SpringBoot默认加载的是<code>application.yml</code>文件，所以想要引入其他配置的yml文件，就要在<code>application.yml</code>中激活该文件，定义一个<code>application-student.yml</code>文件（注意：必须以application-开头）。<br><code>application.yml</code>中：（注意必须是在<code>application.yml</code>或者<code>.properties</code>)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>                    <span class=\"comment\"># 这个也是用来启动多环境的</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span>               <span class=\"comment\"># 如果有开发、测试、生产环境</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">student</span>      <span class=\"comment\"># 就用这个来启动</span></span><br></pre></td></tr></table></figure>\n<p>（1）赋值（如果是xml的话，它是自动完成的）<br><code>application-student.yml</code>配置文件代码：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">小明</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">27</span></span><br><span class=\"line\">  <span class=\"attr\">sex:</span> <span class=\"string\">男</span></span><br></pre></td></tr></table></figure>\n<p>方案一：使用<code>@Value</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.sex&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(String sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, cat=&quot;</span> + cat +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果使用<code>application.properties</code>，需要使用<code>@PropertySource(value=&quot;application.properties&quot;)</code>来加载并在属性上使用<code>@Value(&quot;&quot;)</code>使用。<br>方案二：使用<code>@ConfigurationProperties</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(String sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, cat=&quot;</span> + cat +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、springboot集成mybatis需要的依赖\"><a href=\"#4、springboot集成mybatis需要的依赖\" class=\"headerlink\" title=\"4、springboot集成mybatis需要的依赖\"></a>4、springboot集成mybatis需要的依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mysql驱动 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- mybatis --&gt;</span> </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 这里这个可以换，比如如果要用druid的就导入druid的 --&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-----------------或者只需要以下依赖就可以了---------------------&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>application.yml</code>中配置数据源：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/数据库名字?serverTimezone=UTC&amp;userUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.mysql.cj.jdbc.MysqlDataSource</span> <span class=\"comment\">#这个依赖导入哪个就用哪个</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">实体类包路径，比如com.cn.pojo</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">mapper的路径，比如classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、Springboot-bean的管理\"><a href=\"#5、Springboot-bean的管理\" class=\"headerlink\" title=\"5、Springboot bean的管理\"></a>5、Springboot bean的管理</h3><p>1、获取bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApplicationContext applicationContext;</span><br></pre></td></tr></table></figure>\n<p>2、非第三方bean管理<br>我们将一个类注入到<code>spring</code>容器中成为一个<code>bean</code>对象，默认是单例；要想多例只需在该类上加上<code>@Scope(&quot;prototype&quot;)</code>注解，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>3、第三方bean管理<br>第三方bean：比如第三方的jar包，我们无法在第三方jar中某个类上面使用<code>@Component、@Service</code>等注解的情况下，就使用<code>@Bean</code>注解，举个场景：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们想使用JSONObject，必须new</span></span><br><span class=\"line\">    <span class=\"type\">JSONObject</span> <span class=\"variable\">jSONObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个场景，我们不能在<code>JSONObject</code>类上面使用注解<code>@Component、@Service</code>来将它注入到容器中，但是我们可以这样：<br>在<code>springboot</code>启动类里，把<code>JSONObject</code>类注入到<code>spring</code>容器中<strong>（不过在启动类中定义是不推荐的，推荐的是在配置类中定义）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootDemo</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootDemo.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">// 将当前方法的返回值对象交给IOC容器管理，成为IOC容器bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">jSONObject</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、多个<code>bean</code>使用方法<br>概述：<br>通过<code>Spring</code>管理的类,默认是单例模式,但是如果有的类需要使用独立的属性,则需要配置为多例模式的. 但是多例模式不仅仅只是加一个声明,使用<code>@Autowired</code>进行注入,可能并不会是你想要的结果.因为多例模式的类是需要单独调用的。<br>不搞清楚原理直接测试：<br>需要多例的类上加上注解<code>@Scope(“prototype”)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test,current bean is&quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">引用直接使用<span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ExampleService exampleService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        exampleService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">结果: 每个request过来的时候,exampleService实例均为同一个实例.</span><br><span class=\"line\"></span><br><span class=\"line\">解决办法：</span><br><span class=\"line\">第一种：不使用<span class=\"meta\">@Autowired</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> org.springframework.beans.factory.BeanFactory beanFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ExampleService</span> <span class=\"variable\">exampleService</span> <span class=\"operator\">=</span> beanFactory.getBean(ExampleService.class);</span><br><span class=\"line\">        exampleService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">第二种：使用bean工厂</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebSocketHandler <span class=\"title function_\">websocketBHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PerConnectionWebSocketHandler</span> <span class=\"variable\">perConnectionHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PerConnectionWebSocketHandler</span>(WebSocketBHandler.class);</span><br><span class=\"line\">    perConnectionHandler.setBeanFactory(context.getAutowireCapableBeanFactory());</span><br><span class=\"line\">    <span class=\"comment\">//设置bean工厂，否则bean工厂WebSocketBHandler将不会自动连接</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> perConnectionHandler;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用ApplicationContext进行代理bean工厂</span><br><span class=\"line\"></span><br><span class=\"line\">注入</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\">使用</span><br><span class=\"line\"><span class=\"built_in\">this</span>.Bservice = context.getBean(BService.class, <span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Springboot自动配置加载流程\"><a href=\"#6、Springboot自动配置加载流程\" class=\"headerlink\" title=\"6、Springboot自动配置加载流程\"></a>6、Springboot自动配置加载流程</h3><p>1、说明<br>（1）在Springboot启动类上，有<code>@SpringBootApplication</code>注解，这个注解中有<code>@EnableAutoConfiguration</code>注解；<br>（2）<code>@EnableAutoConfiguration</code>注解引入了<code>@Import</code>；<br>（3）Spring容器启动时，加载IOC容器会解析<code>@Import</code>注解；<br>（4）<code>@Import</code>导入了一个<code>deferredImportSelector</code>，它会读取<code>META-INF/spring.factories</code>文件；<br>（5）然后通过<code>@Condition</code>注解排除无效的自动配置类。<br>同理：<br>（1）导入 <code>starter</code> ，就会导入 <code>autoconfigure</code> 包；<br>（2）<code>autoconfigure</code> 包里面有一个文件： <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> ，<br>里面指定的是启动要加载的所有自动配置类；<br>（3）<code>@EnableAutoConfiguration</code> 会自动的把上面文件里面写的所有自动配置类都导入进<code>spring</code>容器；<br>（4）自动配置类中的 <code>xxxAutoConfiguration</code> 是有条件注解，来进行按需加载的；<br>（5）<code>xxxAutoConfiguration</code> 给容器中导入一堆组件，组件都是从 <code>xxxProperties</code> 中提取属性值的；<br>（6）<code>xxxProperties</code> 又是和配置文件进行了绑定。<br>2、<code>springboot</code>默认配置说明<br>（1）包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewRseolver</code> 组件，方便视图解析。<br>（2）默认的静态资源处理机制：静态资源在static文件夹下即可直接访问。<br>（3）自动注册了 <code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> 组件，适配常见数据类型转换和格式化需求。<br>（4）支持 <code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型。<br>（5）自动使用 <code>ConfigurableWebBindingInitializer</code>，实现消息处理、数据绑定、类型转化、数据校验等功能。<br><strong>重要：</strong><br>（1）如果想保持默认配置，并且自定义更多配置，如：<code>interceptors（拦截器）、formatters（格式化器）、viewControllers（视图解析器）</code>等，可以创建一个新类，使用 <code>@Configuration</code> 注解和实现一个 <code>WebMvcConfigurer</code>接口，并且不要标注 <code>@EnableWebMvc</code> 注解。<br>（2）如果想保持默认配置，但要自定义核心组件实例，比如：<code>RequestMappingHandlerMapping，RequestMappingHandlerAdapter，ExceptionHandlerExceptionResolver</code>等，只需给容器中放一个 <code>WebMvcRegistrations</code> 组件即可。<br>（3）如果想全面接管<code>SpringMvc</code>，<code>@Configuration</code>标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现<code>WebMvcConfigurer</code>接口。<br>3、<code>WebMvcConfigurer</code>接口方法说明<br>（1）<code>addArgumentResolvers</code>：参数解析器，用来解析<code>Controller</code>中各方法的参数。<br>（2）<code>addCorsMappings</code>：跨域<br>（3）<code>addFormatters</code>：格式化器，用来处理配置文件中格式化的问题。<br>（4）<code>addInterceptors</code>：拦截器<br>（5）<code>addResourceHandlers</code>：资源处理器，处理静态资源规则。<br>（6）<code>addReturnValueHandlers</code>：返回值处理器，当<code>controller</code>返回一个字符串或者对象等时，是要跳转页面还是返回数据。<br>（7）<code>addViewControllers</code>：视图控制器，如果想发一个请求 <code>/a</code> 直接跳转到<code>xxx.html</code>页面，不用写<code>controller</code>，可以在这里设置。<br>（8）<code>configureAsyncSupport</code>：异步支持<br>（9）<code>configureContentNegotiation</code>：内容协商<br>（10）<code>configureHandlerExceptionResolvers</code>：配置异常处理解析器。<br>（11）<code>configureMessageConverters</code>：配置消息转换器<br>（12）<code>configurePathMatch</code>：路径匹配<br>（13）<code>configureViewResolvers</code>：配置视图解析器  </p>\n<h3 id=\"7、循环依赖问题\"><a href=\"#7、循环依赖问题\" class=\"headerlink\" title=\"7、循环依赖问题\"></a>7、循环依赖问题</h3><p>1、三级缓存<br>（1）一级缓存（单例池）：<code>singletonObjects</code>，用来存经历过完整生命周期的bean；<br>（2）二级缓存：<code>earlySingletonObjects</code>，用来存还没有初始化的aop代理对象；<br>（3）三级缓存：<code>singletonFactories</code>。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> BService bService;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AService aService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面产生了循环依赖。<br>3、说明  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot6.jpg\" class=\"\">\n\n<h3 id=\"8、Springboot源码名词\"><a href=\"#8、Springboot源码名词\" class=\"headerlink\" title=\"8、Springboot源码名词\"></a>8、Springboot源码名词</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>说明一：在springboot源码中用到的<code>ConfigurableApplicationContext</code>是接口，而官网springframework中使用到的<code>GenericApplicationContext</code>是<code>ConfigurableApplicationContext</code>的实现类。<br>说明二：<code>FactoryBean</code>和<code>BeanFactory</code>区别<br>（1）<code>FactoryBean</code>：是Spring中一种特殊的bean，可以在getObject()工厂方法自定义的逻辑创建bean，是一种能够生产其他bean的bean。FactoryBean在容器启动时被创建，而在实际使用时，通过调用getObject()方法来得到其所生产的bean。因此，FactoryBean可以自定义任何所需的初始化逻辑，生产出一些定制化的bean。<br>（2）<code>BeanFactory</code>：是Spring框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期、配置文件的加载和解析、bean的装配和依赖注入等。BeanFactory接口提供了访问bean的方式，例如getBean()方法获取指定的bean实例。它可以从不同的来源（例如Mysql数据库、XML文件、Java配置类等）获取bean定义，并将其转换为bean实例。同时，BeanFactory还包含很多子类（例如ApplicationContext接口）提供了额外的强大功能。<br>1、<code>BeanFactory</code>：是接口，位于<code>org.springframework.beans</code>包下，它是bean的一个工厂，它定义了各种获取bean的方法、判断bean是否存在、判断bean是否单例等针对bean的基础方法；<br>2、<code>ApplicationContext</code>：是接口，位于<code>org.springframework.context</code>包下，它就是springIOC容器，它继承了<code>BeanFactory</code>接口，查看源码可以看到它是先继承了<code>ListableBeanFactory</code>接口，再继承的<code>BeanFactory</code>接口，它负责实例化、配置、组装bean；<br>3、<code>ListableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，扩展了bean的查询方法，例如：根据类型获取beanNames、根据注解获取beanNames、根据bean获取注解；<br>4、<code>AutowireCapableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，提供了bean的创建、配置、注入、销毁等操作（<strong>注意</strong>：有时候我们需要自己手动注入bean的时候，可以考虑通过实现该接口来完成）；<br>5、<code>HierarchicalBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上添加了获取parent beanfactory的方法；<br>6、<code>SingletonBeanRegistry</code>：是接口，定义了对单例bean的定义以及获取方法；<br>7、<code>ConfigurableBeanFactory</code>：是接口，它继承了<code>SingletonBeanRegistry</code>接口和<code>HierarchicalBeanFactory</code>接口，它定义了针对<code>BeanFactory</code>的各种配置以及销毁方法；<br>8、<code>ConfigurableListableBeanFactory</code>：是接口，它继承了<code>ListableBeanFactory</code>接口、<code>AutowireCapableBeanFactory</code>接口和<code>ConfigurableBeanFactory</code>接口，它是<code>BeanFactory</code>的配置清单，这里定义了忽略的类型、接口，通过bean的名词获取BeanDefinition，冻结BeanDefinition等；<br>9、<code>AliasRegistry</code>（alias是别名）：是接口，它定义了对alias的注册、移除、判断以及查询操作；<br>10、<code>SimpleAliasRegistry</code>：是类，它实现了<code>AliasRegistry</code>接口中的所有方法，它还使用ConcurrentHashMap做载体，实现对alias的注册、移除、判断以及查询操作；<br>11、<code>DefaultSingletonBeanRegistry</code>：是类，它继承了<code>SimpleAliasRegistry</code>类，实现了<code>SingletonBeanRegistry</code>接口，这个类基于java中的集合，对<code>SingletonBeanRegistry</code>接口进行了实现；<br>12、<code>FactoryBeanRegistrySupport</code>：是类，继承了<code>DefaultSingletonBeanRegistry</code>类，在<code>DefaultSingletonBeanRegistry</code>的基础上，增加了获取FactoryBean类型、移除FactoryBean缓存的方法等；<br>13、<code>AbstractBeanFactory</code>：是类，继承了<code>FactoryBeanRegistrySupport</code>类，实现了<code>ConfigurableBeanFactory</code>接口；<br>14、<code>AbstractAutowireCapableBeanFactory</code>：是类，它继承了<code>AbstractBeanFactory</code>类，实现了<code>AutowireCapableBeanFactory</code>接口的所有方法；<br>15、<code>BeanDefinitionRegistry</code>：是接口，它继承了<code>AliasRegistry</code>接口，增加了一系列针对<code>BeanDefinition</code>的注册、移除、查询、判断等方法；<br>16、<code>DefaultListableBeanFactory</code>：是类，它继承了<code>AbstractAutowireCapableBeanFactory</code>类，实现了<code>BeanDefinitionRegistry</code>（定义了关于BeanDefinition的注册、移除、查询）、<code>ConfiguraListableBeanFactory</code>和<code>Serializable</code>（序列化接口）接口，它是bean工厂的一个默认实现类，提供了原始的BeanFactory的功能，如：对外提供getBean()方法，这个方法有两种方式获取bean，第一种方式是<code>AbstractBeanFactory</code>中提供的，根据名称获取bean；第二种方式是它自己的，根据类型获取bean（这种方式属于getBean方法的扩展）。<code>beanDefinitionMap</code>属性是beanDefinition信息表；<br>17、<code>InitializingBean</code><br>说明：是spring提供的扩展性接口，<code>InitializingBean</code>接口为bean提供了属性初始化后的处理方法，它只有一个方法，只要实现了该接口的类，所创建出来的bean，在bean初始化后都会执行该方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;构造方法执行&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterPropertiesSet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postConstruct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;@PostConstruct&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：输出优先级：构造方法执行 &gt; <span class=\"doctag\">@PostConstruct</span> &gt; afterPropertiesSet &gt; init</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造方法执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@PostConstruct</span></span></span><br><span class=\"line\"><span class=\"comment\"> * afterPropertiesSet</span></span><br><span class=\"line\"><span class=\"comment\"> * init</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> *  说明：</span></span><br><span class=\"line\"><span class=\"comment\"> *  在spring初始化bean的时候，如果该bean实现了InitializingBean接口，</span></span><br><span class=\"line\"><span class=\"comment\"> *  并且同时配置了init-method，系统则是先调用afterPropertieSet()方法，</span></span><br><span class=\"line\"><span class=\"comment\"> *  然后再调用init-method中指定的方法。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Springboot使用方法\"><a href=\"#二、Springboot使用方法\" class=\"headerlink\" title=\"二、Springboot使用方法\"></a>二、Springboot使用方法</h1><h3 id=\"1、要想在tomcat中启动项目\"><a href=\"#1、要想在tomcat中启动项目\" class=\"headerlink\" title=\"1、要想在tomcat中启动项目\"></a>1、要想在tomcat中启动项目</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要想在tomcat中使用war包启动springboot项目，首先 先继承 SpringBootServletInitializer</span></span><br><span class=\"line\">    <span class=\"comment\">//然后在使用下面的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title function_\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringbootApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在配置文件中配置静态资源\"><a href=\"#2、在配置文件中配置静态资源\" class=\"headerlink\" title=\"2、在配置文件中配置静态资源\"></a>2、在配置文件中配置静态资源</h3><p>默认的静态资源路径为：<br>1、<code>classpath:/static/</code><br>2、<code>classpath:/public/</code><br>3、<code>classpath:/resources/</code><br>4、<code>classpath:/META-INF/resources/</code>  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">    <span class=\"attr\">mvc:</span> </span><br><span class=\"line\">        <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span>  <span class=\"comment\">#修改静态资源访问路径，项目路径+/res/**</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> </span><br><span class=\"line\">        <span class=\"attr\">static-locations:</span> <span class=\"string\">classpath:/zuo</span>  <span class=\"comment\">#修改静态资源存放路径，修改之后只有将静态资源放到zuo目录下才能被访问到。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、springboot各种pom文件需要和学习指南地址\"><a href=\"#3、springboot各种pom文件需要和学习指南地址\" class=\"headerlink\" title=\"3、springboot各种pom文件需要和学习指南地址\"></a>3、springboot各种pom文件需要和学习指南地址</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#using-boot-starter\">springboot各种pom文件需要和学习指南地址</a></p>\n<h3 id=\"4、Springboot读配置的4种方式\"><a href=\"#4、Springboot读配置的4种方式\" class=\"headerlink\" title=\"4、Springboot读配置的4种方式\"></a>4、Springboot读配置的4种方式</h3><p>1、<code>@Value</code>注解<br><strong>使用该注解需要注意：</strong><br>（1）该类必须注入<code>spring</code>容器中，才能使用<code>@Value</code>注解获取配置文件中的数据。<br>（2）配置文件里必须有该属性，不然启动会报异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Value(&quot;$&#123;user.name:默认值&#125;&quot;) 为了不报异常，可以加默认值，如果是：&quot;$&#123;user.name:&#125;&quot;，表示值为&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 如果属性有static和final关键字的话是无法生效的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、<code>@ConfigurationProperties</code>注解<br>只需要指定配置文件中某一个key的前缀就可以了。例如：<br>（1）配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">demo:</span></span><br><span class=\"line\">    <span class=\"attr\">userName:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>（2）JavaDemo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;demo&quot;)</span> <span class=\"comment\">// 这里的命名规范：要么全小写，要么小写-小写（xxx-xxx）格式，不能下划线</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：使用<code>@ConfigurationProperties</code>注解，必须将bean给spring管理。  </p>\n<ol>\n<li>方法一：在配置类上使用<code>@EnableConfigurationProperties(&#123;Demo.class&#125;)</code>；  </li>\n<li>方法二：在实体类上使用<code>@Component</code>注解。</li>\n</ol>\n<p>3、通过<code>Environment</code>类动态获取（是spring底层提供的API）<br>（1）第一种实现方式，实现<code>EnvironmentAware</code>接口，重写<code>setEnvironment</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EnvironmentAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment e)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.env = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t    <span class=\"type\">String</span> <span class=\"variable\">var</span> <span class=\"operator\">=</span> env.getProperty(<span class=\"string\">&quot;demo.userName&quot;</span>);</span><br><span class=\"line\">\t    System.out.println(<span class=\"string\">&quot;从配置文件获取&quot;</span> + <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）第二种通过自动注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">var</span> <span class=\"operator\">=</span> env.getProperty(<span class=\"string\">&quot;demo.name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从配置文件获取&quot;</span> + <span class=\"keyword\">var</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以上三种是获取默认的配置文件，要想获取自定义的配置文件可以通过下面的方法：</strong>  </p>\n<ol>\n<li>默认的配置文件：<code>application</code>开头  </li>\n<li>自定义：<code>demo.properties</code></li>\n</ol>\n<p>4、<code>@PropertySource</code>注解<br>只能获取<code>properties</code>的配置文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySources(@PropertySource(value = &quot;classpath:demo.properties&quot;,encoding = &quot;utf-8&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要想获取yml的需要设置配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyYmlConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlacehokderConfigurer <span class=\"title function_\">yamlConfigurer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PropertySourcesPlacehokderConfigurer</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertySourcesPlacehokderConfigurer</span>();</span><br><span class=\"line\">        <span class=\"type\">YamlPropertiesFactory</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">YamlPropertiesFactory</span>();</span><br><span class=\"line\">        y.setResources(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathResource</span>(<span class=\"string\">&quot;demo.yml&quot;</span>));</span><br><span class=\"line\">        p.setProperties(Objects.requireNonNull(y.getObject()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就可以通过第一种方式@Value注解获取。  </p>\n<h3 id=\"5、Springboot获取bean对象方法\"><a href=\"#5、Springboot获取bean对象方法\" class=\"headerlink\" title=\"5、Springboot获取bean对象方法\"></a>5、Springboot获取bean对象方法</h3><p>1、启动获取<code>ApplicationContext</code><br>在项目启动时先获取 <code>ApplicationContext</code> 对象，然后将其存储在一个地方，以便后续用到时进行使用。<br>这里提供两种场景的获取：<br>（1）基于 <code>xml</code> 配置 <code>bean</code> 的形式，适用于比较古老的项目，已经很少使用了；<br>（2）基于 <code>SpringBoot</code> 启动时获取 <code>ApplicationContext</code> 对象；<br><strong>基于 xml 的形式实现：</strong><br>其中<code>applicationContext.xml</code> 为配置容器的<code>xml</code>，不过现在一般很少使用了。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileSystemXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里等于直接初始化容器，并且获得容器的引用。这种方式适用于采用 <code>Spring</code> 框架的独立应用程序，需要程序通过配置文件手工初始化 <code>Spring</code> 的情况。目前大多数 <code>Spring</code> 项目已经不再采用 <code>xml</code> 配置，很少使用了。<br><strong>基于 SpringBoot 启动实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启动时，保存上下文，并保存为静态</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> SpringApplication.run(ExampleApplication.class, args);</span><br><span class=\"line\">        SpringContextUtil.setApplicationContext(ac);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对应的 SpringContextUtil 类如下：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext ac;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String beanName, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(beanName, clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span>&#123;</span><br><span class=\"line\">        ac = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种方式都是在启动 <code>Spring</code> 项目时，直接获取到 <code>ApplicationContext</code> 的引用，然后将其存储到工具类当中。在使用时，则从工具类中获取 <code>ApplicationContext</code> 容器，进而从中获得 <code>Bean</code> 对象。</p>\n<p>2、通过继承<code>ApplicationObjectSupport</code><br>此种方式依旧是先获得 <code>ApplicationContext</code> 容器，然后从中获取 <code>Bean</code> 对象，只不过是基于继承 <code>ApplicationObjectSupport</code> 类实现的，具体实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationObjectSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ac == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ac.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这里的 <code>SpringContextUtil</code> 类需要实例化。<br><code>ApplicationObjectSupport</code> 类图，我们看到它实现了 <code>ApplicationContextAware</code> 接口，在 <code>Spring</code> 容器初始化过程中回调方法 <code>setApplicationContext</code> 来完成 <code>ApplicationContext</code> 的赋值。</p>\n<p>3、通过继承<code>WebApplicationObjectSupport</code><br><code>WebApplicationObjectSupport</code> 是 <code>ApplicationObjectSupport</code> 的一个实现类，提供了 <code>Web</code> 相关的支持。实现原理与 <code>ApplicationObjectSupport</code> 一样，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebApplicationObjectSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ac == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ac.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过类图我们可以看到它是 <code>ApplicationObjectSupport</code> 的实现子类，此方式除了继承对象不同外，没有其他区别，都是基于 <code>getApplicationContext</code> 方法来获取。</p>\n<p>4、通过<code>WebApplicationContextUtils</code><br>Spring提供了工具类<code>WebApplicationContextUtils</code>，通过该类可获取<code>WebApplicationContext</code>对象，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(ServletContext request, String name, Class&lt;T&gt; clazz)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 或者 WebApplicationContext webApplicationContext1 = WebApplicationContextUtils.getWebApplicationContext(request);</span></span><br><span class=\"line\">        <span class=\"type\">WebApplicationContext</span> <span class=\"variable\">webApplicationContext</span> <span class=\"operator\">=</span> WebApplicationContextUtils.getRequiredWebApplicationContext(request);</span><br><span class=\"line\">        <span class=\"comment\">// webApplicationContext1.getBean(name, clazz)</span></span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> webApplicationContext.getBean(name, clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法很常见于 <code>SpringMVC</code> 构建的 Web 项目中，适用于 Web 项目的 B&#x2F;S 结构。</p>\n<p>5、通过<code>ApplicationContextAware</code><br>通过实现<code>ApplicationContextAware</code>接口，在Spring容器启动时将<code>ApplicationContext</code>注入进去，从而获取<code>ApplicationContext</code>对象，这种方法也是常见的获取Bean的一种方式，推荐使用，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext ac;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        ac = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式与前面通过 <code>BeanFactoryAware</code> 获得 <code>BeanFactory</code> 的思路一致。</p>\n<p>6、通过<code>ContextLoader</code><br>使用 <code>ContextLoader</code> 提供的 <code>getCurrentWebApplicationContext</code> 方法，也是常用的获取 <code>WebApplicationContext</code> 的一种方法，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">WebApplicationContext</span> <span class=\"variable\">wac</span> <span class=\"operator\">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class=\"line\">wac.getBean(beanID);</span><br></pre></td></tr></table></figure>\n<p>该方法常见于 SpringMVC 实现的 Web 项目中。该方式是一种不依赖于 Servlet，不需要注入的方式。但是需要注意一点，在服务器启动时和 Spring 容器初始化时，不能通过该方法获取 Spring 容器。</p>\n<p>7、通过<code>BeanFactoryPostProcessor</code><br>Spring 工具类，方便在非 Spring 管理环境中获取 Bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringUtils</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryPostProcessor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Spring应用上下文环境 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        SpringUtilsS.beanFactory = beanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) beanFactory.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取类型为requiredType的对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> clz</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clz)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T) beanFactory.getBean(clz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">containsBean</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.containsBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.isSingleton(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> Class 注册对象的类型</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getType(String name) <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.getType(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果给定的bean名字在bean定义中有别名，则返回这些别名</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] getAliases(String name) <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.getAliases(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取aop代理对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> invoker</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getAopProxy</span><span class=\"params\">(T invoker)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) AopContext.currentProxy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 ConfigurableListableBeanFactory 接口，也属于 BeanFactory 的子接口。</p>\n<h3 id=\"6、怎么使用好springboot自动配置\"><a href=\"#6、怎么使用好springboot自动配置\" class=\"headerlink\" title=\"6、怎么使用好springboot自动配置\"></a>6、怎么使用好springboot自动配置</h3><p>1、选场景：<code>spring-boot-starter-data-redis</code><br>然后找到这个场景的自动配置类 <code>xxxAutoConfiguration</code><br>2、写配置<br>在这个自动配置类中，找到 <code>@EnableConfigurationProperties(xxxProperties.class)</code> 分析开启了哪些属性绑定关系,修改redis相关的配置<br>3、分析组件<br>在 <code>xxxAutoConfiguration</code> 这个自动配置类中分析，因为有两个方法，表示这个自动配置类给容器中放了两个组件，有一个组件（方法）叫 <code>stringRedisTemplate</code> ，然后去业务代码中使用自动装配注解装配这个方法。（使用组件的前提是，知道这个组件是干嘛的）<br>4、定制化（如果不满足需求，需要定制化）<br>自定义组件，自己写一个 <code>stringRedisTemplate</code> 方法，并放到容器中（自动配置类中的 <code>stringRedisTemplate</code> 这个方法上面标注了 <code>@ConditionalOnMissingBean</code>，这个注解的作用就是如果我们自己写了下面的方法，则这个自动配置类就不加载这个方法，容器中使用我们自己自定义的方法。）<br>5、例子：自定义starter启动类<br>（1）步骤：  </p>\n<ul>\n<li>创建 aliyun-oss-spring-boot-starter 模块。（只负责依赖管理）  </li>\n<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块</li>\n<li>在 aliyun-oss-spring-boot-autoconfigure 模块中定义自动配置功能，并定义自动配置文件 META-INF&#x2F;spring&#x2F;xxx.imports （老版本的为 META-INF&#x2F;spring.factories）</li>\n</ul>\n<p>（2）实例（对应上面的步骤）  </p>\n<ol>\n<li>创建 aliyun-oss-spring-boot-starter 模块：<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot2.jpg\" class=\"\">\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot3.jpg\" class=\"\">\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot4.jpg\" class=\"\"></li>\n<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块，pom文件同上：<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot5.jpg\" class=\"\">\n注意：没有启动类、配置文件、测试类。</li>\n</ol>\n<ul>\n<li>在步骤<code>1.</code>创建的模块pom文件中加入步骤<code>2.</code>创建的模块依赖：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPDHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在步骤<code>2.</code>创建的模块pom文件中引入oss依赖：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.15.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.activation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>activation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.jaxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-runtime<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在<code>2.</code>模块中创建 <code>AliOSSProperties</code> 类 和 <code>AliOSSUtils</code> 类：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String endpoint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKeyId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKeySecret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bucketName;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get 和 set 方法.....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSUtils</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> AliOSSProperties aliOSSProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// aliOSSProperties 的get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSProperties <span class=\"title function_\">getAliOSSProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aliOSSProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// aliOSSProperties 的set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSProperties <span class=\"title function_\">setAliOSSProperties</span><span class=\"params\">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.aliOSSProperties = aliOSSProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">endpoint</span> <span class=\"operator\">=</span> aliOSSProperties.getEndpoint();</span><br><span class=\"line\">        String accessKeyId= aliOSSProperties.getAccessKeyId();</span><br><span class=\"line\">        String accessKeySecret= aliOSSProperties.getAccessKeySecret();</span><br><span class=\"line\">        String bucketName= aliOSSProperties.getBcketName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取上传的文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">InputStrem</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> file.getInputStream();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 避免文件名重复导致被覆盖</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> UUID.randomUUID().toString() + originalFileName.substring(originalFileName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 上传文件到OSS</span></span><br><span class=\"line\">        <span class=\"type\">OSS</span> <span class=\"variable\">ossClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OSSClientBuilder</span>().build(endpoint,accessKeyId,accessKeySecret);</span><br><span class=\"line\">        ossClient.putObject(bucketName,fileName,inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拼接文件访问路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> endpoint.split(<span class=\"string\">&quot;//&quot;</span>)]<span class=\"number\">0</span>] + <span class=\"string\">&quot;//&quot;</span> + bucketName + <span class=\"string\">&quot;.&quot;</span> + endpoint.split(<span class=\"string\">&quot;//&quot;</span>)[<span class=\"number\">1</span>] + <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭ossClient</span></span><br><span class=\"line\">        ossClient.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在<code>2.</code>模块中创建 AliOSSAutoConfiguration 配置类：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(AliOSSProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSUtils <span class=\"title function_\">aliOSSUtils</span><span class=\"params\">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliOSSUtils</span> <span class=\"variable\">aliOSSUtils</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliOSSUtils</span>();</span><br><span class=\"line\">        aliOSSUtils.setAliOSSProperties(aliOSSProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aliOSSUtils;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>在 <code>aliyun-oss-spring-boot-autoconfigure</code> 模块中定义自动配置功能，并定义自动配置文件 <code>META-INF/spring/xxx.imports</code> （老版本的为 <code>META-INF/spring.factories</code>）</li>\n</ol>\n<ul>\n<li>在<code>2.</code>模块的<code>resource</code>目录下创建文件夹 <code>META-INF</code>，继续在<code>META-INF</code>文件夹下创建<code>spring</code>文件夹，继续在<code>spring</code>文件夹下创建：<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</li>\n<li>将 <code>AliOSSAutoConfiguration</code> 类的全类名填入<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中</li>\n</ul>\n<h3 id=\"7、springboot多环境配置\"><a href=\"#7、springboot多环境配置\" class=\"headerlink\" title=\"7、springboot多环境配置\"></a>7、springboot多环境配置</h3><p>1、<code>properties</code>文件<br>将应用程序的配置参数分离到不同的<code>properties</code>文件中，每个环境对应一个<code>properties</code>文件。例如，可以创建<code>application-dev.properties</code>、<code>application-prod.properties</code>和<code>application-test.properties</code>等文件，在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等，然后在<code>application.properties</code>中通过<code>spring.profiles.active</code>属性指定当前使用的环境，springboot会根据该属性来加载对应环境的<code>properties</code>文件，覆盖默认的配置。<br>2、<code>yml</code>文件<br>同<code>properties</code>文件。<br>3、命令行参数（动态）<br>可以通过命令行参数来指定当前的环境，例如，使用<code>--spring.profiles.active=dev</code>来指定使用开发环境。  </p>\n<h3 id=\"8、springboot打包插件\"><a href=\"#8、springboot打包插件\" class=\"headerlink\" title=\"8、springboot打包插件\"></a>8、springboot打包插件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、Springboot其他组件\"><a href=\"#三、Springboot其他组件\" class=\"headerlink\" title=\"三、Springboot其他组件\"></a>三、Springboot其他组件</h1><h3 id=\"1、全局异常处理器\"><a href=\"#1、全局异常处理器\" class=\"headerlink\" title=\"1、全局异常处理器\"></a>1、全局异常处理器</h3><p>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">ex</span><span class=\"params\">(Exception ex)</span>&#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、过滤器和拦截器\"><a href=\"#2、过滤器和拦截器\" class=\"headerlink\" title=\"2、过滤器和拦截器\"></a>2、过滤器和拦截器</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>说明：过滤器是在浏览器发送请求到服务器（<code>DispatchServlet</code>）之前，而拦截器是在<code>handlerAdpater</code>与<code>handler</code>之间，以及视图返回到<code>DispatchServlet</code>之间。<br>1、过滤器<br><code>Filter</code>快速入门（是<code>javax.servlet</code>下的）：<br>（1）定义<code>Filter</code><br>定义一个类，实现<code>Filter</code>接口，并重写其所有方法。<br>（2）配置<code>Filter</code><br><code>Filter</code>类上加<code>@WebFilter</code>注解，配置拦截资源的路径，启动类上加<code>@ServletComponentScan</code>开启<code>Servlet</code>组件支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// urlPatterns ：要拦截什么样的请求，&quot;/*&quot;表示所有</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化方法，Web服务器启动，创建Filter时调用，只调用一次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span>&#123;</span><br><span class=\"line\">        Filter.<span class=\"built_in\">super</span>.init(filterConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截到请求时，调用该方法，可调用多次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request,ServletResponse response,FilterChain chain)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 放行</span></span><br><span class=\"line\">        chain.doFilter(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁方法，服务器关闭时调用，只调用一次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Filter.<span class=\"built_in\">super</span>.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、拦截器<br><code>Interceptor</code>快速入门：<br>（1）介绍<br><code>HandlerInterceptor</code>是Spring框架中的一个接口，它用于实现拦截器。在Spring框架中，拦截器是一种特殊的中间件，用于在请求处理之前或之后执行一些特定的操作。<code>HandlerInterceptor</code>口定义了三个方法：<code>preHandle()</code>、<code>postHandle()</code>和<code>afterCompletion()</code>，分别用于在请求处理之前、之后以及视图渲染之后执行一些操作。<br>实现<code>HandlerInterceptor</code>接口的类可以用于处理请求和响应，例如：  </p>\n<ol>\n<li>在请求处理之前执行一些操作，例如权限验证、日志记录等；  </li>\n<li>在请求处理之后执行一些操作，例如处理异常、记录日志等；  </li>\n<li>在视图渲染之后执行一些操作，例如清理资源、关闭连接等。</li>\n</ol>\n<p>要使用<code>HandlerInterceptor</code>接口，需要将其实现类注册到Spring容器中。可以通过实现<code>WebMvcConfigurer</code>接口的<code>addInterceptors()</code>方法来注册拦截器。<br>（2）实现方式<br>有两种方式（选择其中之一就可）：  </p>\n<ol>\n<li>方式一：定义一个类，实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口；  </li>\n<li>方式二：定义一个类，继承已实现了<code>HandlerInterceptor</code>接口的类，例如<code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</code>抽象类。</li>\n</ol>\n<p>然后添加<code>Interceptor</code>拦截器到<code>WebMvcConfigurer</code>配置器中，以前一般继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter</code>类，不过SrpingBoot 2.0以上<code>WebMvcConfigurerAdapter</code>类就过时了。有以下两种替代方法：  </p>\n<ul>\n<li>第一种方式：直接实现<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurer</code>接口（推荐）；  </li>\n<li>第二种方式：继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</code>类，但是继承<code>WebMvcConfigurationSupport</code>会让SpringBoot对mvc的自动配置失效，不过目前大多数项目是前后端分离，并没有对静态资源有自动配置的需求，所以继承<code>WebMvcConfigurationSupport</code>也未尝不可。</li>\n</ul>\n<p>（3）实现步骤  </p>\n<ol>\n<li>定义拦截器<br>实现<code>HandlerInterceptor</code>接口，并重写其所有方法。  </li>\n<li>注册拦截器  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginCheckInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标资源方法执行前执行，返回true：放行；返回false：不放行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 预处理，在业务处理器处理请求之前被调用，可以进行登录拦截，编码处理、安全控制、权限校验等处理；</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 目标资源方法执行后执行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 后处理，在业务处理器处理请求执行完成后，生成视图之前被调用。即调用了Service并返回ModelAndView，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 但未进行页面渲染，可以修改ModelAndView，这个比较少用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler,ModelAndView modelAnd View)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//  视图渲染完毕后执行，最后执行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回处理，在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。已经渲染了页面。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler,Exception ex)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子一：实现<code>HandlerInterceptor</code>接口<br>说明：此拦截器演示了通过注解形式，对用户权限进行拦截校验。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.annotation.UserAuthenticate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContextManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestAPIError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPermissionInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextManager userContextManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContextManager</span><span class=\"params\">(UserContextManager userContextManager)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userContextManager = userContextManager;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor preHandle -- &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod) &#123;</span><br><span class=\"line\">      <span class=\"type\">HandlerMethod</span> <span class=\"variable\">handlerMethod</span> <span class=\"operator\">=</span> (HandlerMethod) handler;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取用户权限校验注解(优先获取方法，无则再从类获取)</span></span><br><span class=\"line\">      <span class=\"type\">UserAuthenticate</span> <span class=\"variable\">userAuthenticate</span> <span class=\"operator\">=</span></span><br><span class=\"line\">          handlerMethod.getMethod().getAnnotation(UserAuthenticate.class);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == userAuthenticate) &#123;</span><br><span class=\"line\">        userAuthenticate = handlerMethod.getMethod().getDeclaringClass()</span><br><span class=\"line\">            .getAnnotation(UserAuthenticate.class);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (userAuthenticate != <span class=\"literal\">null</span> &amp;&amp; userAuthenticate.permission()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取用户信息</span></span><br><span class=\"line\">        <span class=\"type\">UserContext</span> <span class=\"variable\">userContext</span> <span class=\"operator\">=</span> userContextManager.getUserContext(request);</span><br><span class=\"line\">        <span class=\"comment\">// 权限校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userAuthenticate.type() != userContext.getType()) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如若不抛出异常，也可返回false</span></span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">      ModelAndView modelAndView)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor postHandle -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor afterCompletion -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子二：继承<code>HandlerInterceptorAdapter</code>类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPermissionInterceptorAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HandlerInterceptorAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter preHandle -- &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">      ModelAndView modelAndView)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter postHandle -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter afterCompletion -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>添加拦截器配置<br>方法一：实现<code>WebMvcConfigurer</code>接口（推荐）  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebWvcConfigure</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法一例子：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContextResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebAppConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextResolver userContextResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserPermissionInterceptor</span><span class=\"params\">(UserPermissionInterceptor userPermissionInterceptor)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userPermissionInterceptor = userPermissionInterceptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserPermissionInterceptorAdapter</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      UserPermissionInterceptorAdapter userPermissionInterceptorAdapter)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userPermissionInterceptorAdapter = userPermissionInterceptorAdapter;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserContextResolver</span><span class=\"params\">(UserContextResolver userContextResolver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userContextResolver = userContextResolver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class=\"line\">    <span class=\"comment\">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// 多个拦截器可以设置order顺序，值越小，preHandle越先执行，postHandle和afterCompletion越后执行</span></span><br><span class=\"line\">    <span class=\"comment\">// order默认的值是0，如果只添加一个拦截器，可以不显示设置order的值</span></span><br><span class=\"line\">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">        .excludePathPatterns(<span class=\"string\">&quot;/base/index&quot;</span>).order(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;).order(1);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class=\"line\">    resolvers.add(userContextResolver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法二：继承<code>WebMvcConfigurationSupport</code>类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebAppConfigurerSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">  <span class=\"comment\">// private UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class=\"line\">    <span class=\"comment\">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class=\"line\">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">        .excludePathPatterns(<span class=\"string\">&quot;/base/index&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n（4）其他主要辅助类  </li>\n<li>用户上下文类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.ToString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContext</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用户名称</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">// 用户ID</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\">  <span class=\"comment\">// 用户类型</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> AuthenticationTypeEnum type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>用户上下文操作类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestAPIError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.Cookie;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContextManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">COOKIE_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;__userToken&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">  <span class=\"comment\">// private RedisService redisService;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 获取用户上下文信息</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> UserContext <span class=\"title function_\">getUserContext</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userToken</span> <span class=\"operator\">=</span> getUserToken(request, COOKIE_KEY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.isEmpty(userToken)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 从缓存或者第三方获取用户信息</span></span><br><span class=\"line\">      <span class=\"comment\">// String userContextStr = redisService.getString(userToken);</span></span><br><span class=\"line\">      <span class=\"comment\">// if (!StringUtils.isEmpty(userContextStr)) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">// return JSON.parseObject(userContextStr, UserContext.class);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// 因为演示，没集成Redis，故简单new对象</span></span><br><span class=\"line\">      <span class=\"type\">UserContext</span> <span class=\"variable\">userContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserContext</span>();</span><br><span class=\"line\">      userContext.setName(<span class=\"string\">&quot;Mr.nobody&quot;</span>);</span><br><span class=\"line\">      userContext.setUserId(<span class=\"string\">&quot;0000001&quot;</span>);</span><br><span class=\"line\">      userContext.setType(AuthenticationTypeEnum.ADMIN);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> userContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserToken</span><span class=\"params\">(HttpServletRequest request, String cookieKey)</span> &#123;</span><br><span class=\"line\">    Cookie[] cookies = request.getCookies();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != cookies) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(cookie.getName(), cookieKey)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> cookie.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 保存用户上下文信息</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> userContextStr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUserContext</span><span class=\"params\">(HttpServletResponse response, String userContextStr)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户token实际根据自己业务进行生成，此处简单用UUID</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userToken</span> <span class=\"operator\">=</span> UUID.randomUUID().toString();</span><br><span class=\"line\">    <span class=\"comment\">// 设置cookie</span></span><br><span class=\"line\">    <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(COOKIE_KEY, userToken);</span><br><span class=\"line\">    cookie.setPath(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    response.addCookie(cookie);</span><br><span class=\"line\">    <span class=\"comment\">// redis缓存</span></span><br><span class=\"line\">    <span class=\"comment\">// redisService.setString(userToken, userContextStr, 3600);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方法参数解析器类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.MethodParameter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  对有UserContext参数的接口，进行拦截注入用户信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContextResolver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextManager userContextManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">      NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; resolveArgument -- begin...&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存获取用户信息赋值到接口参数中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userContextManager.getUserContext(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 只对UserContext参数进行拦截赋值</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> methodParameter</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter methodParameter)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (methodParameter.getParameterType().equals(UserContext.class)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n（5）拦截路径  </li>\n<li><code>/*</code> ：能匹配 <code>/dept、/emps、/login</code>，不能匹配 <code>/dept/list</code>。  </li>\n<li><code>/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。  </li>\n<li><code>/dept/*</code> ：能匹配 <code>/dept/list</code>，不能匹配 <code>/dept/list/find、/dept</code>。  </li>\n<li><code>/dept/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。</li>\n</ol>\n<p>（6）多个拦截器执行顺序  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>上面这个图是每个拦截器都放行的情况下。<br>如果其中一个拦截器不放行，那所有的<code>postHandle</code>都不会执行，然后不放行的拦截器中的<code>afterCompletion</code>不会执行，其他的拦截器的<code>afterCompletion</code>会执行。例如：拦截器3不放行，那么执行的方法为：<code>拦截器1的preHandle</code>-》<code>拦截器2的preHandle</code>-》<code>拦截器3的preHandle</code>-》<code>拦截器2的afterCompletion</code>-》<code>拦截器1的afterCompletion</code>。<br>总结就是：  </p>\n<ol>\n<li>只有所有拦截器都放行了，postHandle方法才会执行。  </li>\n<li>只有当前拦截器放行了，当前拦截器的afterCompletion方法才会执行。</li>\n</ol>\n<p>3、过滤器和拦截器的区别<br>（1）执行流程  </p>\n<ol>\n<li>浏览器发送请求  </li>\n<li><code>Filter</code>过滤器  </li>\n<li><code>DispatcherServlet</code>  </li>\n<li><code>Interceptor</code>拦截器  </li>\n<li><code>Controller</code></li>\n</ol>\n<p>（2）区别  </p>\n<ol>\n<li>接口规范不同<br><code>Filter</code>过滤器需要实现<code>Filter</code>接口，而拦截器需要实现<code>HandlerInterceptor</code>接口。  </li>\n<li>拦截范围不同<br>过滤器<code>Filter</code>会拦截所有的资源，而<code>Interceptor</code>只会拦截spring环境中的资源。  </li>\n<li>拦截器是<code>spring</code>中的，只能作用于<code>DispatcherServlet</code>，过滤器是<code>servlet</code>。  </li>\n<li>拦截器基于java反射机制，过滤器基于函数回调。  </li>\n<li>拦截器只对<code>action</code>请求起作用，过滤器几乎所有请求都起作用。  </li>\n<li>拦截器可以多次被调用，过滤器只能在初始化的时候被调用一次。</li>\n</ol>\n<h3 id=\"3、热部署\"><a href=\"#3、热部署\" class=\"headerlink\" title=\"3、热部署\"></a>3、热部署</h3><p>1、使用 jrebel 插件<br>编写玩代码后，使用 <code>jrebel</code> 这个插件自带的启动按钮启动，然后每次编写玩都按 <code>ctrl + f9</code> 使用热部署。</p>\n<p>2、设置IDEA热部署<br>设置后，我们就不用频繁的去手动重启，它会自动刷新。就是写好代码后，在IDEA中按<code>ctrl + F9</code>，再去浏览器刷新。如果不想按<code>ctrl + F9</code>，也可以这样设置，先设置，<code>Settings ---&gt; Build ---&gt; Compiler</code>，设置自动编译（<code>Builed project automatically</code>勾选），然后<code>ctrl + shift + alt + /</code>，点击<code>Registry</code>，勾选<code>compiler.automake.allow.app.running</code>。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Springboot使用过程中遇到的问题合集\"><a href=\"#四、Springboot使用过程中遇到的问题合集\" class=\"headerlink\" title=\"四、Springboot使用过程中遇到的问题合集\"></a>四、Springboot使用过程中遇到的问题合集</h1><h3 id=\"1、springboot自动注入问题\"><a href=\"#1、springboot自动注入问题\" class=\"headerlink\" title=\"1、springboot自动注入问题\"></a>1、springboot自动注入问题</h3><p>1、使用了<code>@Component</code>注解还是无法获取到<code>bean</code>对象<br>原因：是因为<code>springboot</code>扫描器没有扫描到，默认扫描<code>springboot</code>启动类同级的包。<br>（1）解决方法一：需要到<code>springboot</code>启动类上加上包扫描注解<code>@ComponentScan</code>，而且不止要扫描需要扫描的包，还要扫描原来<code>springboot</code>启动类同级的包：<code>@ComponentScan(&#123;&quot;xxx.xxx.xxx&quot;,&quot;yyy.yyy.yyy&#125;)</code>。<br>（2）解决方法二：在<code>springboot</code>启动类上使用<code>@Import</code>注解，例子：<code>@Import(&#123;Demo1.class,Demo2.class&#125;)</code>，大括号里的<code>class</code>是需要被扫描到的类（不需要使用任何注解的普通类）。<br>（3）解决方法三：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在启动类上使用<code>@Import</code>注解，将这个配置类导入。例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo1 <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo1</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo2 <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo2</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动类</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DemoConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）解决方法四：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在新建一个选择器类实现<code>ImportSelector</code>接口，实现这个接口的方法，在这个方法中，将配置类返回，然后将这个选择器类在启动类上使用<code>@Import</code>注解导入，例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo1 <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// 需要扫描的类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo1</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo2 <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// 需要扫描的类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo2</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择器类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoSelect</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;xxx.xxx.DemoConfig&quot;</span>&#125;; <span class=\"comment\">// 上面的配置类包路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动类</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DemoSelect.class&#125;)</span>  <span class=\"comment\">// 将上面选择器类导入</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong><br>上面的方法太繁琐了，一般需要扫描的包中会提供给我们一个注解<code>@EnableXXXX</code>注解，这个注解封装了上面使用到<code>@Import</code>和<code>@ImportSelector</code>注解，我们直接在启动类上使用<code>@EnableXXXX</code>注解就可以了。<br><strong>进阶：</strong><br>关于选择器类修改，如果存在多个配置类，不可能全写在这里，可以使用下面的方法。<br>（1）在<code>resources</code>目录下新建<code>import.properties</code>文件，将需要导入的所有配置类全路径都填入。  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">className</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">xxx.xxx.DemoConfig,\\</span></span><br><span class=\"line\"><span class=\"string\">xxx.xxx.DemoConfig2</span></span><br></pre></td></tr></table></figure>\n<p>（2）修改选择器类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoSelect</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata i)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取配置文件中的所有类型</span></span><br><span class=\"line\">\t\t<span class=\"type\">ResourceBundle</span> <span class=\"variable\">rb</span> <span class=\"operator\">=</span> ResourceBundle.getBundle(<span class=\"string\">&quot;import&quot;</span>); <span class=\"comment\">// 对应import.properties前缀</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> rb.getString(<span class=\"string\">&quot;className&quot;</span>);</span><br><span class=\"line\">\t\tString[] classNames = className.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> classNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 新版才有这个，为true就排除，className对应selectImports返回值中的一个类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * 作用是：针对上面selectImports方法中的类，排除不需要导入的类</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Predicate&lt;String&gt; <span class=\"title function_\">getExclusionFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (className) -&gt; className.contains(<span class=\"string\">&quot;DemoConfig&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常\"><a href=\"#2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常\" class=\"headerlink\" title=\"2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常\"></a>2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常</h3><p>1、说明：<br>（1）一个方法中只能有一个<code>@RequestBody</code>注解，因为<code>RequestBody</code>就是<code>request</code>的<code>inputStream</code>，这个流在第一次使用该注解后会关闭，后面的都会报错（stream closed）；<br>（2）默认情况下<code>@RequestBody</code>标注的对象必须包含前台传来的所有字段，如果没有包含前台传来的字段，就会报错：<code>Unrecognized field xxx , not marked as ignorable</code>，这是因为<code>MappingJacksonHttpMessageConverter</code>默认要求必须存在相应的字段，如果没有前台传来的某个字段，就会报错。<br>2、解决前端请求多余字段转换报错问题<br>（1）第一种：后端实体类可以增加一个字段来接收前台传来的这个值。<br>（2）第二种：在前端往后端传值的时候，去掉无用的字段，这样还能减少网络传输的大小。<br>（3）第三种：使用<code>com.fasterxml.jackson</code>提供的json注解  </p>\n<ul>\n<li><code>@JsonIgnore</code>注解用来忽略某些字段，可以用在Field或者Getter方法上，用在Setter方法时，和Filed效果一样。  </li>\n<li><code>@JsonIgnoreProperties(ignoreUnknown = true)</code>，将这个注解写在类上之后，就会忽略类中不存在的字段。  </li>\n<li><code>@JsonIgnoreProperties(&#123; &quot;internalId&quot;, &quot;secretKey&quot; &#125;)</code>，指定要忽略的字段，用在类上。<br>例子：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实体类</span></span><br><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Myclass &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n（4）第四种：重写配置类方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title function_\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"comment\">//添加此配置</span></span><br><span class=\"line\">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        converter.setObjectMapper(objectMapper);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3、有关对象属性中有枚举list怎么传参\"><a href=\"#3、有关对象属性中有枚举list怎么传参\" class=\"headerlink\" title=\"3、有关对象属性中有枚举list怎么传参\"></a>3、有关对象属性中有枚举list怎么传参</h3><p>1、实体类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageScanningScheme</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;ImageScanningRuleEnum&gt; rule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ImageScanningRuleEnum</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LOW(<span class=\"string\">&quot;LOW&quot;</span>, <span class=\"string\">&quot;较低&quot;</span>),</span><br><span class=\"line\">    HIGH(<span class=\"string\">&quot;HIGH&quot;</span>, <span class=\"string\">&quot;高危&quot;</span>),</span><br><span class=\"line\">    MEDIUM(<span class=\"string\">&quot;MEDIUM&quot;</span>, <span class=\"string\">&quot;中危&quot;</span>),</span><br><span class=\"line\">    CRITICAL(<span class=\"string\">&quot;CRITICAL&quot;</span>, <span class=\"string\">&quot;严重&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String text;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ImageScanningRuleEnum(String code, String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.text = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、前端（postman）传参</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;rule&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;LOW&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;MEDIUM&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;HIGH&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;CRITICAL&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、事务失效问题\"><a href=\"#4、事务失效问题\" class=\"headerlink\" title=\"4、事务失效问题\"></a>4、事务失效问题</h3><p><a href=\"https://www.cnblogs.com/likeguang/p/15715702.html\">完整详情链接</a><br>1、场景一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\ta();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：因为<code>test</code>方法被<code>@Transactional</code>标注，事务又是基于<code>aop</code>实现的，所以<code>UserService</code>的代理类执行<code>test</code>方法，<code>a</code>方法也被<code>@Transactional</code>标注，并且传播方式为：如果已经存在了一个事务就抛出异常；很明显，已经存在一个事务，所以正常情况会抛出异常，但是现在不会，因为事务失效了。<br>原因：<code>test</code>方法中执行<code>a</code>方法，是<code>UserService</code>类本身去调用执行的，并不是它的代理类去调用执行，所以它失效了。<br>解决办法：<br>让它代理类去调用执行<code>a</code>方法，而不是它本身去调用执行。<br>（1）办法一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\tuserService.a();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）办法二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加注解防止报错</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加入后运行会报个错，需要你设置exposeProxy = true 在该类上加个注解</span></span><br><span class=\"line\">\t\t<span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService) AopContext.currentProxy();</span><br><span class=\"line\">\t\tuserService.a();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）办法三<br>将<code>a</code>方法提出去另一个类（<code>xxxService</code>）中，在由这个类来调用执行。  </p>\n<h3 id=\"5、关于配置类List对象映射到实体类问题\"><a href=\"#5、关于配置类List对象映射到实体类问题\" class=\"headerlink\" title=\"5、关于配置类List对象映射到实体类问题\"></a>5、关于配置类List对象映射到实体类问题</h3><p>1、实体类<br>实体类中的属性名称必须对应配置文件中list对象中属性的名称。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionPackageType</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String language;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、实体配置类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;detection-package-type&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionPackageTypeConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// packages必须对应配置文件中名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DetectionPackageType&gt; packages;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、yaml配置文件  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">detection-package-type:</span></span><br><span class=\"line\">  <span class=\"attr\">packages:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Java检测规则包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Css基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Css</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JavaScript基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">JavaScript</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Html基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Html</span></span><br></pre></td></tr></table></figure>\n<p>4、使用  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意：这里注入的是实体配置类！</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DetectionPackageTypeConfig detectionPackageTypeConfig;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、VO、DTO、BO、PO、DO的区别\"><a href=\"#6、VO、DTO、BO、PO、DO的区别\" class=\"headerlink\" title=\"6、VO、DTO、BO、PO、DO的区别\"></a>6、VO、DTO、BO、PO、DO的区别</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n\n\n<h3 id=\"7、链式调用\"><a href=\"#7、链式调用\" class=\"headerlink\" title=\"7、链式调用\"></a>7、链式调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">\t\ttest.test1().test2().test3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test3&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">test1</span></span><br><span class=\"line\">test2</span><br><span class=\"line\">test3</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8、替换-Autowired注解的方式\"><a href=\"#8、替换-Autowired注解的方式\" class=\"headerlink\" title=\"8、替换@Autowired注解的方式\"></a>8、替换@Autowired注解的方式</h3><p>使用lombok的<code>@RequiredArgsConstructor</code>注解。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的final必须和@RequiredArgsConstructor一起用</span></span><br><span class=\"line\">    <span class=\"comment\">// 不注入的话就不用加final，要注入才加final</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TestService testService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、需要在Springboot项目启动之后做某些操作\"><a href=\"#9、需要在Springboot项目启动之后做某些操作\" class=\"headerlink\" title=\"9、需要在Springboot项目启动之后做某些操作\"></a>9、需要在Springboot项目启动之后做某些操作</h3><p>1、CommandLineRunner和ApplicationRunner<br>使用 CommandLineRunner或ApplicationRunner 在应用启动时自动执行数据加载逻辑。这是最常见的实现方式。<br>（1）介绍<br>这两个是Springboot中新增的扩展点，之所以将这两个扩展点放在一起，是因为它两个功能特性高度相似，不同的只是名字、扩展方法形参数类型、执行先后的一些小的不同。<br>这两个接口触发时机为整个项目启动完毕后，自动执行。如果有多个CommandLineRunner，可以利用@Order来进行排序。<br>（2）注意  </p>\n<ul>\n<li>CommandLineRunner和ApplicationRunner都有一个扩展方法run()，但是run()形参数类型不同；  </li>\n<li>CommandLineRunner.run()方法的形参数类型是String… args，ApplicationRunner.run()的形参数类型是ApplicationArguments args；  </li>\n<li>CommandLineRunner.run()的执行时机要晚于ApplicationRunner.run()一点；  </li>\n<li>CommandLineRunner和ApplicationRunner触发执行时机是在Spring容器、Tomcat容器正式启动完成后，可以正式处理业务请求前，即项目启动的最后一步；  </li>\n<li>CommandLineRunner和ApplicationRunner可以应用的场景：项目启动前，热点数据的预加载、清除临时文件、读取自定义配置信息等。</li>\n</ul>\n<p>（3）使用场景<br><strong>初始化数据</strong>：使用 CommandLineRunner 可以在应用启动后初始化一些必要的数据，例如从数据库加载某些配置或插入初始数据。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;初始化数据：插入初始数据&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟插入初始数据</span></span><br><span class=\"line\">        insertInitialData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertInitialData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;插入数据：用户表初始数据&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>启动后执行任务</strong>：使用 CommandLineRunner 可以在应用启动后执行一些特定的任务，比如发送一个通知或启动一些背景任务。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TaskExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;启动后执行任务：发送启动通知&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟发送启动通知</span></span><br><span class=\"line\">        sendStartupNotification();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendStartupNotification</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;通知：应用已启动&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>读取命令行参数</strong>：使用 CommandLineRunner 可以获取并处理命令行参数，这对于需要根据启动参数动态配置应用的场景非常有用。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass CommandLineArgsProcessor <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理命令行参数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String arg : args) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;参数：&quot;</span> + arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(AppConfig.class, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;参数1&quot;</span>, <span class=\"string\">&quot;参数2&quot;</span>, <span class=\"string\">&quot;参数3&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、@PostConstruct<br>使用 @PostConstruct 注解 在服务类中通过 @Postconstruct 注解标记等初始化方法，在 Bean 创建后立即执行数据加载。<br>（1）介绍<br>可以看出来其本身不是Spring定义的注解，但是Spring提供了具体的实现。这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postProcessBeforeInitialization之后，InitializingBean.afterPropertiesSet之前。<br>（2）注意  </p>\n<ul>\n<li>使用@PostConstruct注解标记的方法不能有参数，除非是拦截器，可以采用拦截器规范定义的InvocationContext对象；  </li>\n<li>使用@PostConstruct注解标记的方法不能有返回值，实际上如果有返回值，也不会报错，但是会忽略掉；  </li>\n<li>使用@PostConstruct注解标记的方法不能被static修饰，但是final是可以的。</li>\n</ul>\n<p>（3）代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">publicclass CachePreloader &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;User&gt; users = userService.getAllFixedData(); <span class=\"comment\">// 从数据库获取数据</span></span><br><span class=\"line\">        users.forEach(user -&gt; </span><br><span class=\"line\">            redisTemplate.opsForValue().set(<span class=\"string\">&quot;user:&quot;</span> + user.getId(), user)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）使用场景<br>使用场景与 InitializingBean 类似，具体看下文的InitializingBean。  </p>\n<p>3、InitializingBean<br>（1）介绍<br>这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只在bean实例化、属性注入后的提供了一个扩展点afterPropertiesSet方法，凡是继承该接口的类，在初始前、属性赋值后，都会执行该方法。这个扩展点的触发时机在postProcessAfterInitialization之前。  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.jpg\" class=\"\">  \n<p>（2）注意  </p>\n<ul>\n<li>与InitializingBean#afterPropertiesSet()类似效果的是init-method，但是需要注意的是InitializingBean#afterPropertiesSet()执行时机要略早于init-method；  </li>\n<li>InitializingBean#afterPropertiesSet()的调用方式是在bean初始化过程中真接调用bean的afterPropertiesSet()；  </li>\n<li>bean自定义属性init-method是通过java反射的方式进行调用 。</li>\n</ul>\n<p>（3）使用场景<br><strong>初始化资源</strong>：可以在 Bean 初始化后自动启动一些资源，如数据库连接、文件读取等。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass ResourceInitializer <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟资源初始化</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;资源初始化：建立数据库连接&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">performAction</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;资源使用：执行数据库操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">ResourceInitializer</span> <span class=\"variable\">initializer</span> <span class=\"operator\">=</span> context.getBean(ResourceInitializer.class);</span><br><span class=\"line\">        initializer.performAction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>设置初始值</strong>：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass InitialValueSetter <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String initialValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        initialValue = <span class=\"string\">&quot;默认值&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;设置初始值：&quot;</span> + initialValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前值：&quot;</span> + initialValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">InitialValueSetter</span> <span class=\"variable\">valueSetter</span> <span class=\"operator\">=</span> context.getBean(InitialValueSetter.class);</span><br><span class=\"line\">        valueSetter.printValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>加载配置</strong>：可以在 Bean 初始化后加载必要的配置，如从文件或数据库中读取配置。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass ConfigLoader <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟配置加载</span></span><br><span class=\"line\">        configValue = <span class=\"string\">&quot;配置值&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加载配置：&quot;</span> + configValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前配置：&quot;</span> + configValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">ConfigLoader</span> <span class=\"variable\">configLoader</span> <span class=\"operator\">=</span> context.getBean(ConfigLoader.class);</span><br><span class=\"line\">        configLoader.printConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"10、SpringBoot公共字段自动填充\"><a href=\"#10、SpringBoot公共字段自动填充\" class=\"headerlink\" title=\"10、SpringBoot公共字段自动填充\"></a>10、SpringBoot公共字段自动填充</h3><p>1、方案一（前提使用<code>MybatisPlus</code>）<br>（1）配置元对象处理器  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass AutoFillHandler <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入时自动填充</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictInsertFill(metaObject, <span class=\"string\">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictInsertFill(metaObject, <span class=\"string\">&quot;createUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新时自动填充</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前用户（从安全上下文）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getCurrentUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(SecurityContextHolder.getContext())</span><br><span class=\"line\">                      .map(SecurityContext::getAuthentication)</span><br><span class=\"line\">                      .map(Authentication::getName)</span><br><span class=\"line\">                      .orElse(<span class=\"string\">&quot;system&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）实体类注解配置  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\">publicclass BaseEntity &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createUser;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateUser;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订单实体继承基类</span></span><br><span class=\"line\">publicclass Order <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务字段...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、方案二（AOP统一处理）<br>（1）自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoFill &#123;</span><br><span class=\"line\">    OperationType <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">OperationType</span> &#123;</span><br><span class=\"line\">    INSERT,</span><br><span class=\"line\">    UPDATE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）切面实现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\">publicclass AutoFillAspect &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(autoFill)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp, AutoFill autoFill)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arg <span class=\"keyword\">instanceof</span> BaseEntity) &#123;</span><br><span class=\"line\">                fillFields((BaseEntity) arg, autoFill.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pjp.proceed(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fillFields</span><span class=\"params\">(BaseEntity entity, OperationType type)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">currentUser</span> <span class=\"operator\">=</span> getCurrentUser();</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == OperationType.INSERT) &#123;</span><br><span class=\"line\">            entity.setCreateTime(now);</span><br><span class=\"line\">            entity.setCreateUser(currentUser);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        entity.setUpdateTime(now);</span><br><span class=\"line\">        entity.setUpdateUser(currentUser);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前用户（支持多线程环境）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getCurrentUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(RequestContextHolder.getRequestAttributes())</span><br><span class=\"line\">                      .map(attrs -&gt; (ServletRequestAttributes) attrs)</span><br><span class=\"line\">                      .map(ServletRequestAttributes::getRequest)</span><br><span class=\"line\">                      .map(req -&gt; req.getHeader(<span class=\"string\">&quot;X-User-Id&quot;</span>))</span><br><span class=\"line\">                      .orElse(<span class=\"string\">&quot;system&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、ImportBeanDefinitionRegistrar用法\"><a href=\"#11、ImportBeanDefinitionRegistrar用法\" class=\"headerlink\" title=\"11、ImportBeanDefinitionRegistrar用法\"></a>11、ImportBeanDefinitionRegistrar用法</h3><p>1、使用场景<br>如果要实现动态Bean的装载，尤其是如果想装载动态代理对象的时候，例如Mybatis的启动器就是使用了Mapper接口的代理对象装载的，这种场景下，不能使用@Import和继承ImportSelector的方法，得使用<code>ImportBeanDefinitionRegistrar</code>。  </p>\n<p>2、简单使用  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个需要动态装载的Bean的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个ImportBeanDefinitionRegistrar的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoImportBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个Demo对应的BeanDefinition对象</span></span><br><span class=\"line\">        <span class=\"type\">GenericBeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GenericBeanDefinition</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 或者：beanDefinition.setBeanClassName(&quot;xxx.xxx.Demo&quot;);</span></span><br><span class=\"line\">\t\tbeanDefinition.setBeanClass(Demo.class);</span><br><span class=\"line\">        <span class=\"comment\">// 注册BeanDefinition</span></span><br><span class=\"line\">        registry.registerBeanDefinition(<span class=\"string\">&quot;demo&quot;</span>, beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在启动类上使用@Import注解</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DemoImportBeanDefinitionRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、进阶使用<br>简单使用中只有一个类，那如果需要加载的bean类很多，就得再使用一个扫描类<code>ClassPathBeanDefinitionScanner</code>。<br>原理就是：它会去识别指定加了注解的类，把这些类的BeanDefinition对象注册到容器中，我们可以看springboot扫描@Component注解的源码参考，具体位置在<code>ComponentScanAnnotationParser</code>类中的<code>parse</code>方法第一行。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在`xxx.xxx.demo`包下新增一个Demo类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再新增一个类去实现ImportBeanDefinitionRegistrar</span></span><br><span class=\"line\"><span class=\"comment\">// 别忘了还要在启动类上使用@Import注解导入：@Import(DemoComponentRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponentRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个扫描器</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 第二个参数是使用它默认的扫描规则，也就是需要在Demo类上面加上@Component注解才能被扫描到</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 为false代表自己自定义扫描规则，示例看下面被注释的部分</span></span><br><span class=\"line\">        <span class=\"type\">ClassPathBeanDefinitionScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathBeanDefinitionScanner</span>(registry, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 扫描指定包路径</span></span><br><span class=\"line\">        scanner.scan(<span class=\"string\">&quot;xxx.xxx.demo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// @Override</span></span><br><span class=\"line\">\t<span class=\"comment\">// public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//     ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry, false);</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tscanner.addIncludeFilter(new TypeFilter() &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\tpublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\t// 自定义扫描规则，这里只扫描Demo类</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\t// false：代表不通过，也就是不加载到容器中</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\treturn metadataReader.getClassMetadata().getClassName().equals(&quot;xxx.xxx.demo.Demo&quot;);</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t&#125;);</span></span><br><span class=\"line\">\t<span class=\"comment\">//     // 扫描指定包路径</span></span><br><span class=\"line\">\t<span class=\"comment\">//     scanner.scan(&quot;xxx.xxx.demo&quot;);</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、高阶使用<br>我们自己自定义一个注解，期望加了这个注解的类都能被装载到容器中。<br>比如一个场景：扫描某个包，并且被扫描的包中的类，要被加上我们自定义的注解，才能被加载到容器中。<br>（1）自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DemoComponent &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）在<code>xxx.xxx.demo</code>包下新建一个类，并且使用自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DemoComponent</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）创建一个Registrar类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 别忘了还要在启动类上使用@Import注解导入：@Import(DemoComponentRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponentRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">\t    <span class=\"type\">ClassPathBeanDefinitionScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathBeanDefinitionScanner</span>(registry, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\tscanner.addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeFilter</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">match</span><span class=\"params\">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 自定义扫描规则</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// false：代表不通过，也就是不加载到容器中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// &quot;xxx.xxx.demo.DemoComponent&quot;为自定义注解的路径</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> metadataReader.getAnnotationMetadata().hasAnnotation(<span class=\"string\">&quot;xxx.xxx.demo.DemoComponent&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t    <span class=\"comment\">// 扫描指定包路径</span></span><br><span class=\"line\">\t    scanner.scan(<span class=\"string\">&quot;xxx.xxx.demo&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","more":"<hr>\n<h1 id=\"一、Springboot基础知识记录\"><a href=\"#一、Springboot基础知识记录\" class=\"headerlink\" title=\"一、Springboot基础知识记录\"></a>一、Springboot基础知识记录</h1><h3 id=\"1、Springboot-IOC和DI注入方式\"><a href=\"#1、Springboot-IOC和DI注入方式\" class=\"headerlink\" title=\"1、Springboot IOC和DI注入方式\"></a>1、Springboot IOC和DI注入方式</h3><p>1、按照类型注入（直接在类上使用<code>@Autowired</code>）<br>（1）当只有一个名字相同的类存在：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）当存在多个相同的类名（不在同一个包下）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;a&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;b&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(value=&quot;a&quot;)</span> <span class=\"comment\">// 使用a声明的service注入</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、按照名称注入<br><strong>说明：</strong>直接在类上使用<code>@Resource</code>（<code>@Resource</code>相当于<code>@Autowired + @Qualifier</code>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;a&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;b&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;a&quot;)</span> <span class=\"comment\">// 使用a声明的service注入</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、按照<code>setter</code>方法注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDemoService</span><span class=\"params\">(DemoService demoService)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.demoService = demoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、按照构造器方式注入<br><strong>说明：</strong>构造器注入可以避免<code>Field</code>注入的 循环依赖 问题，比如在<code>Demo1</code>中注入了<code>Demo2</code>，在<code>Demo2</code>中注入了<code>Demo1</code>，使用构造器注入，在项目启动的时候会抛出<code>BeanCurrentlyCreationException</code>提醒循环依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    .........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Controller层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DemoController</span><span class=\"params\">(DemoService demoService)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.demoService = demoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、Springboot-关于使用-AOP\"><a href=\"#2、Springboot-关于使用-AOP\" class=\"headerlink\" title=\"2、Springboot 关于使用 AOP\"></a>2、Springboot 关于使用 AOP</h3><p>1、说明：什么是AOP？<br>AOP就是增强，在没有使用AOP时，对象是原本的对象（比如房东对象），而使用了AOP之后，使用的对象就变成了代理对象，而不是原本的对象（比如中介对象），相当于就是不修改原有的业务逻辑代码的基础上，想要增加额外的逻辑，就是找到原有的代码，切入想要增加的代码，比如日志的记录；<br>2、AOP的工作流程说明<br>（1）Spring容器启动；<br>（2）会去读取被<code>@Aspect</code>和<code>@Component</code>标注的切面类中配置的所有切入点，也就是被<code>@Pointcut</code>标注的方法；<br>（3）初始化所有bean，然后去判断需要被增强的bean对应的类中的方法是否匹配到任意切入点；<br>（4）如果匹配失败，就创建bean对象；<br>（5）如果匹配成功，就创建bean对象的代理对象；<br>（6）获取bean，调用方法并执行，完成操作。<br>3、使用方法<br>（1）导入依赖，在<code>pom.xml</code>中导入AOP的依赖  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）方式一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 将这个类注入到容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">// 使用这个注解标注这个类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoAspect</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 在BookDao类的update方法处切入，相当于想增强update方法</span></span><br><span class=\"line\">\t<span class=\"comment\">// 在void com.xxx.dao.BookDao.update方法处切入，具体怎么切入看使用的是什么通知类型注解</span></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(void com.xxx.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将pt这个切入点配置对应到这个方法上</span></span><br><span class=\"line\">\t<span class=\"comment\">// 相当于上面AOP工作流程说明中的第3点</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果没有这个，切入点就毫无意义，就会匹配失败</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordTime</span><span class=\"params\">(JoinPoint joinPoint)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这个方法是在上面 update方法前调用</span></span><br><span class=\"line\">        .... <span class=\"comment\">// 编写需要增强的业务逻辑代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在启动类上加<code>@EnableAspectJAutoProxy</code>注解，告诉spring，我以注解的方式使用aop。<br>特别说明：为什么不加<code>@EnableAspectJAutoProxy</code>注解AOP一样也会生效？<br>是因为依赖中如果存在<code>spring-boot-starter-web</code>依赖，而这个依赖中包含了<code>spring-boot-autoconfigure</code>依赖，正是这个依赖（自动装配依赖），它会读取<code>spring.factories</code>文件，这个文件中有一个<code>AopAutoConfiguration</code>类，这个等同于<code>@EnableAspectJAutoProxy</code>注解，我们可以在<code>yml</code>配置文件中将它关闭<code>spring.aop.auto=false</code>，这样AOP就不生效了（在不使用<code>@EnableAspectJAutoProxy</code>注解前提下）。<br>所以为了保险期间请一律加上<code>@EnableAspetJAutoProxy</code>注解。<br>（3）方式二（简写形式，省去了<code>@Pointcut</code>）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 将这个类注入到容器中</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">// 使用这个注解标注这个类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoAspect</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下面的注解的意思是在com.xxx.service.*.*(..)切入</span></span><br><span class=\"line\">    <span class=\"comment\">// 意思就是在com.xxx.service.*.*(..)所有方法前后，都会执行下面recordTime中的逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;execution(* com.xxx.service.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordTime</span><span class=\"params\">(ProceedingJoinPoint p)</span>&#123;</span><br><span class=\"line\">        p.proceed(); <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）方式三（注解的形式，灵活）：（比较详细）<br>创建一个注解：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用该注解标注的方法会执行切入类中的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 这样就不用写 execution(* com.xxx.service.*.*(..)) 匹配规则了</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> LogUserProjectOperation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">description</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;无法获知此用户的操作行为&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建切面类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectProcessRecordAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解的方式来定切入点</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如我在xxx方法上使用@LogUserProjectOperation注解标注之后，</span></span><br><span class=\"line\">    <span class=\"comment\">// 当执行到xxx方法时，因为使用的@AfterReturning的形式，</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以会在xxx方法后面执行下面的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// joinPoint参数可以获取到xxx方法的各种值</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用returnValue，必须在注解中声明returning = &quot;returnValue&quot;，这个是获取xxx方法返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;@annotation(LogUserProjectOperation)&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logUserProjectOperation</span><span class=\"params\">(JoinPoint joinPoint, Object returnValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是可以获取@LogUserProjectOperation 注解的参数</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"type\">LogUserProjectOperation</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> method.getAnnotation(LogUserProjectOperation.class);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">description</span> <span class=\"operator\">=</span> annotation.description();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx所属的类名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getSimpleName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取xxx方法的参数</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：在需要的方法上使用<code>@LogUserProjectOperation</code>注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/projectCheck&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectCheckController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在需要的方法上使用@LogUserProjectOperation注解</span></span><br><span class=\"line\">    <span class=\"meta\">@LogUserProjectOperation</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/approveOperate&quot;, method = RequestMethod.PUT)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R&lt;Boolean&gt; <span class=\"title function_\">approveOperate</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要想获取http请求的各种参数，比如请求类型（get、post等），使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (attributes == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">       log.error(<span class=\"string\">&quot;正常日志获取attributes为空,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取请求</span></span><br><span class=\"line\"><span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\"><span class=\"comment\">// 获取响应</span></span><br><span class=\"line\"><span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> attributes.getResponse();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (response == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      log.error(<span class=\"string\">&quot;正常日志获取response失败,时间：&quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、AOP切入点表达式<br>（1）描述<br>描述一（接口）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行com.xxx.dao包下的BookDao接口中的无参数update方法，void是update的返回类型</span></span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.xxx.dao.BookDao.update())</span><br></pre></td></tr></table></figure>\n<p>描述二（类）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行com.xxx.dao.impl包下的BookDaoImpl类中的无参数update方法，void是update的返回类型</span></span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.xxx.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure>\n<p>描述三（<code>*</code>）：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配com.xxx包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</span></span><br><span class=\"line\">execution(<span class=\"keyword\">public</span> * com.xxx.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>\n<p>描述四（<code>..</code>）：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</span></span><br><span class=\"line\">execution(<span class=\"keyword\">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure>\n<p>描述五（<code>+</code>）：专用于匹配子类类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* *..*Service + .*(..))</span><br></pre></td></tr></table></figure>\n<p>（2）表达式格式说明<br>格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口.方法名（参数）异常名）  </p>\n<ul>\n<li>动作关键字：描述切入点的行为动作，例如<code>execution</code>表示执行到指定切入点。  </li>\n<li>访问修饰符：<code>public</code>、<code>private</code>等，可以省略。  </li>\n<li>返回值。  </li>\n<li>包名。  </li>\n<li>类&#x2F;接口名。  </li>\n<li>方法名。  </li>\n<li>参数。  </li>\n<li>异常名：方法定义中抛出指定异常，可以省略。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(<span class=\"keyword\">public</span> User com.xxx.service.UserService.findById(<span class=\"type\">int</span>))</span><br></pre></td></tr></table></figure>\n\n<p>4、通知类型<br>（1）<code>@Around</code> 环绕通知（需要传参<code>ProceedingJoinPoint proce</code>自己调用<code>proce.proceed()</code>方法执行原始方法，下面其他的注解不用调用）<br>此注解标注的通知方法在目标方法前、后都被执行。<br>（2）<code>@Before</code> 前置通知<br>此注解标注的通知方法在目标方法前被执行。<br>（3）<code>@After</code> 后置通知<br>此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。<br>（4）<code>@AfterReturning</code> 返回后通知<br>此注解标注的通知方法在目标方法后被执行，有异常不会执行。<br>（5）<code>@AfterThrowing</code> 异常后通知<br>此注解标注的通知方法发生异常后执行。<br>5、通知类型的参数<br>（1）非环绕通知，可以将<code>org.aspectj.lang.JoinPoint</code>作为通知方法的第1个参数，通过这个参数获取被调用方法的信息；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">JoinPoint</span> &#123;  </span><br><span class=\"line\">    String <span class=\"title function_\">toString</span><span class=\"params\">()</span>;         <span class=\"comment\">//连接点所在位置的相关信息  </span></span><br><span class=\"line\">    String <span class=\"title function_\">toShortString</span><span class=\"params\">()</span>;     <span class=\"comment\">//连接点所在位置的简短相关信息  </span></span><br><span class=\"line\">    String <span class=\"title function_\">toLongString</span><span class=\"params\">()</span>;     <span class=\"comment\">//连接点所在位置的全部相关信息  </span></span><br><span class=\"line\">    Object <span class=\"title function_\">getThis</span><span class=\"params\">()</span>;         <span class=\"comment\">//返回AOP代理对象</span></span><br><span class=\"line\">    Object <span class=\"title function_\">getTarget</span><span class=\"params\">()</span>;       <span class=\"comment\">//返回目标对象  </span></span><br><span class=\"line\">    Object[] getArgs();       <span class=\"comment\">//返回被通知方法参数列表，也就是目前调用目标方法传入的参数  </span></span><br><span class=\"line\">    Signature <span class=\"title function_\">getSignature</span><span class=\"params\">()</span>;  <span class=\"comment\">//返回当前连接点签名，这个可以用来获取目标方法的详细信息，如方法Method对象等</span></span><br><span class=\"line\">    SourceLocation <span class=\"title function_\">getSourceLocation</span><span class=\"params\">()</span>;<span class=\"comment\">//返回连接点方法所在类文件中的位置  </span></span><br><span class=\"line\">    String <span class=\"title function_\">getKind</span><span class=\"params\">()</span>;        <span class=\"comment\">//连接点类型  </span></span><br><span class=\"line\">    StaticPart <span class=\"title function_\">getStaticPart</span><span class=\"params\">()</span>; <span class=\"comment\">//返回连接点静态部分  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）如果是环绕通知，可以将<code>org.aspectj.lang.ProceedingJoinPoint</code>作为方法的第1个参数，通过这个参数获取被调用方法的信息。  </p>\n<h3 id=\"3、关于-Springboot-配置文件\"><a href=\"#3、关于-Springboot-配置文件\" class=\"headerlink\" title=\"3、关于 Springboot 配置文件\"></a>3、关于 Springboot 配置文件</h3><p>1、配置文件加载优先级<br><code>application.properties</code>配置文件 &gt; <code>application.yml</code>配置文件 &gt; <code>application.yaml</code>配置文件。<br>2、<code>properties</code>配置文件名必须是<code>application.properties</code>，如果想更改它的名字，必须在这里配置：</p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot1.jpg\" class=\"\">\n<p>3、不止可以在配置文件中配置，还可以在java属性或者命令行配置<br>（1）idea中设置  </p>\n<ul>\n<li>java属性配置<br>在idea启动配置里有一项配置：VM options<br>例如：可以在VM options里配置端口号：-Dserver.port&#x3D;8080  </li>\n<li>命令行配置<br>同java属性配置，有一项配置：Program arguments<br>例如：在Program arguments里配置端口号：–server.port&#x3D;8080</li>\n</ul>\n<p>（2）在Dos命令行设置  </p>\n<ul>\n<li>java属性配置<br>java -Derver.port&#x3D;8080 -jar demo.jar</li>\n<li>命令行配置<br>java -jar demo.jar –server.port&#x3D;8080</li>\n</ul>\n<p><strong>注意优先级：</strong>命令行 &gt; java属性 &gt; 配置文件<br>4、多个.yml文件的使用方法<br>SpringBoot默认加载的是<code>application.yml</code>文件，所以想要引入其他配置的yml文件，就要在<code>application.yml</code>中激活该文件，定义一个<code>application-student.yml</code>文件（注意：必须以application-开头）。<br><code>application.yml</code>中：（注意必须是在<code>application.yml</code>或者<code>.properties</code>)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>                    <span class=\"comment\"># 这个也是用来启动多环境的</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span>               <span class=\"comment\"># 如果有开发、测试、生产环境</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">student</span>      <span class=\"comment\"># 就用这个来启动</span></span><br></pre></td></tr></table></figure>\n<p>（1）赋值（如果是xml的话，它是自动完成的）<br><code>application-student.yml</code>配置文件代码：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">小明</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">27</span></span><br><span class=\"line\">  <span class=\"attr\">sex:</span> <span class=\"string\">男</span></span><br></pre></td></tr></table></figure>\n<p>方案一：使用<code>@Value</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.sex&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(String sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, cat=&quot;</span> + cat +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果使用<code>application.properties</code>，需要使用<code>@PropertySource(value=&quot;application.properties&quot;)</code>来加载并在属性上使用<code>@Value(&quot;&quot;)</code>使用。<br>方案二：使用<code>@ConfigurationProperties</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(String sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, cat=&quot;</span> + cat +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、springboot集成mybatis需要的依赖\"><a href=\"#4、springboot集成mybatis需要的依赖\" class=\"headerlink\" title=\"4、springboot集成mybatis需要的依赖\"></a>4、springboot集成mybatis需要的依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mysql驱动 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- mybatis --&gt;</span> </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 这里这个可以换，比如如果要用druid的就导入druid的 --&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-----------------或者只需要以下依赖就可以了---------------------&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>application.yml</code>中配置数据源：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/数据库名字?serverTimezone=UTC&amp;userUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.mysql.cj.jdbc.MysqlDataSource</span> <span class=\"comment\">#这个依赖导入哪个就用哪个</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">实体类包路径，比如com.cn.pojo</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">mapper的路径，比如classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、Springboot-bean的管理\"><a href=\"#5、Springboot-bean的管理\" class=\"headerlink\" title=\"5、Springboot bean的管理\"></a>5、Springboot bean的管理</h3><p>1、获取bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApplicationContext applicationContext;</span><br></pre></td></tr></table></figure>\n<p>2、非第三方bean管理<br>我们将一个类注入到<code>spring</code>容器中成为一个<code>bean</code>对象，默认是单例；要想多例只需在该类上加上<code>@Scope(&quot;prototype&quot;)</code>注解，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>3、第三方bean管理<br>第三方bean：比如第三方的jar包，我们无法在第三方jar中某个类上面使用<code>@Component、@Service</code>等注解的情况下，就使用<code>@Bean</code>注解，举个场景：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们想使用JSONObject，必须new</span></span><br><span class=\"line\">    <span class=\"type\">JSONObject</span> <span class=\"variable\">jSONObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个场景，我们不能在<code>JSONObject</code>类上面使用注解<code>@Component、@Service</code>来将它注入到容器中，但是我们可以这样：<br>在<code>springboot</code>启动类里，把<code>JSONObject</code>类注入到<code>spring</code>容器中<strong>（不过在启动类中定义是不推荐的，推荐的是在配置类中定义）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootDemo</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootDemo.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">// 将当前方法的返回值对象交给IOC容器管理，成为IOC容器bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">jSONObject</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、多个<code>bean</code>使用方法<br>概述：<br>通过<code>Spring</code>管理的类,默认是单例模式,但是如果有的类需要使用独立的属性,则需要配置为多例模式的. 但是多例模式不仅仅只是加一个声明,使用<code>@Autowired</code>进行注入,可能并不会是你想要的结果.因为多例模式的类是需要单独调用的。<br>不搞清楚原理直接测试：<br>需要多例的类上加上注解<code>@Scope(“prototype”)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test,current bean is&quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">引用直接使用<span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ExampleService exampleService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        exampleService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">结果: 每个request过来的时候,exampleService实例均为同一个实例.</span><br><span class=\"line\"></span><br><span class=\"line\">解决办法：</span><br><span class=\"line\">第一种：不使用<span class=\"meta\">@Autowired</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> org.springframework.beans.factory.BeanFactory beanFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ExampleService</span> <span class=\"variable\">exampleService</span> <span class=\"operator\">=</span> beanFactory.getBean(ExampleService.class);</span><br><span class=\"line\">        exampleService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">第二种：使用bean工厂</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebSocketHandler <span class=\"title function_\">websocketBHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PerConnectionWebSocketHandler</span> <span class=\"variable\">perConnectionHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PerConnectionWebSocketHandler</span>(WebSocketBHandler.class);</span><br><span class=\"line\">    perConnectionHandler.setBeanFactory(context.getAutowireCapableBeanFactory());</span><br><span class=\"line\">    <span class=\"comment\">//设置bean工厂，否则bean工厂WebSocketBHandler将不会自动连接</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> perConnectionHandler;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用ApplicationContext进行代理bean工厂</span><br><span class=\"line\"></span><br><span class=\"line\">注入</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ApplicationContext context;</span><br><span class=\"line\">使用</span><br><span class=\"line\"><span class=\"built_in\">this</span>.Bservice = context.getBean(BService.class, <span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Springboot自动配置加载流程\"><a href=\"#6、Springboot自动配置加载流程\" class=\"headerlink\" title=\"6、Springboot自动配置加载流程\"></a>6、Springboot自动配置加载流程</h3><p>1、说明<br>（1）在Springboot启动类上，有<code>@SpringBootApplication</code>注解，这个注解中有<code>@EnableAutoConfiguration</code>注解；<br>（2）<code>@EnableAutoConfiguration</code>注解引入了<code>@Import</code>；<br>（3）Spring容器启动时，加载IOC容器会解析<code>@Import</code>注解；<br>（4）<code>@Import</code>导入了一个<code>deferredImportSelector</code>，它会读取<code>META-INF/spring.factories</code>文件；<br>（5）然后通过<code>@Condition</code>注解排除无效的自动配置类。<br>同理：<br>（1）导入 <code>starter</code> ，就会导入 <code>autoconfigure</code> 包；<br>（2）<code>autoconfigure</code> 包里面有一个文件： <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> ，<br>里面指定的是启动要加载的所有自动配置类；<br>（3）<code>@EnableAutoConfiguration</code> 会自动的把上面文件里面写的所有自动配置类都导入进<code>spring</code>容器；<br>（4）自动配置类中的 <code>xxxAutoConfiguration</code> 是有条件注解，来进行按需加载的；<br>（5）<code>xxxAutoConfiguration</code> 给容器中导入一堆组件，组件都是从 <code>xxxProperties</code> 中提取属性值的；<br>（6）<code>xxxProperties</code> 又是和配置文件进行了绑定。<br>2、<code>springboot</code>默认配置说明<br>（1）包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewRseolver</code> 组件，方便视图解析。<br>（2）默认的静态资源处理机制：静态资源在static文件夹下即可直接访问。<br>（3）自动注册了 <code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> 组件，适配常见数据类型转换和格式化需求。<br>（4）支持 <code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型。<br>（5）自动使用 <code>ConfigurableWebBindingInitializer</code>，实现消息处理、数据绑定、类型转化、数据校验等功能。<br><strong>重要：</strong><br>（1）如果想保持默认配置，并且自定义更多配置，如：<code>interceptors（拦截器）、formatters（格式化器）、viewControllers（视图解析器）</code>等，可以创建一个新类，使用 <code>@Configuration</code> 注解和实现一个 <code>WebMvcConfigurer</code>接口，并且不要标注 <code>@EnableWebMvc</code> 注解。<br>（2）如果想保持默认配置，但要自定义核心组件实例，比如：<code>RequestMappingHandlerMapping，RequestMappingHandlerAdapter，ExceptionHandlerExceptionResolver</code>等，只需给容器中放一个 <code>WebMvcRegistrations</code> 组件即可。<br>（3）如果想全面接管<code>SpringMvc</code>，<code>@Configuration</code>标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现<code>WebMvcConfigurer</code>接口。<br>3、<code>WebMvcConfigurer</code>接口方法说明<br>（1）<code>addArgumentResolvers</code>：参数解析器，用来解析<code>Controller</code>中各方法的参数。<br>（2）<code>addCorsMappings</code>：跨域<br>（3）<code>addFormatters</code>：格式化器，用来处理配置文件中格式化的问题。<br>（4）<code>addInterceptors</code>：拦截器<br>（5）<code>addResourceHandlers</code>：资源处理器，处理静态资源规则。<br>（6）<code>addReturnValueHandlers</code>：返回值处理器，当<code>controller</code>返回一个字符串或者对象等时，是要跳转页面还是返回数据。<br>（7）<code>addViewControllers</code>：视图控制器，如果想发一个请求 <code>/a</code> 直接跳转到<code>xxx.html</code>页面，不用写<code>controller</code>，可以在这里设置。<br>（8）<code>configureAsyncSupport</code>：异步支持<br>（9）<code>configureContentNegotiation</code>：内容协商<br>（10）<code>configureHandlerExceptionResolvers</code>：配置异常处理解析器。<br>（11）<code>configureMessageConverters</code>：配置消息转换器<br>（12）<code>configurePathMatch</code>：路径匹配<br>（13）<code>configureViewResolvers</code>：配置视图解析器  </p>\n<h3 id=\"7、循环依赖问题\"><a href=\"#7、循环依赖问题\" class=\"headerlink\" title=\"7、循环依赖问题\"></a>7、循环依赖问题</h3><p>1、三级缓存<br>（1）一级缓存（单例池）：<code>singletonObjects</code>，用来存经历过完整生命周期的bean；<br>（2）二级缓存：<code>earlySingletonObjects</code>，用来存还没有初始化的aop代理对象；<br>（3）三级缓存：<code>singletonFactories</code>。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> BService bService;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AService aService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面产生了循环依赖。<br>3、说明  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot6.jpg\" class=\"\">\n\n<h3 id=\"8、Springboot源码名词\"><a href=\"#8、Springboot源码名词\" class=\"headerlink\" title=\"8、Springboot源码名词\"></a>8、Springboot源码名词</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>说明一：在springboot源码中用到的<code>ConfigurableApplicationContext</code>是接口，而官网springframework中使用到的<code>GenericApplicationContext</code>是<code>ConfigurableApplicationContext</code>的实现类。<br>说明二：<code>FactoryBean</code>和<code>BeanFactory</code>区别<br>（1）<code>FactoryBean</code>：是Spring中一种特殊的bean，可以在getObject()工厂方法自定义的逻辑创建bean，是一种能够生产其他bean的bean。FactoryBean在容器启动时被创建，而在实际使用时，通过调用getObject()方法来得到其所生产的bean。因此，FactoryBean可以自定义任何所需的初始化逻辑，生产出一些定制化的bean。<br>（2）<code>BeanFactory</code>：是Spring框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期、配置文件的加载和解析、bean的装配和依赖注入等。BeanFactory接口提供了访问bean的方式，例如getBean()方法获取指定的bean实例。它可以从不同的来源（例如Mysql数据库、XML文件、Java配置类等）获取bean定义，并将其转换为bean实例。同时，BeanFactory还包含很多子类（例如ApplicationContext接口）提供了额外的强大功能。<br>1、<code>BeanFactory</code>：是接口，位于<code>org.springframework.beans</code>包下，它是bean的一个工厂，它定义了各种获取bean的方法、判断bean是否存在、判断bean是否单例等针对bean的基础方法；<br>2、<code>ApplicationContext</code>：是接口，位于<code>org.springframework.context</code>包下，它就是springIOC容器，它继承了<code>BeanFactory</code>接口，查看源码可以看到它是先继承了<code>ListableBeanFactory</code>接口，再继承的<code>BeanFactory</code>接口，它负责实例化、配置、组装bean；<br>3、<code>ListableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，扩展了bean的查询方法，例如：根据类型获取beanNames、根据注解获取beanNames、根据bean获取注解；<br>4、<code>AutowireCapableBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上，提供了bean的创建、配置、注入、销毁等操作（<strong>注意</strong>：有时候我们需要自己手动注入bean的时候，可以考虑通过实现该接口来完成）；<br>5、<code>HierarchicalBeanFactory</code>：是接口，它继承了<code>BeanFactory</code>接口，在<code>BeanFactory</code>的基础上添加了获取parent beanfactory的方法；<br>6、<code>SingletonBeanRegistry</code>：是接口，定义了对单例bean的定义以及获取方法；<br>7、<code>ConfigurableBeanFactory</code>：是接口，它继承了<code>SingletonBeanRegistry</code>接口和<code>HierarchicalBeanFactory</code>接口，它定义了针对<code>BeanFactory</code>的各种配置以及销毁方法；<br>8、<code>ConfigurableListableBeanFactory</code>：是接口，它继承了<code>ListableBeanFactory</code>接口、<code>AutowireCapableBeanFactory</code>接口和<code>ConfigurableBeanFactory</code>接口，它是<code>BeanFactory</code>的配置清单，这里定义了忽略的类型、接口，通过bean的名词获取BeanDefinition，冻结BeanDefinition等；<br>9、<code>AliasRegistry</code>（alias是别名）：是接口，它定义了对alias的注册、移除、判断以及查询操作；<br>10、<code>SimpleAliasRegistry</code>：是类，它实现了<code>AliasRegistry</code>接口中的所有方法，它还使用ConcurrentHashMap做载体，实现对alias的注册、移除、判断以及查询操作；<br>11、<code>DefaultSingletonBeanRegistry</code>：是类，它继承了<code>SimpleAliasRegistry</code>类，实现了<code>SingletonBeanRegistry</code>接口，这个类基于java中的集合，对<code>SingletonBeanRegistry</code>接口进行了实现；<br>12、<code>FactoryBeanRegistrySupport</code>：是类，继承了<code>DefaultSingletonBeanRegistry</code>类，在<code>DefaultSingletonBeanRegistry</code>的基础上，增加了获取FactoryBean类型、移除FactoryBean缓存的方法等；<br>13、<code>AbstractBeanFactory</code>：是类，继承了<code>FactoryBeanRegistrySupport</code>类，实现了<code>ConfigurableBeanFactory</code>接口；<br>14、<code>AbstractAutowireCapableBeanFactory</code>：是类，它继承了<code>AbstractBeanFactory</code>类，实现了<code>AutowireCapableBeanFactory</code>接口的所有方法；<br>15、<code>BeanDefinitionRegistry</code>：是接口，它继承了<code>AliasRegistry</code>接口，增加了一系列针对<code>BeanDefinition</code>的注册、移除、查询、判断等方法；<br>16、<code>DefaultListableBeanFactory</code>：是类，它继承了<code>AbstractAutowireCapableBeanFactory</code>类，实现了<code>BeanDefinitionRegistry</code>（定义了关于BeanDefinition的注册、移除、查询）、<code>ConfiguraListableBeanFactory</code>和<code>Serializable</code>（序列化接口）接口，它是bean工厂的一个默认实现类，提供了原始的BeanFactory的功能，如：对外提供getBean()方法，这个方法有两种方式获取bean，第一种方式是<code>AbstractBeanFactory</code>中提供的，根据名称获取bean；第二种方式是它自己的，根据类型获取bean（这种方式属于getBean方法的扩展）。<code>beanDefinitionMap</code>属性是beanDefinition信息表；<br>17、<code>InitializingBean</code><br>说明：是spring提供的扩展性接口，<code>InitializingBean</code>接口为bean提供了属性初始化后的处理方法，它只有一个方法，只要实现了该接口的类，所创建出来的bean，在bean初始化后都会执行该方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;构造方法执行&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterPropertiesSet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postConstruct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;@PostConstruct&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：输出优先级：构造方法执行 &gt; <span class=\"doctag\">@PostConstruct</span> &gt; afterPropertiesSet &gt; init</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造方法执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@PostConstruct</span></span></span><br><span class=\"line\"><span class=\"comment\"> * afterPropertiesSet</span></span><br><span class=\"line\"><span class=\"comment\"> * init</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> *  说明：</span></span><br><span class=\"line\"><span class=\"comment\"> *  在spring初始化bean的时候，如果该bean实现了InitializingBean接口，</span></span><br><span class=\"line\"><span class=\"comment\"> *  并且同时配置了init-method，系统则是先调用afterPropertieSet()方法，</span></span><br><span class=\"line\"><span class=\"comment\"> *  然后再调用init-method中指定的方法。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Springboot使用方法\"><a href=\"#二、Springboot使用方法\" class=\"headerlink\" title=\"二、Springboot使用方法\"></a>二、Springboot使用方法</h1><h3 id=\"1、要想在tomcat中启动项目\"><a href=\"#1、要想在tomcat中启动项目\" class=\"headerlink\" title=\"1、要想在tomcat中启动项目\"></a>1、要想在tomcat中启动项目</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要想在tomcat中使用war包启动springboot项目，首先 先继承 SpringBootServletInitializer</span></span><br><span class=\"line\">    <span class=\"comment\">//然后在使用下面的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title function_\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringbootApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在配置文件中配置静态资源\"><a href=\"#2、在配置文件中配置静态资源\" class=\"headerlink\" title=\"2、在配置文件中配置静态资源\"></a>2、在配置文件中配置静态资源</h3><p>默认的静态资源路径为：<br>1、<code>classpath:/static/</code><br>2、<code>classpath:/public/</code><br>3、<code>classpath:/resources/</code><br>4、<code>classpath:/META-INF/resources/</code>  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">    <span class=\"attr\">mvc:</span> </span><br><span class=\"line\">        <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span>  <span class=\"comment\">#修改静态资源访问路径，项目路径+/res/**</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> </span><br><span class=\"line\">        <span class=\"attr\">static-locations:</span> <span class=\"string\">classpath:/zuo</span>  <span class=\"comment\">#修改静态资源存放路径，修改之后只有将静态资源放到zuo目录下才能被访问到。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、springboot各种pom文件需要和学习指南地址\"><a href=\"#3、springboot各种pom文件需要和学习指南地址\" class=\"headerlink\" title=\"3、springboot各种pom文件需要和学习指南地址\"></a>3、springboot各种pom文件需要和学习指南地址</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#using-boot-starter\">springboot各种pom文件需要和学习指南地址</a></p>\n<h3 id=\"4、Springboot读配置的4种方式\"><a href=\"#4、Springboot读配置的4种方式\" class=\"headerlink\" title=\"4、Springboot读配置的4种方式\"></a>4、Springboot读配置的4种方式</h3><p>1、<code>@Value</code>注解<br><strong>使用该注解需要注意：</strong><br>（1）该类必须注入<code>spring</code>容器中，才能使用<code>@Value</code>注解获取配置文件中的数据。<br>（2）配置文件里必须有该属性，不然启动会报异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Value(&quot;$&#123;user.name:默认值&#125;&quot;) 为了不报异常，可以加默认值，如果是：&quot;$&#123;user.name:&#125;&quot;，表示值为&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 如果属性有static和final关键字的话是无法生效的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、<code>@ConfigurationProperties</code>注解<br>只需要指定配置文件中某一个key的前缀就可以了。例如：<br>（1）配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">demo:</span></span><br><span class=\"line\">    <span class=\"attr\">userName:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n<p>（2）JavaDemo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;demo&quot;)</span> <span class=\"comment\">// 这里的命名规范：要么全小写，要么小写-小写（xxx-xxx）格式，不能下划线</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：使用<code>@ConfigurationProperties</code>注解，必须将bean给spring管理。  </p>\n<ol>\n<li>方法一：在配置类上使用<code>@EnableConfigurationProperties(&#123;Demo.class&#125;)</code>；  </li>\n<li>方法二：在实体类上使用<code>@Component</code>注解。</li>\n</ol>\n<p>3、通过<code>Environment</code>类动态获取（是spring底层提供的API）<br>（1）第一种实现方式，实现<code>EnvironmentAware</code>接口，重写<code>setEnvironment</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EnvironmentAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment e)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.env = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t    <span class=\"type\">String</span> <span class=\"variable\">var</span> <span class=\"operator\">=</span> env.getProperty(<span class=\"string\">&quot;demo.userName&quot;</span>);</span><br><span class=\"line\">\t    System.out.println(<span class=\"string\">&quot;从配置文件获取&quot;</span> + <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）第二种通过自动注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">var</span> <span class=\"operator\">=</span> env.getProperty(<span class=\"string\">&quot;demo.name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从配置文件获取&quot;</span> + <span class=\"keyword\">var</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以上三种是获取默认的配置文件，要想获取自定义的配置文件可以通过下面的方法：</strong>  </p>\n<ol>\n<li>默认的配置文件：<code>application</code>开头  </li>\n<li>自定义：<code>demo.properties</code></li>\n</ol>\n<p>4、<code>@PropertySource</code>注解<br>只能获取<code>properties</code>的配置文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySources(@PropertySource(value = &quot;classpath:demo.properties&quot;,encoding = &quot;utf-8&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要想获取yml的需要设置配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyYmlConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlacehokderConfigurer <span class=\"title function_\">yamlConfigurer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PropertySourcesPlacehokderConfigurer</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertySourcesPlacehokderConfigurer</span>();</span><br><span class=\"line\">        <span class=\"type\">YamlPropertiesFactory</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">YamlPropertiesFactory</span>();</span><br><span class=\"line\">        y.setResources(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathResource</span>(<span class=\"string\">&quot;demo.yml&quot;</span>));</span><br><span class=\"line\">        p.setProperties(Objects.requireNonNull(y.getObject()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就可以通过第一种方式@Value注解获取。  </p>\n<h3 id=\"5、Springboot获取bean对象方法\"><a href=\"#5、Springboot获取bean对象方法\" class=\"headerlink\" title=\"5、Springboot获取bean对象方法\"></a>5、Springboot获取bean对象方法</h3><p>1、启动获取<code>ApplicationContext</code><br>在项目启动时先获取 <code>ApplicationContext</code> 对象，然后将其存储在一个地方，以便后续用到时进行使用。<br>这里提供两种场景的获取：<br>（1）基于 <code>xml</code> 配置 <code>bean</code> 的形式，适用于比较古老的项目，已经很少使用了；<br>（2）基于 <code>SpringBoot</code> 启动时获取 <code>ApplicationContext</code> 对象；<br><strong>基于 xml 的形式实现：</strong><br>其中<code>applicationContext.xml</code> 为配置容器的<code>xml</code>，不过现在一般很少使用了。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileSystemXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里等于直接初始化容器，并且获得容器的引用。这种方式适用于采用 <code>Spring</code> 框架的独立应用程序，需要程序通过配置文件手工初始化 <code>Spring</code> 的情况。目前大多数 <code>Spring</code> 项目已经不再采用 <code>xml</code> 配置，很少使用了。<br><strong>基于 SpringBoot 启动实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启动时，保存上下文，并保存为静态</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> SpringApplication.run(ExampleApplication.class, args);</span><br><span class=\"line\">        SpringContextUtil.setApplicationContext(ac);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对应的 SpringContextUtil 类如下：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext ac;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String beanName, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(beanName, clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span>&#123;</span><br><span class=\"line\">        ac = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种方式都是在启动 <code>Spring</code> 项目时，直接获取到 <code>ApplicationContext</code> 的引用，然后将其存储到工具类当中。在使用时，则从工具类中获取 <code>ApplicationContext</code> 容器，进而从中获得 <code>Bean</code> 对象。</p>\n<p>2、通过继承<code>ApplicationObjectSupport</code><br>此种方式依旧是先获得 <code>ApplicationContext</code> 容器，然后从中获取 <code>Bean</code> 对象，只不过是基于继承 <code>ApplicationObjectSupport</code> 类实现的，具体实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationObjectSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ac == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ac.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这里的 <code>SpringContextUtil</code> 类需要实例化。<br><code>ApplicationObjectSupport</code> 类图，我们看到它实现了 <code>ApplicationContextAware</code> 接口，在 <code>Spring</code> 容器初始化过程中回调方法 <code>setApplicationContext</code> 来完成 <code>ApplicationContext</code> 的赋值。</p>\n<p>3、通过继承<code>WebApplicationObjectSupport</code><br><code>WebApplicationObjectSupport</code> 是 <code>ApplicationObjectSupport</code> 的一个实现类，提供了 <code>Web</code> 相关的支持。实现原理与 <code>ApplicationObjectSupport</code> 一样，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebApplicationObjectSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ac == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ac.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过类图我们可以看到它是 <code>ApplicationObjectSupport</code> 的实现子类，此方式除了继承对象不同外，没有其他区别，都是基于 <code>getApplicationContext</code> 方法来获取。</p>\n<p>4、通过<code>WebApplicationContextUtils</code><br>Spring提供了工具类<code>WebApplicationContextUtils</code>，通过该类可获取<code>WebApplicationContext</code>对象，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(ServletContext request, String name, Class&lt;T&gt; clazz)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 或者 WebApplicationContext webApplicationContext1 = WebApplicationContextUtils.getWebApplicationContext(request);</span></span><br><span class=\"line\">        <span class=\"type\">WebApplicationContext</span> <span class=\"variable\">webApplicationContext</span> <span class=\"operator\">=</span> WebApplicationContextUtils.getRequiredWebApplicationContext(request);</span><br><span class=\"line\">        <span class=\"comment\">// webApplicationContext1.getBean(name, clazz)</span></span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> webApplicationContext.getBean(name, clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法很常见于 <code>SpringMVC</code> 构建的 Web 项目中，适用于 Web 项目的 B&#x2F;S 结构。</p>\n<p>5、通过<code>ApplicationContextAware</code><br>通过实现<code>ApplicationContextAware</code>接口，在Spring容器启动时将<code>ApplicationContext</code>注入进去，从而获取<code>ApplicationContext</code>对象，这种方法也是常见的获取Bean的一种方式，推荐使用，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext ac;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        ac = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式与前面通过 <code>BeanFactoryAware</code> 获得 <code>BeanFactory</code> 的思路一致。</p>\n<p>6、通过<code>ContextLoader</code><br>使用 <code>ContextLoader</code> 提供的 <code>getCurrentWebApplicationContext</code> 方法，也是常用的获取 <code>WebApplicationContext</code> 的一种方法，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">WebApplicationContext</span> <span class=\"variable\">wac</span> <span class=\"operator\">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class=\"line\">wac.getBean(beanID);</span><br></pre></td></tr></table></figure>\n<p>该方法常见于 SpringMVC 实现的 Web 项目中。该方式是一种不依赖于 Servlet，不需要注入的方式。但是需要注意一点，在服务器启动时和 Spring 容器初始化时，不能通过该方法获取 Spring 容器。</p>\n<p>7、通过<code>BeanFactoryPostProcessor</code><br>Spring 工具类，方便在非 Spring 管理环境中获取 Bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringUtils</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryPostProcessor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Spring应用上下文环境 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        SpringUtilsS.beanFactory = beanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) beanFactory.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取类型为requiredType的对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> clz</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; clz)</span> <span class=\"keyword\">throws</span> BeansException&#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T) beanFactory.getBean(clz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">containsBean</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.containsBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.isSingleton(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> Class 注册对象的类型</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getType(String name) <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.getType(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 如果给定的bean名字在bean定义中有别名，则返回这些别名</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] getAliases(String name) <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanFactory.getAliases(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取aop代理对象</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> invoker</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getAopProxy</span><span class=\"params\">(T invoker)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) AopContext.currentProxy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 ConfigurableListableBeanFactory 接口，也属于 BeanFactory 的子接口。</p>\n<h3 id=\"6、怎么使用好springboot自动配置\"><a href=\"#6、怎么使用好springboot自动配置\" class=\"headerlink\" title=\"6、怎么使用好springboot自动配置\"></a>6、怎么使用好springboot自动配置</h3><p>1、选场景：<code>spring-boot-starter-data-redis</code><br>然后找到这个场景的自动配置类 <code>xxxAutoConfiguration</code><br>2、写配置<br>在这个自动配置类中，找到 <code>@EnableConfigurationProperties(xxxProperties.class)</code> 分析开启了哪些属性绑定关系,修改redis相关的配置<br>3、分析组件<br>在 <code>xxxAutoConfiguration</code> 这个自动配置类中分析，因为有两个方法，表示这个自动配置类给容器中放了两个组件，有一个组件（方法）叫 <code>stringRedisTemplate</code> ，然后去业务代码中使用自动装配注解装配这个方法。（使用组件的前提是，知道这个组件是干嘛的）<br>4、定制化（如果不满足需求，需要定制化）<br>自定义组件，自己写一个 <code>stringRedisTemplate</code> 方法，并放到容器中（自动配置类中的 <code>stringRedisTemplate</code> 这个方法上面标注了 <code>@ConditionalOnMissingBean</code>，这个注解的作用就是如果我们自己写了下面的方法，则这个自动配置类就不加载这个方法，容器中使用我们自己自定义的方法。）<br>5、例子：自定义starter启动类<br>（1）步骤：  </p>\n<ul>\n<li>创建 aliyun-oss-spring-boot-starter 模块。（只负责依赖管理）  </li>\n<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块</li>\n<li>在 aliyun-oss-spring-boot-autoconfigure 模块中定义自动配置功能，并定义自动配置文件 META-INF&#x2F;spring&#x2F;xxx.imports （老版本的为 META-INF&#x2F;spring.factories）</li>\n</ul>\n<p>（2）实例（对应上面的步骤）  </p>\n<ol>\n<li>创建 aliyun-oss-spring-boot-starter 模块：<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot2.jpg\" class=\"\">\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot3.jpg\" class=\"\">\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot4.jpg\" class=\"\"></li>\n<li>创建 aliyun-oss-spring-boot-autoconfigure 模块，在 starter 模块引入该模块，pom文件同上：<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Springboot5.jpg\" class=\"\">\n注意：没有启动类、配置文件、测试类。</li>\n</ol>\n<ul>\n<li>在步骤<code>1.</code>创建的模块pom文件中加入步骤<code>2.</code>创建的模块依赖：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPDHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在步骤<code>2.</code>创建的模块pom文件中引入oss依赖：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.15.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.activation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>activation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.jaxb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-runtime<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在<code>2.</code>模块中创建 <code>AliOSSProperties</code> 类 和 <code>AliOSSUtils</code> 类：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String endpoint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKeyId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKeySecret;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bucketName;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get 和 set 方法.....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSUtils</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> AliOSSProperties aliOSSProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// aliOSSProperties 的get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSProperties <span class=\"title function_\">getAliOSSProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aliOSSProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// aliOSSProperties 的set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSProperties <span class=\"title function_\">setAliOSSProperties</span><span class=\"params\">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.aliOSSProperties = aliOSSProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">endpoint</span> <span class=\"operator\">=</span> aliOSSProperties.getEndpoint();</span><br><span class=\"line\">        String accessKeyId= aliOSSProperties.getAccessKeyId();</span><br><span class=\"line\">        String accessKeySecret= aliOSSProperties.getAccessKeySecret();</span><br><span class=\"line\">        String bucketName= aliOSSProperties.getBcketName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取上传的文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">InputStrem</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> file.getInputStream();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 避免文件名重复导致被覆盖</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> UUID.randomUUID().toString() + originalFileName.substring(originalFileName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 上传文件到OSS</span></span><br><span class=\"line\">        <span class=\"type\">OSS</span> <span class=\"variable\">ossClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OSSClientBuilder</span>().build(endpoint,accessKeyId,accessKeySecret);</span><br><span class=\"line\">        ossClient.putObject(bucketName,fileName,inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拼接文件访问路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> endpoint.split(<span class=\"string\">&quot;//&quot;</span>)]<span class=\"number\">0</span>] + <span class=\"string\">&quot;//&quot;</span> + bucketName + <span class=\"string\">&quot;.&quot;</span> + endpoint.split(<span class=\"string\">&quot;//&quot;</span>)[<span class=\"number\">1</span>] + <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭ossClient</span></span><br><span class=\"line\">        ossClient.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在<code>2.</code>模块中创建 AliOSSAutoConfiguration 配置类：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(AliOSSProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliOSSAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AliOSSUtils <span class=\"title function_\">aliOSSUtils</span><span class=\"params\">(AliOSSProperties aliOSSProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliOSSUtils</span> <span class=\"variable\">aliOSSUtils</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliOSSUtils</span>();</span><br><span class=\"line\">        aliOSSUtils.setAliOSSProperties(aliOSSProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aliOSSUtils;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>在 <code>aliyun-oss-spring-boot-autoconfigure</code> 模块中定义自动配置功能，并定义自动配置文件 <code>META-INF/spring/xxx.imports</code> （老版本的为 <code>META-INF/spring.factories</code>）</li>\n</ol>\n<ul>\n<li>在<code>2.</code>模块的<code>resource</code>目录下创建文件夹 <code>META-INF</code>，继续在<code>META-INF</code>文件夹下创建<code>spring</code>文件夹，继续在<code>spring</code>文件夹下创建：<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</li>\n<li>将 <code>AliOSSAutoConfiguration</code> 类的全类名填入<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中</li>\n</ul>\n<h3 id=\"7、springboot多环境配置\"><a href=\"#7、springboot多环境配置\" class=\"headerlink\" title=\"7、springboot多环境配置\"></a>7、springboot多环境配置</h3><p>1、<code>properties</code>文件<br>将应用程序的配置参数分离到不同的<code>properties</code>文件中，每个环境对应一个<code>properties</code>文件。例如，可以创建<code>application-dev.properties</code>、<code>application-prod.properties</code>和<code>application-test.properties</code>等文件，在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等，然后在<code>application.properties</code>中通过<code>spring.profiles.active</code>属性指定当前使用的环境，springboot会根据该属性来加载对应环境的<code>properties</code>文件，覆盖默认的配置。<br>2、<code>yml</code>文件<br>同<code>properties</code>文件。<br>3、命令行参数（动态）<br>可以通过命令行参数来指定当前的环境，例如，使用<code>--spring.profiles.active=dev</code>来指定使用开发环境。  </p>\n<h3 id=\"8、springboot打包插件\"><a href=\"#8、springboot打包插件\" class=\"headerlink\" title=\"8、springboot打包插件\"></a>8、springboot打包插件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、Springboot其他组件\"><a href=\"#三、Springboot其他组件\" class=\"headerlink\" title=\"三、Springboot其他组件\"></a>三、Springboot其他组件</h1><h3 id=\"1、全局异常处理器\"><a href=\"#1、全局异常处理器\" class=\"headerlink\" title=\"1、全局异常处理器\"></a>1、全局异常处理器</h3><p>说明：<br>当出现异常的时候，会把异常抛到前端，抛出数据格式不符合规范，所以我们必须在每个controller中去处理异常，这样的话每个controller类中的方法都要去写这个处理的过程，太繁琐了，所以我们就要弄一个全局异常处理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个注解的作用是指定 要捕获的异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">ex</span><span class=\"params\">(Exception ex)</span>&#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、过滤器和拦截器\"><a href=\"#2、过滤器和拦截器\" class=\"headerlink\" title=\"2、过滤器和拦截器\"></a>2、过滤器和拦截器</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>说明：过滤器是在浏览器发送请求到服务器（<code>DispatchServlet</code>）之前，而拦截器是在<code>handlerAdpater</code>与<code>handler</code>之间，以及视图返回到<code>DispatchServlet</code>之间。<br>1、过滤器<br><code>Filter</code>快速入门（是<code>javax.servlet</code>下的）：<br>（1）定义<code>Filter</code><br>定义一个类，实现<code>Filter</code>接口，并重写其所有方法。<br>（2）配置<code>Filter</code><br><code>Filter</code>类上加<code>@WebFilter</code>注解，配置拦截资源的路径，启动类上加<code>@ServletComponentScan</code>开启<code>Servlet</code>组件支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// urlPatterns ：要拦截什么样的请求，&quot;/*&quot;表示所有</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化方法，Web服务器启动，创建Filter时调用，只调用一次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span>&#123;</span><br><span class=\"line\">        Filter.<span class=\"built_in\">super</span>.init(filterConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截到请求时，调用该方法，可调用多次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request,ServletResponse response,FilterChain chain)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 放行</span></span><br><span class=\"line\">        chain.doFilter(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁方法，服务器关闭时调用，只调用一次</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Filter.<span class=\"built_in\">super</span>.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、拦截器<br><code>Interceptor</code>快速入门：<br>（1）介绍<br><code>HandlerInterceptor</code>是Spring框架中的一个接口，它用于实现拦截器。在Spring框架中，拦截器是一种特殊的中间件，用于在请求处理之前或之后执行一些特定的操作。<code>HandlerInterceptor</code>口定义了三个方法：<code>preHandle()</code>、<code>postHandle()</code>和<code>afterCompletion()</code>，分别用于在请求处理之前、之后以及视图渲染之后执行一些操作。<br>实现<code>HandlerInterceptor</code>接口的类可以用于处理请求和响应，例如：  </p>\n<ol>\n<li>在请求处理之前执行一些操作，例如权限验证、日志记录等；  </li>\n<li>在请求处理之后执行一些操作，例如处理异常、记录日志等；  </li>\n<li>在视图渲染之后执行一些操作，例如清理资源、关闭连接等。</li>\n</ol>\n<p>要使用<code>HandlerInterceptor</code>接口，需要将其实现类注册到Spring容器中。可以通过实现<code>WebMvcConfigurer</code>接口的<code>addInterceptors()</code>方法来注册拦截器。<br>（2）实现方式<br>有两种方式（选择其中之一就可）：  </p>\n<ol>\n<li>方式一：定义一个类，实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口；  </li>\n<li>方式二：定义一个类，继承已实现了<code>HandlerInterceptor</code>接口的类，例如<code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</code>抽象类。</li>\n</ol>\n<p>然后添加<code>Interceptor</code>拦截器到<code>WebMvcConfigurer</code>配置器中，以前一般继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter</code>类，不过SrpingBoot 2.0以上<code>WebMvcConfigurerAdapter</code>类就过时了。有以下两种替代方法：  </p>\n<ul>\n<li>第一种方式：直接实现<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurer</code>接口（推荐）；  </li>\n<li>第二种方式：继承<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</code>类，但是继承<code>WebMvcConfigurationSupport</code>会让SpringBoot对mvc的自动配置失效，不过目前大多数项目是前后端分离，并没有对静态资源有自动配置的需求，所以继承<code>WebMvcConfigurationSupport</code>也未尝不可。</li>\n</ul>\n<p>（3）实现步骤  </p>\n<ol>\n<li>定义拦截器<br>实现<code>HandlerInterceptor</code>接口，并重写其所有方法。  </li>\n<li>注册拦截器  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginCheckInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标资源方法执行前执行，返回true：放行；返回false：不放行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 预处理，在业务处理器处理请求之前被调用，可以进行登录拦截，编码处理、安全控制、权限校验等处理；</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 目标资源方法执行后执行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 后处理，在业务处理器处理请求执行完成后，生成视图之前被调用。即调用了Service并返回ModelAndView，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 但未进行页面渲染，可以修改ModelAndView，这个比较少用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler,ModelAndView modelAnd View)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//  视图渲染完毕后执行，最后执行</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回处理，在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。已经渲染了页面。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest req,HttpServletResponse resp,Object handler,Exception ex)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子一：实现<code>HandlerInterceptor</code>接口<br>说明：此拦截器演示了通过注解形式，对用户权限进行拦截校验。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.annotation.UserAuthenticate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContextManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestAPIError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPermissionInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextManager userContextManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContextManager</span><span class=\"params\">(UserContextManager userContextManager)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userContextManager = userContextManager;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor preHandle -- &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod) &#123;</span><br><span class=\"line\">      <span class=\"type\">HandlerMethod</span> <span class=\"variable\">handlerMethod</span> <span class=\"operator\">=</span> (HandlerMethod) handler;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取用户权限校验注解(优先获取方法，无则再从类获取)</span></span><br><span class=\"line\">      <span class=\"type\">UserAuthenticate</span> <span class=\"variable\">userAuthenticate</span> <span class=\"operator\">=</span></span><br><span class=\"line\">          handlerMethod.getMethod().getAnnotation(UserAuthenticate.class);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == userAuthenticate) &#123;</span><br><span class=\"line\">        userAuthenticate = handlerMethod.getMethod().getDeclaringClass()</span><br><span class=\"line\">            .getAnnotation(UserAuthenticate.class);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (userAuthenticate != <span class=\"literal\">null</span> &amp;&amp; userAuthenticate.permission()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取用户信息</span></span><br><span class=\"line\">        <span class=\"type\">UserContext</span> <span class=\"variable\">userContext</span> <span class=\"operator\">=</span> userContextManager.getUserContext(request);</span><br><span class=\"line\">        <span class=\"comment\">// 权限校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userAuthenticate.type() != userContext.getType()) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如若不抛出异常，也可返回false</span></span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">      ModelAndView modelAndView)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor postHandle -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptor afterCompletion -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子二：继承<code>HandlerInterceptorAdapter</code>类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPermissionInterceptorAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HandlerInterceptorAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter preHandle -- &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">      ModelAndView modelAndView)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter postHandle -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">      Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; UserPermissionInterceptorAdapter afterCompletion -- &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>添加拦截器配置<br>方法一：实现<code>WebMvcConfigurer</code>接口（推荐）  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebWvcConfigure</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法一例子：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.context.UserContextResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebAppConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextResolver userContextResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserPermissionInterceptor</span><span class=\"params\">(UserPermissionInterceptor userPermissionInterceptor)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userPermissionInterceptor = userPermissionInterceptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserPermissionInterceptorAdapter</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      UserPermissionInterceptorAdapter userPermissionInterceptorAdapter)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userPermissionInterceptorAdapter = userPermissionInterceptorAdapter;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserContextResolver</span><span class=\"params\">(UserContextResolver userContextResolver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.userContextResolver = userContextResolver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class=\"line\">    <span class=\"comment\">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// 多个拦截器可以设置order顺序，值越小，preHandle越先执行，postHandle和afterCompletion越后执行</span></span><br><span class=\"line\">    <span class=\"comment\">// order默认的值是0，如果只添加一个拦截器，可以不显示设置order的值</span></span><br><span class=\"line\">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">        .excludePathPatterns(<span class=\"string\">&quot;/base/index&quot;</span>).order(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;).order(1);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class=\"line\">    resolvers.add(userContextResolver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法二：继承<code>WebMvcConfigurationSupport</code>类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.interceptor.UserPermissionInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebAppConfigurerSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserPermissionInterceptor userPermissionInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">  <span class=\"comment\">// private UserPermissionInterceptorAdapter userPermissionInterceptorAdapter;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以添加多个拦截器，一般只添加一个</span></span><br><span class=\"line\">    <span class=\"comment\">// addPathPatterns(&quot;/**&quot;) 表示对所有请求都拦截</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;) 表示排除对/base/index请求的拦截</span></span><br><span class=\"line\">    registry.addInterceptor(userPermissionInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">        .excludePathPatterns(<span class=\"string\">&quot;/base/index&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// registry.addInterceptor(userPermissionInterceptorAdapter).addPathPatterns(&quot;/**&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// .excludePathPatterns(&quot;/base/index&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n（4）其他主要辅助类  </li>\n<li>用户上下文类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.ToString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContext</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用户名称</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">// 用户ID</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\">  <span class=\"comment\">// 用户类型</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> AuthenticationTypeEnum type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>用户上下文操作类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.enums.AuthenticationTypeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestAPIError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.nobody.exception.RestException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.Cookie;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContextManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">COOKIE_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;__userToken&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">  <span class=\"comment\">// private RedisService redisService;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 获取用户上下文信息</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> UserContext <span class=\"title function_\">getUserContext</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userToken</span> <span class=\"operator\">=</span> getUserToken(request, COOKIE_KEY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.isEmpty(userToken)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 从缓存或者第三方获取用户信息</span></span><br><span class=\"line\">      <span class=\"comment\">// String userContextStr = redisService.getString(userToken);</span></span><br><span class=\"line\">      <span class=\"comment\">// if (!StringUtils.isEmpty(userContextStr)) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">// return JSON.parseObject(userContextStr, UserContext.class);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// 因为演示，没集成Redis，故简单new对象</span></span><br><span class=\"line\">      <span class=\"type\">UserContext</span> <span class=\"variable\">userContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserContext</span>();</span><br><span class=\"line\">      userContext.setName(<span class=\"string\">&quot;Mr.nobody&quot;</span>);</span><br><span class=\"line\">      userContext.setUserId(<span class=\"string\">&quot;0000001&quot;</span>);</span><br><span class=\"line\">      userContext.setType(AuthenticationTypeEnum.ADMIN);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> userContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestException</span>(RestAPIError.AUTH_ERROR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserToken</span><span class=\"params\">(HttpServletRequest request, String cookieKey)</span> &#123;</span><br><span class=\"line\">    Cookie[] cookies = request.getCookies();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != cookies) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(cookie.getName(), cookieKey)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> cookie.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 保存用户上下文信息</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> userContextStr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUserContext</span><span class=\"params\">(HttpServletResponse response, String userContextStr)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户token实际根据自己业务进行生成，此处简单用UUID</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userToken</span> <span class=\"operator\">=</span> UUID.randomUUID().toString();</span><br><span class=\"line\">    <span class=\"comment\">// 设置cookie</span></span><br><span class=\"line\">    <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(COOKIE_KEY, userToken);</span><br><span class=\"line\">    cookie.setPath(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    response.addCookie(cookie);</span><br><span class=\"line\">    <span class=\"comment\">// redis缓存</span></span><br><span class=\"line\">    <span class=\"comment\">// redisService.setString(userToken, userContextStr, 3600);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方法参数解析器类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nobody.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.MethodParameter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  对有UserContext参数的接口，进行拦截注入用户信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContextResolver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserContextManager userContextManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">      NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;&gt;&gt;&gt; resolveArgument -- begin...&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存获取用户信息赋值到接口参数中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userContextManager.getUserContext(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 只对UserContext参数进行拦截赋值</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> methodParameter</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter methodParameter)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (methodParameter.getParameterType().equals(UserContext.class)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n（5）拦截路径  </li>\n<li><code>/*</code> ：能匹配 <code>/dept、/emps、/login</code>，不能匹配 <code>/dept/list</code>。  </li>\n<li><code>/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。  </li>\n<li><code>/dept/*</code> ：能匹配 <code>/dept/list</code>，不能匹配 <code>/dept/list/find、/dept</code>。  </li>\n<li><code>/dept/**</code> ：能匹配 <code>/dept、/dept/list、/dept/list/find</code>。</li>\n</ol>\n<p>（6）多个拦截器执行顺序  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>上面这个图是每个拦截器都放行的情况下。<br>如果其中一个拦截器不放行，那所有的<code>postHandle</code>都不会执行，然后不放行的拦截器中的<code>afterCompletion</code>不会执行，其他的拦截器的<code>afterCompletion</code>会执行。例如：拦截器3不放行，那么执行的方法为：<code>拦截器1的preHandle</code>-》<code>拦截器2的preHandle</code>-》<code>拦截器3的preHandle</code>-》<code>拦截器2的afterCompletion</code>-》<code>拦截器1的afterCompletion</code>。<br>总结就是：  </p>\n<ol>\n<li>只有所有拦截器都放行了，postHandle方法才会执行。  </li>\n<li>只有当前拦截器放行了，当前拦截器的afterCompletion方法才会执行。</li>\n</ol>\n<p>3、过滤器和拦截器的区别<br>（1）执行流程  </p>\n<ol>\n<li>浏览器发送请求  </li>\n<li><code>Filter</code>过滤器  </li>\n<li><code>DispatcherServlet</code>  </li>\n<li><code>Interceptor</code>拦截器  </li>\n<li><code>Controller</code></li>\n</ol>\n<p>（2）区别  </p>\n<ol>\n<li>接口规范不同<br><code>Filter</code>过滤器需要实现<code>Filter</code>接口，而拦截器需要实现<code>HandlerInterceptor</code>接口。  </li>\n<li>拦截范围不同<br>过滤器<code>Filter</code>会拦截所有的资源，而<code>Interceptor</code>只会拦截spring环境中的资源。  </li>\n<li>拦截器是<code>spring</code>中的，只能作用于<code>DispatcherServlet</code>，过滤器是<code>servlet</code>。  </li>\n<li>拦截器基于java反射机制，过滤器基于函数回调。  </li>\n<li>拦截器只对<code>action</code>请求起作用，过滤器几乎所有请求都起作用。  </li>\n<li>拦截器可以多次被调用，过滤器只能在初始化的时候被调用一次。</li>\n</ol>\n<h3 id=\"3、热部署\"><a href=\"#3、热部署\" class=\"headerlink\" title=\"3、热部署\"></a>3、热部署</h3><p>1、使用 jrebel 插件<br>编写玩代码后，使用 <code>jrebel</code> 这个插件自带的启动按钮启动，然后每次编写玩都按 <code>ctrl + f9</code> 使用热部署。</p>\n<p>2、设置IDEA热部署<br>设置后，我们就不用频繁的去手动重启，它会自动刷新。就是写好代码后，在IDEA中按<code>ctrl + F9</code>，再去浏览器刷新。如果不想按<code>ctrl + F9</code>，也可以这样设置，先设置，<code>Settings ---&gt; Build ---&gt; Compiler</code>，设置自动编译（<code>Builed project automatically</code>勾选），然后<code>ctrl + shift + alt + /</code>，点击<code>Registry</code>，勾选<code>compiler.automake.allow.app.running</code>。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Springboot使用过程中遇到的问题合集\"><a href=\"#四、Springboot使用过程中遇到的问题合集\" class=\"headerlink\" title=\"四、Springboot使用过程中遇到的问题合集\"></a>四、Springboot使用过程中遇到的问题合集</h1><h3 id=\"1、springboot自动注入问题\"><a href=\"#1、springboot自动注入问题\" class=\"headerlink\" title=\"1、springboot自动注入问题\"></a>1、springboot自动注入问题</h3><p>1、使用了<code>@Component</code>注解还是无法获取到<code>bean</code>对象<br>原因：是因为<code>springboot</code>扫描器没有扫描到，默认扫描<code>springboot</code>启动类同级的包。<br>（1）解决方法一：需要到<code>springboot</code>启动类上加上包扫描注解<code>@ComponentScan</code>，而且不止要扫描需要扫描的包，还要扫描原来<code>springboot</code>启动类同级的包：<code>@ComponentScan(&#123;&quot;xxx.xxx.xxx&quot;,&quot;yyy.yyy.yyy&#125;)</code>。<br>（2）解决方法二：在<code>springboot</code>启动类上使用<code>@Import</code>注解，例子：<code>@Import(&#123;Demo1.class,Demo2.class&#125;)</code>，大括号里的<code>class</code>是需要被扫描到的类（不需要使用任何注解的普通类）。<br>（3）解决方法三：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在启动类上使用<code>@Import</code>注解，将这个配置类导入。例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo1 <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo1</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo2 <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo2</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动类</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DemoConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）解决方法四：新建一个配置类（使用<code>@Configuration</code>注解标注的类），把需要被扫描的类在这个配置类中使用<code>@Bean</code>注解标注，在新建一个选择器类实现<code>ImportSelector</code>接口，实现这个接口的方法，在这个方法中，将配置类返回，然后将这个选择器类在启动类上使用<code>@Import</code>注解导入，例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoConfig</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo1 <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// 需要扫描的类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo1</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Demo2 <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// 需要扫描的类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo2</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择器类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoSelect</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;xxx.xxx.DemoConfig&quot;</span>&#125;; <span class=\"comment\">// 上面的配置类包路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动类</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DemoSelect.class&#125;)</span>  <span class=\"comment\">// 将上面选择器类导入</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong><br>上面的方法太繁琐了，一般需要扫描的包中会提供给我们一个注解<code>@EnableXXXX</code>注解，这个注解封装了上面使用到<code>@Import</code>和<code>@ImportSelector</code>注解，我们直接在启动类上使用<code>@EnableXXXX</code>注解就可以了。<br><strong>进阶：</strong><br>关于选择器类修改，如果存在多个配置类，不可能全写在这里，可以使用下面的方法。<br>（1）在<code>resources</code>目录下新建<code>import.properties</code>文件，将需要导入的所有配置类全路径都填入。  </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">className</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">xxx.xxx.DemoConfig,\\</span></span><br><span class=\"line\"><span class=\"string\">xxx.xxx.DemoConfig2</span></span><br></pre></td></tr></table></figure>\n<p>（2）修改选择器类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoSelect</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata i)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取配置文件中的所有类型</span></span><br><span class=\"line\">\t\t<span class=\"type\">ResourceBundle</span> <span class=\"variable\">rb</span> <span class=\"operator\">=</span> ResourceBundle.getBundle(<span class=\"string\">&quot;import&quot;</span>); <span class=\"comment\">// 对应import.properties前缀</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> rb.getString(<span class=\"string\">&quot;className&quot;</span>);</span><br><span class=\"line\">\t\tString[] classNames = className.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> classNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 新版才有这个，为true就排除，className对应selectImports返回值中的一个类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * 作用是：针对上面selectImports方法中的类，排除不需要导入的类</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Predicate&lt;String&gt; <span class=\"title function_\">getExclusionFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (className) -&gt; className.contains(<span class=\"string\">&quot;DemoConfig&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常\"><a href=\"#2、Springboot多传参数导致JSON-parse-error-Unrecognized-filed-…异常\" class=\"headerlink\" title=\"2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常\"></a>2、Springboot多传参数导致JSON parse error: Unrecognized filed …异常</h3><p>1、说明：<br>（1）一个方法中只能有一个<code>@RequestBody</code>注解，因为<code>RequestBody</code>就是<code>request</code>的<code>inputStream</code>，这个流在第一次使用该注解后会关闭，后面的都会报错（stream closed）；<br>（2）默认情况下<code>@RequestBody</code>标注的对象必须包含前台传来的所有字段，如果没有包含前台传来的字段，就会报错：<code>Unrecognized field xxx , not marked as ignorable</code>，这是因为<code>MappingJacksonHttpMessageConverter</code>默认要求必须存在相应的字段，如果没有前台传来的某个字段，就会报错。<br>2、解决前端请求多余字段转换报错问题<br>（1）第一种：后端实体类可以增加一个字段来接收前台传来的这个值。<br>（2）第二种：在前端往后端传值的时候，去掉无用的字段，这样还能减少网络传输的大小。<br>（3）第三种：使用<code>com.fasterxml.jackson</code>提供的json注解  </p>\n<ul>\n<li><code>@JsonIgnore</code>注解用来忽略某些字段，可以用在Field或者Getter方法上，用在Setter方法时，和Filed效果一样。  </li>\n<li><code>@JsonIgnoreProperties(ignoreUnknown = true)</code>，将这个注解写在类上之后，就会忽略类中不存在的字段。  </li>\n<li><code>@JsonIgnoreProperties(&#123; &quot;internalId&quot;, &quot;secretKey&quot; &#125;)</code>，指定要忽略的字段，用在类上。<br>例子：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实体类</span></span><br><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Myclass &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n（4）第四种：重写配置类方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title function_\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"comment\">//添加此配置</span></span><br><span class=\"line\">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        converter.setObjectMapper(objectMapper);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3、有关对象属性中有枚举list怎么传参\"><a href=\"#3、有关对象属性中有枚举list怎么传参\" class=\"headerlink\" title=\"3、有关对象属性中有枚举list怎么传参\"></a>3、有关对象属性中有枚举list怎么传参</h3><p>1、实体类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageScanningScheme</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;ImageScanningRuleEnum&gt; rule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ImageScanningRuleEnum</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LOW(<span class=\"string\">&quot;LOW&quot;</span>, <span class=\"string\">&quot;较低&quot;</span>),</span><br><span class=\"line\">    HIGH(<span class=\"string\">&quot;HIGH&quot;</span>, <span class=\"string\">&quot;高危&quot;</span>),</span><br><span class=\"line\">    MEDIUM(<span class=\"string\">&quot;MEDIUM&quot;</span>, <span class=\"string\">&quot;中危&quot;</span>),</span><br><span class=\"line\">    CRITICAL(<span class=\"string\">&quot;CRITICAL&quot;</span>, <span class=\"string\">&quot;严重&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String text;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ImageScanningRuleEnum(String code, String text) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.text = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、前端（postman）传参</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;rule&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;LOW&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;MEDIUM&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;HIGH&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;CRITICAL&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、事务失效问题\"><a href=\"#4、事务失效问题\" class=\"headerlink\" title=\"4、事务失效问题\"></a>4、事务失效问题</h3><p><a href=\"https://www.cnblogs.com/likeguang/p/15715702.html\">完整详情链接</a><br>1、场景一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\ta();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：因为<code>test</code>方法被<code>@Transactional</code>标注，事务又是基于<code>aop</code>实现的，所以<code>UserService</code>的代理类执行<code>test</code>方法，<code>a</code>方法也被<code>@Transactional</code>标注，并且传播方式为：如果已经存在了一个事务就抛出异常；很明显，已经存在一个事务，所以正常情况会抛出异常，但是现在不会，因为事务失效了。<br>原因：<code>test</code>方法中执行<code>a</code>方法，是<code>UserService</code>类本身去调用执行的，并不是它的代理类去调用执行，所以它失效了。<br>解决办法：<br>让它代理类去调用执行<code>a</code>方法，而不是它本身去调用执行。<br>（1）办法一  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\tuserService.a();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）办法二  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加注解防止报错</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserService &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Transactional</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(1,1,1,1)&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加入后运行会报个错，需要你设置exposeProxy = true 在该类上加个注解</span></span><br><span class=\"line\">\t\t<span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService) AopContext.currentProxy();</span><br><span class=\"line\">\t\tuserService.a();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此传播方式：如果已经存在了一个事务就抛出异常</span></span><br><span class=\"line\">\t<span class=\"meta\">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tjdbcTemplate.execute(<span class=\"string\">&quot;insert into t1 values(2,2,2,2)&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）办法三<br>将<code>a</code>方法提出去另一个类（<code>xxxService</code>）中，在由这个类来调用执行。  </p>\n<h3 id=\"5、关于配置类List对象映射到实体类问题\"><a href=\"#5、关于配置类List对象映射到实体类问题\" class=\"headerlink\" title=\"5、关于配置类List对象映射到实体类问题\"></a>5、关于配置类List对象映射到实体类问题</h3><p>1、实体类<br>实体类中的属性名称必须对应配置文件中list对象中属性的名称。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionPackageType</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String language;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、实体配置类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;detection-package-type&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetectionPackageTypeConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// packages必须对应配置文件中名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DetectionPackageType&gt; packages;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、yaml配置文件  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">detection-package-type:</span></span><br><span class=\"line\">  <span class=\"attr\">packages:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Java检测规则包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Css基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Css</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JavaScript基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">JavaScript</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Html基础检测包</span></span><br><span class=\"line\">      <span class=\"attr\">code:</span> <span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"attr\">language:</span> <span class=\"string\">Html</span></span><br></pre></td></tr></table></figure>\n<p>4、使用  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意：这里注入的是实体配置类！</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DetectionPackageTypeConfig detectionPackageTypeConfig;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、VO、DTO、BO、PO、DO的区别\"><a href=\"#6、VO、DTO、BO、PO、DO的区别\" class=\"headerlink\" title=\"6、VO、DTO、BO、PO、DO的区别\"></a>6、VO、DTO、BO、PO、DO的区别</h3><img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n\n\n<h3 id=\"7、链式调用\"><a href=\"#7、链式调用\" class=\"headerlink\" title=\"7、链式调用\"></a>7、链式调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">\t\ttest.test1().test2().test3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Test <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;test3&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">test1</span></span><br><span class=\"line\">test2</span><br><span class=\"line\">test3</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8、替换-Autowired注解的方式\"><a href=\"#8、替换-Autowired注解的方式\" class=\"headerlink\" title=\"8、替换@Autowired注解的方式\"></a>8、替换@Autowired注解的方式</h3><p>使用lombok的<code>@RequiredArgsConstructor</code>注解。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的final必须和@RequiredArgsConstructor一起用</span></span><br><span class=\"line\">    <span class=\"comment\">// 不注入的话就不用加final，要注入才加final</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TestService testService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9、需要在Springboot项目启动之后做某些操作\"><a href=\"#9、需要在Springboot项目启动之后做某些操作\" class=\"headerlink\" title=\"9、需要在Springboot项目启动之后做某些操作\"></a>9、需要在Springboot项目启动之后做某些操作</h3><p>1、CommandLineRunner和ApplicationRunner<br>使用 CommandLineRunner或ApplicationRunner 在应用启动时自动执行数据加载逻辑。这是最常见的实现方式。<br>（1）介绍<br>这两个是Springboot中新增的扩展点，之所以将这两个扩展点放在一起，是因为它两个功能特性高度相似，不同的只是名字、扩展方法形参数类型、执行先后的一些小的不同。<br>这两个接口触发时机为整个项目启动完毕后，自动执行。如果有多个CommandLineRunner，可以利用@Order来进行排序。<br>（2）注意  </p>\n<ul>\n<li>CommandLineRunner和ApplicationRunner都有一个扩展方法run()，但是run()形参数类型不同；  </li>\n<li>CommandLineRunner.run()方法的形参数类型是String… args，ApplicationRunner.run()的形参数类型是ApplicationArguments args；  </li>\n<li>CommandLineRunner.run()的执行时机要晚于ApplicationRunner.run()一点；  </li>\n<li>CommandLineRunner和ApplicationRunner触发执行时机是在Spring容器、Tomcat容器正式启动完成后，可以正式处理业务请求前，即项目启动的最后一步；  </li>\n<li>CommandLineRunner和ApplicationRunner可以应用的场景：项目启动前，热点数据的预加载、清除临时文件、读取自定义配置信息等。</li>\n</ul>\n<p>（3）使用场景<br><strong>初始化数据</strong>：使用 CommandLineRunner 可以在应用启动后初始化一些必要的数据，例如从数据库加载某些配置或插入初始数据。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;初始化数据：插入初始数据&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟插入初始数据</span></span><br><span class=\"line\">        insertInitialData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertInitialData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;插入数据：用户表初始数据&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>启动后执行任务</strong>：使用 CommandLineRunner 可以在应用启动后执行一些特定的任务，比如发送一个通知或启动一些背景任务。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TaskExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;启动后执行任务：发送启动通知&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟发送启动通知</span></span><br><span class=\"line\">        sendStartupNotification();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendStartupNotification</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;通知：应用已启动&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>读取命令行参数</strong>：使用 CommandLineRunner 可以获取并处理命令行参数，这对于需要根据启动参数动态配置应用的场景非常有用。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass CommandLineArgsProcessor <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理命令行参数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String arg : args) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;参数：&quot;</span> + arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(AppConfig.class, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;参数1&quot;</span>, <span class=\"string\">&quot;参数2&quot;</span>, <span class=\"string\">&quot;参数3&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、@PostConstruct<br>使用 @PostConstruct 注解 在服务类中通过 @Postconstruct 注解标记等初始化方法，在 Bean 创建后立即执行数据加载。<br>（1）介绍<br>可以看出来其本身不是Spring定义的注解，但是Spring提供了具体的实现。这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postProcessBeforeInitialization之后，InitializingBean.afterPropertiesSet之前。<br>（2）注意  </p>\n<ul>\n<li>使用@PostConstruct注解标记的方法不能有参数，除非是拦截器，可以采用拦截器规范定义的InvocationContext对象；  </li>\n<li>使用@PostConstruct注解标记的方法不能有返回值，实际上如果有返回值，也不会报错，但是会忽略掉；  </li>\n<li>使用@PostConstruct注解标记的方法不能被static修饰，但是final是可以的。</li>\n</ul>\n<p>（3）代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\">publicclass CachePreloader &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;User&gt; users = userService.getAllFixedData(); <span class=\"comment\">// 从数据库获取数据</span></span><br><span class=\"line\">        users.forEach(user -&gt; </span><br><span class=\"line\">            redisTemplate.opsForValue().set(<span class=\"string\">&quot;user:&quot;</span> + user.getId(), user)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）使用场景<br>使用场景与 InitializingBean 类似，具体看下文的InitializingBean。  </p>\n<p>3、InitializingBean<br>（1）介绍<br>这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只在bean实例化、属性注入后的提供了一个扩展点afterPropertiesSet方法，凡是继承该接口的类，在初始前、属性赋值后，都会执行该方法。这个扩展点的触发时机在postProcessAfterInitialization之前。  </p>\n<img src=\"/2023/10/24/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.jpg\" class=\"\">  \n<p>（2）注意  </p>\n<ul>\n<li>与InitializingBean#afterPropertiesSet()类似效果的是init-method，但是需要注意的是InitializingBean#afterPropertiesSet()执行时机要略早于init-method；  </li>\n<li>InitializingBean#afterPropertiesSet()的调用方式是在bean初始化过程中真接调用bean的afterPropertiesSet()；  </li>\n<li>bean自定义属性init-method是通过java反射的方式进行调用 。</li>\n</ul>\n<p>（3）使用场景<br><strong>初始化资源</strong>：可以在 Bean 初始化后自动启动一些资源，如数据库连接、文件读取等。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass ResourceInitializer <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟资源初始化</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;资源初始化：建立数据库连接&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">performAction</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;资源使用：执行数据库操作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">ResourceInitializer</span> <span class=\"variable\">initializer</span> <span class=\"operator\">=</span> context.getBean(ResourceInitializer.class);</span><br><span class=\"line\">        initializer.performAction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>设置初始值</strong>：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass InitialValueSetter <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String initialValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        initialValue = <span class=\"string\">&quot;默认值&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;设置初始值：&quot;</span> + initialValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前值：&quot;</span> + initialValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">InitialValueSetter</span> <span class=\"variable\">valueSetter</span> <span class=\"operator\">=</span> context.getBean(InitialValueSetter.class);</span><br><span class=\"line\">        valueSetter.printValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>加载配置</strong>：可以在 Bean 初始化后加载必要的配置，如从文件或数据库中读取配置。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass ConfigLoader <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟配置加载</span></span><br><span class=\"line\">        configValue = <span class=\"string\">&quot;配置值&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加载配置：&quot;</span> + configValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前配置：&quot;</span> + configValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.seven&quot;)</span></span><br><span class=\"line\">publicclass AppConfig &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">        <span class=\"type\">ConfigLoader</span> <span class=\"variable\">configLoader</span> <span class=\"operator\">=</span> context.getBean(ConfigLoader.class);</span><br><span class=\"line\">        configLoader.printConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"10、SpringBoot公共字段自动填充\"><a href=\"#10、SpringBoot公共字段自动填充\" class=\"headerlink\" title=\"10、SpringBoot公共字段自动填充\"></a>10、SpringBoot公共字段自动填充</h3><p>1、方案一（前提使用<code>MybatisPlus</code>）<br>（1）配置元对象处理器  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">publicclass AutoFillHandler <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入时自动填充</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictInsertFill(metaObject, <span class=\"string\">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictInsertFill(metaObject, <span class=\"string\">&quot;createUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新时自动填充</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strictUpdateFill(metaObject, <span class=\"string\">&quot;updateUser&quot;</span>, String.class, getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前用户（从安全上下文）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getCurrentUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(SecurityContextHolder.getContext())</span><br><span class=\"line\">                      .map(SecurityContext::getAuthentication)</span><br><span class=\"line\">                      .map(Authentication::getName)</span><br><span class=\"line\">                      .orElse(<span class=\"string\">&quot;system&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）实体类注解配置  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\">publicclass BaseEntity &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createUser;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateUser;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订单实体继承基类</span></span><br><span class=\"line\">publicclass Order <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务字段...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、方案二（AOP统一处理）<br>（1）自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoFill &#123;</span><br><span class=\"line\">    OperationType <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">OperationType</span> &#123;</span><br><span class=\"line\">    INSERT,</span><br><span class=\"line\">    UPDATE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）切面实现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\">publicclass AutoFillAspect &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(autoFill)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp, AutoFill autoFill)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arg <span class=\"keyword\">instanceof</span> BaseEntity) &#123;</span><br><span class=\"line\">                fillFields((BaseEntity) arg, autoFill.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pjp.proceed(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fillFields</span><span class=\"params\">(BaseEntity entity, OperationType type)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">currentUser</span> <span class=\"operator\">=</span> getCurrentUser();</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == OperationType.INSERT) &#123;</span><br><span class=\"line\">            entity.setCreateTime(now);</span><br><span class=\"line\">            entity.setCreateUser(currentUser);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        entity.setUpdateTime(now);</span><br><span class=\"line\">        entity.setUpdateUser(currentUser);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前用户（支持多线程环境）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getCurrentUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(RequestContextHolder.getRequestAttributes())</span><br><span class=\"line\">                      .map(attrs -&gt; (ServletRequestAttributes) attrs)</span><br><span class=\"line\">                      .map(ServletRequestAttributes::getRequest)</span><br><span class=\"line\">                      .map(req -&gt; req.getHeader(<span class=\"string\">&quot;X-User-Id&quot;</span>))</span><br><span class=\"line\">                      .orElse(<span class=\"string\">&quot;system&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11、ImportBeanDefinitionRegistrar用法\"><a href=\"#11、ImportBeanDefinitionRegistrar用法\" class=\"headerlink\" title=\"11、ImportBeanDefinitionRegistrar用法\"></a>11、ImportBeanDefinitionRegistrar用法</h3><p>1、使用场景<br>如果要实现动态Bean的装载，尤其是如果想装载动态代理对象的时候，例如Mybatis的启动器就是使用了Mapper接口的代理对象装载的，这种场景下，不能使用@Import和继承ImportSelector的方法，得使用<code>ImportBeanDefinitionRegistrar</code>。  </p>\n<p>2、简单使用  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个需要动态装载的Bean的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个ImportBeanDefinitionRegistrar的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoImportBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个Demo对应的BeanDefinition对象</span></span><br><span class=\"line\">        <span class=\"type\">GenericBeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GenericBeanDefinition</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 或者：beanDefinition.setBeanClassName(&quot;xxx.xxx.Demo&quot;);</span></span><br><span class=\"line\">\t\tbeanDefinition.setBeanClass(Demo.class);</span><br><span class=\"line\">        <span class=\"comment\">// 注册BeanDefinition</span></span><br><span class=\"line\">        registry.registerBeanDefinition(<span class=\"string\">&quot;demo&quot;</span>, beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在启动类上使用@Import注解</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DemoImportBeanDefinitionRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、进阶使用<br>简单使用中只有一个类，那如果需要加载的bean类很多，就得再使用一个扫描类<code>ClassPathBeanDefinitionScanner</code>。<br>原理就是：它会去识别指定加了注解的类，把这些类的BeanDefinition对象注册到容器中，我们可以看springboot扫描@Component注解的源码参考，具体位置在<code>ComponentScanAnnotationParser</code>类中的<code>parse</code>方法第一行。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在`xxx.xxx.demo`包下新增一个Demo类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再新增一个类去实现ImportBeanDefinitionRegistrar</span></span><br><span class=\"line\"><span class=\"comment\">// 别忘了还要在启动类上使用@Import注解导入：@Import(DemoComponentRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponentRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个扫描器</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 第二个参数是使用它默认的扫描规则，也就是需要在Demo类上面加上@Component注解才能被扫描到</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 为false代表自己自定义扫描规则，示例看下面被注释的部分</span></span><br><span class=\"line\">        <span class=\"type\">ClassPathBeanDefinitionScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathBeanDefinitionScanner</span>(registry, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 扫描指定包路径</span></span><br><span class=\"line\">        scanner.scan(<span class=\"string\">&quot;xxx.xxx.demo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// @Override</span></span><br><span class=\"line\">\t<span class=\"comment\">// public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//     ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry, false);</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tscanner.addIncludeFilter(new TypeFilter() &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\tpublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\t// 自定义扫描规则，这里只扫描Demo类</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\t// false：代表不通过，也就是不加载到容器中</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t\treturn metadataReader.getClassMetadata().getClassName().equals(&quot;xxx.xxx.demo.Demo&quot;);</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t&#125;);</span></span><br><span class=\"line\">\t<span class=\"comment\">//     // 扫描指定包路径</span></span><br><span class=\"line\">\t<span class=\"comment\">//     scanner.scan(&quot;xxx.xxx.demo&quot;);</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、高阶使用<br>我们自己自定义一个注解，期望加了这个注解的类都能被装载到容器中。<br>比如一个场景：扫描某个包，并且被扫描的包中的类，要被加上我们自定义的注解，才能被加载到容器中。<br>（1）自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DemoComponent &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）在<code>xxx.xxx.demo</code>包下新建一个类，并且使用自定义注解  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DemoComponent</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）创建一个Registrar类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 别忘了还要在启动类上使用@Import注解导入：@Import(DemoComponentRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoComponentRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">\t    <span class=\"type\">ClassPathBeanDefinitionScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathBeanDefinitionScanner</span>(registry, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\tscanner.addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeFilter</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">match</span><span class=\"params\">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 自定义扫描规则</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// false：代表不通过，也就是不加载到容器中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// &quot;xxx.xxx.demo.DemoComponent&quot;为自定义注解的路径</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> metadataReader.getAnnotationMetadata().hasAnnotation(<span class=\"string\">&quot;xxx.xxx.demo.DemoComponent&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t    <span class=\"comment\">// 扫描指定包路径</span></span><br><span class=\"line\">\t    scanner.scan(<span class=\"string\">&quot;xxx.xxx.demo&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Spring","path":"api/tags/Spring.json"}]}