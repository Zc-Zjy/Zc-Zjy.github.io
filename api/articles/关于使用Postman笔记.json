{"title":"关于使用Postman笔记","slug":"关于使用Postman笔记","date":"2023-09-28T07:48:43.000Z","updated":"2024-07-24T05:09:41.281Z","comments":true,"path":"api/articles/关于使用Postman笔记.json","realPath":null,"excerpt":null,"covers":["/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg","/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg","/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg","/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/4.png"],"cover":null,"content":"<hr>\n<h1 id=\"一、关于Postman的说明\"><a href=\"#一、关于Postman的说明\" class=\"headerlink\" title=\"一、关于Postman的说明\"></a>一、关于Postman的说明</h1><h3 id=\"1、postman界面\"><a href=\"#1、postman界面\" class=\"headerlink\" title=\"1、postman界面\"></a>1、postman界面</h3><p>1、Collections：集合，项目集合<br>2、Apis：api文档<br>3、EnViromments：环境变量，全局变量<br>4、Mock Server：虚拟服务器<br>5、Monitors：监听器<br>6、History：历史记录  </p>\n<h3 id=\"2、请求页面说明\"><a href=\"#2、请求页面说明\" class=\"headerlink\" title=\"2、请求页面说明\"></a>2、请求页面说明</h3><p>1、Params（get请求传参 ）<br>（1）@PathVariable 这种方式传参，直接在请求路径后面加参数值<br><strong>后端controller的请求为：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;list/&#123;category&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">voidlist</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;category&quot;)</span> String category)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>postman发送请求为：</strong></p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">\n<p>（2）@RequestParam 这种方式传参，就在Query Params列表下输入参数<br><strong>说明：</strong> 要是参数比较多，不能一个一个输入，可以点击 Bulk Edit，批量输入。<br> <strong>后端controller的请求为：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/doneList&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doneList</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;&quot;)</span> String category,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestParam(value = &quot;keywords&quot;,defaultValue = &quot;&quot;)</span>String keywords)</span> &#123;&#125;       </span><br></pre></td></tr></table></figure>\n<p><strong>postman发送请求为：</strong></p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">\n<p>2、Authorization（鉴权）<br>3、Headers（请求头）<br>4、Body（post请求参数）<br>（1）none：没有参数<br>（2）form-data：既可以传键值对参数，也可以传文件<br>（3）x-www-from-urlencoded：只能够传键值对参数<br>（4）raw：可以传json、text、xml、html、javascript<br>（5）binary：把文件以二进制的方式传参<br>5、Pre-request Script（请求前的前置脚本）<br>6、Tests（请求之后的断言，用来查看请求之后的结果）<br>7、Cookies（蓝色的字体，用来管理cookie信息）  </p>\n<h3 id=\"3、响应页面说明\"><a href=\"#3、响应页面说明\" class=\"headerlink\" title=\"3、响应页面说明\"></a>3、响应页面说明</h3><p>（1）Body：接口返回的数据<br>（2）Cookies：响应的Cookie信息<br>（3）Headers：响应头<br>（4）Test Results：断言的结果</p>\n<h3 id=\"4、Postman的内置参数\"><a href=\"#4、Postman的内置参数\" class=\"headerlink\" title=\"4、Postman的内置参数\"></a>4、Postman的内置参数</h3><p><strong>说明：</strong>“{ {}}” 中加上“$”就是内置的参数。<br>（1）{ { $timestamp }}：生成当前时间的时间戳。<br>（2）{ { $randomInt }}：生成 0-1000 之间的随机数。<br>（3）{ { $guid }}：生成速记 GUID 字符串。</p>\n<h3 id=\"5、请求头各参数说明\"><a href=\"#5、请求头各参数说明\" class=\"headerlink\" title=\"5、请求头各参数说明\"></a>5、请求头各参数说明</h3><p>（1）Host：请求的主机地址。<br>（2）Connection：连接方式。<br>（3）Accept：客户端接收到的数据格式。<br>（4）X-Requested-With：异步请求。<br>（5）User-Agent：客户端的用户类型。（向服务器描述浏览器的类型）<br>（6）Referer：来源。<br>（7）Cookie：Cookie信息。<br>（8）Content-Type：请求内容的格式。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Postman的一些用法\"><a href=\"#二、Postman的一些用法\" class=\"headerlink\" title=\"二、Postman的一些用法\"></a>二、Postman的一些用法</h1><h3 id=\"1、Postman全局设置token\"><a href=\"#1、Postman全局设置token\" class=\"headerlink\" title=\"1、Postman全局设置token\"></a>1、Postman全局设置token</h3><p><strong>说明：</strong>当我们使用Postman来测试接口时，发送每个请求都需要手动加上token，这样的操作太繁琐了，所以我们可以设置全局token，在每次发送请求的时候自动给我们加上token。<br>（1）在Collections中，点击Pre-request Script选项。<br>（2）输入下面代码脚本，根据实际情况更改。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.<span class=\"title function_\">sendRequest</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://localhost:8080/api/v1/account/login&#x27;</span>, <span class=\"comment\">// 登录的接口地址</span></span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">header</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Accept&quot;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;raw&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">raw</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">username</span>: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\">// 登录账号</span></span><br><span class=\"line\">            <span class=\"attr\">password</span>: <span class=\"string\">&quot;admin&quot;</span> <span class=\"comment\">// 登录密码</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">    pm.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&#x27;token&#x27;</span>, <span class=\"attr\">value</span>: res.<span class=\"title function_\">json</span>().<span class=\"property\">data</span> <span class=\"comment\">// 登录请求返回的token数据，如果是data里面的token，就是data.token；key后面的&#x27;token&#x27;表示token的名字。</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Postman全局变量使用方法\"><a href=\"#2、Postman全局变量使用方法\" class=\"headerlink\" title=\"2、Postman全局变量使用方法\"></a>2、Postman全局变量使用方法</h3><p>（1）在登录的接口那，点击 Tests 选项。<br>（2）在这里使用 js 代码提取 responseBody 返回的数据，比如 token。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(responseBody); <span class=\"comment\">// 查看 responseBody 数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(responseBody); <span class=\"comment\">// 将 responseBody（返回的是 JSON 字符串） 转换为 JSON 数据</span></span><br><span class=\"line\">pm.<span class=\"property\">globals</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;token&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>); <span class=\"comment\">// 左边方框里面 Snippets 下面选择 Set a global variable 这个选项，然后自动生成的</span></span><br></pre></td></tr></table></figure>\n<p>（3）然后可以点击右上角 No Environment 旁边的小眼睛图标查看是否提取设置成功。<br><strong>注意：</strong>如果出现 token 无效等关于 token 的异常错误，就需要在每个请求接口的 Headers 头部中加入  这个。 </p>\n<h3 id=\"3、Postman环境变量使用方法\"><a href=\"#3、Postman环境变量使用方法\" class=\"headerlink\" title=\"3、Postman环境变量使用方法\"></a>3、Postman环境变量使用方法</h3><p><strong>说明：</strong>有多种环境（开发环境、生产环境、测试环境）的情况下使用 EnViromments  环境变量。<br>（1）点击 EnViromments 选项，新增三个环境，分别为 开发环境、生产环境、测试环境；<br>（2）三个环境的 Variable 下的值要一样，比如都是 url ，Initial value下的值为服务器地址，比如 localhost:8080；<br>（3）在请求接口的时候就不用这样写了：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>localhost:<span class=\"number\">8080</span><span class=\"regexp\">/api/</span>v1<span class=\"regexp\">/account/</span>login</span><br></pre></td></tr></table></figure>\n<p>改成：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>&#123;&#123;url&#125;&#125;:<span class=\"number\">8080</span><span class=\"regexp\">/api/</span>v1<span class=\"regexp\">/account/</span>login</span><br></pre></td></tr></table></figure>\n<p>（4）使用：在右上角有一个 No EnViromment，点击选择需要在哪个环境下发送请求就可以了。</p>\n<h3 id=\"4、Postman请求测试同时上传文件和json对象的接口\"><a href=\"#4、Postman请求测试同时上传文件和json对象的接口\" class=\"headerlink\" title=\"4、Postman请求测试同时上传文件和json对象的接口\"></a>4、Postman请求测试同时上传文件和json对象的接口</h3><p><strong>controller的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后端需要两个参数，一个参数用来接收上传文件，另一个参数用来接收json数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 后端接收文件可以采用MultipartFile来接收，json数据可以创建对象进行接收， </span></span><br><span class=\"line\"><span class=\"comment\">// 采用@RequestPart注解进行数据绑定</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestPart(&quot;file&quot;)</span> MultipartFile uploadFile,<span class=\"meta\">@RequestPart(&quot;req&quot;)</span> <span class=\"meta\">@Valid</span> Query req)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 业务代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用postman进行请求：</strong><br>（1）使用 form-data 来进行传参，将文件和json数据隔开。<br>（2）根据后端别名来取名，文件为：file；json为：req（根据上面controller参数得来。<br>（3）在req json数据后面 Content type列加上 application&#x2F;json就可以了  </p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">\n\n<h3 id=\"5、前端通过日期参数传给后端\"><a href=\"#5、前端通过日期参数传给后端\" class=\"headerlink\" title=\"5、前端通过日期参数传给后端\"></a>5、前端通过日期参数传给后端</h3><p>（1）前端请求<br><code>http://localhost:8080/dateParam?time=2022-12-12 10:05:45</code><br>（2）后端controller接收  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">dateParam</span><span class=\"params\">(<span class=\"meta\">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime time)</span>&#123;</span><br><span class=\"line\">  System.out.println(time);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、前端传过来的是路径参数\"><a href=\"#6、前端传过来的是路径参数\" class=\"headerlink\" title=\"6、前端传过来的是路径参数\"></a>6、前端传过来的是路径参数</h3><p>（1）前端请求<br><code>http://localhost:8080/path/1</code><br>（2）后端controller接收  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">dateParam</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span>&#123;</span><br><span class=\"line\">  System.out.println(id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、参数是数组对象以及普通属性，并且每个对象里面都有file\"><a href=\"#7、参数是数组对象以及普通属性，并且每个对象里面都有file\" class=\"headerlink\" title=\"7、参数是数组对象以及普通属性，并且每个对象里面都有file\"></a>7、参数是数组对象以及普通属性，并且每个对象里面都有file</h3><p>参数示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;classObj&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;class1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> file对象<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;class2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> file对象<span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>1、后端接口接受<br>（1）可以先创建一个实体类vo用来接收前端的参数，针对上面的示例（也可以直接使用Map，不创建接收类）；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVO</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"comment\">// 下面用来接收classObj中的id和name</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sting&gt; idList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sting&gt; nameList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Integer&gt; countList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）在controller中接收参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(MultipartFile[] files, TestVO testVO)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、前端postman请求<br>（1）使用<code>form-data</code>来发送请求；<br>（2）将参数分为：id、name、idList、nameList、files、countList（注意：这里命名一定要和VO和controller中的参数对应）；<br>特别说明：<code>idList、nameList、files、countList</code>这四个中存的数据顺序要一一对应！（顺序需要前端进行排序）<br>示例为：  </p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/4.png\" class=\"\">\n","more":"<hr>\n<h1 id=\"一、关于Postman的说明\"><a href=\"#一、关于Postman的说明\" class=\"headerlink\" title=\"一、关于Postman的说明\"></a>一、关于Postman的说明</h1><h3 id=\"1、postman界面\"><a href=\"#1、postman界面\" class=\"headerlink\" title=\"1、postman界面\"></a>1、postman界面</h3><p>1、Collections：集合，项目集合<br>2、Apis：api文档<br>3、EnViromments：环境变量，全局变量<br>4、Mock Server：虚拟服务器<br>5、Monitors：监听器<br>6、History：历史记录  </p>\n<h3 id=\"2、请求页面说明\"><a href=\"#2、请求页面说明\" class=\"headerlink\" title=\"2、请求页面说明\"></a>2、请求页面说明</h3><p>1、Params（get请求传参 ）<br>（1）@PathVariable 这种方式传参，直接在请求路径后面加参数值<br><strong>后端controller的请求为：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;list/&#123;category&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">voidlist</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;category&quot;)</span> String category)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>postman发送请求为：</strong></p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">\n<p>（2）@RequestParam 这种方式传参，就在Query Params列表下输入参数<br><strong>说明：</strong> 要是参数比较多，不能一个一个输入，可以点击 Bulk Edit，批量输入。<br> <strong>后端controller的请求为：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/doneList&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doneList</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;&quot;)</span> String category,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestParam(value = &quot;keywords&quot;,defaultValue = &quot;&quot;)</span>String keywords)</span> &#123;&#125;       </span><br></pre></td></tr></table></figure>\n<p><strong>postman发送请求为：</strong></p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">\n<p>2、Authorization（鉴权）<br>3、Headers（请求头）<br>4、Body（post请求参数）<br>（1）none：没有参数<br>（2）form-data：既可以传键值对参数，也可以传文件<br>（3）x-www-from-urlencoded：只能够传键值对参数<br>（4）raw：可以传json、text、xml、html、javascript<br>（5）binary：把文件以二进制的方式传参<br>5、Pre-request Script（请求前的前置脚本）<br>6、Tests（请求之后的断言，用来查看请求之后的结果）<br>7、Cookies（蓝色的字体，用来管理cookie信息）  </p>\n<h3 id=\"3、响应页面说明\"><a href=\"#3、响应页面说明\" class=\"headerlink\" title=\"3、响应页面说明\"></a>3、响应页面说明</h3><p>（1）Body：接口返回的数据<br>（2）Cookies：响应的Cookie信息<br>（3）Headers：响应头<br>（4）Test Results：断言的结果</p>\n<h3 id=\"4、Postman的内置参数\"><a href=\"#4、Postman的内置参数\" class=\"headerlink\" title=\"4、Postman的内置参数\"></a>4、Postman的内置参数</h3><p><strong>说明：</strong>“{ {}}” 中加上“$”就是内置的参数。<br>（1）{ { $timestamp }}：生成当前时间的时间戳。<br>（2）{ { $randomInt }}：生成 0-1000 之间的随机数。<br>（3）{ { $guid }}：生成速记 GUID 字符串。</p>\n<h3 id=\"5、请求头各参数说明\"><a href=\"#5、请求头各参数说明\" class=\"headerlink\" title=\"5、请求头各参数说明\"></a>5、请求头各参数说明</h3><p>（1）Host：请求的主机地址。<br>（2）Connection：连接方式。<br>（3）Accept：客户端接收到的数据格式。<br>（4）X-Requested-With：异步请求。<br>（5）User-Agent：客户端的用户类型。（向服务器描述浏览器的类型）<br>（6）Referer：来源。<br>（7）Cookie：Cookie信息。<br>（8）Content-Type：请求内容的格式。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Postman的一些用法\"><a href=\"#二、Postman的一些用法\" class=\"headerlink\" title=\"二、Postman的一些用法\"></a>二、Postman的一些用法</h1><h3 id=\"1、Postman全局设置token\"><a href=\"#1、Postman全局设置token\" class=\"headerlink\" title=\"1、Postman全局设置token\"></a>1、Postman全局设置token</h3><p><strong>说明：</strong>当我们使用Postman来测试接口时，发送每个请求都需要手动加上token，这样的操作太繁琐了，所以我们可以设置全局token，在每次发送请求的时候自动给我们加上token。<br>（1）在Collections中，点击Pre-request Script选项。<br>（2）输入下面代码脚本，根据实际情况更改。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.<span class=\"title function_\">sendRequest</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://localhost:8080/api/v1/account/login&#x27;</span>, <span class=\"comment\">// 登录的接口地址</span></span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">header</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Accept&quot;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;raw&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">raw</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">username</span>: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\">// 登录账号</span></span><br><span class=\"line\">            <span class=\"attr\">password</span>: <span class=\"string\">&quot;admin&quot;</span> <span class=\"comment\">// 登录密码</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">    pm.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&#x27;token&#x27;</span>, <span class=\"attr\">value</span>: res.<span class=\"title function_\">json</span>().<span class=\"property\">data</span> <span class=\"comment\">// 登录请求返回的token数据，如果是data里面的token，就是data.token；key后面的&#x27;token&#x27;表示token的名字。</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Postman全局变量使用方法\"><a href=\"#2、Postman全局变量使用方法\" class=\"headerlink\" title=\"2、Postman全局变量使用方法\"></a>2、Postman全局变量使用方法</h3><p>（1）在登录的接口那，点击 Tests 选项。<br>（2）在这里使用 js 代码提取 responseBody 返回的数据，比如 token。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(responseBody); <span class=\"comment\">// 查看 responseBody 数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(responseBody); <span class=\"comment\">// 将 responseBody（返回的是 JSON 字符串） 转换为 JSON 数据</span></span><br><span class=\"line\">pm.<span class=\"property\">globals</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;token&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>); <span class=\"comment\">// 左边方框里面 Snippets 下面选择 Set a global variable 这个选项，然后自动生成的</span></span><br></pre></td></tr></table></figure>\n<p>（3）然后可以点击右上角 No Environment 旁边的小眼睛图标查看是否提取设置成功。<br><strong>注意：</strong>如果出现 token 无效等关于 token 的异常错误，就需要在每个请求接口的 Headers 头部中加入  这个。 </p>\n<h3 id=\"3、Postman环境变量使用方法\"><a href=\"#3、Postman环境变量使用方法\" class=\"headerlink\" title=\"3、Postman环境变量使用方法\"></a>3、Postman环境变量使用方法</h3><p><strong>说明：</strong>有多种环境（开发环境、生产环境、测试环境）的情况下使用 EnViromments  环境变量。<br>（1）点击 EnViromments 选项，新增三个环境，分别为 开发环境、生产环境、测试环境；<br>（2）三个环境的 Variable 下的值要一样，比如都是 url ，Initial value下的值为服务器地址，比如 localhost:8080；<br>（3）在请求接口的时候就不用这样写了：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>localhost:<span class=\"number\">8080</span><span class=\"regexp\">/api/</span>v1<span class=\"regexp\">/account/</span>login</span><br></pre></td></tr></table></figure>\n<p>改成：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>&#123;&#123;url&#125;&#125;:<span class=\"number\">8080</span><span class=\"regexp\">/api/</span>v1<span class=\"regexp\">/account/</span>login</span><br></pre></td></tr></table></figure>\n<p>（4）使用：在右上角有一个 No EnViromment，点击选择需要在哪个环境下发送请求就可以了。</p>\n<h3 id=\"4、Postman请求测试同时上传文件和json对象的接口\"><a href=\"#4、Postman请求测试同时上传文件和json对象的接口\" class=\"headerlink\" title=\"4、Postman请求测试同时上传文件和json对象的接口\"></a>4、Postman请求测试同时上传文件和json对象的接口</h3><p><strong>controller的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后端需要两个参数，一个参数用来接收上传文件，另一个参数用来接收json数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 后端接收文件可以采用MultipartFile来接收，json数据可以创建对象进行接收， </span></span><br><span class=\"line\"><span class=\"comment\">// 采用@RequestPart注解进行数据绑定</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestPart(&quot;file&quot;)</span> MultipartFile uploadFile,<span class=\"meta\">@RequestPart(&quot;req&quot;)</span> <span class=\"meta\">@Valid</span> Query req)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 业务代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用postman进行请求：</strong><br>（1）使用 form-data 来进行传参，将文件和json数据隔开。<br>（2）根据后端别名来取名，文件为：file；json为：req（根据上面controller参数得来。<br>（3）在req json数据后面 Content type列加上 application&#x2F;json就可以了  </p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">\n\n<h3 id=\"5、前端通过日期参数传给后端\"><a href=\"#5、前端通过日期参数传给后端\" class=\"headerlink\" title=\"5、前端通过日期参数传给后端\"></a>5、前端通过日期参数传给后端</h3><p>（1）前端请求<br><code>http://localhost:8080/dateParam?time=2022-12-12 10:05:45</code><br>（2）后端controller接收  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">dateParam</span><span class=\"params\">(<span class=\"meta\">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime time)</span>&#123;</span><br><span class=\"line\">  System.out.println(time);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、前端传过来的是路径参数\"><a href=\"#6、前端传过来的是路径参数\" class=\"headerlink\" title=\"6、前端传过来的是路径参数\"></a>6、前端传过来的是路径参数</h3><p>（1）前端请求<br><code>http://localhost:8080/path/1</code><br>（2）后端controller接收  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">dateParam</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id)</span>&#123;</span><br><span class=\"line\">  System.out.println(id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、参数是数组对象以及普通属性，并且每个对象里面都有file\"><a href=\"#7、参数是数组对象以及普通属性，并且每个对象里面都有file\" class=\"headerlink\" title=\"7、参数是数组对象以及普通属性，并且每个对象里面都有file\"></a>7、参数是数组对象以及普通属性，并且每个对象里面都有file</h3><p>参数示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;classObj&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;class1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> file对象<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;class2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> file对象<span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>1、后端接口接受<br>（1）可以先创建一个实体类vo用来接收前端的参数，针对上面的示例（也可以直接使用Map，不创建接收类）；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVO</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"comment\">// 下面用来接收classObj中的id和name</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sting&gt; idList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sting&gt; nameList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Integer&gt; countList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）在controller中接收参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(MultipartFile[] files, TestVO testVO)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、前端postman请求<br>（1）使用<code>form-data</code>来发送请求；<br>（2）将参数分为：id、name、idList、nameList、files、countList（注意：这里命名一定要和VO和controller中的参数对应）；<br>特别说明：<code>idList、nameList、files、countList</code>这四个中存的数据顺序要一一对应！（顺序需要前端进行排序）<br>示例为：  </p>\n<img src=\"/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/4.png\" class=\"\">\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"测试工具","path":"api/tags/测试工具.json"},{"name":"Postman","path":"api/tags/Postman.json"}]}