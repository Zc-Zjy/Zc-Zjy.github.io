{"title":"ElasticSearch学习笔记","slug":"ElasticSearch学习笔记","date":"2025-01-12T04:14:24.000Z","updated":"2025-01-13T16:05:08.398Z","comments":true,"path":"api/articles/ElasticSearch学习笔记.json","realPath":null,"excerpt":null,"covers":["/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png","/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.png"],"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><p>本笔记中所用到的所有资料可在这里获取：<a href=\"https://pan.baidu.com/s/1jo-0f6Ge5p8B-_dK2dP0eg?pwd=78ly\">链接</a><br>提取码：78ly  </p>\n<h3 id=\"1、简介和安装\"><a href=\"#1、简介和安装\" class=\"headerlink\" title=\"1、简介和安装\"></a>1、简介和安装</h3><h4 id=\"1-官网\"><a href=\"#1-官网\" class=\"headerlink\" title=\"(1)官网\"></a>(1)官网</h4><p><a href=\"https://www.elastic.co/cn/elasticsearch\">地址链接</a>。  </p>\n<h4 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"(2)介绍\"></a>(2)介绍</h4><p>Elasticsearch是由elastic公司开发的一套搜索引擎技术，它是elastic技术栈中的一部分，是基于Java语言的搜索引擎类库<a href=\"https://lucene.apache.org/\">Lucene</a>（优势：易扩展、基于<a href=\"#elasticsearch114\">倒排索引</a>实现、高性能）研发的。完整的技术栈包括：  </p>\n<ul>\n<li>Elasticsearch：用于数据存储、计算和搜索  </li>\n<li>Logstash&#x2F;Beats：用于数据收集、抓取  </li>\n<li>Kibana：用于数据可视化</li>\n</ul>\n<p>整套技术栈被称为ELK，经常用来做日志收集、系统监控和状态分析等等。<br>但是现在只需要两部分：elasticsearch（存储、搜索和运算）和kibana（图形化展示）。<br>使用elasticsearch是为了数据存储、搜索、分析的；使用kibana是因为它有Elasticsearch对外提供的是Restful风格的API，任何操作都可以通过发送http请求来完成，并且它针对elasticsearch的api提供了语法提示。<br>elasticsearch是面向文档（Document）存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中。因此，原本数据库中的一行数据就是ES中的一个JSON文档；而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的字段（Field）。<br>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档、用户的文档、订单文档等等。所有文档都散乱存放显然非常混乱，也不方便管理。因此，我们要将类型相同的文档集中在一起管理，称为索引（Index）：所有用户文档，就可以组织在一起，称为用户的索引；所有商品的文档，可以组织在一起，称为商品的索引；所有订单的文档，可以组织在一起，称为订单的索引。<br>因此，我们可以把索引当做是数据库中的表。<br>Mysql和Elasticsearch中概念对比：  </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Mysql</th>\n<th align=\"center\">Elasticsearch</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Table</td>\n<td align=\"center\">Index</td>\n<td align=\"center\">索引(index)，就是文档的集合，类似数据库的表(table)</td>\n</tr>\n<tr>\n<td align=\"center\">Row</td>\n<td align=\"center\">Document</td>\n<td align=\"center\">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>\n</tr>\n<tr>\n<td align=\"center\">Column</td>\n<td align=\"center\">Field</td>\n<td align=\"center\">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>\n</tr>\n<tr>\n<td align=\"center\">Schema</td>\n<td align=\"center\">Mapping</td>\n<td align=\"center\">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>\n</tr>\n<tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">DSL</td>\n<td align=\"center\">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>\n</tr>\n</tbody></table>\n<p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性。<br>Elasticsearch：擅长海量数据的搜索、分析、计算。<br>因此在企业中，往往是两者结合使用：  </p>\n<ul>\n<li>对安全性要求较高的写操作，使用mysql实现；  </li>\n<li>对查询性能要求较高的搜索需求，使用elasticsearch实现；  </li>\n<li>两者再基于某种方式，实现数据的同步，保证一致性。<br><code>可以考虑采用MQ异步通知实现</code>和<code>可以使用mysql的bin_log文件与cannal,通过解析mysql的bin_log文件，来去更新es索引库</code>等等方法。</li>\n</ul>\n<h4 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"(3)安装\"></a>(3)安装</h4><p>1、基于docker安装<br>（1）基于<code>docker</code>命令安装<code>elasticsearch</code>单机版本：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name es \\</span><br><span class=\"line\">  -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \\</span><br><span class=\"line\">  -e &quot;discovery.type=single-node&quot; \\</span><br><span class=\"line\">  -v es-data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">  -v es-plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --network hm-net \\</span><br><span class=\"line\">  -p 9200:9200 \\</span><br><span class=\"line\">  -p 9300:9300 \\</span><br><span class=\"line\">  elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：因为elasticsearch是java写的，底层运行的时候，需要配置jvm的最大和最小内存，这里是最低的内存配置，不能再低了；  </li>\n<li><code>-e &quot;discovery.type=single-node&quot;</code>：运行模式，单机运行；  </li>\n<li><code>v es-data:/usr/share/elasticsearch/data</code>：数据卷挂载，挂载数据存储目录；  </li>\n<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：数据卷挂载，挂载插件目录；  </li>\n<li><code>--privileged</code>：权限，elasticsearch需要root权限；  </li>\n<li><code>--network hm-net</code>：网络，使用自定义的docker网络；  </li>\n<li><code>-p 9200:9200</code>：端口映射，访问http的端口号；  </li>\n<li><code>-p 9300:9300</code>：端口映射，elasticsearch集群部署时之间的通信端口号；  </li>\n<li><code>elasticsearch:7.12.1</code>：镜像名和版本号。</li>\n</ul>\n<p>注意，这里采用的是elasticsearch的7.12.1版本，由于8以上版本的JavaAPI变化很大，在企业中应用并不广泛，企业中应用较多的还是8以下的版本。<br>如果拉取镜像困难，可以直接从资料<code>Elasticsearch01</code>目录中获取<code>es.tar</code>镜像包导入。<br>安装完成后，访问9200端口，即可看到响应的Elasticsearch服务的基本信息，说明安装成功。<br>（2）安装<code>Kibana</code>，通过下面docker命令，即可部署：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name kibana \\</span><br><span class=\"line\">-e ELASTICSEARCH_HOSTS=http://es:9200 \\</span><br><span class=\"line\">--network=hm-net \\</span><br><span class=\"line\">-p 5601:5601  \\</span><br><span class=\"line\">kibana:7.12.1</span><br></pre></td></tr></table></figure>\n<p><code>-e ELASTICSEARCH_HOSTS=http://es:9200</code>：设置elasticsearch的地址，kibana需要连接elasticsearch，才能展示数据。<br><code>elasticsearch</code>和<code>kibana</code>的docker镜像包，可以从资料<code>Elasticsearch01</code>目录中获取<code>kibana.tar</code>镜像包导入。<br>安装完成后，访问<code>http://ip:5601</code>即可看到kibana的界面，选择<code>Explore on my own</code>之后进入主页面，选中<code>Dev tools</code>进入开发工具页面：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>（3）安装<code>IK分词器</code><br>Elasticsearch的关键就是倒排索引，而倒排索引依赖于对文档内容的分词，而分词则需要高效、精准的分词算法，IK分词器就是这样一个中文分词算法。<br>注意：IK分词器要和Elasticsearch版本一致，否则安装失败。<br>安装方式一：<code>在线安装</code><br>运行一个命令即可：<code>docker exec -it es ./bin/elasticsearch-plugin  install https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-7.12.1.zip</code>。<br>然后重启es容器：<code>docker restart es</code>。<br>安装方式二：<code>离线安装</code><br>如果网速较差，也可以选择离线安装。<br>首先，查看之前安装的Elasticsearch容器的plugins数据卷目录：<code>docker volume inspect es-plugins</code>，可以看到elasticsearch的插件挂载到了<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录，需要把IK分词器上传至这个目录，在资料中找到<code>elasticsearch-analysis-ik-7.12.1.zip</code>包，上传到虚拟机的<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录中ik目录再进行解压（ik目录需要新建），然后重启es容器。  </p>\n<p>2、基于本地安装，请自行查阅。  </p>\n<p><a id=\"elasticsearch114\"></a>  </p>\n<h4 id=\"4-正向索引和倒排索引\"><a href=\"#4-正向索引和倒排索引\" class=\"headerlink\" title=\"(4)正向索引和倒排索引\"></a>(4)正向索引和倒排索引</h4><p>1、正向索引<br>讲倒排索引之前，先解释下正向索引：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 表ta_goods</span><br><span class=\"line\">id（索引） <span class=\"operator\">|</span>    name    <span class=\"operator\">|</span> price <span class=\"operator\">|</span> description</span><br><span class=\"line\"><span class=\"number\">1</span>          <span class=\"operator\">|</span>  小米手机  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">2</span>          <span class=\"operator\">|</span>  华为手机  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">3</span>          <span class=\"operator\">|</span>  华为电脑  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">4</span>          <span class=\"operator\">|</span>  小米手环  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">5</span>          <span class=\"operator\">|</span>  小米电脑  <span class=\"operator\">|</span> <span class=\"number\">5000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">6</span>          <span class=\"operator\">|</span>  小米电视  <span class=\"operator\">|</span> <span class=\"number\">3000</span>  <span class=\"operator\">|</span> 描述</span><br></pre></td></tr></table></figure>\n<p>其中的id字段已经创建了索引，由于索引底层采用了B+树结构，因此我们根据id搜索的速度会非常快。但是其他字段例如name，只在叶子节点上存在，因此要根据name搜索的时候只能遍历树中的每一个叶子节点，判断name数据是否符合要求。<br>比如sql：<code>select * from tb_goods where name like &#39;%手机%&#39;;</code>，执行这条语句，针对正向索引，执行逻辑就是：  </p>\n<ol>\n<li>检查到搜索条件为like ‘%手机%’，需要找到name中包含手机的数据；  </li>\n<li>逐条遍历每行数据（每个叶子节点），比如第1次拿到id为1的数据；  </li>\n<li>判断数据中的name字段值是否符合条件；  </li>\n<li>如果符合则放入结果集，不符合则丢弃；  </li>\n<li>回到1.继续执行。</li>\n</ol>\n<p>综上，根据id精确匹配时，可以走索引，查询效率较高。而当搜索条件为模糊匹配时，由于索引无法生效，导致从索引查询退化为全表扫描，效率很差。<br>因此，正向索引适合于根据索引字段的精确搜索，不适合基于部分词条的模糊匹配，而倒排索引恰好解决的就是根据部分词条模糊匹配的问题。<br>2、倒排索引<br>倒排索引中有两个非常重要的概念：  </p>\n<ul>\n<li>文档（Document）：用来搜索的数据，其中的每一条数据就是一个文档；  </li>\n<li>词条（Term）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条。</li>\n</ul>\n<p>创建倒排索引是对正向索引的一种特殊处理和应用，流程如下：  </p>\n<ul>\n<li>将每一个文档的数据利用分词算法根据语义拆分，得到一个个词条，例如上面ta_goods表中，第一条数据（也就是文档）拆分可得：小米、手机；  </li>\n<li>创建表，每行数据包括词条、词条所在文档id、位置等信息，例如：小米这个词条，对应的id有1、4、5、6，手机这个词条对应的id有1、2。<br>可得倒排索引：  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">词条（索引）<span class=\"operator\">|</span>  文档id</span><br><span class=\"line\">小米        <span class=\"operator\">|</span>  <span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span></span><br><span class=\"line\">手机        <span class=\"operator\">|</span>  <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\">华为        <span class=\"operator\">|</span>  <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">电脑        <span class=\"operator\">|</span>  <span class=\"number\">3</span>,<span class=\"number\">5</span></span><br><span class=\"line\">手环        <span class=\"operator\">|</span>  <span class=\"number\">4</span></span><br><span class=\"line\">电视        <span class=\"operator\">|</span>  <span class=\"number\">6</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>倒排索引搜索流程（根据上面得到的倒排索引）：  </p>\n<ol>\n<li>用户输入条件”华为手机”进行搜索；  </li>\n<li>对用户输入条件分词，得到词条：华为、手机；  </li>\n<li>拿着词条在倒排索引中查找（由于词条有索引，查询效率很高），即可得到包含词条的文档id：1、2、3；  </li>\n<li>拿着文档id到正向索引中查找具体文档即可（由于id也有索引，查询效率也很高）。</li>\n</ol>\n<p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。<br>3、两者区别和优缺点<br>（1）区别：<br><code>正向索引</code>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是根据文档找词条的过程。<br><code>倒排索引</code>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是根据词条找文档的过程。<br>（2）<code>正向索引</code>优缺点<br>优点：  </p>\n<ul>\n<li>可以给多个字段创建索引  </li>\n<li>根据索引字段搜索、排序速度非常快</li>\n</ul>\n<p>缺点：<br>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。<br>（3）<code>倒排索引</code>优缺点<br>优点：<br>根据词条搜索、模糊搜索时，速度非常快。<br>缺点：  </p>\n<ul>\n<li>只能给词条创建索引，而不是字段  </li>\n<li>无法根据字段做排序</li>\n</ul>\n<h4 id=\"5-IK分词器\"><a href=\"#5-IK分词器\" class=\"headerlink\" title=\"(5)IK分词器\"></a>(5)IK分词器</h4><p>1、说明<br>Elasticsearch中提供的标准分词器<code>standard</code>不满足需求，因为这个分词器只能将中文句子一个字一个字分离出来（例如：这个手机good，这句话，使用标准分词器分得：这、个、手、机、good），因此需要IK分词器。<br>IK分词器有两种模式：  </p>\n<ul>\n<li><code>ik_smart</code>：智能语义切分；<br>例如：这个手机good，这句话，使用ik_smart分得：这个、手机、good。  </li>\n<li><code>ik_max_word</code>：最细粒度切分。</li>\n</ul>\n<p>2、扩展词典<br>有可能有些词条IK分词器不认识，比如：泰裤辣，因此需要扩展词典。<br>（1）打开IK分词器config目录，注意，如果采用在线安装的通过，默认是没有config目录的，需要把资料中提供的ik下的config上传至对应目录；<br>（2）在IKAnalyzer.cfg.xml配置文件内容添加：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">properties</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comment</span>&gt;</span>IK Analyzer 扩展配置<span class=\"tag\">&lt;/<span class=\"name\">comment</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）在IK分词器的config目录新建一个ext.dic（对应IKAnalyzer.cfg.xml配置中的扩展词典名），可以参考config目录下复制一个配置文件进行修改，文件格式为utf-8；<br>（4）将需要添加的词条添加到ext.dic中，比如将泰裤辣这个词直接添加到文件中，一个词占一行，重启Elasticsearch即可。  </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泰裤辣</span><br><span class=\"line\">其他词1</span><br><span class=\"line\">其他词2</span><br></pre></td></tr></table></figure>\n\n<p>3、总结<br>（1）分词器的作用是什么？  </p>\n<ul>\n<li>创建倒排索引时，对文档分词  </li>\n<li>用户搜索时，对输入的内容分词</li>\n</ul>\n<p>（2）IK分词器有几种模式？  </p>\n<ul>\n<li>ik_smart：智能切分，粗粒度  </li>\n<li>ik_max_word：最细切分，细粒度</li>\n</ul>\n<p>（3）IK分词器如何拓展词条？如何停用词条？  </p>\n<ul>\n<li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典  </li>\n<li>在词典中添加拓展词条或者停用词条</li>\n</ul>\n<h3 id=\"2、Kibana中索引库操作\"><a href=\"#2、Kibana中索引库操作\" class=\"headerlink\" title=\"2、Kibana中索引库操作\"></a>2、Kibana中索引库操作</h3><p>Index就类似数据库表，Mapping映射就类似表的结构，要向es中存储数据，必须先创建Index和Mapping。<br>Mapping是对索引库中文档的约束，常见的Mapping属性包括：  </p>\n<ul>\n<li>type：字段数据类型，常见的简单类型有：</li>\n</ul>\n<ol>\n<li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）  </li>\n<li>数值：long、integer、short、byte、double、float  </li>\n<li>布尔：boolean  </li>\n<li>日期：date  </li>\n<li>对象：object</li>\n</ol>\n<ul>\n<li>index：是否创建索引，默认为true，一般需要搜索的属性都为true  </li>\n<li>analyzer：使用哪种分词器  </li>\n<li>properties：该字段的子字段</li>\n</ul>\n<p>例如下面的json文档：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">21</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型为integer，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52.1</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型为float，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isMarried&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型boolean，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员Java讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型text，参与搜索，分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型keyword，不参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;score&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">99.1</span><span class=\"punctuation\">,</span> <span class=\"number\">99.5</span><span class=\"punctuation\">,</span> <span class=\"number\">98.9</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型float，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型keyword，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span> <span class=\"comment\">// 字段类型keyword，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>1、创建索引库和映射<br>Kibana的DevTools来编写请求。<br>（1）创建索引库和映射<br>基本语法：  </p>\n<ul>\n<li>请求方式：PUT；  </li>\n<li>请求路径：&#x2F;索引库名，自定义；  </li>\n<li>请求参数：mapping映射。</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引库名称</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_smart&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名2&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名3&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;子字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"comment\">// ...略</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima <span class=\"comment\">// 创建heima索引库</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// info是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_smart&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// emil是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;false&quot;</span> <span class=\"comment\">// email不参与搜索，不需要建索引</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// name是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查询索引库<br>基本语法：  </p>\n<ul>\n<li>请求方式：GET；  </li>\n<li>请求路径：&#x2F;索引库名；  </li>\n<li>请求参数：无。</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /索引库名</span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /heima</span><br></pre></td></tr></table></figure>\n\n<p>3、删除索引库<br>基本语法：  </p>\n<ul>\n<li>请求方式：DELETE  </li>\n<li>请求路径：&#x2F;索引库名  </li>\n<li>请求参数：无</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /索引库名</span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /heima</span><br></pre></td></tr></table></figure>\n\n<p>4、修改索引库<br>索引库不能修改，但是可以向原有的索引库中添加新的字段：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引库名/_mapping</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;新字段名&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：<br>向heima索引库中添加age字段，类型为integer。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima/_mapping</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、Kibana中文档操作\"><a href=\"#3、Kibana中文档操作\" class=\"headerlink\" title=\"3、Kibana中文档操作\"></a>3、Kibana中文档操作</h3><p>有了索引库，接下来就可以向索引库中添加数据了。<br>1、新增文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /索引库名/_doc/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段3&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;子属性1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;子属性2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值4&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /heima/_doc/<span class=\"number\">1</span> <span class=\"comment\">// 向heima索引库中添加一条数据（文档），1表示id</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员Java讲师&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查询文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名称<span class=\"punctuation\">&#125;</span>/_doc/<span class=\"punctuation\">&#123;</span>id<span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /heima/_doc/<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>3、删除文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_doc/id值</span><br></pre></td></tr></table></figure>\n<p>示例：<br>从heima索引库中删除id为1的文档（数据）。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /heima/_doc/<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>4、修改文档<br>修改有两种方式：  </p>\n<ul>\n<li>全量修改：直接覆盖原来的文档；  </li>\n<li>局部修改：修改文档中的部分字段。</li>\n</ul>\n<p>（1）全量修改<br>全量修改是覆盖原来的文档（也就是覆盖原来的数据），其本质是两步操作：  </p>\n<ol>\n<li>根据指定的id删除原来的文档；  </li>\n<li>新增一个相同id的新文档。</li>\n</ol>\n<p>注意：如果根据id删除时，id不存在，第二步新增也会执行，也就从修改变成了新增操作了。<br>语法：<br>注意：字段必须所有字段都提供。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_doc/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// ... 略</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima/_doc/<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员高级Java讲师&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）局部修改<br>局部修改是只修改指定id匹配的文档中的部分字段。<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_update/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;doc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">         <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;新的值&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>注意：全局修改是<code>PUT请求</code>，并且路径中是<code>_doc</code>；而局部修改是<code>POST请求</code>，并且路径中是<code>_update</code>。<br>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /heima/_update/<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;doc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、批处理<br>批处理采用POST请求，基本语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准语法</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span> <span class=\"comment\">// 如果报错，把中间空格删除</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;field1&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;delete&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;create&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;field1&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value3&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;update&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;doc&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;field2&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value2&quot;</span><span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>（1）index：代表新增操作；<br>（2）_index：指定索引库名；<br>（3）_id指定要操作的文档id；<br>（4）{ “field1” : “value1” }：则是要操作的文档内容。<br>示例：<br>批量新增：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员C++讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ww@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;五&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;王&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员前端讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;三&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;张&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>批量删除：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;delete&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;delete&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Java代码操作\"><a href=\"#二、Java代码操作\" class=\"headerlink\" title=\"二、Java代码操作\"></a>二、Java代码操作</h1><h3 id=\"1、官网地址\"><a href=\"#1、官网地址\" class=\"headerlink\" title=\"1、官网地址\"></a>1、官网地址</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/index.html\">官网地址</a>。  </p>\n<h3 id=\"2、说明\"><a href=\"#2、说明\" class=\"headerlink\" title=\"2、说明\"></a>2、说明</h3><p>老版本的客户端已经被标记为过时，而这里采用的是7.12版本，因此只能使用老版本客户端：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>注意：7.15以后的新版本都是基于lambda表达式的写法了。<br>然后选择7.12版本，HighLevelRestClient版本：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n\n<h3 id=\"3、操作前准备\"><a href=\"#3、操作前准备\" class=\"headerlink\" title=\"3、操作前准备\"></a>3、操作前准备</h3><p>1、创建索引库前分析<br>搜索页面的效果如图所示：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>根据上图分析得到需要创建的索引库：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /items</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// id参与搜索，而且一般是keyword，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 商品名词，参与搜索，分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_max_word&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 价格，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;image&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 图片，不参与搜索，所以index为false，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;category&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 分类，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 品牌，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sold&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 销量，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commentCount&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 评价数，不参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;isAD&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 是否为广告推广，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;updateTime&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 更新时间，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;date&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、初始化elasticsearch客户端<br>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。<br>（1）在需要使用elasticsearch的服务中引入依赖；  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）因为SpringBoot默认的ES版本是7.17.10，所以我们需要覆盖默认的ES版本：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">elasticsearch.version</span>&gt;</span>7.12.1<span class=\"tag\">&lt;/<span class=\"name\">elasticsearch.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）初始化RestHighLevelClient对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果加了<span class=\"doctag\">@SpringBootTest</span>，需要去指定启动的环境，</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认是dev环境，可以通过<span class=\"doctag\">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class=\"line\"><span class=\"comment\"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IndexTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在Java单元测试中，<span class=\"doctag\">@BeforeEach</span> 和 <span class=\"doctag\">@AfterEach</span> 是JUnit框架提供的注解，用于在每个测试方法执行之前和之后执行特定的代码。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@BeforeEach</span> 注解的方法会在每个测试方法执行之前运行，通常用于设置测试环境或初始化对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@AfterEach</span> 注解的方法会在每个测试方法执行之后运行，通常用于清理资源或重置状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * 这两个注解帮助确保每个测试都是独立的，避免测试之间的相互影响。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@BeforeEach</span>修饰在方法上，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在每一个测试方法（所有<span class=\"doctag\">@Test</span>、<span class=\"doctag\">@RepeatedTest</span>、<span class=\"doctag\">@ParameterizedTest</span>或者<span class=\"doctag\">@TestFactory</span>注解的方法）之前执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">     * 例如：一个测试类有2个测试方法testA()和testB()，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 还有一个<span class=\"doctag\">@BeforeEach</span>的方法，执行这个测试类，<span class=\"doctag\">@BeforeEach</span>的方法会在testA()之前执行一次，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在testB()之前又执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@BeforeEach</span>的方法一共执行了2次。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client = <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(<span class=\"string\">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testConnect</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(client);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、索引库操作\"><a href=\"#4、索引库操作\" class=\"headerlink\" title=\"4、索引库操作\"></a>4、索引库操作</h3><p>以下操作都是基于<code>3、操作前准备</code>的<code>2、初始化elasticsearch客户端</code>中创建的<code>IndexTest</code>类来弄的。  </p>\n<h4 id=\"1-创建索引库\"><a href=\"#1-创建索引库\" class=\"headerlink\" title=\"(1)创建索引库\"></a>(1)创建索引库</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.创建Request对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * CreateIndexRequest应该导包org.elasticsearch.client.indices.CreateIndexRequest，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 而不是org.elasticsearch.action.admin.indices.create。</span></span><br><span class=\"line\"><span class=\"comment\">\t * items是索引库名。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"type\">CreateIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreateIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.准备请求参数</span></span><br><span class=\"line\"><span class=\"comment\">\t * 其实就是Json格式的Mapping映射参数。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因为json字符串很长，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里是定义了静态字符串常量MAPPING_TEMPLATE，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 让代码看起来更加优雅。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.发送请求</span></span><br><span class=\"line\"><span class=\"comment\">\t * client.indices()方法的返回值是IndicesClient类型，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 封装了所有与索引库操作有关的方法。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 例如创建索引、删除索引、判断索引是否存在等。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 第二个参数：请求可选项，直接走默认。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MAPPING_TEMPLATE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;  \\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;properties\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;id\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;name\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;price\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;image\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;index\\&quot;: false\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;category\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;brand\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;sold\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;commentCount\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;isAD\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;boolean\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;updateTime\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;date\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;  &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-删除索引库\"><a href=\"#2-删除索引库\" class=\"headerlink\" title=\"(2)删除索引库\"></a>(2)删除索引库</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DELETE /hotel</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request对象，items是索引库名</span></span><br><span class=\"line\">    <span class=\"type\">DeleteIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-判断索引库是否存在\"><a href=\"#3-判断索引库是否存在\" class=\"headerlink\" title=\"(3)判断索引库是否存在\"></a>(3)判断索引库是否存在</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /hotel</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testExistsIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request对象</span></span><br><span class=\"line\">    <span class=\"type\">GetIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 3.输出</span></span><br><span class=\"line\">    System.err.println(exists ? <span class=\"string\">&quot;索引库已经存在！&quot;</span> : <span class=\"string\">&quot;索引库不存在！&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、文档操作\"><a href=\"#5、文档操作\" class=\"headerlink\" title=\"5、文档操作\"></a>5、文档操作</h3><p>操作前准备，创建文档，需要从数据库查询出来数据，再存入elasticsearch中，所以需要使用配置文件：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.hmall.item.service.IItemService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"comment\">// 激活配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认是dev环境，可以通过<span class=\"doctag\">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class=\"line\"><span class=\"comment\"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local，</span></span><br><span class=\"line\"><span class=\"comment\"> * 也可以使用下面的方式。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(properties = &quot;spring.profiles.active=local&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DocumentTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 注入service，用于查询数据库</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IItemService itemService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client = <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(<span class=\"string\">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建对应索引库的实体类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;索引库实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ItemDoc</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;价格（分）&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品图片&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String image;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;类目名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String category;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;品牌名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;评论数&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer commentCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;是否是推广广告，true/false&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isAD;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下操作都是在<code>DocumentTest</code>类中添加。  </p>\n<h4 id=\"1-新增文档\"><a href=\"#1-新增文档\" class=\"headerlink\" title=\"(1)新增文档\"></a>(1)新增文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POST /&#123;索引库名&#125;/_doc/1</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;name&quot;: &quot;Jack&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;age&quot;: 21</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testAddDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.根据id查询商品数据</span></span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> itemService.getById(<span class=\"number\">100002644680L</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.转换为文档类型</span></span><br><span class=\"line\">    <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class=\"line\">    <span class=\"comment\">// 3.将ItemDTO转json</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">doc</span> <span class=\"operator\">=</span> JSONUtil.toJsonStr(itemDoc);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request对象，items是索引库名</span></span><br><span class=\"line\">    <span class=\"type\">IndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>).id(itemDoc.getId());</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备Json文档</span></span><br><span class=\"line\">    request.source(doc, XContentType.JSON);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    client.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查询文档\"><a href=\"#2-查询文档\" class=\"headerlink\" title=\"(2)查询文档\"></a>(2)查询文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /&#123;索引库名&#125;/_doc/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testGetDocumentById</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request对象</span></span><br><span class=\"line\">    <span class=\"type\">GetRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;items&quot;</span>).id(<span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">GetResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 3.获取响应结果中的source，source就是数据结果</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> response.getSourceAsString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;itemDoc= &quot;</span> + ItemDoc);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-删除文档\"><a href=\"#3-删除文档\" class=\"headerlink\" title=\"(3)删除文档\"></a>(3)删除文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DELETE /hotel/_doc/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request，两个参数，第一个是索引库名，第二个是文档id</span></span><br><span class=\"line\">    <span class=\"type\">DeleteRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteRequest</span>(<span class=\"string\">&quot;item&quot;</span>, <span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-修改文档\"><a href=\"#4-修改文档\" class=\"headerlink\" title=\"(4)修改文档\"></a>(4)修改文档</h4><p>之前说过修改有两种方式：全量修改和局部修改，这里没有区分：  </p>\n<ul>\n<li>如果新增时，id已经存在，则为修改；  </li>\n<li>如果新增时，id不存在，则为新建。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POST /&#123;索引库名&#125;/_update/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;doc&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;字段名&quot;: &quot;字段值&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;字段名&quot;: &quot;字段值&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request</span></span><br><span class=\"line\">    <span class=\"type\">UpdateRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateRequest</span>(<span class=\"string\">&quot;items&quot;</span>, <span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备请求参数，修改价格和评论数</span></span><br><span class=\"line\">    request.doc(</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>, <span class=\"number\">58800</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;commentCount&quot;</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    client.update(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-批量新增文档\"><a href=\"#5-批量新增文档\" class=\"headerlink\" title=\"(5)批量新增文档\"></a>(5)批量新增文档</h4><p>在之前的案例中，我们都是操作单个文档。而数据库中的商品数据实际会达到数十万条，某些项目中可能达到数百万条。<br>我们如果要将这些数据导入索引库，肯定不能逐条导入，而是采用批处理方案。常见的方案有：<br>（1）利用Logstash批量导入；  </p>\n<ul>\n<li>需要安装Logstash；  </li>\n<li>对数据的再加工能力较弱；</li>\n<li>无需编码，但要学习编写Logstash导入配置。</li>\n</ul>\n<p>（2）利用JavaAPI批量导入。  </p>\n<ul>\n<li>需要编码，但基于JavaAPI，学习成本低；  </li>\n<li>更加灵活，可以任意对数据做再加工处理后写入索引库。</li>\n</ul>\n<p>接下来，我们就学习下如何利用JavaAPI实现批量文档导入。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testLoadItemDocs</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分页查询商品数据</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因为商品数据量较大，所以采用分页查询，每次查询1000条，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 所以这里循环，直到查询不到数据为止。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        Page&lt;Item&gt; page = itemService.lambdaQuery().eq(Item::getStatus, <span class=\"number\">1</span>).page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;Item&gt;(pageNo, size));</span><br><span class=\"line\">        <span class=\"comment\">// 非空校验</span></span><br><span class=\"line\">        List&lt;Item&gt; items = page.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;加载第&#123;&#125;页数据，共&#123;&#125;条&quot;</span>, pageNo, items.size());</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">        <span class=\"type\">BulkRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BulkRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.准备参数，添加多个新增的Request</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2.1.转换为文档类型ItemDTO</span></span><br><span class=\"line\">            <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class=\"line\">            <span class=\"comment\">// 2.2.创建新增文档的Request对象</span></span><br><span class=\"line\">            request.add(<span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>()</span><br><span class=\"line\">                            .id(itemDoc.getId())</span><br><span class=\"line\">                            .source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 翻页</span></span><br><span class=\"line\">        pageNo++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、DSL查询\"><a href=\"#6、DSL查询\" class=\"headerlink\" title=\"6、DSL查询\"></a>6、DSL查询</h3><p>上面对文档的操作都是根据id操作的，而我们想要应对复杂查询就得使用DSL查询。<br>DSL查询：就是Json格式来定义查询条件，一般分为两类：<br>（1）叶子查询：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。<br>（2）复合查询：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。<br>然后在查询以后，还可以对查询结果继续做处理，包括：<br>（1）排序：按照1个或多个字段值进行排序；<br>（2）分页：根据<code>from</code>和<code>size</code>做分页，类似mysql；<br>（3）高亮：对搜索结果中的关键字添加特殊样式，使其更加醒目；<br>（4）聚合：对搜索结果做数据统计以形成报表。  </p>\n<h4 id=\"1-Kibana中操作DSL\"><a href=\"#1-Kibana中操作DSL\" class=\"headerlink\" title=\"(1)Kibana中操作DSL\"></a>(1)Kibana中操作DSL</h4><p><strong>1、基本语法</strong>  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;查询类型&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">// .. 查询条件</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明：<code>GET /&#123;索引库名&#125;/_search</code>：其中的<code>_search</code>是固定路径，不能修改。<br>例如，我们以最简单的无条件查询为例，查询items索引库中的数据，无条件查询的类型是：<code>match_all</code>，因此其查询语句如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>发现发现虽然是<code>match_all</code>，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条，这是因为处于安全考虑，elasticsearch设置了默认的查询页数。  </p>\n<p><strong>2、叶子查询</strong><br>叶子查询的类型也可以做进一步细分，详情大家可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html\">官网文档</a>。<br>这里列举一些常见的，例如：  </p>\n<ul>\n<li><code>Full Text Queries</code>（全文检索查询）：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。  </li>\n<li><code>Term-level queries</code>（精确查询）：不会对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。  </li>\n<li>地理坐标查询：用于搜索地理位置，搜索方式很多。</li>\n</ul>\n<p>（1）<code>全文检索查询</code><br>全文检索的种类也很多，详情可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html\">官网文档</a>。<br>这里以全文检索中的<code>match</code>为例，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n<p>与<code>match</code>类似的还有<code>multi_match</code>，区别在于可以同时对多个字段搜索，而且多个字段都要满足，语法示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;multi_match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;字段1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;字段2&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png\" class=\"\">  \n\n<p>（2）<code>精确查询</code><br>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询，也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配，因此推荐查找keyword、数值、日期、boolean类型的字段。例如：id、price、城市、地名、人名等等，作为一个整体才有含义的字段。<br>详情可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html\">官网文档</a>。<br>这里以查询<code>term</code>索引库为例，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png\" class=\"\">  \n<p>如果查询条件是：华为 小米，因为不做分词，所以是查询不到结果的。<br>再来看下<code>range</code>查询，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>最小值<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lte&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>最大值<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明：<code>range</code>是范围查询，对于范围筛选的关键字有：<code>gte</code>（大于等于）、<code>gt</code>（大于）、<code>lte</code>（小于等于）、<code>lt</code>（小于）。<br>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png\" class=\"\">  \n\n<p><strong>3、复合查询</strong><br>复合查询大致可以分为两类：  </p>\n<ul>\n<li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如：bool；  </li>\n<li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：function_score、dis_max。</li>\n</ul>\n<p>其它复合查询及相关语法可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html\">官网文档</a>。<br>（1）<code>算分函数查询</code><br>当我们利用<code>match</code>查询时，文档结果会根据与搜索词条的<strong>关联度打分（_score）</strong>，返回结果时按照分值降序排列。<br>例如，我们搜索 “手机”，结果如下：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png\" class=\"\">  \n<p>从elasticsearch5.1开始，采用的相关性打分算法是BM25算法，公式如下：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png\" class=\"\">  \n<p>基于这套公式，就可以判断出某个文档与用户搜索的关键字之间的关联度，还是比较准确的，但是，在实际业务需求中，常常会有竞价排名的功能，不是相关度越高排名越靠前，而是掏的钱多的排名靠前，例如在百度中搜索Java培训，排名靠前的就是广告推广。<br>要想人为控制相关性算分，就需要利用elasticsearch中的<code>function score</code>查询了。<br><code>function score</code>查询中包含四部分内容：  </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、原始查询条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，原始算分（query score)。</span><br><span class=\"line\"><span class=\"number\">2</span>、过滤条件：<span class=\"built_in\">filter</span>部分，符合该条件的文档才会重新算分。</span><br><span class=\"line\"><span class=\"number\">3</span>、算分函数：符合<span class=\"built_in\">filter</span>条件的文档要根据这个函数做运算，得到的函数算分（<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">score</span>），有四种函数： </span></span><br><span class=\"line\">（<span class=\"number\">1</span>）weight：函数结果是常量；</span><br><span class=\"line\">（<span class=\"number\">2</span>）field_value_factor：以文档中的某个字段值作为函数结果；</span><br><span class=\"line\">（<span class=\"number\">3</span>）random_score：以随机数作为函数结果；</span><br><span class=\"line\">（<span class=\"number\">4</span>）script_score：自定义算分函数算法。</span><br><span class=\"line\"><span class=\"number\">4</span>、运算模式：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： </span><br><span class=\"line\">（<span class=\"number\">1</span>）<span class=\"built_in\">multiply</span>：相乘；</span><br><span class=\"line\">（<span class=\"number\">2</span>）<span class=\"built_in\">replace</span>：用<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">score</span>替换<span class=\"title\">query</span> <span class=\"title\">score</span>；</span></span><br><span class=\"line\">（<span class=\"number\">3</span>）其它，例如：<span class=\"built_in\">sum</span>、<span class=\"built_in\">avg</span>、<span class=\"built_in\">max</span>、<span class=\"built_in\">min</span>。</span><br></pre></td></tr></table></figure>\n<p><code>function score</code>的运行流程如下：  </p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、根据原始条件查询搜索文档，并且计算相关性算分，称为原始算分（query <span class=\"variable language_\">score</span>）；</span><br><span class=\"line\"><span class=\"number\">2</span>、根据过滤条件，过滤文档；</span><br><span class=\"line\"><span class=\"number\">3</span>、符合过滤条件的文档，基于算分函数运算，得到函数算分（<span class=\"keyword\">function</span> <span class=\"variable language_\">score</span>）；</span><br><span class=\"line\"><span class=\"number\">4</span>、将原始算分（query <span class=\"variable language_\">score</span>）和函数算分（<span class=\"keyword\">function</span> <span class=\"variable language_\">score</span>）基于运算模式做运算，得到最终结果，作为相关性算分。</span><br></pre></td></tr></table></figure>\n<p>因此，其中的关键点是：  </p>\n<ul>\n<li>过滤条件：决定哪些文档的算分被修改；  </li>\n<li>算分函数：决定函数算分的算法；  </li>\n<li>运算模式：决定最终算分结果。</li>\n</ul>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给IPhone这个品牌的手机算分提高十倍，分析如下：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.过滤条件：品牌必须为IPhone；</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.算分函数：常量weight，值为10；</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.算分模式：相乘multiply。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">GET /hotel/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;function_score&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  .... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 原始查询，可以是任意条件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;functions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">// 算分函数</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 满足的条件，品牌必须是Iphone</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Iphone&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span> <span class=\"comment\">// 算分权重为2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;boost_mode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;multipy&quot;</span> <span class=\"comment\">// 加权模式，求乘积</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>bool查询</code><br>bool查询：就是利用逻辑运算来组合一个或多个查询子句的组合。<br>bool查询支持的逻辑运算有：  </p>\n<ul>\n<li>must：必须匹配每个子查询，类似“与”；  </li>\n<li>should：选择性匹配子查询，类似“或”；  </li>\n<li>must_not：必须不匹配，不参与算分，类似“非”；  </li>\n<li>filter：必须匹配，不参与算分。</li>\n</ul>\n<p>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;手机&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;should&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vivo&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小米&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must_not&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2500</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;lte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1000</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>出于性能考虑，与搜索关键字无关的查询尽量采用<code>must_not</code>或<code>filter</code>逻辑运算，避免参与相关性算分。  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n<p>例如：在上面商城网站，其中输入框的搜索条件肯定要参与相关性算分，可以采用<code>must</code>，但是价格范围过滤、品牌过滤、分类过滤等尽量采用<code>filter</code>，不要参与相关性算分。<br>比如，要在搜索框中搜索手机，但品牌必须是华为，价格必须是900~1599，那么可以这样写：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;手机&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;华为&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">90000</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lt&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">159900</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>排序</code><br>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序，不过分词字段无法排序，能参与排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。<br>详细说明可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/sort-search-results.html\">官网文档</a>。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /indexName/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;排序字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;排序方式asc升序和desc降序&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例，按照商品价格排序：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 下面可简写成：</span></span><br><span class=\"line\"><span class=\"comment\">   * &quot;sort&quot;: [&#123;&quot;price&quot;: &quot;asc&quot;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;desc&quot;</span> <span class=\"comment\">// order这个是代表排序，不是订单</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>基础分页</code><br>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。<br>elasticsearch中通过修改<code>from</code>（从第几个文档开始）、<code>size</code>（总共查询几个文档）参数来控制要返回的分页结果，类似于mysql中的<code>limit ?, ?</code>，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html\">官网文档</a>。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;from&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 分页开始的位置，默认为0</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 每页文档数量，默认10</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;desc&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（5）<code>深度分页</code>（应用场景：数据迁移、手机滚动查询）<br>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上，这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。<br>elasticsearch会禁止<code>from+size</code>超过10000的请求。<br>针对深度分页，elasticsearch提供了两种解决方案：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html\">详情见文档</a>  </p>\n<ul>\n<li>search after（官方推荐使用的方式）：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据；<br>将上一页的最后一个数据的排序值作为查询下一页时的条件之一，加上此条件后查询下一页就还是相当于在查“第一页”（在上一页之后的数据中的第一页）。<br>例如：假设每页10条记录，相当于查询第一页时设置了查询条件并且只获取10条记录。想要查询第二页的数据时，查询条件不变和获取记录条数不变，多了一个search_after&#x3D;第一页最后的记录，这样就会返回第一页最后记录之后的10条记录。  </li>\n<li>scroll（官方已经不推荐使用）：原理将排序后的文档id形成快照，保存下来，基于快照做分页。</li>\n</ul>\n<p>注意：<br>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。<br>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。  </p>\n<p>（6）<code>高亮</code><br>使用<code>&lt;em&gt;</code>标签包裹住需要被高亮显示的字符串，返回给前端，前端在写css样式。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;搜索字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索关键字&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;highlight&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;高亮字段名称&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pre_tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;em&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;post_tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;/em&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>注意：  </p>\n<ul>\n<li>搜索必须有查询条件，而且是全文检索类型的查询条件，例如<code>match</code>；  </li>\n<li>参与高亮的字段必须是<code>text</code>类型的字段；  </li>\n<li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code>。</li>\n</ul>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.png\" class=\"\">  \n\n<p><strong>4、数据聚合</strong><br>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算。例如：  </p>\n<ul>\n<li>什么品牌的手机最受欢迎？  </li>\n<li>这些手机的平均价格、最高价格、最低价格？  </li>\n<li>这些手机每月的销售情况如何？</li>\n</ul>\n<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/search-aggregations.html\">官网文档</a>。<br>聚合常见的有三类：  </p>\n<ul>\n<li>桶（Bucket）聚合：用来对文档做分组（相当于mysql中的group by）。</li>\n</ul>\n<ol>\n<li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组；  </li>\n<li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组。</li>\n</ol>\n<ul>\n<li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等 。</li>\n</ul>\n<ol>\n<li>Avg：求平均值；  </li>\n<li>Max：求最大值；  </li>\n<li>Min：求最小值；  </li>\n<li>Stats：同时求max、min、avg、sum等。</li>\n</ol>\n<ul>\n<li>管道（pipeline）聚合：其它聚合的结果为基础做进一步运算。</li>\n</ul>\n<p>注意：参加聚合的字段必须是不分词的字段，例如：keyword、日期、数值、布尔类型。<br>（1）<code>Bucket聚合</code><br>例如我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组，category值一样的放在同一组，属于Bucket聚合中的Term聚合。<br>基本语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * size是查数据时需要返回的每页的大小，</span></span><br><span class=\"line\"><span class=\"comment\">   * 每页大小默认是10，返回十条数据，</span></span><br><span class=\"line\"><span class=\"comment\">   * 这里给0的目的是避免返回聚合结果也返回搜索的文档数据结果返回出来，</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果不想看搜索的文档数据，</span></span><br><span class=\"line\"><span class=\"comment\">   * 仅仅只想做聚合的情况下就增加了网络传输的负担，所以这里是0。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 设置size为0，就是每页查0条，则结果中就不包含文档，只包含聚合</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;aggs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 定义聚合</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;category_agg&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 聚合名称，自定义，但不能重复</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;terms&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 聚合的类型，按分类聚合，所以用term</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;category&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 参与聚合的字段名称，如果这里使用category报错，则换成category.keyword</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span> <span class=\"comment\">// 希望返回的聚合结果的最大数量</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面是对所有文档进行聚合，现在加入条件聚合，例如：我想知道价格高于3000元的手机品牌有哪些？搜索条件为价格高于3000和必须是手机，并且统计的是品牌。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bool&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;filter&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;term&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;category&quot;</span>: <span class=\"string\">&quot;手机&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;range&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;gte&quot;</span>: <span class=\"number\">300000</span> <span class=\"comment\">// 单位为分，所以3000元要写成300000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;brand_agg&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;brand&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>Metric聚合</code><br>我们统计了价格高于3000的手机品牌，形成了一个个桶，现在我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。<br>这就要用到Metric聚合了，例如stats聚合，就可以同时获取min、max、avg等结果。<br>基本语法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bool&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;filter&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;term&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;category&quot;</span>: <span class=\"string\">&quot;手机&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;range&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;gte&quot;</span>: <span class=\"number\">300000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;brand_agg&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;brand&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;stats_meric&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;stats&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看到我们在brand_agg聚合的内部，</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们新加了一个aggs参数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个聚合就是brand_agg的子聚合，</span></span><br><span class=\"line\"><span class=\"comment\"> * 会对brand_agg形成的每个桶中的文档分别统计。</span></span><br><span class=\"line\"><span class=\"comment\"> * stats_meric：聚合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * stats：聚合类型，stats是metric聚合的一种</span></span><br><span class=\"line\"><span class=\"comment\"> * field：聚合字段，这里选择price，统计价格</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于stats是对brand_agg形成的每个品牌桶内文档分别做统计，</span></span><br><span class=\"line\"><span class=\"comment\"> * 因此每个品牌都会统计出自己的价格最小、最大、平均值。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Java代码操作DSL\"><a href=\"#2-Java代码操作DSL\" class=\"headerlink\" title=\"(2)Java代码操作DSL\"></a>(2)Java代码操作DSL</h4><p><strong>1、查询所有文档</strong>（无查询条件）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMatchAll</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数，QueryBuilders构建查询条件</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span> <span class=\"variable\">searchHits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取总条数</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> searchHits.getTotalHits().value;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;共搜索到&quot;</span> + total + <span class=\"string\">&quot;条数据&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.遍历结果数组</span></span><br><span class=\"line\">    SearchHit[] hits = searchHits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : hits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.得到_source，也就是原始json文档</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">// 4.反序列化并打印</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class=\"line\">        System.out.println(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<br>elasticsearch返回的结果是一个JSON字符串，结构包含：<br>（1）hits：命中的结果，其中包含：  </p>\n<ul>\n<li>total：总条数，其中的value是具体的总条数值；  </li>\n<li>max_score：所有结果中得分最高的文档的相关性算分；  </li>\n<li>hits：搜索结果的文档数组，其中的每个文档都是一个json对象：<br>_source：文档中的原始数据，也是json对象。</li>\n</ul>\n<p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：<br>（1）SearchHits：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果；<br>（2）SearchHits#getTotalHits().value：获取总条数信息；<br>（3）SearchHits#getHits()：获取SearchHit数组，也就是文档数组；<br>（4）SearchHit#getSourceAsString()：获取文档结果中的_source，也就是原始的json文档数据。  </p>\n<p><strong>2、叶子查询</strong><br>所有的查询条件都是由<code>QueryBuilders</code>来构建的，叶子查询也不例外，因此整套代码中变化的部分仅仅是<code>query</code>条件构造的方式，其它不动。<br>先将解析响应操作提取出来当作一个方法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析响应简单的查询所有文档并解析原文档为json字符串并转（函数复用）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span>  <span class=\"variable\">hits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hits.getTotalHits() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> hits.getTotalHits().value;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总记录数=========&gt;&quot;</span>+total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SearchHit[] searchHits = hits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转换为对象获取json格式的数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转换为对象</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;itemDoc=========&gt;&quot;</span>+itemDoc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<code>match</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>multi_match</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMultiMatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.multiMatchQuery(<span class=\"string\">&quot;脱脂牛奶&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;category&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）<code>range</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testRange</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).gte(<span class=\"number\">10000</span>).lte(<span class=\"number\">30000</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）<code>term</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testTerm</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以用GET /items/_mapping查看索引的字段类型，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果brand字段是keyword类型则适合精确匹配，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 直接termQuery(&quot;brand&quot;, &quot;华为&quot;)即可。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果brand字段是text类型，需要使用keyword子字段进行精确匹配，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 则需要termQuery(&quot;brand.keyword&quot;, &quot;华为&quot;)。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.termQuery(<span class=\"string\">&quot;brand&quot;</span>, <span class=\"string\">&quot;华为&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、复合查询</strong><br>复合查询也是由QueryBuilders来构建，以bool查询为例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testBool</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.准备bool查询</span></span><br><span class=\"line\">    <span class=\"type\">BoolQueryBuilder</span> <span class=\"variable\">bool</span> <span class=\"operator\">=</span> QueryBuilders.boolQuery();</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.关键字搜索</span></span><br><span class=\"line\">    bool.must(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.3.品牌过滤，查不到结果的得改成brand.keyword</span></span><br><span class=\"line\">    bool.filter(QueryBuilders.termQuery(<span class=\"string\">&quot;brand&quot;</span>, <span class=\"string\">&quot;德亚&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.4.价格过滤</span></span><br><span class=\"line\">\t<span class=\"comment\">// lt：less than 小于 </span></span><br><span class=\"line\">\t<span class=\"comment\">// lte : less than equal 小于等于</span></span><br><span class=\"line\">\t<span class=\"comment\">// gt : greater than 大于 </span></span><br><span class=\"line\">\t<span class=\"comment\">// gte : greater then equal 大于等于</span></span><br><span class=\"line\">    bool.filter(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).lte(<span class=\"number\">30000</span>));</span><br><span class=\"line\">    request.source().query(bool);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、排序和分页</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testPageAndSort</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, pageSize = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.搜索条件参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.排序参数</span></span><br><span class=\"line\">    request.source().sort(<span class=\"string\">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class=\"line\">    <span class=\"comment\">// 2.3.分页参数</span></span><br><span class=\"line\">    request.source().from((pageNo - <span class=\"number\">1</span>) * pageSize).size(pageSize);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、高亮</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testHighlight</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.query条件</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.高亮条件</span></span><br><span class=\"line\">    request.source().highlighter(</span><br><span class=\"line\">            SearchSourceBuilder.highlight()</span><br><span class=\"line\">                    .field(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">                    .preTags(<span class=\"string\">&quot;&lt;em&gt;&quot;</span>)</span><br><span class=\"line\">                    .postTags(<span class=\"string\">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span> <span class=\"variable\">searchHits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取总条数</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> searchHits.getTotalHits().value;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;共搜索到&quot;</span> + total + <span class=\"string\">&quot;条数据&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.遍历结果数组</span></span><br><span class=\"line\">    SearchHit[] hits = searchHits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : hits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.得到_source，也就是原始json文档</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">// 4.反序列化</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class=\"line\">        <span class=\"comment\">// 5.获取高亮结果</span></span><br><span class=\"line\">        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollUtils.isNotEmpty(hfs)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 5.1.有高亮结果，获取name的高亮结果</span></span><br><span class=\"line\">            <span class=\"type\">HighlightField</span> <span class=\"variable\">hf</span> <span class=\"operator\">=</span> hfs.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hf != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 5.2.获取第一个高亮结果片段，就是商品名称的高亮值</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">hfName</span> <span class=\"operator\">=</span> hf.getFragments()[<span class=\"number\">0</span>].string();</span><br><span class=\"line\">                item.setName(hfName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、聚合</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testAgg</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备请求参数</span></span><br><span class=\"line\">    <span class=\"type\">BoolQueryBuilder</span> <span class=\"variable\">bool</span> <span class=\"operator\">=</span> QueryBuilders.boolQuery()</span><br><span class=\"line\">            .filter(QueryBuilders.termQuery(<span class=\"string\">&quot;category&quot;</span>, <span class=\"string\">&quot;手机&quot;</span>))</span><br><span class=\"line\">            .filter(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).gte(<span class=\"number\">300000</span>));</span><br><span class=\"line\">    request.source().query(bool).size(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3.聚合参数</span></span><br><span class=\"line\">    request.source().aggregation(</span><br><span class=\"line\">            AggregationBuilders.terms(<span class=\"string\">&quot;brand_agg&quot;</span>).field(<span class=\"string\">&quot;brand&quot;</span>).size(<span class=\"number\">5</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 4.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 5.解析聚合结果</span></span><br><span class=\"line\">    <span class=\"type\">Aggregations</span> <span class=\"variable\">aggregations</span> <span class=\"operator\">=</span> response.getAggregations();</span><br><span class=\"line\">    <span class=\"comment\">// 5.1.获取品牌聚合</span></span><br><span class=\"line\">    <span class=\"type\">Terms</span> <span class=\"variable\">brandTerms</span> <span class=\"operator\">=</span> aggregations.get(<span class=\"string\">&quot;brand_agg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 5.2.获取聚合中的桶</span></span><br><span class=\"line\">    List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class=\"line\">    <span class=\"comment\">// 5.3.遍历桶内数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 5.4.获取桶内key</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> bucket.getKeyAsString();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;brand = &quot;</span> + brand);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> bucket.getDocCount();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;; count = &quot;</span> + count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><p>本笔记中所用到的所有资料可在这里获取：<a href=\"https://pan.baidu.com/s/1jo-0f6Ge5p8B-_dK2dP0eg?pwd=78ly\">链接</a><br>提取码：78ly  </p>\n<h3 id=\"1、简介和安装\"><a href=\"#1、简介和安装\" class=\"headerlink\" title=\"1、简介和安装\"></a>1、简介和安装</h3><h4 id=\"1-官网\"><a href=\"#1-官网\" class=\"headerlink\" title=\"(1)官网\"></a>(1)官网</h4><p><a href=\"https://www.elastic.co/cn/elasticsearch\">地址链接</a>。  </p>\n<h4 id=\"2-介绍\"><a href=\"#2-介绍\" class=\"headerlink\" title=\"(2)介绍\"></a>(2)介绍</h4><p>Elasticsearch是由elastic公司开发的一套搜索引擎技术，它是elastic技术栈中的一部分，是基于Java语言的搜索引擎类库<a href=\"https://lucene.apache.org/\">Lucene</a>（优势：易扩展、基于<a href=\"#elasticsearch114\">倒排索引</a>实现、高性能）研发的。完整的技术栈包括：  </p>\n<ul>\n<li>Elasticsearch：用于数据存储、计算和搜索  </li>\n<li>Logstash&#x2F;Beats：用于数据收集、抓取  </li>\n<li>Kibana：用于数据可视化</li>\n</ul>\n<p>整套技术栈被称为ELK，经常用来做日志收集、系统监控和状态分析等等。<br>但是现在只需要两部分：elasticsearch（存储、搜索和运算）和kibana（图形化展示）。<br>使用elasticsearch是为了数据存储、搜索、分析的；使用kibana是因为它有Elasticsearch对外提供的是Restful风格的API，任何操作都可以通过发送http请求来完成，并且它针对elasticsearch的api提供了语法提示。<br>elasticsearch是面向文档（Document）存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中。因此，原本数据库中的一行数据就是ES中的一个JSON文档；而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的字段（Field）。<br>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档、用户的文档、订单文档等等。所有文档都散乱存放显然非常混乱，也不方便管理。因此，我们要将类型相同的文档集中在一起管理，称为索引（Index）：所有用户文档，就可以组织在一起，称为用户的索引；所有商品的文档，可以组织在一起，称为商品的索引；所有订单的文档，可以组织在一起，称为订单的索引。<br>因此，我们可以把索引当做是数据库中的表。<br>Mysql和Elasticsearch中概念对比：  </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Mysql</th>\n<th align=\"center\">Elasticsearch</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Table</td>\n<td align=\"center\">Index</td>\n<td align=\"center\">索引(index)，就是文档的集合，类似数据库的表(table)</td>\n</tr>\n<tr>\n<td align=\"center\">Row</td>\n<td align=\"center\">Document</td>\n<td align=\"center\">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>\n</tr>\n<tr>\n<td align=\"center\">Column</td>\n<td align=\"center\">Field</td>\n<td align=\"center\">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>\n</tr>\n<tr>\n<td align=\"center\">Schema</td>\n<td align=\"center\">Mapping</td>\n<td align=\"center\">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>\n</tr>\n<tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">DSL</td>\n<td align=\"center\">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>\n</tr>\n</tbody></table>\n<p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性。<br>Elasticsearch：擅长海量数据的搜索、分析、计算。<br>因此在企业中，往往是两者结合使用：  </p>\n<ul>\n<li>对安全性要求较高的写操作，使用mysql实现；  </li>\n<li>对查询性能要求较高的搜索需求，使用elasticsearch实现；  </li>\n<li>两者再基于某种方式，实现数据的同步，保证一致性。<br><code>可以考虑采用MQ异步通知实现</code>和<code>可以使用mysql的bin_log文件与cannal,通过解析mysql的bin_log文件，来去更新es索引库</code>等等方法。</li>\n</ul>\n<h4 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"(3)安装\"></a>(3)安装</h4><p>1、基于docker安装<br>（1）基于<code>docker</code>命令安装<code>elasticsearch</code>单机版本：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name es \\</span><br><span class=\"line\">  -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \\</span><br><span class=\"line\">  -e &quot;discovery.type=single-node&quot; \\</span><br><span class=\"line\">  -v es-data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">  -v es-plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --network hm-net \\</span><br><span class=\"line\">  -p 9200:9200 \\</span><br><span class=\"line\">  -p 9300:9300 \\</span><br><span class=\"line\">  elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：因为elasticsearch是java写的，底层运行的时候，需要配置jvm的最大和最小内存，这里是最低的内存配置，不能再低了；  </li>\n<li><code>-e &quot;discovery.type=single-node&quot;</code>：运行模式，单机运行；  </li>\n<li><code>v es-data:/usr/share/elasticsearch/data</code>：数据卷挂载，挂载数据存储目录；  </li>\n<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：数据卷挂载，挂载插件目录；  </li>\n<li><code>--privileged</code>：权限，elasticsearch需要root权限；  </li>\n<li><code>--network hm-net</code>：网络，使用自定义的docker网络；  </li>\n<li><code>-p 9200:9200</code>：端口映射，访问http的端口号；  </li>\n<li><code>-p 9300:9300</code>：端口映射，elasticsearch集群部署时之间的通信端口号；  </li>\n<li><code>elasticsearch:7.12.1</code>：镜像名和版本号。</li>\n</ul>\n<p>注意，这里采用的是elasticsearch的7.12.1版本，由于8以上版本的JavaAPI变化很大，在企业中应用并不广泛，企业中应用较多的还是8以下的版本。<br>如果拉取镜像困难，可以直接从资料<code>Elasticsearch01</code>目录中获取<code>es.tar</code>镜像包导入。<br>安装完成后，访问9200端口，即可看到响应的Elasticsearch服务的基本信息，说明安装成功。<br>（2）安装<code>Kibana</code>，通过下面docker命令，即可部署：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name kibana \\</span><br><span class=\"line\">-e ELASTICSEARCH_HOSTS=http://es:9200 \\</span><br><span class=\"line\">--network=hm-net \\</span><br><span class=\"line\">-p 5601:5601  \\</span><br><span class=\"line\">kibana:7.12.1</span><br></pre></td></tr></table></figure>\n<p><code>-e ELASTICSEARCH_HOSTS=http://es:9200</code>：设置elasticsearch的地址，kibana需要连接elasticsearch，才能展示数据。<br><code>elasticsearch</code>和<code>kibana</code>的docker镜像包，可以从资料<code>Elasticsearch01</code>目录中获取<code>kibana.tar</code>镜像包导入。<br>安装完成后，访问<code>http://ip:5601</code>即可看到kibana的界面，选择<code>Explore on my own</code>之后进入主页面，选中<code>Dev tools</code>进入开发工具页面：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<p>（3）安装<code>IK分词器</code><br>Elasticsearch的关键就是倒排索引，而倒排索引依赖于对文档内容的分词，而分词则需要高效、精准的分词算法，IK分词器就是这样一个中文分词算法。<br>注意：IK分词器要和Elasticsearch版本一致，否则安装失败。<br>安装方式一：<code>在线安装</code><br>运行一个命令即可：<code>docker exec -it es ./bin/elasticsearch-plugin  install https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-7.12.1.zip</code>。<br>然后重启es容器：<code>docker restart es</code>。<br>安装方式二：<code>离线安装</code><br>如果网速较差，也可以选择离线安装。<br>首先，查看之前安装的Elasticsearch容器的plugins数据卷目录：<code>docker volume inspect es-plugins</code>，可以看到elasticsearch的插件挂载到了<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录，需要把IK分词器上传至这个目录，在资料中找到<code>elasticsearch-analysis-ik-7.12.1.zip</code>包，上传到虚拟机的<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录中ik目录再进行解压（ik目录需要新建），然后重启es容器。  </p>\n<p>2、基于本地安装，请自行查阅。  </p>\n<p><a id=\"elasticsearch114\"></a>  </p>\n<h4 id=\"4-正向索引和倒排索引\"><a href=\"#4-正向索引和倒排索引\" class=\"headerlink\" title=\"(4)正向索引和倒排索引\"></a>(4)正向索引和倒排索引</h4><p>1、正向索引<br>讲倒排索引之前，先解释下正向索引：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 表ta_goods</span><br><span class=\"line\">id（索引） <span class=\"operator\">|</span>    name    <span class=\"operator\">|</span> price <span class=\"operator\">|</span> description</span><br><span class=\"line\"><span class=\"number\">1</span>          <span class=\"operator\">|</span>  小米手机  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">2</span>          <span class=\"operator\">|</span>  华为手机  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">3</span>          <span class=\"operator\">|</span>  华为电脑  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">4</span>          <span class=\"operator\">|</span>  小米手环  <span class=\"operator\">|</span> <span class=\"number\">1000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">5</span>          <span class=\"operator\">|</span>  小米电脑  <span class=\"operator\">|</span> <span class=\"number\">5000</span>  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"number\">6</span>          <span class=\"operator\">|</span>  小米电视  <span class=\"operator\">|</span> <span class=\"number\">3000</span>  <span class=\"operator\">|</span> 描述</span><br></pre></td></tr></table></figure>\n<p>其中的id字段已经创建了索引，由于索引底层采用了B+树结构，因此我们根据id搜索的速度会非常快。但是其他字段例如name，只在叶子节点上存在，因此要根据name搜索的时候只能遍历树中的每一个叶子节点，判断name数据是否符合要求。<br>比如sql：<code>select * from tb_goods where name like &#39;%手机%&#39;;</code>，执行这条语句，针对正向索引，执行逻辑就是：  </p>\n<ol>\n<li>检查到搜索条件为like ‘%手机%’，需要找到name中包含手机的数据；  </li>\n<li>逐条遍历每行数据（每个叶子节点），比如第1次拿到id为1的数据；  </li>\n<li>判断数据中的name字段值是否符合条件；  </li>\n<li>如果符合则放入结果集，不符合则丢弃；  </li>\n<li>回到1.继续执行。</li>\n</ol>\n<p>综上，根据id精确匹配时，可以走索引，查询效率较高。而当搜索条件为模糊匹配时，由于索引无法生效，导致从索引查询退化为全表扫描，效率很差。<br>因此，正向索引适合于根据索引字段的精确搜索，不适合基于部分词条的模糊匹配，而倒排索引恰好解决的就是根据部分词条模糊匹配的问题。<br>2、倒排索引<br>倒排索引中有两个非常重要的概念：  </p>\n<ul>\n<li>文档（Document）：用来搜索的数据，其中的每一条数据就是一个文档；  </li>\n<li>词条（Term）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条。</li>\n</ul>\n<p>创建倒排索引是对正向索引的一种特殊处理和应用，流程如下：  </p>\n<ul>\n<li>将每一个文档的数据利用分词算法根据语义拆分，得到一个个词条，例如上面ta_goods表中，第一条数据（也就是文档）拆分可得：小米、手机；  </li>\n<li>创建表，每行数据包括词条、词条所在文档id、位置等信息，例如：小米这个词条，对应的id有1、4、5、6，手机这个词条对应的id有1、2。<br>可得倒排索引：  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">词条（索引）<span class=\"operator\">|</span>  文档id</span><br><span class=\"line\">小米        <span class=\"operator\">|</span>  <span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span></span><br><span class=\"line\">手机        <span class=\"operator\">|</span>  <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\">华为        <span class=\"operator\">|</span>  <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">电脑        <span class=\"operator\">|</span>  <span class=\"number\">3</span>,<span class=\"number\">5</span></span><br><span class=\"line\">手环        <span class=\"operator\">|</span>  <span class=\"number\">4</span></span><br><span class=\"line\">电视        <span class=\"operator\">|</span>  <span class=\"number\">6</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>倒排索引搜索流程（根据上面得到的倒排索引）：  </p>\n<ol>\n<li>用户输入条件”华为手机”进行搜索；  </li>\n<li>对用户输入条件分词，得到词条：华为、手机；  </li>\n<li>拿着词条在倒排索引中查找（由于词条有索引，查询效率很高），即可得到包含词条的文档id：1、2、3；  </li>\n<li>拿着文档id到正向索引中查找具体文档即可（由于id也有索引，查询效率也很高）。</li>\n</ol>\n<p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。<br>3、两者区别和优缺点<br>（1）区别：<br><code>正向索引</code>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是根据文档找词条的过程。<br><code>倒排索引</code>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是根据词条找文档的过程。<br>（2）<code>正向索引</code>优缺点<br>优点：  </p>\n<ul>\n<li>可以给多个字段创建索引  </li>\n<li>根据索引字段搜索、排序速度非常快</li>\n</ul>\n<p>缺点：<br>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。<br>（3）<code>倒排索引</code>优缺点<br>优点：<br>根据词条搜索、模糊搜索时，速度非常快。<br>缺点：  </p>\n<ul>\n<li>只能给词条创建索引，而不是字段  </li>\n<li>无法根据字段做排序</li>\n</ul>\n<h4 id=\"5-IK分词器\"><a href=\"#5-IK分词器\" class=\"headerlink\" title=\"(5)IK分词器\"></a>(5)IK分词器</h4><p>1、说明<br>Elasticsearch中提供的标准分词器<code>standard</code>不满足需求，因为这个分词器只能将中文句子一个字一个字分离出来（例如：这个手机good，这句话，使用标准分词器分得：这、个、手、机、good），因此需要IK分词器。<br>IK分词器有两种模式：  </p>\n<ul>\n<li><code>ik_smart</code>：智能语义切分；<br>例如：这个手机good，这句话，使用ik_smart分得：这个、手机、good。  </li>\n<li><code>ik_max_word</code>：最细粒度切分。</li>\n</ul>\n<p>2、扩展词典<br>有可能有些词条IK分词器不认识，比如：泰裤辣，因此需要扩展词典。<br>（1）打开IK分词器config目录，注意，如果采用在线安装的通过，默认是没有config目录的，需要把资料中提供的ik下的config上传至对应目录；<br>（2）在IKAnalyzer.cfg.xml配置文件内容添加：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">properties</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">comment</span>&gt;</span>IK Analyzer 扩展配置<span class=\"tag\">&lt;/<span class=\"name\">comment</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）在IK分词器的config目录新建一个ext.dic（对应IKAnalyzer.cfg.xml配置中的扩展词典名），可以参考config目录下复制一个配置文件进行修改，文件格式为utf-8；<br>（4）将需要添加的词条添加到ext.dic中，比如将泰裤辣这个词直接添加到文件中，一个词占一行，重启Elasticsearch即可。  </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泰裤辣</span><br><span class=\"line\">其他词1</span><br><span class=\"line\">其他词2</span><br></pre></td></tr></table></figure>\n\n<p>3、总结<br>（1）分词器的作用是什么？  </p>\n<ul>\n<li>创建倒排索引时，对文档分词  </li>\n<li>用户搜索时，对输入的内容分词</li>\n</ul>\n<p>（2）IK分词器有几种模式？  </p>\n<ul>\n<li>ik_smart：智能切分，粗粒度  </li>\n<li>ik_max_word：最细切分，细粒度</li>\n</ul>\n<p>（3）IK分词器如何拓展词条？如何停用词条？  </p>\n<ul>\n<li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典  </li>\n<li>在词典中添加拓展词条或者停用词条</li>\n</ul>\n<h3 id=\"2、Kibana中索引库操作\"><a href=\"#2、Kibana中索引库操作\" class=\"headerlink\" title=\"2、Kibana中索引库操作\"></a>2、Kibana中索引库操作</h3><p>Index就类似数据库表，Mapping映射就类似表的结构，要向es中存储数据，必须先创建Index和Mapping。<br>Mapping是对索引库中文档的约束，常见的Mapping属性包括：  </p>\n<ul>\n<li>type：字段数据类型，常见的简单类型有：</li>\n</ul>\n<ol>\n<li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）  </li>\n<li>数值：long、integer、short、byte、double、float  </li>\n<li>布尔：boolean  </li>\n<li>日期：date  </li>\n<li>对象：object</li>\n</ol>\n<ul>\n<li>index：是否创建索引，默认为true，一般需要搜索的属性都为true  </li>\n<li>analyzer：使用哪种分词器  </li>\n<li>properties：该字段的子字段</li>\n</ul>\n<p>例如下面的json文档：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">21</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型为integer，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52.1</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型为float，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isMarried&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型boolean，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员Java讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型text，参与搜索，分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型keyword，不参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;score&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">99.1</span><span class=\"punctuation\">,</span> <span class=\"number\">99.5</span><span class=\"punctuation\">,</span> <span class=\"number\">98.9</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型float，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字段类型keyword，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span> <span class=\"comment\">// 字段类型keyword，参与搜索，不分词</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>1、创建索引库和映射<br>Kibana的DevTools来编写请求。<br>（1）创建索引库和映射<br>基本语法：  </p>\n<ul>\n<li>请求方式：PUT；  </li>\n<li>请求路径：&#x2F;索引库名，自定义；  </li>\n<li>请求参数：mapping映射。</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引库名称</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_smart&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名2&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名3&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;子字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"comment\">// ...略</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima <span class=\"comment\">// 创建heima索引库</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// info是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_smart&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// emil是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;false&quot;</span> <span class=\"comment\">// email不参与搜索，不需要建索引</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// name是属性名</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查询索引库<br>基本语法：  </p>\n<ul>\n<li>请求方式：GET；  </li>\n<li>请求路径：&#x2F;索引库名；  </li>\n<li>请求参数：无。</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /索引库名</span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /heima</span><br></pre></td></tr></table></figure>\n\n<p>3、删除索引库<br>基本语法：  </p>\n<ul>\n<li>请求方式：DELETE  </li>\n<li>请求路径：&#x2F;索引库名  </li>\n<li>请求参数：无</li>\n</ul>\n<p>格式：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /索引库名</span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /heima</span><br></pre></td></tr></table></figure>\n\n<p>4、修改索引库<br>索引库不能修改，但是可以向原有的索引库中添加新的字段：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引库名/_mapping</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;新字段名&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：<br>向heima索引库中添加age字段，类型为integer。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima/_mapping</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、Kibana中文档操作\"><a href=\"#3、Kibana中文档操作\" class=\"headerlink\" title=\"3、Kibana中文档操作\"></a>3、Kibana中文档操作</h3><p>有了索引库，接下来就可以向索引库中添加数据了。<br>1、新增文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /索引库名/_doc/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段3&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;子属性1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;子属性2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值4&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /heima/_doc/<span class=\"number\">1</span> <span class=\"comment\">// 向heima索引库中添加一条数据（文档），1表示id</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员Java讲师&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查询文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名称<span class=\"punctuation\">&#125;</span>/_doc/<span class=\"punctuation\">&#123;</span>id<span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /heima/_doc/<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>3、删除文档<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_doc/id值</span><br></pre></td></tr></table></figure>\n<p>示例：<br>从heima索引库中删除id为1的文档（数据）。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /heima/_doc/<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>4、修改文档<br>修改有两种方式：  </p>\n<ul>\n<li>全量修改：直接覆盖原来的文档；  </li>\n<li>局部修改：修改文档中的部分字段。</li>\n</ul>\n<p>（1）全量修改<br>全量修改是覆盖原来的文档（也就是覆盖原来的数据），其本质是两步操作：  </p>\n<ol>\n<li>根据指定的id删除原来的文档；  </li>\n<li>新增一个相同id的新文档。</li>\n</ol>\n<p>注意：如果根据id删除时，id不存在，第二步新增也会执行，也就从修改变成了新增操作了。<br>语法：<br>注意：字段必须所有字段都提供。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_doc/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;字段2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;值2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// ... 略</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /heima/_doc/<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员高级Java讲师&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zy@itcast.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;云&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;赵&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）局部修改<br>局部修改是只修改指定id匹配的文档中的部分字段。<br>语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_update/文档id</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;doc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">         <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;新的值&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>注意：全局修改是<code>PUT请求</code>，并且路径中是<code>_doc</code>；而局部修改是<code>POST请求</code>，并且路径中是<code>_update</code>。<br>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /heima/_update/<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;doc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、批处理<br>批处理采用POST请求，基本语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准语法</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span> <span class=\"comment\">// 如果报错，把中间空格删除</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;field1&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;delete&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;create&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span> <span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;field1&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value3&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">POST _bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;update&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_index&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;doc&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;field2&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;value2&quot;</span><span class=\"punctuation\">&#125;</span> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>（1）index：代表新增操作；<br>（2）_index：指定索引库名；<br>（3）_id指定要操作的文档id；<br>（4）{ “field1” : “value1” }：则是要操作的文档内容。<br>示例：<br>批量新增：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员C++讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ww@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;五&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;王&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;黑马程序员前端讲师&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan@itcast.cn&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;三&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;张&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>批量删除：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_bulk</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;delete&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;delete&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_index&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;heima&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Java代码操作\"><a href=\"#二、Java代码操作\" class=\"headerlink\" title=\"二、Java代码操作\"></a>二、Java代码操作</h1><h3 id=\"1、官网地址\"><a href=\"#1、官网地址\" class=\"headerlink\" title=\"1、官网地址\"></a>1、官网地址</h3><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/index.html\">官网地址</a>。  </p>\n<h3 id=\"2、说明\"><a href=\"#2、说明\" class=\"headerlink\" title=\"2、说明\"></a>2、说明</h3><p>老版本的客户端已经被标记为过时，而这里采用的是7.12版本，因此只能使用老版本客户端：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>注意：7.15以后的新版本都是基于lambda表达式的写法了。<br>然后选择7.12版本，HighLevelRestClient版本：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n\n<h3 id=\"3、操作前准备\"><a href=\"#3、操作前准备\" class=\"headerlink\" title=\"3、操作前准备\"></a>3、操作前准备</h3><p>1、创建索引库前分析<br>搜索页面的效果如图所示：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>根据上图分析得到需要创建的索引库：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /items</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// id参与搜索，而且一般是keyword，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 商品名词，参与搜索，分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;analyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ik_max_word&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 价格，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;image&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 图片，不参与搜索，所以index为false，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;category&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 分类，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 品牌，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;keyword&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sold&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 销量，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commentCount&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 评价数，不参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;isAD&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 是否为广告推广，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;updateTime&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 更新时间，参与搜索，不分词</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;date&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、初始化elasticsearch客户端<br>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。<br>（1）在需要使用elasticsearch的服务中引入依赖；  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）因为SpringBoot默认的ES版本是7.17.10，所以我们需要覆盖默认的ES版本：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">elasticsearch.version</span>&gt;</span>7.12.1<span class=\"tag\">&lt;/<span class=\"name\">elasticsearch.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）初始化RestHighLevelClient对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果加了<span class=\"doctag\">@SpringBootTest</span>，需要去指定启动的环境，</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认是dev环境，可以通过<span class=\"doctag\">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class=\"line\"><span class=\"comment\"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IndexTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在Java单元测试中，<span class=\"doctag\">@BeforeEach</span> 和 <span class=\"doctag\">@AfterEach</span> 是JUnit框架提供的注解，用于在每个测试方法执行之前和之后执行特定的代码。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@BeforeEach</span> 注解的方法会在每个测试方法执行之前运行，通常用于设置测试环境或初始化对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@AfterEach</span> 注解的方法会在每个测试方法执行之后运行，通常用于清理资源或重置状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * 这两个注解帮助确保每个测试都是独立的，避免测试之间的相互影响。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@BeforeEach</span>修饰在方法上，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在每一个测试方法（所有<span class=\"doctag\">@Test</span>、<span class=\"doctag\">@RepeatedTest</span>、<span class=\"doctag\">@ParameterizedTest</span>或者<span class=\"doctag\">@TestFactory</span>注解的方法）之前执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">     * 例如：一个测试类有2个测试方法testA()和testB()，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 还有一个<span class=\"doctag\">@BeforeEach</span>的方法，执行这个测试类，<span class=\"doctag\">@BeforeEach</span>的方法会在testA()之前执行一次，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 在testB()之前又执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@BeforeEach</span>的方法一共执行了2次。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client = <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(<span class=\"string\">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testConnect</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(client);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、索引库操作\"><a href=\"#4、索引库操作\" class=\"headerlink\" title=\"4、索引库操作\"></a>4、索引库操作</h3><p>以下操作都是基于<code>3、操作前准备</code>的<code>2、初始化elasticsearch客户端</code>中创建的<code>IndexTest</code>类来弄的。  </p>\n<h4 id=\"1-创建索引库\"><a href=\"#1-创建索引库\" class=\"headerlink\" title=\"(1)创建索引库\"></a>(1)创建索引库</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.创建Request对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * CreateIndexRequest应该导包org.elasticsearch.client.indices.CreateIndexRequest，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 而不是org.elasticsearch.action.admin.indices.create。</span></span><br><span class=\"line\"><span class=\"comment\">\t * items是索引库名。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"type\">CreateIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreateIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.准备请求参数</span></span><br><span class=\"line\"><span class=\"comment\">\t * 其实就是Json格式的Mapping映射参数。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因为json字符串很长，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里是定义了静态字符串常量MAPPING_TEMPLATE，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 让代码看起来更加优雅。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.发送请求</span></span><br><span class=\"line\"><span class=\"comment\">\t * client.indices()方法的返回值是IndicesClient类型，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 封装了所有与索引库操作有关的方法。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 例如创建索引、删除索引、判断索引是否存在等。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 第二个参数：请求可选项，直接走默认。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MAPPING_TEMPLATE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;  \\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;properties\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;id\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;name\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;price\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;image\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;index\\&quot;: false\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;category\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;brand\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;sold\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;commentCount\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;isAD\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;boolean\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;,\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      \\&quot;updateTime\\&quot;:&#123;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;        \\&quot;type\\&quot;: \\&quot;date\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;      &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;  &#125;\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-删除索引库\"><a href=\"#2-删除索引库\" class=\"headerlink\" title=\"(2)删除索引库\"></a>(2)删除索引库</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DELETE /hotel</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request对象，items是索引库名</span></span><br><span class=\"line\">    <span class=\"type\">DeleteIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-判断索引库是否存在\"><a href=\"#3-判断索引库是否存在\" class=\"headerlink\" title=\"(3)判断索引库是否存在\"></a>(3)判断索引库是否存在</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /hotel</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testExistsIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request对象</span></span><br><span class=\"line\">    <span class=\"type\">GetIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetIndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 3.输出</span></span><br><span class=\"line\">    System.err.println(exists ? <span class=\"string\">&quot;索引库已经存在！&quot;</span> : <span class=\"string\">&quot;索引库不存在！&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、文档操作\"><a href=\"#5、文档操作\" class=\"headerlink\" title=\"5、文档操作\"></a>5、文档操作</h3><p>操作前准备，创建文档，需要从数据库查询出来数据，再存入elasticsearch中，所以需要使用配置文件：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.hmall.item.service.IItemService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"comment\">// 激活配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认是dev环境，可以通过<span class=\"doctag\">@ActiveProfiles</span>(&quot;local&quot;)方式，</span></span><br><span class=\"line\"><span class=\"comment\"> * 或添加虚拟机参数(VM options)指定环境Dspring.profiles.active=local，</span></span><br><span class=\"line\"><span class=\"comment\"> * 也可以使用下面的方式。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(properties = &quot;spring.profiles.active=local&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DocumentTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 注入service，用于查询数据库</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IItemService itemService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client = <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(<span class=\"string\">&quot;http://127.0.0.1:9200&quot;</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建对应索引库的实体类：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;索引库实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ItemDoc</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;价格（分）&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;商品图片&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String image;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;类目名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String category;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;品牌名称&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;评论数&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer commentCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;是否是推广广告，true/false&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isAD;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下操作都是在<code>DocumentTest</code>类中添加。  </p>\n<h4 id=\"1-新增文档\"><a href=\"#1-新增文档\" class=\"headerlink\" title=\"(1)新增文档\"></a>(1)新增文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POST /&#123;索引库名&#125;/_doc/1</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;name&quot;: &quot;Jack&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;age&quot;: 21</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testAddDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.根据id查询商品数据</span></span><br><span class=\"line\">    <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> itemService.getById(<span class=\"number\">100002644680L</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.转换为文档类型</span></span><br><span class=\"line\">    <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class=\"line\">    <span class=\"comment\">// 3.将ItemDTO转json</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">doc</span> <span class=\"operator\">=</span> JSONUtil.toJsonStr(itemDoc);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request对象，items是索引库名</span></span><br><span class=\"line\">    <span class=\"type\">IndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;items&quot;</span>).id(itemDoc.getId());</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备Json文档</span></span><br><span class=\"line\">    request.source(doc, XContentType.JSON);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    client.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查询文档\"><a href=\"#2-查询文档\" class=\"headerlink\" title=\"(2)查询文档\"></a>(2)查询文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /&#123;索引库名&#125;/_doc/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testGetDocumentById</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request对象</span></span><br><span class=\"line\">    <span class=\"type\">GetRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;items&quot;</span>).id(<span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">GetResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 3.获取响应结果中的source，source就是数据结果</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> response.getSourceAsString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;itemDoc= &quot;</span> + ItemDoc);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-删除文档\"><a href=\"#3-删除文档\" class=\"headerlink\" title=\"(3)删除文档\"></a>(3)删除文档</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DELETE /hotel/_doc/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request，两个参数，第一个是索引库名，第二个是文档id</span></span><br><span class=\"line\">    <span class=\"type\">DeleteRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteRequest</span>(<span class=\"string\">&quot;item&quot;</span>, <span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.发送请求</span></span><br><span class=\"line\">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-修改文档\"><a href=\"#4-修改文档\" class=\"headerlink\" title=\"(4)修改文档\"></a>(4)修改文档</h4><p>之前说过修改有两种方式：全量修改和局部修改，这里没有区分：  </p>\n<ul>\n<li>如果新增时，id已经存在，则为修改；  </li>\n<li>如果新增时，id不存在，则为新建。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POST /&#123;索引库名&#125;/_update/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &quot;doc&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;字段名&quot;: &quot;字段值&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;字段名&quot;: &quot;字段值&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备Request</span></span><br><span class=\"line\">    <span class=\"type\">UpdateRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateRequest</span>(<span class=\"string\">&quot;items&quot;</span>, <span class=\"string\">&quot;100002644680&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备请求参数，修改价格和评论数</span></span><br><span class=\"line\">    request.doc(</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>, <span class=\"number\">58800</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;commentCount&quot;</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    client.update(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-批量新增文档\"><a href=\"#5-批量新增文档\" class=\"headerlink\" title=\"(5)批量新增文档\"></a>(5)批量新增文档</h4><p>在之前的案例中，我们都是操作单个文档。而数据库中的商品数据实际会达到数十万条，某些项目中可能达到数百万条。<br>我们如果要将这些数据导入索引库，肯定不能逐条导入，而是采用批处理方案。常见的方案有：<br>（1）利用Logstash批量导入；  </p>\n<ul>\n<li>需要安装Logstash；  </li>\n<li>对数据的再加工能力较弱；</li>\n<li>无需编码，但要学习编写Logstash导入配置。</li>\n</ul>\n<p>（2）利用JavaAPI批量导入。  </p>\n<ul>\n<li>需要编码，但基于JavaAPI，学习成本低；  </li>\n<li>更加灵活，可以任意对数据做再加工处理后写入索引库。</li>\n</ul>\n<p>接下来，我们就学习下如何利用JavaAPI实现批量文档导入。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testLoadItemDocs</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分页查询商品数据</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因为商品数据量较大，所以采用分页查询，每次查询1000条，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 所以这里循环，直到查询不到数据为止。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        Page&lt;Item&gt; page = itemService.lambdaQuery().eq(Item::getStatus, <span class=\"number\">1</span>).page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;Item&gt;(pageNo, size));</span><br><span class=\"line\">        <span class=\"comment\">// 非空校验</span></span><br><span class=\"line\">        List&lt;Item&gt; items = page.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;加载第&#123;&#125;页数据，共&#123;&#125;条&quot;</span>, pageNo, items.size());</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">        <span class=\"type\">BulkRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BulkRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.准备参数，添加多个新增的Request</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2.1.转换为文档类型ItemDTO</span></span><br><span class=\"line\">            <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(item, ItemDoc.class);</span><br><span class=\"line\">            <span class=\"comment\">// 2.2.创建新增文档的Request对象</span></span><br><span class=\"line\">            request.add(<span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>()</span><br><span class=\"line\">                            .id(itemDoc.getId())</span><br><span class=\"line\">                            .source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 翻页</span></span><br><span class=\"line\">        pageNo++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6、DSL查询\"><a href=\"#6、DSL查询\" class=\"headerlink\" title=\"6、DSL查询\"></a>6、DSL查询</h3><p>上面对文档的操作都是根据id操作的，而我们想要应对复杂查询就得使用DSL查询。<br>DSL查询：就是Json格式来定义查询条件，一般分为两类：<br>（1）叶子查询：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。<br>（2）复合查询：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。<br>然后在查询以后，还可以对查询结果继续做处理，包括：<br>（1）排序：按照1个或多个字段值进行排序；<br>（2）分页：根据<code>from</code>和<code>size</code>做分页，类似mysql；<br>（3）高亮：对搜索结果中的关键字添加特殊样式，使其更加醒目；<br>（4）聚合：对搜索结果做数据统计以形成报表。  </p>\n<h4 id=\"1-Kibana中操作DSL\"><a href=\"#1-Kibana中操作DSL\" class=\"headerlink\" title=\"(1)Kibana中操作DSL\"></a>(1)Kibana中操作DSL</h4><p><strong>1、基本语法</strong>  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;查询类型&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">// .. 查询条件</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明：<code>GET /&#123;索引库名&#125;/_search</code>：其中的<code>_search</code>是固定路径，不能修改。<br>例如，我们以最简单的无条件查询为例，查询items索引库中的数据，无条件查询的类型是：<code>match_all</code>，因此其查询语句如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>发现发现虽然是<code>match_all</code>，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条，这是因为处于安全考虑，elasticsearch设置了默认的查询页数。  </p>\n<p><strong>2、叶子查询</strong><br>叶子查询的类型也可以做进一步细分，详情大家可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html\">官网文档</a>。<br>这里列举一些常见的，例如：  </p>\n<ul>\n<li><code>Full Text Queries</code>（全文检索查询）：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。  </li>\n<li><code>Term-level queries</code>（精确查询）：不会对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。  </li>\n<li>地理坐标查询：用于搜索地理位置，搜索方式很多。</li>\n</ul>\n<p>（1）<code>全文检索查询</code><br>全文检索的种类也很多，详情可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html\">官网文档</a>。<br>这里以全文检索中的<code>match</code>为例，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n<p>与<code>match</code>类似的还有<code>multi_match</code>，区别在于可以同时对多个字段搜索，而且多个字段都要满足，语法示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;multi_match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;字段1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;字段2&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png\" class=\"\">  \n\n<p>（2）<code>精确查询</code><br>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询，也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配，因此推荐查找keyword、数值、日期、boolean类型的字段。例如：id、price、城市、地名、人名等等，作为一个整体才有含义的字段。<br>详情可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html\">官网文档</a>。<br>这里以查询<code>term</code>索引库为例，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索条件&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png\" class=\"\">  \n<p>如果查询条件是：华为 小米，因为不做分词，所以是查询不到结果的。<br>再来看下<code>range</code>查询，语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;字段名&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>最小值<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lte&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>最大值<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明：<code>range</code>是范围查询，对于范围筛选的关键字有：<code>gte</code>（大于等于）、<code>gt</code>（大于）、<code>lte</code>（小于等于）、<code>lt</code>（小于）。<br>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png\" class=\"\">  \n\n<p><strong>3、复合查询</strong><br>复合查询大致可以分为两类：  </p>\n<ul>\n<li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如：bool；  </li>\n<li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：function_score、dis_max。</li>\n</ul>\n<p>其它复合查询及相关语法可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html\">官网文档</a>。<br>（1）<code>算分函数查询</code><br>当我们利用<code>match</code>查询时，文档结果会根据与搜索词条的<strong>关联度打分（_score）</strong>，返回结果时按照分值降序排列。<br>例如，我们搜索 “手机”，结果如下：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png\" class=\"\">  \n<p>从elasticsearch5.1开始，采用的相关性打分算法是BM25算法，公式如下：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png\" class=\"\">  \n<p>基于这套公式，就可以判断出某个文档与用户搜索的关键字之间的关联度，还是比较准确的，但是，在实际业务需求中，常常会有竞价排名的功能，不是相关度越高排名越靠前，而是掏的钱多的排名靠前，例如在百度中搜索Java培训，排名靠前的就是广告推广。<br>要想人为控制相关性算分，就需要利用elasticsearch中的<code>function score</code>查询了。<br><code>function score</code>查询中包含四部分内容：  </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、原始查询条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，原始算分（query score)。</span><br><span class=\"line\"><span class=\"number\">2</span>、过滤条件：<span class=\"built_in\">filter</span>部分，符合该条件的文档才会重新算分。</span><br><span class=\"line\"><span class=\"number\">3</span>、算分函数：符合<span class=\"built_in\">filter</span>条件的文档要根据这个函数做运算，得到的函数算分（<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">score</span>），有四种函数： </span></span><br><span class=\"line\">（<span class=\"number\">1</span>）weight：函数结果是常量；</span><br><span class=\"line\">（<span class=\"number\">2</span>）field_value_factor：以文档中的某个字段值作为函数结果；</span><br><span class=\"line\">（<span class=\"number\">3</span>）random_score：以随机数作为函数结果；</span><br><span class=\"line\">（<span class=\"number\">4</span>）script_score：自定义算分函数算法。</span><br><span class=\"line\"><span class=\"number\">4</span>、运算模式：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： </span><br><span class=\"line\">（<span class=\"number\">1</span>）<span class=\"built_in\">multiply</span>：相乘；</span><br><span class=\"line\">（<span class=\"number\">2</span>）<span class=\"built_in\">replace</span>：用<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">score</span>替换<span class=\"title\">query</span> <span class=\"title\">score</span>；</span></span><br><span class=\"line\">（<span class=\"number\">3</span>）其它，例如：<span class=\"built_in\">sum</span>、<span class=\"built_in\">avg</span>、<span class=\"built_in\">max</span>、<span class=\"built_in\">min</span>。</span><br></pre></td></tr></table></figure>\n<p><code>function score</code>的运行流程如下：  </p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、根据原始条件查询搜索文档，并且计算相关性算分，称为原始算分（query <span class=\"variable language_\">score</span>）；</span><br><span class=\"line\"><span class=\"number\">2</span>、根据过滤条件，过滤文档；</span><br><span class=\"line\"><span class=\"number\">3</span>、符合过滤条件的文档，基于算分函数运算，得到函数算分（<span class=\"keyword\">function</span> <span class=\"variable language_\">score</span>）；</span><br><span class=\"line\"><span class=\"number\">4</span>、将原始算分（query <span class=\"variable language_\">score</span>）和函数算分（<span class=\"keyword\">function</span> <span class=\"variable language_\">score</span>）基于运算模式做运算，得到最终结果，作为相关性算分。</span><br></pre></td></tr></table></figure>\n<p>因此，其中的关键点是：  </p>\n<ul>\n<li>过滤条件：决定哪些文档的算分被修改；  </li>\n<li>算分函数：决定函数算分的算法；  </li>\n<li>运算模式：决定最终算分结果。</li>\n</ul>\n<p>示例：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给IPhone这个品牌的手机算分提高十倍，分析如下：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.过滤条件：品牌必须为IPhone；</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.算分函数：常量weight，值为10；</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.算分模式：相乘multiply。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">GET /hotel/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;function_score&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  .... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 原始查询，可以是任意条件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;functions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">// 算分函数</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 满足的条件，品牌必须是Iphone</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Iphone&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span> <span class=\"comment\">// 算分权重为2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;boost_mode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;multipy&quot;</span> <span class=\"comment\">// 加权模式，求乘积</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>bool查询</code><br>bool查询：就是利用逻辑运算来组合一个或多个查询子句的组合。<br>bool查询支持的逻辑运算有：  </p>\n<ul>\n<li>must：必须匹配每个子查询，类似“与”；  </li>\n<li>should：选择性匹配子查询，类似“或”；  </li>\n<li>must_not：必须不匹配，不参与算分，类似“非”；  </li>\n<li>filter：必须匹配，不参与算分。</li>\n</ul>\n<p>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;手机&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;should&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vivo&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小米&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must_not&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2500</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;lte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1000</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>出于性能考虑，与搜索关键字无关的查询尽量采用<code>must_not</code>或<code>filter</code>逻辑运算，避免参与相关性算分。  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n<p>例如：在上面商城网站，其中输入框的搜索条件肯定要参与相关性算分，可以采用<code>must</code>，但是价格范围过滤、品牌过滤、分类过滤等尽量采用<code>filter</code>，不要参与相关性算分。<br>比如，要在搜索框中搜索手机，但品牌必须是华为，价格必须是900~1599，那么可以这样写：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;手机&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;brand&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;华为&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;range&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;gte&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">90000</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;lt&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">159900</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>排序</code><br>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序，不过分词字段无法排序，能参与排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。<br>详细说明可以参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/sort-search-results.html\">官网文档</a>。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /indexName/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;排序字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;排序方式asc升序和desc降序&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>示例，按照商品价格排序：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 下面可简写成：</span></span><br><span class=\"line\"><span class=\"comment\">   * &quot;sort&quot;: [&#123;&quot;price&quot;: &quot;asc&quot;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;desc&quot;</span> <span class=\"comment\">// order这个是代表排序，不是订单</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>基础分页</code><br>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。<br>elasticsearch中通过修改<code>from</code>（从第几个文档开始）、<code>size</code>（总共查询几个文档）参数来控制要返回的分页结果，类似于mysql中的<code>limit ?, ?</code>，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html\">官网文档</a>。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;from&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 分页开始的位置，默认为0</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 每页文档数量，默认10</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;price&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;desc&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>（5）<code>深度分页</code>（应用场景：数据迁移、手机滚动查询）<br>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上，这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。<br>elasticsearch会禁止<code>from+size</code>超过10000的请求。<br>针对深度分页，elasticsearch提供了两种解决方案：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html\">详情见文档</a>  </p>\n<ul>\n<li>search after（官方推荐使用的方式）：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据；<br>将上一页的最后一个数据的排序值作为查询下一页时的条件之一，加上此条件后查询下一页就还是相当于在查“第一页”（在上一页之后的数据中的第一页）。<br>例如：假设每页10条记录，相当于查询第一页时设置了查询条件并且只获取10条记录。想要查询第二页的数据时，查询条件不变和获取记录条数不变，多了一个search_after&#x3D;第一页最后的记录，这样就会返回第一页最后记录之后的10条记录。  </li>\n<li>scroll（官方已经不推荐使用）：原理将排序后的文档id形成快照，保存下来，基于快照做分页。</li>\n</ul>\n<p>注意：<br>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。<br>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。  </p>\n<p>（6）<code>高亮</code><br>使用<code>&lt;em&gt;</code>标签包裹住需要被高亮显示的字符串，返回给前端，前端在写css样式。<br>基本语法：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"punctuation\">&#123;</span>索引库名<span class=\"punctuation\">&#125;</span>/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;搜索字段&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;搜索关键字&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;highlight&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;高亮字段名称&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pre_tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;em&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;post_tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;/em&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>注意：  </p>\n<ul>\n<li>搜索必须有查询条件，而且是全文检索类型的查询条件，例如<code>match</code>；  </li>\n<li>参与高亮的字段必须是<code>text</code>类型的字段；  </li>\n<li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code>。</li>\n</ul>\n<p>示例：  </p>\n<img src=\"/2025/01/12/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.png\" class=\"\">  \n\n<p><strong>4、数据聚合</strong><br>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算。例如：  </p>\n<ul>\n<li>什么品牌的手机最受欢迎？  </li>\n<li>这些手机的平均价格、最高价格、最低价格？  </li>\n<li>这些手机每月的销售情况如何？</li>\n</ul>\n<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/search-aggregations.html\">官网文档</a>。<br>聚合常见的有三类：  </p>\n<ul>\n<li>桶（Bucket）聚合：用来对文档做分组（相当于mysql中的group by）。</li>\n</ul>\n<ol>\n<li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组；  </li>\n<li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组。</li>\n</ol>\n<ul>\n<li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等 。</li>\n</ul>\n<ol>\n<li>Avg：求平均值；  </li>\n<li>Max：求最大值；  </li>\n<li>Min：求最小值；  </li>\n<li>Stats：同时求max、min、avg、sum等。</li>\n</ol>\n<ul>\n<li>管道（pipeline）聚合：其它聚合的结果为基础做进一步运算。</li>\n</ul>\n<p>注意：参加聚合的字段必须是不分词的字段，例如：keyword、日期、数值、布尔类型。<br>（1）<code>Bucket聚合</code><br>例如我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组，category值一样的放在同一组，属于Bucket聚合中的Term聚合。<br>基本语法如下：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * size是查数据时需要返回的每页的大小，</span></span><br><span class=\"line\"><span class=\"comment\">   * 每页大小默认是10，返回十条数据，</span></span><br><span class=\"line\"><span class=\"comment\">   * 这里给0的目的是避免返回聚合结果也返回搜索的文档数据结果返回出来，</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果不想看搜索的文档数据，</span></span><br><span class=\"line\"><span class=\"comment\">   * 仅仅只想做聚合的情况下就增加了网络传输的负担，所以这里是0。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 设置size为0，就是每页查0条，则结果中就不包含文档，只包含聚合</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;aggs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 定义聚合</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;category_agg&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 聚合名称，自定义，但不能重复</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;terms&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 聚合的类型，按分类聚合，所以用term</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;category&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 参与聚合的字段名称，如果这里使用category报错，则换成category.keyword</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span> <span class=\"comment\">// 希望返回的聚合结果的最大数量</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面是对所有文档进行聚合，现在加入条件聚合，例如：我想知道价格高于3000元的手机品牌有哪些？搜索条件为价格高于3000和必须是手机，并且统计的是品牌。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bool&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;filter&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;term&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;category&quot;</span>: <span class=\"string\">&quot;手机&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;range&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;gte&quot;</span>: <span class=\"number\">300000</span> <span class=\"comment\">// 单位为分，所以3000元要写成300000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;brand_agg&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;brand&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>Metric聚合</code><br>我们统计了价格高于3000的手机品牌，形成了一个个桶，现在我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。<br>这就要用到Metric聚合了，例如stats聚合，就可以同时获取min、max、avg等结果。<br>基本语法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /items/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bool&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;filter&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;term&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;category&quot;</span>: <span class=\"string\">&quot;手机&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;range&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;price&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;gte&quot;</span>: <span class=\"number\">300000</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;brand_agg&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;brand&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;aggs&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;stats_meric&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;stats&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以看到我们在brand_agg聚合的内部，</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们新加了一个aggs参数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个聚合就是brand_agg的子聚合，</span></span><br><span class=\"line\"><span class=\"comment\"> * 会对brand_agg形成的每个桶中的文档分别统计。</span></span><br><span class=\"line\"><span class=\"comment\"> * stats_meric：聚合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * stats：聚合类型，stats是metric聚合的一种</span></span><br><span class=\"line\"><span class=\"comment\"> * field：聚合字段，这里选择price，统计价格</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于stats是对brand_agg形成的每个品牌桶内文档分别做统计，</span></span><br><span class=\"line\"><span class=\"comment\"> * 因此每个品牌都会统计出自己的价格最小、最大、平均值。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Java代码操作DSL\"><a href=\"#2-Java代码操作DSL\" class=\"headerlink\" title=\"(2)Java代码操作DSL\"></a>(2)Java代码操作DSL</h4><p><strong>1、查询所有文档</strong>（无查询条件）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMatchAll</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数，QueryBuilders构建查询条件</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span> <span class=\"variable\">searchHits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取总条数</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> searchHits.getTotalHits().value;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;共搜索到&quot;</span> + total + <span class=\"string\">&quot;条数据&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.遍历结果数组</span></span><br><span class=\"line\">    SearchHit[] hits = searchHits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : hits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.得到_source，也就是原始json文档</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">// 4.反序列化并打印</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class=\"line\">        System.out.println(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：<br>elasticsearch返回的结果是一个JSON字符串，结构包含：<br>（1）hits：命中的结果，其中包含：  </p>\n<ul>\n<li>total：总条数，其中的value是具体的总条数值；  </li>\n<li>max_score：所有结果中得分最高的文档的相关性算分；  </li>\n<li>hits：搜索结果的文档数组，其中的每个文档都是一个json对象：<br>_source：文档中的原始数据，也是json对象。</li>\n</ul>\n<p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：<br>（1）SearchHits：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果；<br>（2）SearchHits#getTotalHits().value：获取总条数信息；<br>（3）SearchHits#getHits()：获取SearchHit数组，也就是文档数组；<br>（4）SearchHit#getSourceAsString()：获取文档结果中的_source，也就是原始的json文档数据。  </p>\n<p><strong>2、叶子查询</strong><br>所有的查询条件都是由<code>QueryBuilders</code>来构建的，叶子查询也不例外，因此整套代码中变化的部分仅仅是<code>query</code>条件构造的方式，其它不动。<br>先将解析响应操作提取出来当作一个方法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析响应简单的查询所有文档并解析原文档为json字符串并转（函数复用）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span>  <span class=\"variable\">hits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hits.getTotalHits() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> hits.getTotalHits().value;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总记录数=========&gt;&quot;</span>+total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SearchHit[] searchHits = hits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转换为对象获取json格式的数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转换为对象</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">itemDoc</span> <span class=\"operator\">=</span> JSONUtil.toBean(json, ItemDoc.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;itemDoc=========&gt;&quot;</span>+itemDoc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<code>match</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>multi_match</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testMultiMatch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.multiMatchQuery(<span class=\"string\">&quot;脱脂牛奶&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;category&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）<code>range</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testRange</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).gte(<span class=\"number\">10000</span>).lte(<span class=\"number\">30000</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）<code>term</code>查询  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testTerm</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以用GET /items/_mapping查看索引的字段类型，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果brand字段是keyword类型则适合精确匹配，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 直接termQuery(&quot;brand&quot;, &quot;华为&quot;)即可。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t * 如果brand字段是text类型，需要使用keyword子字段进行精确匹配，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 则需要termQuery(&quot;brand.keyword&quot;, &quot;华为&quot;)。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.termQuery(<span class=\"string\">&quot;brand&quot;</span>, <span class=\"string\">&quot;华为&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、复合查询</strong><br>复合查询也是由QueryBuilders来构建，以bool查询为例：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testBool</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.准备bool查询</span></span><br><span class=\"line\">    <span class=\"type\">BoolQueryBuilder</span> <span class=\"variable\">bool</span> <span class=\"operator\">=</span> QueryBuilders.boolQuery();</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.关键字搜索</span></span><br><span class=\"line\">    bool.must(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.3.品牌过滤，查不到结果的得改成brand.keyword</span></span><br><span class=\"line\">    bool.filter(QueryBuilders.termQuery(<span class=\"string\">&quot;brand&quot;</span>, <span class=\"string\">&quot;德亚&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.4.价格过滤</span></span><br><span class=\"line\">\t<span class=\"comment\">// lt：less than 小于 </span></span><br><span class=\"line\">\t<span class=\"comment\">// lte : less than equal 小于等于</span></span><br><span class=\"line\">\t<span class=\"comment\">// gt : greater than 大于 </span></span><br><span class=\"line\">\t<span class=\"comment\">// gte : greater then equal 大于等于</span></span><br><span class=\"line\">    bool.filter(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).lte(<span class=\"number\">30000</span>));</span><br><span class=\"line\">    request.source().query(bool);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、排序和分页</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testPageAndSort</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, pageSize = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.搜索条件参数</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.排序参数</span></span><br><span class=\"line\">    request.source().sort(<span class=\"string\">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class=\"line\">    <span class=\"comment\">// 2.3.分页参数</span></span><br><span class=\"line\">    request.source().from((pageNo - <span class=\"number\">1</span>) * pageSize).size(pageSize);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、高亮</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testHighlight</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.组织请求参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1.query条件</span></span><br><span class=\"line\">    request.source().query(QueryBuilders.matchQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;脱脂牛奶&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.2.高亮条件</span></span><br><span class=\"line\">    request.source().highlighter(</span><br><span class=\"line\">            SearchSourceBuilder.highlight()</span><br><span class=\"line\">                    .field(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">                    .preTags(<span class=\"string\">&quot;&lt;em&gt;&quot;</span>)</span><br><span class=\"line\">                    .postTags(<span class=\"string\">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 4.解析响应</span></span><br><span class=\"line\">    handleResponse(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleResponse</span><span class=\"params\">(SearchResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SearchHits</span> <span class=\"variable\">searchHits</span> <span class=\"operator\">=</span> response.getHits();</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取总条数</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> searchHits.getTotalHits().value;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;共搜索到&quot;</span> + total + <span class=\"string\">&quot;条数据&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.遍历结果数组</span></span><br><span class=\"line\">    SearchHit[] hits = searchHits.getHits();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SearchHit hit : hits) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.得到_source，也就是原始json文档</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> hit.getSourceAsString();</span><br><span class=\"line\">        <span class=\"comment\">// 4.反序列化</span></span><br><span class=\"line\">        <span class=\"type\">ItemDoc</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> JSONUtil.toBean(source, ItemDoc.class);</span><br><span class=\"line\">        <span class=\"comment\">// 5.获取高亮结果</span></span><br><span class=\"line\">        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollUtils.isNotEmpty(hfs)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 5.1.有高亮结果，获取name的高亮结果</span></span><br><span class=\"line\">            <span class=\"type\">HighlightField</span> <span class=\"variable\">hf</span> <span class=\"operator\">=</span> hfs.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hf != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 5.2.获取第一个高亮结果片段，就是商品名称的高亮值</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">hfName</span> <span class=\"operator\">=</span> hf.getFragments()[<span class=\"number\">0</span>].string();</span><br><span class=\"line\">                item.setName(hfName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、聚合</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testAgg</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Request</span></span><br><span class=\"line\">    <span class=\"type\">SearchRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;items&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.准备请求参数</span></span><br><span class=\"line\">    <span class=\"type\">BoolQueryBuilder</span> <span class=\"variable\">bool</span> <span class=\"operator\">=</span> QueryBuilders.boolQuery()</span><br><span class=\"line\">            .filter(QueryBuilders.termQuery(<span class=\"string\">&quot;category&quot;</span>, <span class=\"string\">&quot;手机&quot;</span>))</span><br><span class=\"line\">            .filter(QueryBuilders.rangeQuery(<span class=\"string\">&quot;price&quot;</span>).gte(<span class=\"number\">300000</span>));</span><br><span class=\"line\">    request.source().query(bool).size(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3.聚合参数</span></span><br><span class=\"line\">    request.source().aggregation(</span><br><span class=\"line\">            AggregationBuilders.terms(<span class=\"string\">&quot;brand_agg&quot;</span>).field(<span class=\"string\">&quot;brand&quot;</span>).size(<span class=\"number\">5</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 4.发送请求</span></span><br><span class=\"line\">    <span class=\"type\">SearchResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">// 5.解析聚合结果</span></span><br><span class=\"line\">    <span class=\"type\">Aggregations</span> <span class=\"variable\">aggregations</span> <span class=\"operator\">=</span> response.getAggregations();</span><br><span class=\"line\">    <span class=\"comment\">// 5.1.获取品牌聚合</span></span><br><span class=\"line\">    <span class=\"type\">Terms</span> <span class=\"variable\">brandTerms</span> <span class=\"operator\">=</span> aggregations.get(<span class=\"string\">&quot;brand_agg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 5.2.获取聚合中的桶</span></span><br><span class=\"line\">    List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class=\"line\">    <span class=\"comment\">// 5.3.遍历桶内数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 5.4.获取桶内key</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> bucket.getKeyAsString();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;brand = &quot;</span> + brand);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> bucket.getDocCount();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;; count = &quot;</span> + count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"ElasticSearch","path":"api/tags/ElasticSearch.json"}]}