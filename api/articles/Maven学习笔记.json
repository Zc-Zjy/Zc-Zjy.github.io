{"title":"Maven学习笔记","slug":"Maven学习笔记","date":"2024-07-19T06:03:58.000Z","updated":"2025-07-02T07:00:44.813Z","comments":true,"path":"api/articles/Maven学习笔记.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<hr>\n<h1 id=\"一、Maven配置\"><a href=\"#一、Maven配置\" class=\"headerlink\" title=\"一、Maven配置\"></a>一、Maven配置</h1><p>1、Maven配置国内阿里镜像  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、配置jdk17版本构建  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-17<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Maven标签解释\"><a href=\"#二、Maven标签解释\" class=\"headerlink\" title=\"二、Maven标签解释\"></a>二、Maven标签解释</h1><h3 id=\"1、GAPV属性\"><a href=\"#1、GAPV属性\" class=\"headerlink\" title=\"1、GAPV属性\"></a>1、GAPV属性</h3><p>1、说明<br>GAPV属性是Maven项目坐标的四个属性，分别是：<code>groupId、artifactId、version、packaging</code>，其中前三个是必要的，而packaging属性是可选项。<br>2、解释<br>（1）<code>groupId</code>：定义当前Maven项目属于哪个组，这个组往往和项目所在的组织或公司有关，格式为：com.{公司}.业务线.{子业务线}（最多4级）。<br>说明：{公司} 例如：alibaba、taobao、tmall等一级，子业务线可选。<br>例子：com.taobao.tddl或com.alibaba.sourcing.multilang等。<br>（2）<code>artifactId</code>：定义实际项目中的一个模块，格式为：产品线名-模块名。<br>例子：tc-client、uic-api、tair-tool等。<br>（3）<code>version</code>：定义当前项目的版本号，格式为：主版本号.次版本号.修订号。<br>说明：  </p>\n<ol>\n<li>主版本号：当做了不兼容的API修改，或者增加了能改变产品方向的新功能，例如：原来的项目有用户模块、部门模块，然后根据需要删除了部门模块。  </li>\n<li>次版本号：当做了向下兼容的功能性新增（新增类、接口等），例如：原来的项目用户没有删除功能，然后根据需求新增了删除功能。  </li>\n<li>修订号：修复bug，没有修改方法签名的功能加强，保持API兼容性。<br>例如：初始 -》1.0.0，修改bug -》1.0.1，功能调整 -》1.1.1等。</li>\n</ol>\n<p>（4)<code>packaging</code>：定义项目的打包方式，常用的打包方式有jar、war、pom等。  </p>\n<ol>\n<li>jar：代表普通的java工程，打包以后是.jar结尾的文件，默认值。  </li>\n<li>war：代表java的web工程，打包以后.war结尾的文件，idea有个插件可以将普通java工程转成war工程：<code>JBLJavaToWeb</code>。  </li>\n<li>pom：父项目打包方式，代表不会打包，用来做继承的父工程。</li>\n</ol>\n<h3 id=\"2、properties标签\"><a href=\"#2、properties标签\" class=\"headerlink\" title=\"2、properties标签\"></a>2、properties标签</h3><p>1、说明<br>properties标签是Maven的属性标签，用来定义一些常量，在pom.xml文件中可以直接引用。<br>2、例子  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明版本号 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Maven依赖信息\"><a href=\"#3、Maven依赖信息\" class=\"headerlink\" title=\"3、Maven依赖信息\"></a>3、Maven依赖信息</h3><p>1、Maven依赖去哪里找？<br>（1）maven提供的查询官网：<code>https://mvnrepository.com</code>；<br>（2）idea中的插件：<code>maven-search</code>。<br>2、提取版本号<br>说明：就是说，可以将依赖中的<code>version</code>标签提取出来，写到<code>properties</code>标签中管理。<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里相当于声明一个版本变量 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.3.23<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 这里是用上面声明的版本变量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Scope标签\"><a href=\"#4、Scope标签\" class=\"headerlink\" title=\"4、Scope标签\"></a>4、Scope标签</h3><p>1、说明<br>Scope标签是用在<code>dependency</code>标签中的。<br>2、用法<br>（1）<code>compile</code>：默认值，表示该依赖在编译和运行时都有效。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）<code>test</code>：表示该依赖只在测试时有效，只用在test包下导入并使用，比如：引入junit依赖，使用@Test注解，只能在test包下使用。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）<code>provided</code>：表示该依赖在编译和测试时有效，但在运行时无效，意思和<code>runtime</code>相反，在main和test包下使用，打包和运行不使用，比如：引入servlet-api包，使用HttpServlet，在main和test中可能要使用，但是打包和运行我们就不使用，因为tomcat会提供。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>runtime</code>：表示该依赖只在运行时有效，在编译时无效，意思就是在main包下不会用到，test包下也不会用到，只有在打包和运行的时候会用到，比如：mysql驱动依赖，我们要使用反射Class.forName(“xxx.xxx.xxx”)加载mysql驱动。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（5）<code>system</code>：表示当前依赖不从maven仓库获取，从本地系统获取，结合systempath使用，常用于无法从maven仓库获取的包。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.supermap<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/data-1.0.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（6）<code>import</code>：只能在<code>dependencyManagement</code>标签中使用，而且仅用于<code>type</code>标签为pom值时。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- springCloud --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>说明：pom文件是单继承制，也就是只会继承<code>parent</code>标签，而<code>parent</code>标签一般是继承spring-boot-starter-parent，如果想继承其他的，比如想继承spring-cloud-dependencies，那么就需要使用<code>import</code>标签，首先在<code>dependencyManagement</code>中指定spring-cloud-dependencies的版本，然后在<code>scope</code>和<code>type</code>标签中指定import和pom。  </p>\n<h3 id=\"5、dependencyManagement标签\"><a href=\"#5、dependencyManagement标签\" class=\"headerlink\" title=\"5、dependencyManagement标签\"></a>5、dependencyManagement标签</h3><p>1、说明<br>在父工程使用，用于依赖管理，在这个标签中的依赖不会真正导入项目，只是声明和统一管理。<br>2、例子：<br>比如有一个父工程和两个子工程user和order。<br>（1）在父工程中使用  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 这里引入依赖，依赖不会真正导入项目中 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.15.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）在user子工程中使用  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- user子工程就继承了父工程的版本 2.15.2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：此时父工程和order子工程中是没有<code>jackson-core</code>这个依赖的。<br>（3）在order子工程中使用其他版本  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- order子工程因为使用了version，不会继承父工程中的版本，此时order的版本为 2.14.0 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Optional标签\"><a href=\"#6、Optional标签\" class=\"headerlink\" title=\"6、Optional标签\"></a>6、Optional标签</h3><p>在<code>dependency</code>标签下使用，作用是如果哪个依赖使用了<code>optional</code>，表示可选，需要我们手动导入所需依赖，比如：<br>在pom文件中导入camunda-bpm-spring-boot-starter-rest依赖，我们查看camunda-bpm-spring-boot-starter-rest依赖，它里面已经导入了spring-boot-starter-web依赖了，并且使用了<code>optional</code>标签为true，说明我们如果在pom文件中要想使用spring-boot-starter-web依赖，那就需要我们手动再导入一次；如果<code>optional</code>标签为false，那spring-boot-starter-web依赖已经自动帮我们导入了，不需要我们手动再次导入。  </p>\n<h3 id=\"7、RelativePath标签\"><a href=\"#7、RelativePath标签\" class=\"headerlink\" title=\"7、RelativePath标签\"></a>7、RelativePath标签</h3><p>1、说明<br>在<code>parent</code>标签下使用，作用是，选择父pom文件的地址。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（1）默认值（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>默认我们不用写<code>relativePath</code>，那默认值就是<code>../pom.xml</code>（默认从pom文件上一级目录开始查找），会从本地路径中获取parent的pom。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）写了<code>relativePath</code>标签<br>有时候我们会写成<code>relativePath</code>，表示不从本地获取，直接从仓库获取。<br>（3）写了<code>relativePath</code>某个pom的路径（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>指定本地的路径，从本地路径获取parent的pom。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../xxx/pom.xml<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、Maven相关问题\"><a href=\"#三、Maven相关问题\" class=\"headerlink\" title=\"三、Maven相关问题\"></a>三、Maven相关问题</h1><h3 id=\"1、Maven依赖传递和依赖冲突特性\"><a href=\"#1、Maven依赖传递和依赖冲突特性\" class=\"headerlink\" title=\"1、Maven依赖传递和依赖冲突特性\"></a>1、Maven依赖传递和依赖冲突特性</h3><p>1、依赖传递（只有<code>compile</code>的会发生）<br>（1）说明<br>A 依赖-》 B 依赖-》C，如果只引入C，自动引入A和B。<br>（2）查看引入的依赖又依赖了谁<br>在maven仓库中，点击某个依赖，往下翻，有个<code>Compile Dependencies</code>项，就是这个依赖所依赖的其他的依赖（注意：只有<code>Compile Dependencies</code>项有依赖传递，其他没有！）。<br>2、依赖冲突<br>（1）说明<br>A 依赖-》 B 依赖-》 C 依赖 -》 A 依赖，这样就产生了循环依赖，循环依赖就会导致依赖冲突，当发生依赖冲突，就会终止依赖传递，避免重复依赖。<br>（2）场景一（谁短谁优先，针对引用路径）<br>A -》C -》B1.0：有一个依赖A（scope标签为<code>compile</code>），引入依赖A后，会自动引入C，然后又自动引入B1.0；<br>F -》B2.0：有一个依赖F（scope标签为<code>compile</code>），引入依赖F后，自动引入B2.0；<br>因为maven采用谁的引用路径短，就引用谁，所以最后引用的B是2.0版本。<br>（3）场景二（引用路径相同时，谁上谁优先，dependencies声明的先后顺序）<br>A -》B1.0：在pom.xml文件中，先引用了A，然后A自动引用了B1.0；<br>F -》B2.0：然后在pom.xml文件中，又引用了F，这样最后得到的B是1.0版本。<br>（4）场景三<br>A -》B1.0 -》C：引入了A依赖，不会自动引入B1.0，也不会引入C；<br>F -》B2.0：引入了F，自动引入B2.0，所以最后引用的B的版本是2.0；<br>因为根据谁短谁优先，引入了B2.0，这样就导致A这边依赖冲突，就终止了后续自动引入。  </p>\n<h3 id=\"2、Maven本地仓库被污染\"><a href=\"#2、Maven本地仓库被污染\" class=\"headerlink\" title=\"2、Maven本地仓库被污染\"></a>2、Maven本地仓库被污染</h3><p>当发现本地仓库有<code>lastUpdated</code>文件，说明本地仓库被污染，需要删除<code>lastUpdated</code>文件，重新下载依赖。<br>清除污染仓库脚本（针对windows，是.bat文件）：<br>rem：是注释的意思。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">rem 下面写你的本地仓库路径</span><br><span class=\"line\">set REPOSITORY_PATH=D:\\repository</span><br><span class=\"line\">rem 正在搜索...</span><br><span class=\"line\">for /f &quot;delims=&quot; %%i in (&#x27;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#x27;) do (</span><br><span class=\"line\">    del /s /q %%i</span><br><span class=\"line\">    echo 删除文件: %%i</span><br><span class=\"line\">)</span><br><span class=\"line\">echo 搜索完成！</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Maven生命周期插件用法\"><a href=\"#3、Maven生命周期插件用法\" class=\"headerlink\" title=\"3、Maven生命周期插件用法\"></a>3、Maven生命周期插件用法</h3><p>1、生命周期流程<br>清理-》编译-》测试-》打包-》报告-》部署。<br>2、生命周期插件<br>（1）<code>mvn clean</code>：清理编译或打包后的项目结构，删除target文件夹。<br>（2）<code>mvn compile</code>：编译项目，生成target文件夹。<br>（3）<code>mvn test</code>：执行测试源码（测试）。<br>（4）<code>mvn site</code>：生成一个项目依赖信息的展示页面。<br>（5）<code>mvn package</code>：打包项目，生成jar&#x2F;war包。<br>（6）<code>mvn install</code>：打包后上传到maven本地仓库（本地部署），供其他项目使用。<br>（7）<code>mvn deploy</code>：只打包，上传到maven私服仓库（私服部署）。<br>3、用法<br>因为<code>clean</code>是独立出来的（还有<code>site</code>也是独立出来的，很少用），所以在执行插件的时候，最好是（命令行操作，在使用命令行的时候，必须在项目根路径）<code>mvn clean compile</code>，点击idea插件时，最后先点<code>clean</code>清理操作之后，在点击<code>compile</code>。<br>4、配置插件<br>在<code>build</code>标签中配置插件，比如将web项目打包时，因为版本兼容问题，报错打不了包，就需要自定义配置插件，如下：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5、maven打包插件<br>（1）maven-jar-plugin：默认的打包插件，用来打普通的project JAR包。<br>（2）maven-shade-plugin：用来打可执行JAR包，也就是所谓的fat JAR包。<br>（3）maven-assembly-plugin：支持自定义的打包结构，也可以定制依赖项等。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Maven使用命令\"><a href=\"#四、Maven使用命令\" class=\"headerlink\" title=\"四、Maven使用命令\"></a>四、Maven使用命令</h1><h3 id=\"1、查看依赖树\"><a href=\"#1、查看依赖树\" class=\"headerlink\" title=\"1、查看依赖树\"></a>1、查看依赖树</h3><p><code>mvn dependency:tree</code>：查看依赖树。<br><code>mvn dependency:tree -Dverbose</code>：查看依赖树，并且显示依赖的详细信息。<br><code>mvn dependency:tree -Dincludes=groupId:artifactId</code>：查看依赖树，并且只显示某个依赖的详细信息。  </p>\n<br/>\n\n\n<hr>\n<br/>\n","more":"<hr>\n<h1 id=\"一、Maven配置\"><a href=\"#一、Maven配置\" class=\"headerlink\" title=\"一、Maven配置\"></a>一、Maven配置</h1><p>1、Maven配置国内阿里镜像  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、配置jdk17版本构建  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-17<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、Maven标签解释\"><a href=\"#二、Maven标签解释\" class=\"headerlink\" title=\"二、Maven标签解释\"></a>二、Maven标签解释</h1><h3 id=\"1、GAPV属性\"><a href=\"#1、GAPV属性\" class=\"headerlink\" title=\"1、GAPV属性\"></a>1、GAPV属性</h3><p>1、说明<br>GAPV属性是Maven项目坐标的四个属性，分别是：<code>groupId、artifactId、version、packaging</code>，其中前三个是必要的，而packaging属性是可选项。<br>2、解释<br>（1）<code>groupId</code>：定义当前Maven项目属于哪个组，这个组往往和项目所在的组织或公司有关，格式为：com.{公司}.业务线.{子业务线}（最多4级）。<br>说明：{公司} 例如：alibaba、taobao、tmall等一级，子业务线可选。<br>例子：com.taobao.tddl或com.alibaba.sourcing.multilang等。<br>（2）<code>artifactId</code>：定义实际项目中的一个模块，格式为：产品线名-模块名。<br>例子：tc-client、uic-api、tair-tool等。<br>（3）<code>version</code>：定义当前项目的版本号，格式为：主版本号.次版本号.修订号。<br>说明：  </p>\n<ol>\n<li>主版本号：当做了不兼容的API修改，或者增加了能改变产品方向的新功能，例如：原来的项目有用户模块、部门模块，然后根据需要删除了部门模块。  </li>\n<li>次版本号：当做了向下兼容的功能性新增（新增类、接口等），例如：原来的项目用户没有删除功能，然后根据需求新增了删除功能。  </li>\n<li>修订号：修复bug，没有修改方法签名的功能加强，保持API兼容性。<br>例如：初始 -》1.0.0，修改bug -》1.0.1，功能调整 -》1.1.1等。</li>\n</ol>\n<p>（4)<code>packaging</code>：定义项目的打包方式，常用的打包方式有jar、war、pom等。  </p>\n<ol>\n<li>jar：代表普通的java工程，打包以后是.jar结尾的文件，默认值。  </li>\n<li>war：代表java的web工程，打包以后.war结尾的文件，idea有个插件可以将普通java工程转成war工程：<code>JBLJavaToWeb</code>。  </li>\n<li>pom：父项目打包方式，代表不会打包，用来做继承的父工程。</li>\n</ol>\n<h3 id=\"2、properties标签\"><a href=\"#2、properties标签\" class=\"headerlink\" title=\"2、properties标签\"></a>2、properties标签</h3><p>1、说明<br>properties标签是Maven的属性标签，用来定义一些常量，在pom.xml文件中可以直接引用。<br>2、例子  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明版本号 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Maven依赖信息\"><a href=\"#3、Maven依赖信息\" class=\"headerlink\" title=\"3、Maven依赖信息\"></a>3、Maven依赖信息</h3><p>1、Maven依赖去哪里找？<br>（1）maven提供的查询官网：<code>https://mvnrepository.com</code>；<br>（2）idea中的插件：<code>maven-search</code>。<br>2、提取版本号<br>说明：就是说，可以将依赖中的<code>version</code>标签提取出来，写到<code>properties</code>标签中管理。<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里相当于声明一个版本变量 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.3.23<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 这里是用上面声明的版本变量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Scope标签\"><a href=\"#4、Scope标签\" class=\"headerlink\" title=\"4、Scope标签\"></a>4、Scope标签</h3><p>1、说明<br>Scope标签是用在<code>dependency</code>标签中的。<br>2、用法<br>（1）<code>compile</code>：默认值，表示该依赖在编译和运行时都有效。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）<code>test</code>：表示该依赖只在测试时有效，只用在test包下导入并使用，比如：引入junit依赖，使用@Test注解，只能在test包下使用。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）<code>provided</code>：表示该依赖在编译和测试时有效，但在运行时无效，意思和<code>runtime</code>相反，在main和test包下使用，打包和运行不使用，比如：引入servlet-api包，使用HttpServlet，在main和test中可能要使用，但是打包和运行我们就不使用，因为tomcat会提供。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>runtime</code>：表示该依赖只在运行时有效，在编译时无效，意思就是在main包下不会用到，test包下也不会用到，只有在打包和运行的时候会用到，比如：mysql驱动依赖，我们要使用反射Class.forName(“xxx.xxx.xxx”)加载mysql驱动。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（5）<code>system</code>：表示当前依赖不从maven仓库获取，从本地系统获取，结合systempath使用，常用于无法从maven仓库获取的包。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.supermap<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/data-1.0.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（6）<code>import</code>：只能在<code>dependencyManagement</code>标签中使用，而且仅用于<code>type</code>标签为pom值时。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- springCloud --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>说明：pom文件是单继承制，也就是只会继承<code>parent</code>标签，而<code>parent</code>标签一般是继承spring-boot-starter-parent，如果想继承其他的，比如想继承spring-cloud-dependencies，那么就需要使用<code>import</code>标签，首先在<code>dependencyManagement</code>中指定spring-cloud-dependencies的版本，然后在<code>scope</code>和<code>type</code>标签中指定import和pom。  </p>\n<h3 id=\"5、dependencyManagement标签\"><a href=\"#5、dependencyManagement标签\" class=\"headerlink\" title=\"5、dependencyManagement标签\"></a>5、dependencyManagement标签</h3><p>1、说明<br>在父工程使用，用于依赖管理，在这个标签中的依赖不会真正导入项目，只是声明和统一管理。<br>2、例子：<br>比如有一个父工程和两个子工程user和order。<br>（1）在父工程中使用  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 这里引入依赖，依赖不会真正导入项目中 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.15.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）在user子工程中使用  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- user子工程就继承了父工程的版本 2.15.2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：此时父工程和order子工程中是没有<code>jackson-core</code>这个依赖的。<br>（3）在order子工程中使用其他版本  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- order子工程因为使用了version，不会继承父工程中的版本，此时order的版本为 2.14.0 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Optional标签\"><a href=\"#6、Optional标签\" class=\"headerlink\" title=\"6、Optional标签\"></a>6、Optional标签</h3><p>在<code>dependency</code>标签下使用，作用是如果哪个依赖使用了<code>optional</code>，表示可选，需要我们手动导入所需依赖，比如：<br>在pom文件中导入camunda-bpm-spring-boot-starter-rest依赖，我们查看camunda-bpm-spring-boot-starter-rest依赖，它里面已经导入了spring-boot-starter-web依赖了，并且使用了<code>optional</code>标签为true，说明我们如果在pom文件中要想使用spring-boot-starter-web依赖，那就需要我们手动再导入一次；如果<code>optional</code>标签为false，那spring-boot-starter-web依赖已经自动帮我们导入了，不需要我们手动再次导入。  </p>\n<h3 id=\"7、RelativePath标签\"><a href=\"#7、RelativePath标签\" class=\"headerlink\" title=\"7、RelativePath标签\"></a>7、RelativePath标签</h3><p>1、说明<br>在<code>parent</code>标签下使用，作用是，选择父pom文件的地址。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（1）默认值（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>默认我们不用写<code>relativePath</code>，那默认值就是<code>../pom.xml</code>（默认从pom文件上一级目录开始查找），会从本地路径中获取parent的pom。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）写了<code>relativePath</code>标签<br>有时候我们会写成<code>relativePath</code>，表示不从本地获取，直接从仓库获取。<br>（3）写了<code>relativePath</code>某个pom的路径（查找顺序为：文件系统 &gt; 本地仓库 &gt; 远程仓库）<br>指定本地的路径，从本地路径获取parent的pom。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../xxx/pom.xml<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、Maven相关问题\"><a href=\"#三、Maven相关问题\" class=\"headerlink\" title=\"三、Maven相关问题\"></a>三、Maven相关问题</h1><h3 id=\"1、Maven依赖传递和依赖冲突特性\"><a href=\"#1、Maven依赖传递和依赖冲突特性\" class=\"headerlink\" title=\"1、Maven依赖传递和依赖冲突特性\"></a>1、Maven依赖传递和依赖冲突特性</h3><p>1、依赖传递（只有<code>compile</code>的会发生）<br>（1）说明<br>A 依赖-》 B 依赖-》C，如果只引入C，自动引入A和B。<br>（2）查看引入的依赖又依赖了谁<br>在maven仓库中，点击某个依赖，往下翻，有个<code>Compile Dependencies</code>项，就是这个依赖所依赖的其他的依赖（注意：只有<code>Compile Dependencies</code>项有依赖传递，其他没有！）。<br>2、依赖冲突<br>（1）说明<br>A 依赖-》 B 依赖-》 C 依赖 -》 A 依赖，这样就产生了循环依赖，循环依赖就会导致依赖冲突，当发生依赖冲突，就会终止依赖传递，避免重复依赖。<br>（2）场景一（谁短谁优先，针对引用路径）<br>A -》C -》B1.0：有一个依赖A（scope标签为<code>compile</code>），引入依赖A后，会自动引入C，然后又自动引入B1.0；<br>F -》B2.0：有一个依赖F（scope标签为<code>compile</code>），引入依赖F后，自动引入B2.0；<br>因为maven采用谁的引用路径短，就引用谁，所以最后引用的B是2.0版本。<br>（3）场景二（引用路径相同时，谁上谁优先，dependencies声明的先后顺序）<br>A -》B1.0：在pom.xml文件中，先引用了A，然后A自动引用了B1.0；<br>F -》B2.0：然后在pom.xml文件中，又引用了F，这样最后得到的B是1.0版本。<br>（4）场景三<br>A -》B1.0 -》C：引入了A依赖，不会自动引入B1.0，也不会引入C；<br>F -》B2.0：引入了F，自动引入B2.0，所以最后引用的B的版本是2.0；<br>因为根据谁短谁优先，引入了B2.0，这样就导致A这边依赖冲突，就终止了后续自动引入。  </p>\n<h3 id=\"2、Maven本地仓库被污染\"><a href=\"#2、Maven本地仓库被污染\" class=\"headerlink\" title=\"2、Maven本地仓库被污染\"></a>2、Maven本地仓库被污染</h3><p>当发现本地仓库有<code>lastUpdated</code>文件，说明本地仓库被污染，需要删除<code>lastUpdated</code>文件，重新下载依赖。<br>清除污染仓库脚本（针对windows，是.bat文件）：<br>rem：是注释的意思。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">rem 下面写你的本地仓库路径</span><br><span class=\"line\">set REPOSITORY_PATH=D:\\repository</span><br><span class=\"line\">rem 正在搜索...</span><br><span class=\"line\">for /f &quot;delims=&quot; %%i in (&#x27;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#x27;) do (</span><br><span class=\"line\">    del /s /q %%i</span><br><span class=\"line\">    echo 删除文件: %%i</span><br><span class=\"line\">)</span><br><span class=\"line\">echo 搜索完成！</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Maven生命周期插件用法\"><a href=\"#3、Maven生命周期插件用法\" class=\"headerlink\" title=\"3、Maven生命周期插件用法\"></a>3、Maven生命周期插件用法</h3><p>1、生命周期流程<br>清理-》编译-》测试-》打包-》报告-》部署。<br>2、生命周期插件<br>（1）<code>mvn clean</code>：清理编译或打包后的项目结构，删除target文件夹。<br>（2）<code>mvn compile</code>：编译项目，生成target文件夹。<br>（3）<code>mvn test</code>：执行测试源码（测试）。<br>（4）<code>mvn site</code>：生成一个项目依赖信息的展示页面。<br>（5）<code>mvn package</code>：打包项目，生成jar&#x2F;war包。<br>（6）<code>mvn install</code>：打包后上传到maven本地仓库（本地部署），供其他项目使用。<br>（7）<code>mvn deploy</code>：只打包，上传到maven私服仓库（私服部署）。<br>3、用法<br>因为<code>clean</code>是独立出来的（还有<code>site</code>也是独立出来的，很少用），所以在执行插件的时候，最好是（命令行操作，在使用命令行的时候，必须在项目根路径）<code>mvn clean compile</code>，点击idea插件时，最后先点<code>clean</code>清理操作之后，在点击<code>compile</code>。<br>4、配置插件<br>在<code>build</code>标签中配置插件，比如将web项目打包时，因为版本兼容问题，报错打不了包，就需要自定义配置插件，如下：  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5、maven打包插件<br>（1）maven-jar-plugin：默认的打包插件，用来打普通的project JAR包。<br>（2）maven-shade-plugin：用来打可执行JAR包，也就是所谓的fat JAR包。<br>（3）maven-assembly-plugin：支持自定义的打包结构，也可以定制依赖项等。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Maven使用命令\"><a href=\"#四、Maven使用命令\" class=\"headerlink\" title=\"四、Maven使用命令\"></a>四、Maven使用命令</h1><h3 id=\"1、查看依赖树\"><a href=\"#1、查看依赖树\" class=\"headerlink\" title=\"1、查看依赖树\"></a>1、查看依赖树</h3><p><code>mvn dependency:tree</code>：查看依赖树。<br><code>mvn dependency:tree -Dverbose</code>：查看依赖树，并且显示依赖的详细信息。<br><code>mvn dependency:tree -Dincludes=groupId:artifactId</code>：查看依赖树，并且只显示某个依赖的详细信息。  </p>\n<br/>\n\n\n<hr>\n<br/>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Maven","path":"api/tags/Maven.json"}]}