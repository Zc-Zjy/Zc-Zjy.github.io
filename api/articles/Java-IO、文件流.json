{"title":"Java IO、文件流","slug":"Java-IO、文件流","date":"2024-06-02T09:33:37.000Z","updated":"2025-04-23T09:05:12.450Z","comments":true,"path":"api/articles/Java-IO、文件流.json","realPath":null,"excerpt":null,"covers":["/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/1.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/2.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/3.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/4.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/5.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/6.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/7.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/8.png","/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/9.png"],"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、File类\"><a href=\"#一、File类\" class=\"headerlink\" title=\"一、File类\"></a>一、File类</h1><h3 id=\"1、概念解释\"><a href=\"#1、概念解释\" class=\"headerlink\" title=\"1、概念解释\"></a>1、概念解释</h3><p><code>File</code>是<code>java.io</code>包下的类，File类创建的对象代表操作系统中的文件或文件夹，只能操作文件或者文件夹，例如：<br>（1）新建一个文件或者文件夹；<br>（2）复制粘贴文件或者文件夹；<br>（3）删除文件或者空文件夹；<br>（4）获取文件信息；<br>（5）判断文件类型等等。<br><strong>注意：</strong><br><code>File</code>类是不能对文件里面的内容进行操作的（读或写）！想要操作文件里面的内容就得使用<code>io</code>流！  </p>\n<h3 id=\"2、使用方式\"><a href=\"#2、使用方式\" class=\"headerlink\" title=\"2、使用方式\"></a>2、使用方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileTest</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个 File 对象，代表某个文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用绝对路径创建，在 D 盘下的 fileOne 文件夹下创建一个 fileOne.txt 文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// windows中默认识别是\\，linux和mac是/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用正斜杠方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/fileOne/fileOne1.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用反斜杠方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\fileOne\\\\fileOne2.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用系统变量方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:&quot;</span> + File.separator + <span class=\"string\">&quot;fileOne&quot;</span> + File.separator + <span class=\"string\">&quot;fileOne3.txt&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\tfileOne1.exists();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件大小，如果 fileOne1 为文件夹，返回的大小是文件夹自身的大小（不包含文件夹里面所有文件的大小）</span></span><br><span class=\"line\">\t\tfileOne1.length();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果项目名称为 demo，文件所在目录为：D:/a/b/demo/src/file.txt（demo就是项目）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用绝对路径获取 file.txt 文件对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileTwo1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/a/b/demo/src/file.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用相对路径获取 file.txt 文件对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileTwo2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/file.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、在使用相对路径之前，必须先查看自己的工作目录；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、使用 System.getProperty(&quot;user.dir&quot;) 查看工作目录；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、如果工作目录不包含项目名称，使用相对路径的时候就在 src 前面加上项目名称；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4、如果工作目录包含了项目名称，就直接从 src 开始，例如上面的例子改成：src/file.txt</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前文件对象是否是文件</span></span><br><span class=\"line\">\t\tfileOne1.isFile();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前文件对象是否是文件夹</span></span><br><span class=\"line\">\t\tfileOne1.isDirectory();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件名称（包含后缀）</span></span><br><span class=\"line\">\t\tfileOne1.getName();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件最后修改时间（时间戳）</span></span><br><span class=\"line\">\t\tfileOne1.lastModified();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取创建文件对象时，使用的路径</span></span><br><span class=\"line\">\t\tfileOne1.getPath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件绝对路径</span></span><br><span class=\"line\">\t\tfileOne1.getAbsolutePath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个新的文件，创建成功返回 true</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileThree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/fileThree.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果文件已经存在，创建失败，返回 false</span></span><br><span class=\"line\">\t\tfileThree.createNewFile();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建文件夹，只创建一级文件夹</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/fileDirOne&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果文件夹已经存在，则不会创建，如果上级文件夹也不存在，也不会创建，返回false</span></span><br><span class=\"line\">\t\tfileDirOne.mkdir(); <span class=\"comment\">// 创建单级目录</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 test 目录不存在，会创建失败</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test/fileDirTwo&quot;</span>);</span><br><span class=\"line\">\t\tfileDirTwo.mkdir();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果想要成功，就使用，意思就是会将demo、src、test、fileDirThree都创建出来</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirThree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test/fileDirThree&quot;</span>);</span><br><span class=\"line\">\t\tfileDirThree.mkdirs(); <span class=\"comment\">// 创建多级目录</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除文件或者空文件夹</span></span><br><span class=\"line\">\t\tfileOne1.delete();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下所有的一级文件名</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileSrc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面是返回 src 目录下的所有一级文件的文件名</span></span><br><span class=\"line\">\t\tString[] fileSrcNames = fileSrc.list();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下所有的一级文件对象</span></span><br><span class=\"line\">\t\tFile[] fileSrcFiles = fileSrc.listFiles();</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 使用 listFiles 方法时的注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、当调用 listFiles 方法的对象是文件或者路径不存在时，返回 null；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、当调用的对象是空文件夹，返回一个长度为 0 的数组；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、当调用的对象是非空文件夹，并且存在隐藏文件，隐藏文件也会返回；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4、当调用的对象是非空文件夹，但是没有权限访问该文件夹时，会返回 null。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、案例\"><a href=\"#3、案例\" class=\"headerlink\" title=\"3、案例\"></a>3、案例</h3><p>1、文件搜索（使用递归）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试</span></span><br><span class=\"line\">\t\tsearchFile(<span class=\"string\">&quot;D:/&quot;</span>, <span class=\"string\">&quot;xxx.txt&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * dir：要搜索的路径</span></span><br><span class=\"line\"><span class=\"comment\">\t * fileName：要搜索的文件名</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">searchFile</span><span class=\"params\">(File dir, String fileName)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理非法路径</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dir == <span class=\"literal\">null</span> || !dir.exists() || dir.isFile()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下的所有一级文件对象</span></span><br><span class=\"line\">\t\tFile[] files = dir.listFiles();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前目录是否是空目录</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span> &amp;&amp; files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍历所有一级文件对象</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断当前文件对象是文件还是文件夹</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 判断当前文件是否是我们要搜索的文件</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f.getName().contains(fileName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;找到了！&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 当前文件对象为文件夹，递归调用</span></span><br><span class=\"line\">\t\t\t\t\tsearchFile(f, fileName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、文件复制  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 复制照片</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 需要复制的照片地址</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;D:/resource/xxx.png&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 需要粘贴的照片地址</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C:/data/xxx.png&quot;</span>);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个字节数组，用来一次性读取多个字节</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次性读取1024个字节，相当于1KB的字节</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 len 代表读取的字节长度</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tos.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;复制完成！&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、IO流\"><a href=\"#二、IO流\" class=\"headerlink\" title=\"二、IO流\"></a>二、IO流</h1><h3 id=\"1、概念解释-1\"><a href=\"#1、概念解释-1\" class=\"headerlink\" title=\"1、概念解释\"></a>1、概念解释</h3><p>1、字符集<br>（1）标准的ASCII使用1个字节存储一个字符，字节第一位为0，例如：a、A、1……，总共可表示128个字符，对英文使用者已经够用了，但是对于中文是远远不够的。<br>例如：“abc”的字节表示：<code>0xxxxxxx(a) 0xxxxxxx(b) 0xxxxxxx(c)</code>。<br>（2）GBK（汉字编码字符集），包含了2万多个汉字等字符，一个中文字符编码成两个字节存储，并且规定汉字的第一个字节的第一位必须是1，兼容了ASCII字符集。<br>例如：“我a你”的字节表示：<code>1xxxxxxx xxxxxxxx(我) 0xxxxxxx(a) 1xxxxxxx xxxxxxxx(你)</code>。<br>（3）Unicode（统一码字符集），是国际组织制定的，可以容纳世界上所有文字、符号的字符集。  </p>\n<ul>\n<li>UTF-32，四个字节表示一个字符，例如：“a”本来只需一个字节<code>0xxxxxxx</code>，这里需要<code>00000000 00000000 00000000 0xxxxxxx</code>，占存储空间，通信效率低；  </li>\n<li>UTF-8，可变编码方案，共分四个长度区：1个字节、2个字节、3个字节、4个字节。英文字符、数字等只占1个字节，汉字字符占3个字节。<br>UTF-8编码方式：<br>1个字节：0xxxxxxx；<br>2个字节：110xxxxx 10xxxxxx；<br>3个字节：1110xxxx 10xxxxxx 10xxxxxx；<br>4个字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。<br>例如：a我m（01100001 1110xxxx 10xxxxxx 10xxxxxx 01101101）<br>a：01100001（97），我：110 001000 010001（25105），m：01101101（109）<br>它会将“我”中的前三位“110”填入“1110xxxx”中变为“11100110”，将“001000”填入“10xxxxxx”中变为“10001000”，将“010001”填入“10xxxxxx”中变为“10010001”。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a我b&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认使用 utf8 </span></span><br><span class=\"line\">\t\t<span class=\"type\">byte</span>[] bytes = s1.getBytes();</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(bytes));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出 [97, -26, -120, -111, 98]，为什么中间三个为负数，因为3个字节第一个都是1，1在二进制中为负</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 解码</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes);</span><br><span class=\"line\">\t\tSystem.out.println(s2);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出 a我b</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n2、IO流<br>用于读写数据的（可以读写文件、网络中的数据……）。  <img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/1.png\" class=\"\">  \n<code>输入流</code>：数据从数据源（文件）到程序（内存）的路径。<br><code>输出流</code>：数据从程序（内存）到数据源（文件）的路径。<br>例如：把程序（内存）当作自己大脑，把数据源（文件）当作书本，看书就是学习知识，输入到自己大脑，写作就是输出到书本上。<br>（1）IO流的分类  <img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/2.png\" class=\"\">\n（2）IO流体系<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/3.png\" class=\"\"></li>\n</ul>\n<h3 id=\"2、FileInputStream（文件字节输入流）\"><a href=\"#2、FileInputStream（文件字节输入流）\" class=\"headerlink\" title=\"2、FileInputStream（文件字节输入流）\"></a>2、FileInputStream（文件字节输入流）</h3><p>1、作用：将磁盘文件中的数据以字节的形式读入到内存中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/4.png\" class=\"\">  \n<p>2、代码<br>（1）一个字节一个字节读取  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一种方式创建文件字节输入流管道</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 在使用相对路径之前先查看工作目录，详细查看上面 File 章节</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里运用了多态的特性，向上转型</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">isOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第二种创建方式，第一种方式的简化版</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">isTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第三种创建方式是最简化形式，推荐</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 假如 test.txt 文件内容为 abc</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> is.read();</span><br><span class=\"line\">\t\tSystem.out.println(a); <span class=\"comment\">// 输出 97</span></span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) a) <span class=\"comment\">// 输出 a</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取 b</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> is <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) b) <span class=\"comment\">// 输出 b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取 c</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> is <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) c) <span class=\"comment\">// 输出 c</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> is.read();</span><br><span class=\"line\">\t\tSystem.out.println(i) <span class=\"comment\">// 输出 -1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭流</span></span><br><span class=\"line\">\t\tis.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面代码如果test文件内容有很多个，那就得写很多行读取代码，不可取，修改简化代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这是 java7 新出的特性，将需要关闭的写入括号中，会自动执行关闭方法，就不用再 finally 处关闭了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 i 用来接收读取的返回值，如果读取的返回值不为 -1，说明还有内容</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((i = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println((<span class=\"type\">char</span>) i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面代码虽然改造完成了，但是还是存在问题，因为它是一个字节一个字节的读取，读取性能很差，以及不能读取汉字文本！<br>（2）一次性读取多个字节<br>本来是一个字节一个字节的读取，现在我们可以使用<code>byte</code>数组来增加读取的字节数。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 byte 数组，来增加读取的字节数，本来是一个，下面变成三个三个的读取</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 len 用来表示读取的字节长度</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面的代码性能得到了提升，但是依然不能读取汉字文本（注意：上面3个字节3个字节读取汉字文本没有出现乱码，是因为巧合，因为汉字是三个字节表示的，而我们刚好使用3个字节读取，正好把汉字读取出来了）！<br>（3）一次性读取全部字节<br>第一种方式：（只能读取相对小的文件，如果读取大的文件会有问题）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> f.length();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里大转小，存在精度问题</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[(<span class=\"type\">int</span>) size];</span><br><span class=\"line\">\t\t\tis.read(buffer);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式：（必须java9以上才能使用）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = is.readAllBytes();</span><br><span class=\"line\">\t\t\tis.read(buffer);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、FileOutputStream（文件字节输出流）\"><a href=\"#3、FileOutputStream（文件字节输出流）\" class=\"headerlink\" title=\"3、FileOutputStream（文件字节输出流）\"></a>3、FileOutputStream（文件字节输出流）</h3><p>1、作用：把内存中的数据以字节的形式写出到文件中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/5.png\" class=\"\">  \n<p>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认为覆盖内容</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果想要追加内容形式，就使用下面注释的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// OutputStream os = new FileOutputStream(&quot;demo/src.test.txt&quot;, true);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次只能写入一个字节</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"number\">97</span>); <span class=\"comment\">// 写入一个字节，为a</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"string\">&#x27;b&#x27;</span>); <span class=\"comment\">// 写入一个字节，为b</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// os.write(&#x27;我&#x27;); // 出现乱码，因为汉字“我”是用三个字节表示的，但是写入只能写入一个字节，所以把“我”的第一个字节写入，成了乱码</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"string\">&quot;\\r\\n&quot;</span>.getBytes());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次性写入多个字节</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] bytes = <span class=\"string\">&quot;wo我爱你abc123&quot;</span>;</span><br><span class=\"line\">\t\t\tos.write(bytes); <span class=\"comment\">// 直接写入“wo我爱你abc123”</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、FileReader（文件字符输入流）\"><a href=\"#4、FileReader（文件字符输入流）\" class=\"headerlink\" title=\"4、FileReader（文件字符输入流）\"></a>4、FileReader（文件字符输入流）</h3><p>可以读取汉字文本。<br>1、作用：可以把文件中的数据以字符的形式输入到内存中去（字符：“ab我爱你1”中“a”、“b”、“我”、“爱”、“你”、“1”都是一个字符）。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/6.png\" class=\"\">  \n<p>2、代码<br>（1）每次只读取一个字符  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 i 用来表示读取的字符编码，例如读取a字符，那i就是97</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((i = fr.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println((<span class=\"type\">char</span>) i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：每次只读取一个字符，性能是很差的！<br>（2）一次性读取多个字符  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 char 数组，增加读取的字符数，注意：这里不是 byte！是 char！</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每次读取 3 个字符</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = fr.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、FileWriter（文件字符输出流）\"><a href=\"#5、FileWriter（文件字符输出流）\" class=\"headerlink\" title=\"5、FileWriter（文件字符输出流）\"></a>5、FileWriter（文件字符输出流）</h3><p>1、作用：把内存中的数据以字符的形式写出到文件中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/7.png\" class=\"\">  \n<p>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 追加内容请使用下面注释的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Writer fw = new FileWriter(&quot;demo/src/test.txt&quot;, true);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Writer</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 将字符a写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"number\">97</span>); <span class=\"comment\">// 将编码为97的字符写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&#x27;我&#x27;</span>); <span class=\"comment\">// 将‘我’写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;我爱你中国abc&quot;</span>); <span class=\"comment\">// 将“我爱你中国abc”写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;我爱你中国abc&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// 将“我爱你中国abc”中的前5个字符“我爱你中国”写入到test.txt</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将buffer数组写入到test.txt</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = &#123;<span class=\"string\">&#x27;我&#x27;</span>, <span class=\"string\">&#x27;爱&#x27;</span>, <span class=\"string\">&#x27;你&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">\t\t\tfw.write(buffer);</span><br><span class=\"line\">\t\t\tfw.write(buffer, <span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 将buffer数组中下标为0的，长度为3的数组&#123;&#x27;我&#x27;, &#x27;爱&#x27;, &#x27;你&#x27;&#125;写入到test.txt</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：字符输出流写出数据后，必须刷新流，或者关闭流，写出的数据才能生效！！！！<br>原因：因为字符输出流在写入数据时，它会开辟一小块内存，然后每次写入字符时，会先写入到这块内存，等这块内存满了之后再写入文件（这里它会自动执行刷新和关闭）。  </p>\n<h3 id=\"6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\"><a href=\"#6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\" class=\"headerlink\" title=\"6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\"></a>6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）</h3><p>1、作用：提高流的读写数据的性能，字节缓冲流默认自带了8KB缓冲池。<br>2、概念解释（为什么要使用字节缓冲流？）<br>（1）没使用字节缓冲流的时候  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/8.png\" class=\"\">  \n<p>说明：我们需要将D盘的某大小为16KB的文件复制到C盘，我们使用字节输入流，并使用了1KB的byte数组来提高性能，也就是说，输入流每次从16KB读取1KB到字节数组中，然后调用系统将字节数组中的1KB读入到内存，这样需要调用系统16次，同理输出流也要调用系统16次，一共32次。<br>（2）使用了字节缓冲流  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/9.png\" class=\"\">  \n<p>说明：使用了字节缓冲流之后，我们会将字节输入&#x2F;输出流包装起来，会加一个8KB大小的缓冲区，同样我们使用1KB的byte数组来读取16KB大小的文件，首先输入流会从16KB文件，每次读取1KB，放入8KB的缓冲区，等8KB满了，再调用系统，这样只用调用2次系统，同理输出流也只调用了2次，一共4次，大大提高了系统的性能。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义字节缓冲输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(is);</span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test_copy.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义字节缓冲输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(os);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = bis.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbos.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;复制成功！&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、BufferedReader（字符缓冲输入流）\"><a href=\"#7、BufferedReader（字符缓冲输入流）\" class=\"headerlink\" title=\"7、BufferedReader（字符缓冲输入流）\"></a>7、BufferedReader（字符缓冲输入流）</h3><p>原理那些同<code>BufferedInputStream</code>字节缓冲输入流。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个字符缓冲输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 注意：这里不能使用向上转型，因为使用了向上转型，就不能使用子类本身的方法（父类中没有，子类有的）</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(fr);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 方式一</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = br.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 方式二</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 line，用来记住读取的一行数据</span></span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、BufferedWriter（字符缓冲输出流）\"><a href=\"#8、BufferedWriter（字符缓冲输出流）\" class=\"headerlink\" title=\"8、BufferedWriter（字符缓冲输出流）\"></a>8、BufferedWriter（字符缓冲输出流）</h3><p>原理同<code>BufferedOutputStream</code>字节缓冲输出流，注意：字符输出流在输出时也会自己开辟一小块内存，但是这块内存太小了。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">Writer</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(fw);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"number\">97</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&#x27;我&#x27;</span>);</span><br><span class=\"line\">\t\t\tbw.newLine(); <span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我爱你中国abc1&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、InputStreamReader（字符输入转换流）\"><a href=\"#9、InputStreamReader（字符输入转换流）\" class=\"headerlink\" title=\"9、InputStreamReader（字符输入转换流）\"></a>9、InputStreamReader（字符输入转换流）</h3><p>1、作用：解决不同编码时，字符流读取文本内容乱码的问题。<br>2、思路：先获取文件的原始字节流（<strong>注意：</strong>是字节流），再将其按真实的字符集编码转成字符输入流，这样字符输入流中的字符就不乱码了。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 得到文件原始字节流（GBK）编码格式</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将原始的字节输入流按照指定的字符集编码格式转换成字符输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">Reader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用缓冲流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(isr);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、OutputStreamWriter（字符输出转换流）\"><a href=\"#10、OutputStreamWriter（字符输出转换流）\" class=\"headerlink\" title=\"10、OutputStreamWriter（字符输出转换流）\"></a>10、OutputStreamWriter（字符输出转换流）</h3><p>1、作用：可以控制写出去的字符使用什么字符集编码。<br>2、思路：获取字节输出流（<strong>注意：</strong>是字节流），再按照指定的字符集编码将其转换成字符输出流，以后写出去的字符就会用该字符集编码。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个文件字节输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把原始的字节输出流，按照指定的字符集编码转换成字符输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">Writer</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(os, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用缓冲流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(osw);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我是中国人abc1&quot;</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我是中国人abc1&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、PrintStream、PrintWriter（打印流）\"><a href=\"#11、PrintStream、PrintWriter（打印流）\" class=\"headerlink\" title=\"11、PrintStream、PrintWriter（打印流）\"></a>11、PrintStream、PrintWriter（打印流）</h3><p>1、作用：实现输出什么就是什么，例如之前输出97到文件中，文件中显示的是a，因为a的字符编码是97，而使用打印流，输出97，就是97。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：打印流自带了缓冲池</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream 和 PrintWriter 使用是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个以 GBK 编码格式的打印流</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream ps = new PrintStream(&quot;demo/src/test.txt&quot;, &quot;GBK&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认是覆盖模式，如果想要追加模式，则使用下面的注释</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream ps = new PrintStream(new FileInputStream(&quot;demo/src/test.txt&quot;, true));</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tps.println(<span class=\"number\">97</span>); <span class=\"comment\">// 输出到test文件为97</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 输出到test文件为a</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"string\">&quot;我爱你中国abc1&quot;</span>); <span class=\"comment\">// 输出到test文件为我爱你中国abc1</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"literal\">true</span>); <span class=\"comment\">// 输出到test文件为true</span></span><br><span class=\"line\">\t\t\tps.print(<span class=\"number\">99.5</span>);<span class=\"comment\">// 输出到test文件为99.5</span></span><br><span class=\"line\">\t\t\tps.println(); <span class=\"comment\">// 输出到test文件为换行</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 它也可以像输出流一样使用write方法输出</span></span><br><span class=\"line\">\t\t\tps.write(<span class=\"number\">97</span>); <span class=\"comment\">// 输出到test文件为a，因为a的字符编码为97</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、PrintStream和PrintWriter的区别<br>（1）打印数据的功能是相同的；<br>（2）PrintStream继承自字节输出流OutputStream，因此支持写字节数据的方法；<br>（3）PrintWriter继承自字符输出流Writer，因此支持写字符数据的方法。<br>4、打印流的应用场景<br>输出语句的重定向，也就是可以把输出语句的打印位置改到某个文件中去，相当于日志的功能。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面四行是输出到控制台</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 我们想把上面四行输出到某个文件查看</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把系统默认的打印流对象设置成自己创建的打印流对象</span></span><br><span class=\"line\">\t\t\tSystem.setOut(ps);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这样上面四行就会输出到 demo/src/test.txt 文件中</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、DataOutputStream（数据输出流）\"><a href=\"#12、DataOutputStream（数据输出流）\" class=\"headerlink\" title=\"12、DataOutputStream（数据输出流）\"></a>12、DataOutputStream（数据输出流）</h3><p>1、作用：把数据和数据类型一起写出去。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tdos.writeInt(<span class=\"number\">123</span>); <span class=\"comment\">// 写一个int类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeDouble(<span class=\"number\">123.45</span>); <span class=\"comment\">// 写一个double类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeBoolean(<span class=\"literal\">true</span>); <span class=\"comment\">// 写一个boolean类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeUTF(<span class=\"string\">&quot;你好&quot;</span>); <span class=\"comment\">// 写一个字符串类型的数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、DataInputStream（数据输入流）\"><a href=\"#13、DataInputStream（数据输入流）\" class=\"headerlink\" title=\"13、DataInputStream（数据输入流）\"></a>13、DataInputStream（数据输入流）</h3><p>1、作用：用于读取数据输出流写出去的数据。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 这里读取的数据和写出去的数据的顺序要一致！</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> dis.readDouble();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> dis.readBoolean();</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t\tSystem.out.println(d);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、ObjectOutputStream（对象字节输出流）\"><a href=\"#14、ObjectOutputStream（对象字节输出流）\" class=\"headerlink\" title=\"14、ObjectOutputStream（对象字节输出流）\"></a>14、ObjectOutputStream（对象字节输出流）</h3><p>1、作用：可以把java对象进行序列化，将java对象存入到文件中去。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个java对象，注意这个java对象必须要实现 Serializable 接口！</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// zs123 是密码</span></span><br><span class=\"line\">\t\t<span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;zs123&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将 p 对象写入到test.txt文件中</span></span><br><span class=\"line\">\t\t\toos.writeObject(p);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：在序列化java对象时，如果不想对象中某个属性序列化，就在java对象实体类中找到那个属性，在那个属性之前加上关键字<code>transient</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"comment\">// 加上 transient 关键字，表示不序列化</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String pwd;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、问题<br>（1）如果要一次序列化多个对象，怎么办？<br>答：用一个ArrayList集合存储多个对象，然后直接对集合进行序列化就可以（注意：ArrayList集合已经实现了序列化接口）。  </p>\n<h3 id=\"15、ObjectInputStream（对象字节输入流）\"><a href=\"#15、ObjectInputStream（对象字节输入流）\" class=\"headerlink\" title=\"15、ObjectInputStream（对象字节输入流）\"></a>15、ObjectInputStream（对象字节输入流）</h3><p>1、作用：可以把java对象进行反序列化，将存储在文件中的java对象读入到内存中来。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person) ois.readObject();</span><br><span class=\"line\">\t\t\tSystem.out.println(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、File类\"><a href=\"#一、File类\" class=\"headerlink\" title=\"一、File类\"></a>一、File类</h1><h3 id=\"1、概念解释\"><a href=\"#1、概念解释\" class=\"headerlink\" title=\"1、概念解释\"></a>1、概念解释</h3><p><code>File</code>是<code>java.io</code>包下的类，File类创建的对象代表操作系统中的文件或文件夹，只能操作文件或者文件夹，例如：<br>（1）新建一个文件或者文件夹；<br>（2）复制粘贴文件或者文件夹；<br>（3）删除文件或者空文件夹；<br>（4）获取文件信息；<br>（5）判断文件类型等等。<br><strong>注意：</strong><br><code>File</code>类是不能对文件里面的内容进行操作的（读或写）！想要操作文件里面的内容就得使用<code>io</code>流！  </p>\n<h3 id=\"2、使用方式\"><a href=\"#2、使用方式\" class=\"headerlink\" title=\"2、使用方式\"></a>2、使用方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileTest</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个 File 对象，代表某个文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用绝对路径创建，在 D 盘下的 fileOne 文件夹下创建一个 fileOne.txt 文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// windows中默认识别是\\，linux和mac是/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用正斜杠方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/fileOne/fileOne1.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用反斜杠方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:\\\\fileOne\\\\fileOne2.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用系统变量方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileOne3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:&quot;</span> + File.separator + <span class=\"string\">&quot;fileOne&quot;</span> + File.separator + <span class=\"string\">&quot;fileOne3.txt&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\tfileOne1.exists();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件大小，如果 fileOne1 为文件夹，返回的大小是文件夹自身的大小（不包含文件夹里面所有文件的大小）</span></span><br><span class=\"line\">\t\tfileOne1.length();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果项目名称为 demo，文件所在目录为：D:/a/b/demo/src/file.txt（demo就是项目）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用绝对路径获取 file.txt 文件对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileTwo1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/a/b/demo/src/file.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用相对路径获取 file.txt 文件对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileTwo2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/file.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、在使用相对路径之前，必须先查看自己的工作目录；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、使用 System.getProperty(&quot;user.dir&quot;) 查看工作目录；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、如果工作目录不包含项目名称，使用相对路径的时候就在 src 前面加上项目名称；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4、如果工作目录包含了项目名称，就直接从 src 开始，例如上面的例子改成：src/file.txt</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前文件对象是否是文件</span></span><br><span class=\"line\">\t\tfileOne1.isFile();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前文件对象是否是文件夹</span></span><br><span class=\"line\">\t\tfileOne1.isDirectory();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件名称（包含后缀）</span></span><br><span class=\"line\">\t\tfileOne1.getName();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件最后修改时间（时间戳）</span></span><br><span class=\"line\">\t\tfileOne1.lastModified();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取创建文件对象时，使用的路径</span></span><br><span class=\"line\">\t\tfileOne1.getPath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取文件绝对路径</span></span><br><span class=\"line\">\t\tfileOne1.getAbsolutePath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个新的文件，创建成功返回 true</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileThree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/fileThree.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果文件已经存在，创建失败，返回 false</span></span><br><span class=\"line\">\t\tfileThree.createNewFile();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建文件夹，只创建一级文件夹</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/fileDirOne&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果文件夹已经存在，则不会创建，如果上级文件夹也不存在，也不会创建，返回false</span></span><br><span class=\"line\">\t\tfileDirOne.mkdir(); <span class=\"comment\">// 创建单级目录</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 test 目录不存在，会创建失败</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test/fileDirTwo&quot;</span>);</span><br><span class=\"line\">\t\tfileDirTwo.mkdir();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果想要成功，就使用，意思就是会将demo、src、test、fileDirThree都创建出来</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileDirThree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test/fileDirThree&quot;</span>);</span><br><span class=\"line\">\t\tfileDirThree.mkdirs(); <span class=\"comment\">// 创建多级目录</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除文件或者空文件夹</span></span><br><span class=\"line\">\t\tfileOne1.delete();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下所有的一级文件名</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">fileSrc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面是返回 src 目录下的所有一级文件的文件名</span></span><br><span class=\"line\">\t\tString[] fileSrcNames = fileSrc.list();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下所有的一级文件对象</span></span><br><span class=\"line\">\t\tFile[] fileSrcFiles = fileSrc.listFiles();</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 使用 listFiles 方法时的注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1、当调用 listFiles 方法的对象是文件或者路径不存在时，返回 null；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2、当调用的对象是空文件夹，返回一个长度为 0 的数组；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3、当调用的对象是非空文件夹，并且存在隐藏文件，隐藏文件也会返回；</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4、当调用的对象是非空文件夹，但是没有权限访问该文件夹时，会返回 null。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、案例\"><a href=\"#3、案例\" class=\"headerlink\" title=\"3、案例\"></a>3、案例</h3><p>1、文件搜索（使用递归）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试</span></span><br><span class=\"line\">\t\tsearchFile(<span class=\"string\">&quot;D:/&quot;</span>, <span class=\"string\">&quot;xxx.txt&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * dir：要搜索的路径</span></span><br><span class=\"line\"><span class=\"comment\">\t * fileName：要搜索的文件名</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">searchFile</span><span class=\"params\">(File dir, String fileName)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理非法路径</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dir == <span class=\"literal\">null</span> || !dir.exists() || dir.isFile()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前目录下的所有一级文件对象</span></span><br><span class=\"line\">\t\tFile[] files = dir.listFiles();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断当前目录是否是空目录</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span> &amp;&amp; files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍历所有一级文件对象</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断当前文件对象是文件还是文件夹</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 判断当前文件是否是我们要搜索的文件</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f.getName().contains(fileName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;找到了！&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 当前文件对象为文件夹，递归调用</span></span><br><span class=\"line\">\t\t\t\t\tsearchFile(f, fileName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、文件复制  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 复制照片</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 需要复制的照片地址</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;D:/resource/xxx.png&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 需要粘贴的照片地址</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C:/data/xxx.png&quot;</span>);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个字节数组，用来一次性读取多个字节</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次性读取1024个字节，相当于1KB的字节</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 len 代表读取的字节长度</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tos.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;复制完成！&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、IO流\"><a href=\"#二、IO流\" class=\"headerlink\" title=\"二、IO流\"></a>二、IO流</h1><h3 id=\"1、概念解释-1\"><a href=\"#1、概念解释-1\" class=\"headerlink\" title=\"1、概念解释\"></a>1、概念解释</h3><p>1、字符集<br>（1）标准的ASCII使用1个字节存储一个字符，字节第一位为0，例如：a、A、1……，总共可表示128个字符，对英文使用者已经够用了，但是对于中文是远远不够的。<br>例如：“abc”的字节表示：<code>0xxxxxxx(a) 0xxxxxxx(b) 0xxxxxxx(c)</code>。<br>（2）GBK（汉字编码字符集），包含了2万多个汉字等字符，一个中文字符编码成两个字节存储，并且规定汉字的第一个字节的第一位必须是1，兼容了ASCII字符集。<br>例如：“我a你”的字节表示：<code>1xxxxxxx xxxxxxxx(我) 0xxxxxxx(a) 1xxxxxxx xxxxxxxx(你)</code>。<br>（3）Unicode（统一码字符集），是国际组织制定的，可以容纳世界上所有文字、符号的字符集。  </p>\n<ul>\n<li>UTF-32，四个字节表示一个字符，例如：“a”本来只需一个字节<code>0xxxxxxx</code>，这里需要<code>00000000 00000000 00000000 0xxxxxxx</code>，占存储空间，通信效率低；  </li>\n<li>UTF-8，可变编码方案，共分四个长度区：1个字节、2个字节、3个字节、4个字节。英文字符、数字等只占1个字节，汉字字符占3个字节。<br>UTF-8编码方式：<br>1个字节：0xxxxxxx；<br>2个字节：110xxxxx 10xxxxxx；<br>3个字节：1110xxxx 10xxxxxx 10xxxxxx；<br>4个字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。<br>例如：a我m（01100001 1110xxxx 10xxxxxx 10xxxxxx 01101101）<br>a：01100001（97），我：110 001000 010001（25105），m：01101101（109）<br>它会将“我”中的前三位“110”填入“1110xxxx”中变为“11100110”，将“001000”填入“10xxxxxx”中变为“10001000”，将“010001”填入“10xxxxxx”中变为“10010001”。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a我b&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认使用 utf8 </span></span><br><span class=\"line\">\t\t<span class=\"type\">byte</span>[] bytes = s1.getBytes();</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(bytes));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出 [97, -26, -120, -111, 98]，为什么中间三个为负数，因为3个字节第一个都是1，1在二进制中为负</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 解码</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes);</span><br><span class=\"line\">\t\tSystem.out.println(s2);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出 a我b</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n2、IO流<br>用于读写数据的（可以读写文件、网络中的数据……）。  <img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/1.png\" class=\"\">  \n<code>输入流</code>：数据从数据源（文件）到程序（内存）的路径。<br><code>输出流</code>：数据从程序（内存）到数据源（文件）的路径。<br>例如：把程序（内存）当作自己大脑，把数据源（文件）当作书本，看书就是学习知识，输入到自己大脑，写作就是输出到书本上。<br>（1）IO流的分类  <img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/2.png\" class=\"\">\n（2）IO流体系<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/3.png\" class=\"\"></li>\n</ul>\n<h3 id=\"2、FileInputStream（文件字节输入流）\"><a href=\"#2、FileInputStream（文件字节输入流）\" class=\"headerlink\" title=\"2、FileInputStream（文件字节输入流）\"></a>2、FileInputStream（文件字节输入流）</h3><p>1、作用：将磁盘文件中的数据以字节的形式读入到内存中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/4.png\" class=\"\">  \n<p>2、代码<br>（1）一个字节一个字节读取  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一种方式创建文件字节输入流管道</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 在使用相对路径之前先查看工作目录，详细查看上面 File 章节</span></span><br><span class=\"line\">\t\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里运用了多态的特性，向上转型</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">isOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第二种创建方式，第一种方式的简化版</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">isTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第三种创建方式是最简化形式，推荐</span></span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 假如 test.txt 文件内容为 abc</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> is.read();</span><br><span class=\"line\">\t\tSystem.out.println(a); <span class=\"comment\">// 输出 97</span></span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) a) <span class=\"comment\">// 输出 a</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取 b</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> is <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) b) <span class=\"comment\">// 输出 b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取 c</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> is <span class=\"title function_\">read</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"type\">char</span>) c) <span class=\"comment\">// 输出 c</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续读取</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> is.read();</span><br><span class=\"line\">\t\tSystem.out.println(i) <span class=\"comment\">// 输出 -1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭流</span></span><br><span class=\"line\">\t\tis.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面代码如果test文件内容有很多个，那就得写很多行读取代码，不可取，修改简化代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这是 java7 新出的特性，将需要关闭的写入括号中，会自动执行关闭方法，就不用再 finally 处关闭了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 i 用来接收读取的返回值，如果读取的返回值不为 -1，说明还有内容</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((i = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println((<span class=\"type\">char</span>) i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面代码虽然改造完成了，但是还是存在问题，因为它是一个字节一个字节的读取，读取性能很差，以及不能读取汉字文本！<br>（2）一次性读取多个字节<br>本来是一个字节一个字节的读取，现在我们可以使用<code>byte</code>数组来增加读取的字节数。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 byte 数组，来增加读取的字节数，本来是一个，下面变成三个三个的读取</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 len 用来表示读取的字节长度</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：上面的代码性能得到了提升，但是依然不能读取汉字文本（注意：上面3个字节3个字节读取汉字文本没有出现乱码，是因为巧合，因为汉字是三个字节表示的，而我们刚好使用3个字节读取，正好把汉字读取出来了）！<br>（3）一次性读取全部字节<br>第一种方式：（只能读取相对小的文件，如果读取大的文件会有问题）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> f.length();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里大转小，存在精度问题</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[(<span class=\"type\">int</span>) size];</span><br><span class=\"line\">\t\t\tis.read(buffer);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式：（必须java9以上才能使用）  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = is.readAllBytes();</span><br><span class=\"line\">\t\t\tis.read(buffer);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、FileOutputStream（文件字节输出流）\"><a href=\"#3、FileOutputStream（文件字节输出流）\" class=\"headerlink\" title=\"3、FileOutputStream（文件字节输出流）\"></a>3、FileOutputStream（文件字节输出流）</h3><p>1、作用：把内存中的数据以字节的形式写出到文件中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/5.png\" class=\"\">  \n<p>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认为覆盖内容</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果想要追加内容形式，就使用下面注释的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// OutputStream os = new FileOutputStream(&quot;demo/src.test.txt&quot;, true);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次只能写入一个字节</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"number\">97</span>); <span class=\"comment\">// 写入一个字节，为a</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"string\">&#x27;b&#x27;</span>); <span class=\"comment\">// 写入一个字节，为b</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// os.write(&#x27;我&#x27;); // 出现乱码，因为汉字“我”是用三个字节表示的，但是写入只能写入一个字节，所以把“我”的第一个字节写入，成了乱码</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\tos.write(<span class=\"string\">&quot;\\r\\n&quot;</span>.getBytes());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 一次性写入多个字节</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] bytes = <span class=\"string\">&quot;wo我爱你abc123&quot;</span>;</span><br><span class=\"line\">\t\t\tos.write(bytes); <span class=\"comment\">// 直接写入“wo我爱你abc123”</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、FileReader（文件字符输入流）\"><a href=\"#4、FileReader（文件字符输入流）\" class=\"headerlink\" title=\"4、FileReader（文件字符输入流）\"></a>4、FileReader（文件字符输入流）</h3><p>可以读取汉字文本。<br>1、作用：可以把文件中的数据以字符的形式输入到内存中去（字符：“ab我爱你1”中“a”、“b”、“我”、“爱”、“你”、“1”都是一个字符）。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/6.png\" class=\"\">  \n<p>2、代码<br>（1）每次只读取一个字符  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 i 用来表示读取的字符编码，例如读取a字符，那i就是97</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((i = fr.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println((<span class=\"type\">char</span>) i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：每次只读取一个字符，性能是很差的！<br>（2）一次性读取多个字符  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 char 数组，增加读取的字符数，注意：这里不是 byte！是 char！</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每次读取 3 个字符</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = fr.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、FileWriter（文件字符输出流）\"><a href=\"#5、FileWriter（文件字符输出流）\" class=\"headerlink\" title=\"5、FileWriter（文件字符输出流）\"></a>5、FileWriter（文件字符输出流）</h3><p>1、作用：把内存中的数据以字符的形式写出到文件中去。  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/7.png\" class=\"\">  \n<p>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 追加内容请使用下面注释的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Writer fw = new FileWriter(&quot;demo/src/test.txt&quot;, true);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">Writer</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 将字符a写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"number\">97</span>); <span class=\"comment\">// 将编码为97的字符写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&#x27;我&#x27;</span>); <span class=\"comment\">// 将‘我’写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;我爱你中国abc&quot;</span>); <span class=\"comment\">// 将“我爱你中国abc”写入到test.txt</span></span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;我爱你中国abc&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// 将“我爱你中国abc”中的前5个字符“我爱你中国”写入到test.txt</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfw.write(<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将buffer数组写入到test.txt</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = &#123;<span class=\"string\">&#x27;我&#x27;</span>, <span class=\"string\">&#x27;爱&#x27;</span>, <span class=\"string\">&#x27;你&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">\t\t\tfw.write(buffer);</span><br><span class=\"line\">\t\t\tfw.write(buffer, <span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 将buffer数组中下标为0的，长度为3的数组&#123;&#x27;我&#x27;, &#x27;爱&#x27;, &#x27;你&#x27;&#125;写入到test.txt</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：字符输出流写出数据后，必须刷新流，或者关闭流，写出的数据才能生效！！！！<br>原因：因为字符输出流在写入数据时，它会开辟一小块内存，然后每次写入字符时，会先写入到这块内存，等这块内存满了之后再写入文件（这里它会自动执行刷新和关闭）。  </p>\n<h3 id=\"6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\"><a href=\"#6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\" class=\"headerlink\" title=\"6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）\"></a>6、BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）</h3><p>1、作用：提高流的读写数据的性能，字节缓冲流默认自带了8KB缓冲池。<br>2、概念解释（为什么要使用字节缓冲流？）<br>（1）没使用字节缓冲流的时候  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/8.png\" class=\"\">  \n<p>说明：我们需要将D盘的某大小为16KB的文件复制到C盘，我们使用字节输入流，并使用了1KB的byte数组来提高性能，也就是说，输入流每次从16KB读取1KB到字节数组中，然后调用系统将字节数组中的1KB读入到内存，这样需要调用系统16次，同理输出流也要调用系统16次，一共32次。<br>（2）使用了字节缓冲流  </p>\n<img src=\"/2024/06/02/Java-IO%E3%80%81%E6%96%87%E4%BB%B6%E6%B5%81/9.png\" class=\"\">  \n<p>说明：使用了字节缓冲流之后，我们会将字节输入&#x2F;输出流包装起来，会加一个8KB大小的缓冲区，同样我们使用1KB的byte数组来读取16KB大小的文件，首先输入流会从16KB文件，每次读取1KB，放入8KB的缓冲区，等8KB满了，再调用系统，这样只用调用2次系统，同理输出流也只调用了2次，一共4次，大大提高了系统的性能。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义字节缓冲输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(is);</span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test_copy.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义字节缓冲输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(os);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = bis.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbos.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;复制成功！&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、BufferedReader（字符缓冲输入流）\"><a href=\"#7、BufferedReader（字符缓冲输入流）\" class=\"headerlink\" title=\"7、BufferedReader（字符缓冲输入流）\"></a>7、BufferedReader（字符缓冲输入流）</h3><p>原理那些同<code>BufferedInputStream</code>字节缓冲输入流。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个字符缓冲输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 注意：这里不能使用向上转型，因为使用了向上转型，就不能使用子类本身的方法（父类中没有，子类有的）</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(fr);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 方式一</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((len = br.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 方式二</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 定义 line，用来记住读取的一行数据</span></span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、BufferedWriter（字符缓冲输出流）\"><a href=\"#8、BufferedWriter（字符缓冲输出流）\" class=\"headerlink\" title=\"8、BufferedWriter（字符缓冲输出流）\"></a>8、BufferedWriter（字符缓冲输出流）</h3><p>原理同<code>BufferedOutputStream</code>字节缓冲输出流，注意：字符输出流在输出时也会自己开辟一小块内存，但是这块内存太小了。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"type\">Writer</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(fw);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"number\">97</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&#x27;我&#x27;</span>);</span><br><span class=\"line\">\t\t\tbw.newLine(); <span class=\"comment\">// 换行</span></span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我爱你中国abc1&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、InputStreamReader（字符输入转换流）\"><a href=\"#9、InputStreamReader（字符输入转换流）\" class=\"headerlink\" title=\"9、InputStreamReader（字符输入转换流）\"></a>9、InputStreamReader（字符输入转换流）</h3><p>1、作用：解决不同编码时，字符流读取文本内容乱码的问题。<br>2、思路：先获取文件的原始字节流（<strong>注意：</strong>是字节流），再将其按真实的字符集编码转成字符输入流，这样字符输入流中的字符就不乱码了。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 得到文件原始字节流（GBK）编码格式</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将原始的字节输入流按照指定的字符集编码格式转换成字符输入流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">Reader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(is, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用缓冲流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(isr);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、OutputStreamWriter（字符输出转换流）\"><a href=\"#10、OutputStreamWriter（字符输出转换流）\" class=\"headerlink\" title=\"10、OutputStreamWriter（字符输出转换流）\"></a>10、OutputStreamWriter（字符输出转换流）</h3><p>1、作用：可以控制写出去的字符使用什么字符集编码。<br>2、思路：获取字节输出流（<strong>注意：</strong>是字节流），再按照指定的字符集编码将其转换成字符输出流，以后写出去的字符就会用该字符集编码。<br>3、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个文件字节输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把原始的字节输出流，按照指定的字符集编码转换成字符输出流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">Writer</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(os, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用缓冲流</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(osw);</span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我是中国人abc1&quot;</span>);</span><br><span class=\"line\">\t\t\tbw.write(<span class=\"string\">&quot;我是中国人abc1&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、PrintStream、PrintWriter（打印流）\"><a href=\"#11、PrintStream、PrintWriter（打印流）\" class=\"headerlink\" title=\"11、PrintStream、PrintWriter（打印流）\"></a>11、PrintStream、PrintWriter（打印流）</h3><p>1、作用：实现输出什么就是什么，例如之前输出97到文件中，文件中显示的是a，因为a的字符编码是97，而使用打印流，输出97，就是97。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：打印流自带了缓冲池</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream 和 PrintWriter 使用是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个以 GBK 编码格式的打印流</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream ps = new PrintStream(&quot;demo/src/test.txt&quot;, &quot;GBK&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 默认是覆盖模式，如果想要追加模式，则使用下面的注释</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// PrintStream ps = new PrintStream(new FileInputStream(&quot;demo/src/test.txt&quot;, true));</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tps.println(<span class=\"number\">97</span>); <span class=\"comment\">// 输出到test文件为97</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 输出到test文件为a</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"string\">&quot;我爱你中国abc1&quot;</span>); <span class=\"comment\">// 输出到test文件为我爱你中国abc1</span></span><br><span class=\"line\">\t\t\tps.println(<span class=\"literal\">true</span>); <span class=\"comment\">// 输出到test文件为true</span></span><br><span class=\"line\">\t\t\tps.print(<span class=\"number\">99.5</span>);<span class=\"comment\">// 输出到test文件为99.5</span></span><br><span class=\"line\">\t\t\tps.println(); <span class=\"comment\">// 输出到test文件为换行</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 它也可以像输出流一样使用write方法输出</span></span><br><span class=\"line\">\t\t\tps.write(<span class=\"number\">97</span>); <span class=\"comment\">// 输出到test文件为a，因为a的字符编码为97</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、PrintStream和PrintWriter的区别<br>（1）打印数据的功能是相同的；<br>（2）PrintStream继承自字节输出流OutputStream，因此支持写字节数据的方法；<br>（3）PrintWriter继承自字符输出流Writer，因此支持写字符数据的方法。<br>4、打印流的应用场景<br>输出语句的重定向，也就是可以把输出语句的打印位置改到某个文件中去，相当于日志的功能。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面四行是输出到控制台</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 我们想把上面四行输出到某个文件查看</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把系统默认的打印流对象设置成自己创建的打印流对象</span></span><br><span class=\"line\">\t\t\tSystem.setOut(ps);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;aaaaaaaa&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这样上面四行就会输出到 demo/src/test.txt 文件中</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、DataOutputStream（数据输出流）\"><a href=\"#12、DataOutputStream（数据输出流）\" class=\"headerlink\" title=\"12、DataOutputStream（数据输出流）\"></a>12、DataOutputStream（数据输出流）</h3><p>1、作用：把数据和数据类型一起写出去。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tdos.writeInt(<span class=\"number\">123</span>); <span class=\"comment\">// 写一个int类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeDouble(<span class=\"number\">123.45</span>); <span class=\"comment\">// 写一个double类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeBoolean(<span class=\"literal\">true</span>); <span class=\"comment\">// 写一个boolean类型的数据</span></span><br><span class=\"line\">\t\t\tdos.writeUTF(<span class=\"string\">&quot;你好&quot;</span>); <span class=\"comment\">// 写一个字符串类型的数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、DataInputStream（数据输入流）\"><a href=\"#13、DataInputStream（数据输入流）\" class=\"headerlink\" title=\"13、DataInputStream（数据输入流）\"></a>13、DataInputStream（数据输入流）</h3><p>1、作用：用于读取数据输出流写出去的数据。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 这里读取的数据和写出去的数据的顺序要一致！</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> dis.readInt();</span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> dis.readDouble();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> dis.readBoolean();</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t\tSystem.out.println(d);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、ObjectOutputStream（对象字节输出流）\"><a href=\"#14、ObjectOutputStream（对象字节输出流）\" class=\"headerlink\" title=\"14、ObjectOutputStream（对象字节输出流）\"></a>14、ObjectOutputStream（对象字节输出流）</h3><p>1、作用：可以把java对象进行序列化，将java对象存入到文件中去。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个java对象，注意这个java对象必须要实现 Serializable 接口！</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// zs123 是密码</span></span><br><span class=\"line\">\t\t<span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;zs123&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将 p 对象写入到test.txt文件中</span></span><br><span class=\"line\">\t\t\toos.writeObject(p);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 注意：查看test.txt文件会看到特殊符号，那些不是乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * 而且这个文件不是用来查看内容的，而是用来存数据的</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：在序列化java对象时，如果不想对象中某个属性序列化，就在java对象实体类中找到那个属性，在那个属性之前加上关键字<code>transient</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"comment\">// 加上 transient 关键字，表示不序列化</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String pwd;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、问题<br>（1）如果要一次序列化多个对象，怎么办？<br>答：用一个ArrayList集合存储多个对象，然后直接对集合进行序列化就可以（注意：ArrayList集合已经实现了序列化接口）。  </p>\n<h3 id=\"15、ObjectInputStream（对象字节输入流）\"><a href=\"#15、ObjectInputStream（对象字节输入流）\" class=\"headerlink\" title=\"15、ObjectInputStream（对象字节输入流）\"></a>15、ObjectInputStream（对象字节输入流）</h3><p>1、作用：可以把java对象进行反序列化，将存储在文件中的java对象读入到内存中来。<br>2、代码  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"string\">&quot;demo/src/test.txt&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person) ois.readObject();</span><br><span class=\"line\">\t\t\tSystem.out.println(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}