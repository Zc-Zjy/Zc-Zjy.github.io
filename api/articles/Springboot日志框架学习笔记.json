{"title":"Springboot日志框架学习笔记","slug":"Springboot日志框架学习笔记","date":"2024-11-22T06:42:42.000Z","updated":"2024-11-22T08:06:34.163Z","comments":true,"path":"api/articles/Springboot日志框架学习笔记.json","realPath":null,"excerpt":null,"covers":["/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png","/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png"],"cover":null,"content":"<hr>\n<p>一、日志框架分类<br>1、日志门面（相当于接口）<br><code>JCL</code>（Jakarta Commons Logging）、<code>SLF4J</code>、<code>jboss-logging</code>。  </p>\n<p>2、日志实现（相当于实现类）<br><code>Log4j</code>、<code>Log4j2</code>、<code>Logback</code>、<code>JUL</code>（java.util.logging）。  </p>\n<p>二、日志门面和日志实现的关系<br>1、日志门面是日志实现的抽象，日志实现是日志门面的具体实现。  </p>\n<p>2、日志门面和日志实现可以互相独立，可以单独使用，也可以组合使用。  </p>\n<p>3、日志门面和日志实现可以互相替换，只要替换的日志实现和日志门面兼容即可。  </p>\n<p>三、简单介绍说明<br>1、一般都是选择一个日志门面、一个日志实现来使用。  </p>\n<p>2、<code>SLF4J</code>、<code>Log4j</code>、<code>Logback</code>都是一个人写的，所以<code>Logback</code>是<code>SLF4J</code>的实现类；<code>JCL</code>是Apache的Jakarta小组开发的；<code>Log4j2</code>是Apache公司借了<code>Log4j</code>之名开发的，是<code>Log4j</code>的升级版。  </p>\n<p>3、一般选择的是日志门面为：<code>SLF4J</code>，日志实现为：<code>Logback</code>。  </p>\n<p>4、Springboot默认的日志框架也是：<code>SLF4J</code>+<code>Logback</code>，Spring框架默认用的是：<code>JCL</code>。  </p>\n<p>5、日志的级别：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 由低到高</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 日志输出，只会输出它后面的级别，例如：配置了info，那只会输出info、warn、error，不会输出trace、debug</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;debug&quot;</span>);</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">\t\tlogger.warn(<span class=\"string\">&quot;warn&quot;</span>);</span><br><span class=\"line\">\t\tlogger.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、默认配置  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png\" class=\"\">  \n\n<p>7、xml配置文件替换默认配置  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png\" class=\"\">  \n<p>解释：如果使用的是<code>logback</code>，那么在<code>src/main/resources</code>目录下创建<code>logback.xml</code>文件，如果使用的是<code>log4j2</code>，那么在<code>src/main/resources</code>目录下创建<code>log4j2.xml</code>文件。<br><code>logback.xml</code>和<code>logback-spring.xml</code>的区别：<br>（1）<code>logback.xml</code>：直接被<code>Logback</code>日志框架识别，加载；<br>（2）<code>logback-spring.xml</code>：被<code>Springboot</code>加载，<code>Springboot</code>会根据<code>logback</code>的配置，再进行一些配置，比如根据开发环境生效，如下。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开发环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 测试环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prod&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 生产环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>四、怎么使用<code>SLF4J</code>？<br>使用的时候，我们不应该直接调用日志的实现类，应该调用的是日志的接口。<br>导入<code>slf4j</code>和<code>logback</code>的依赖。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">        logger.debug(<span class=\"string\">&quot;debug&quot;</span>);</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>五、图解<br>1、项目只导入了<code>slf4j</code>依赖  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n\n<p>2、项目导入了<code>slf4j</code>和<code>logback</code>依赖  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n\n<p>3、如果项目要使用<code>log4j</code>日志功能，怎么办？<br>因为Springboot项目中使用的日志门面是<code>slf4j</code>，如果要使用<code>log4j</code>，需要导入<code>slf4j</code>的<code>log4j</code>适配依赖。  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n\n<p>4、同理要使用其他日志实现，也需要导入<code>slf4j</code>的适配依赖。  </p>\n<p>六、场景<br>有这么个场景：项目中使用的是<code>slf4j</code>日志功能，而其他框架使用的是其他的日志功能，太杂乱了，想统一都使用<code>slf4j</code>，怎么办呢？<br>可以看下面的图  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>1、将系统中其他日志框架先排除出去（排除出去之后项目是启动不了的，会报错，因为缺少了被排除的依赖）；<br>2、用中间包来替换原有的被排除出去的日志框架；<br>3、在引入<code>slf4j</code>的实现依赖。<br>可以通过idea中查看依赖树：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n<p>查看依赖数的方法，在pom文件空白处右键：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png\" class=\"\">  \n\n<p>如果要引入其他日志框架的依赖，我们一定要把Springboot中该日志框架移除掉，因为从上面依赖树中可以到Springboot中已经存在了该日志框架了，如果再引入就会冲突。<br>我们可以去查看Spring的依赖，它也是这么做的，Spring默认日志使用的是<code>JCL</code>，而在它依赖中把<code>JCL</code>移除了：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png\" class=\"\">  \n\n\n<p>七、切换日志框架<br>1、例子一：将<code>logback</code>切换为<code>log4j</code>。<br>（1）将<code>logback</code>相关依赖排除，如下：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png\" class=\"\">  \n<p>（2）将Spingboot原有的<code>log4j</code>依赖也排除，方法同上：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n<p>（3）引入<code>log4j</code>和<code>slf4j</code>适配依赖<code>slf4j-log4j12</code>（这个依赖中已经包含了<code>log4j</code>的依赖）即可。  </p>\n<p>2、例子二：将<code>logback</code>切换为<code>log4j2</code>。<br>（1）直接将<code>spring-boot-starter-logging</code>依赖排除掉；<br>（2）引入<code>spring-boot-starter-log4j2</code>依赖即可。  </p>\n","more":"<hr>\n<p>一、日志框架分类<br>1、日志门面（相当于接口）<br><code>JCL</code>（Jakarta Commons Logging）、<code>SLF4J</code>、<code>jboss-logging</code>。  </p>\n<p>2、日志实现（相当于实现类）<br><code>Log4j</code>、<code>Log4j2</code>、<code>Logback</code>、<code>JUL</code>（java.util.logging）。  </p>\n<p>二、日志门面和日志实现的关系<br>1、日志门面是日志实现的抽象，日志实现是日志门面的具体实现。  </p>\n<p>2、日志门面和日志实现可以互相独立，可以单独使用，也可以组合使用。  </p>\n<p>3、日志门面和日志实现可以互相替换，只要替换的日志实现和日志门面兼容即可。  </p>\n<p>三、简单介绍说明<br>1、一般都是选择一个日志门面、一个日志实现来使用。  </p>\n<p>2、<code>SLF4J</code>、<code>Log4j</code>、<code>Logback</code>都是一个人写的，所以<code>Logback</code>是<code>SLF4J</code>的实现类；<code>JCL</code>是Apache的Jakarta小组开发的；<code>Log4j2</code>是Apache公司借了<code>Log4j</code>之名开发的，是<code>Log4j</code>的升级版。  </p>\n<p>3、一般选择的是日志门面为：<code>SLF4J</code>，日志实现为：<code>Logback</code>。  </p>\n<p>4、Springboot默认的日志框架也是：<code>SLF4J</code>+<code>Logback</code>，Spring框架默认用的是：<code>JCL</code>。  </p>\n<p>5、日志的级别：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 由低到高</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 日志输出，只会输出它后面的级别，例如：配置了info，那只会输出info、warn、error，不会输出trace、debug</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;debug&quot;</span>);</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">\t\tlogger.warn(<span class=\"string\">&quot;warn&quot;</span>);</span><br><span class=\"line\">\t\tlogger.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、默认配置  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png\" class=\"\">  \n\n<p>7、xml配置文件替换默认配置  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.png\" class=\"\">  \n<p>解释：如果使用的是<code>logback</code>，那么在<code>src/main/resources</code>目录下创建<code>logback.xml</code>文件，如果使用的是<code>log4j2</code>，那么在<code>src/main/resources</code>目录下创建<code>log4j2.xml</code>文件。<br><code>logback.xml</code>和<code>logback-spring.xml</code>的区别：<br>（1）<code>logback.xml</code>：直接被<code>Logback</code>日志框架识别，加载；<br>（2）<code>logback-spring.xml</code>：被<code>Springboot</code>加载，<code>Springboot</code>会根据<code>logback</code>的配置，再进行一些配置，比如根据开发环境生效，如下。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开发环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 测试环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prod&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 生产环境 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>四、怎么使用<code>SLF4J</code>？<br>使用的时候，我们不应该直接调用日志的实现类，应该调用的是日志的接口。<br>导入<code>slf4j</code>和<code>logback</code>的依赖。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">        logger.debug(<span class=\"string\">&quot;debug&quot;</span>);</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>五、图解<br>1、项目只导入了<code>slf4j</code>依赖  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n\n<p>2、项目导入了<code>slf4j</code>和<code>logback</code>依赖  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n\n<p>3、如果项目要使用<code>log4j</code>日志功能，怎么办？<br>因为Springboot项目中使用的日志门面是<code>slf4j</code>，如果要使用<code>log4j</code>，需要导入<code>slf4j</code>的<code>log4j</code>适配依赖。  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png\" class=\"\">  \n\n<p>4、同理要使用其他日志实现，也需要导入<code>slf4j</code>的适配依赖。  </p>\n<p>六、场景<br>有这么个场景：项目中使用的是<code>slf4j</code>日志功能，而其他框架使用的是其他的日志功能，太杂乱了，想统一都使用<code>slf4j</code>，怎么办呢？<br>可以看下面的图  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png\" class=\"\">  \n<p>1、将系统中其他日志框架先排除出去（排除出去之后项目是启动不了的，会报错，因为缺少了被排除的依赖）；<br>2、用中间包来替换原有的被排除出去的日志框架；<br>3、在引入<code>slf4j</code>的实现依赖。<br>可以通过idea中查看依赖树：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png\" class=\"\">  \n<p>查看依赖数的方法，在pom文件空白处右键：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png\" class=\"\">  \n\n<p>如果要引入其他日志框架的依赖，我们一定要把Springboot中该日志框架移除掉，因为从上面依赖树中可以到Springboot中已经存在了该日志框架了，如果再引入就会冲突。<br>我们可以去查看Spring的依赖，它也是这么做的，Spring默认日志使用的是<code>JCL</code>，而在它依赖中把<code>JCL</code>移除了：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png\" class=\"\">  \n\n\n<p>七、切换日志框架<br>1、例子一：将<code>logback</code>切换为<code>log4j</code>。<br>（1）将<code>logback</code>相关依赖排除，如下：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.png\" class=\"\">  \n<p>（2）将Spingboot原有的<code>log4j</code>依赖也排除，方法同上：  </p>\n<img src=\"/2024/11/22/Springboot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.png\" class=\"\">  \n<p>（3）引入<code>log4j</code>和<code>slf4j</code>适配依赖<code>slf4j-log4j12</code>（这个依赖中已经包含了<code>log4j</code>的依赖）即可。  </p>\n<p>2、例子二：将<code>logback</code>切换为<code>log4j2</code>。<br>（1）直接将<code>spring-boot-starter-logging</code>依赖排除掉；<br>（2）引入<code>spring-boot-starter-log4j2</code>依赖即可。  </p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Spring","path":"api/tags/Spring.json"}]}