{"title":"Java Thinking学习笔记","slug":"Java-Thinking学习笔记","date":"2024-07-24T09:07:04.000Z","updated":"2025-05-20T03:38:03.208Z","comments":true,"path":"api/articles/Java-Thinking学习笔记.json","realPath":null,"excerpt":null,"covers":["/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png","/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png"],"cover":null,"content":"<hr>\n<h3 id=\"1、重载区分\"><a href=\"#1、重载区分\" class=\"headerlink\" title=\"1、重载区分\"></a>1、重载区分</h3><p><code>Java重载</code>不能以返回值区分（不能以方法类型），只能以方法参数的类型、个数和顺序区分（顺序不推荐）。  </p>\n<h3 id=\"2、static方法调用规则\"><a href=\"#2、static方法调用规则\" class=\"headerlink\" title=\"2、static方法调用规则\"></a>2、static方法调用规则</h3><p>（1）在<code>static方法</code>内不能调用非静态方法，但是非静态方法可以调用<code>static方法</code>。<br>（2）<code>static</code>关键字不能应用于局部变量。  </p>\n<h3 id=\"3、finalize方法\"><a href=\"#3、finalize方法\" class=\"headerlink\" title=\"3、finalize方法\"></a>3、finalize方法</h3><p><code>finalize方法</code>：当垃圾回收器（gc）执行时会触发该方法（不推荐使用该方法，java9已废弃）。  </p>\n<h3 id=\"4、volatile关键字作用\"><a href=\"#4、volatile关键字作用\" class=\"headerlink\" title=\"4、volatile关键字作用\"></a>4、volatile关键字作用</h3><p>（1）保证可见性（两个线程A、B互相可见）；<br>（2）不保证原子性；<br>（3）防止指令重排。  </p>\n<h3 id=\"5、数组\"><a href=\"#5、数组\" class=\"headerlink\" title=\"5、数组\"></a>5、数组</h3><p>（1）数组的声明<br>正确的方式：<code>int[] a</code>或者<code>int a[]</code><br>错误的方式：<code>int[3] a</code>或者<code>int a[6]</code><br>原因：针对声明数组的时候，编译器不允许指定数组的大小。<br>（2）数组的初始化  </p>\n<ol>\n<li><code>int[] a = &#123;1,2,3,4&#125;;</code>  </li>\n<li><code>int[] a = new int[3];</code>  </li>\n<li><code>int[] a = new[]&#123;1,2,3,4&#125;;</code>（1. 是3. 的简写）</li>\n</ol>\n<h3 id=\"6、try-catch执行顺序\"><a href=\"#6、try-catch执行顺序\" class=\"headerlink\" title=\"6、try..catch执行顺序\"></a>6、try..catch执行顺序</h3><p>（1）<code>try..catch</code>捕获到异常，<code>try</code>中后面的代码不会继续执行，但是<code>catch</code>括号外面的会执行。<br>（2）如果<code>try</code>中有<code>return</code>，先执行<code>try</code>中<code>return</code>之前的逻辑，再执行<code>finally</code>，最后执行<code>return</code>。<br>（3）<code>finally</code>中一般是不推荐有<code>return</code>语句的！！！如果有，会覆盖<code>try</code>中的<code>return</code>。<br>1、放for循环里面和外面区别<br>（1）放for循环外面，一旦出现异常，就会终止循环；<br>（2）放for循环里面，一旦出现异常，就会终止当前循环，继续执行下一个循环。  </p>\n<h3 id=\"7、权限修饰符\"><a href=\"#7、权限修饰符\" class=\"headerlink\" title=\"7、权限修饰符\"></a>7、权限修饰符</h3><p><code>public</code> &gt; <code>protected</code> &gt; <code>default</code> &gt; <code>private</code>。<br>（1）<code>public</code>：公共权限，可以被任何类访问，无论它们是否在同一包中；<br>（2）<code>protected</code>：受保护权限，可以被同一个包中的类以及该类的子类访问；<br>（3）<code>default</code>：默认权限，只有同一个包中的类可以访问。  </p>\n<h3 id=\"8、基本类型判断\"><a href=\"#8、基本类型判断\" class=\"headerlink\" title=\"8、基本类型判断\"></a>8、基本类型判断</h3><p><code>==、!=</code>；引用类型判断：<code>equals</code>（默认比较引用，不是比较值，所以自定义类时必须重写equals）。  </p>\n<h3 id=\"9、Java标签用法\"><a href=\"#9、Java标签用法\" class=\"headerlink\" title=\"9、Java标签用法\"></a>9、Java标签用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlabelOne:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (;<span class=\"literal\">true</span>;) &#123;</span><br><span class=\"line\">\t\t\t\tlabelTwo:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (;i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;i = &quot;</span> + i);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;break&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\ti ++;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue labelOne&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\ti ++;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span> labelOne;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;break labelOne&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span> labelOne;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;k &lt; <span class=\"number\">5</span>;k ++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (k == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue labelTwo&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">continue</span> labelTwo;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">continue</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">break</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelOne</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">break</span> labelOne</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、java基本数据类型\"><a href=\"#10、java基本数据类型\" class=\"headerlink\" title=\"10、java基本数据类型\"></a>10、java基本数据类型</h3><p>（1）<code>boolean</code>：1b（bit），1位，占用4字节（<code>Boolean</code>）；<br>（2）<code>char</code>：2B（Bytes），16b（bits），16位（<code>Character</code>）；<br>（3）<code>byte</code>：1B（Byte），8b（bits），8位，-128〜127（<code>Byte</code>）；<br>（4）<code>short</code>：2B（Bytes），16b（bits）16位，-12^15〜2^15-1（<code>Short</code>）；<br>（5）<code>int</code>：4B（Bytes），32b（bits），32位，-2^31〜2^31-1（<code>Integer</code>）；<br>（6）<code>long</code>：8B（Bytes），64b（bits）64位，-2^63〜2^63-1（<code>Long</code>）；<br>（7）<code>float</code>：4B（Bytes），32b（bits），32位，-3.4E+38〜3.4E+38（<code>Float</code>）；<br>（8）<code>double</code>：8B（Bytes），64b（bits），64位，-1.7E+308〜1.7E+308（<code>Double</code>）。<br>类中的字段是基本类型，没有初始化，java也会默认加上默认值（针对类中，只有在类中的字段才会自动加上默认值，方法中的变量不会）。<br>（1）<code>boolean</code>：false；<br>（2）<code>char</code>：’\\u0000’（null）；<br>（3）<code>byte</code>：(byte)0；<br>（4）<code>short</code>：(short)0；<br>（5）<code>int</code>：0；<br>（6）<code>long</code>：0L；<br>（7）<code>float</code>：0.0f；<br>（8）<code>double</code>：0.0d。  </p>\n<h3 id=\"11、堆和栈\"><a href=\"#11、堆和栈\" class=\"headerlink\" title=\"11、堆和栈\"></a>11、堆和栈</h3><p>堆：存放java对象（唯一的）；栈：不唯一，是根据线程定，比如main线程的栈。  </p>\n<h3 id=\"12、java的回收机制\"><a href=\"#12、java的回收机制\" class=\"headerlink\" title=\"12、java的回收机制\"></a>12、java的回收机制</h3><p>java有一个垃圾回收器，用来监视new创建的对象，如果某个对象的引用没用了，便会释放该对象，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// s在作用域外是无法使用的，所以引用s没用了，释放</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、高精度数字\"><a href=\"#13、高精度数字\" class=\"headerlink\" title=\"13、高精度数字\"></a>13、高精度数字</h3><p>（1）<code>BigInteger</code>：整数；<br>（2）<code>BigDecimal</code>：定点数。  </p>\n<h3 id=\"14、基本类型和引用类型给值问题\"><a href=\"#14、基本类型和引用类型给值问题\" class=\"headerlink\" title=\"14、基本类型和引用类型给值问题\"></a>14、基本类型和引用类型给值问题</h3><p>基本类型给值是深给值，引用类型是浅给值。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、static静态初始化\"><a href=\"#15、static静态初始化\" class=\"headerlink\" title=\"15、static静态初始化\"></a>15、static静态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\tA() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f1</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">\tB() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">\t\ta2.f1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f2</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f2&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 4，这里的顺序无关紧要</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">A</span> <span class=\"variable\">a3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 7</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 5</span></span><br><span class=\"line\">\tC () &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">\t\ta4.f1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f3</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Test1&quot;</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">C</span>(); <span class=\"comment\">// 9</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Test2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">C</span>();</span><br><span class=\"line\">\t\tb.f2();</span><br><span class=\"line\">\t\tc.f3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">f1</span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">Test1</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">Test2</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">f2</span><br><span class=\"line\">f3</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）Test类中有3个static，执行main方法时，先初始化static<code>1</code>和<code>2</code>；<br>（2）执行<code>1</code>，生成B对象，B类中存在<code>3</code>、<code>4</code>两个static，先执行<code>3</code>；<br>（3）生成A对象，执行A的构造方法，输出A；<br>（4）执行<code>4</code>，生成A对象，输出A；<br>（5）执行B的构造方法，输出B，然后输出f1；<br>（6）同理<code>（2）</code>，先执行<code>5</code>、<code>6</code>、<code>7</code>，输出A，A，A，然后执行C的构造方法，输出C，f1；<br>（7）然后开始执行main方法，输出Test1；<br>（8）执行<code>9</code>，C类中，static只执行一次，所以<code>5</code>、<code>6</code>不执行，只执行<code>7</code>，输出A；<br>（9）然后执行C的构造方法，输出C，f1；<br>（10）后面同理，输出Test2，A，C，f1，f2，f3。  </p>\n<h3 id=\"16、继承和组合\"><a href=\"#16、继承和组合\" class=\"headerlink\" title=\"16、继承和组合\"></a>16、继承和组合</h3><p>不止可以使用继承，还可以使用组合，<code>继承</code>是去继承某个类，然后拥有这个类的方法、属性；而<code>组合</code>是在一个新类中声明某个类的对象，并创建这个类的对象，这样就可以使用这个类的方法、属性。  </p>\n<h3 id=\"17、代理和组合很像：\"><a href=\"#17、代理和组合很像：\" class=\"headerlink\" title=\"17、代理和组合很像：\"></a>17、代理和组合很像：</h3><p>（1）组合  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LunTai</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">run</span> <span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">LunTai</span> <span class=\"variable\">lunTai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LunTai</span>(); <span class=\"comment\">// 组合</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>().lunTai.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）代理  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FandDong</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">zuFang</span> <span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZhongJie</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">FandDong</span> <span class=\"variable\">fd</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FangDong</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zuFang</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tfd.zuFang(); <span class=\"comment\">// 代理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、Java向上转型\"><a href=\"#18、Java向上转型\" class=\"headerlink\" title=\"18、Java向上转型\"></a>18、Java向上转型</h3><p>（1）调用的属性是父类的属性；（父类和子类都有field属性，向上转型之后得到的对象，调用field属性是父类的）<br>（2）调用的方法，只能调用父类有的方法，如果子类重写了该方法，调用的就是子类的；<br>（3）不能调用子类独有的方法；<br>（4）如果父类的a方法是private，子类重写了a方法，这个a方法属于子类独有的方法，因为父类的a方法是private，相当于加了final关键字，是不能被重写的；<br>（5）向上转型静态方法执行的是父类的，普通方法执行的是子类的。  </p>\n<h3 id=\"19、抽象类和接口实例化问题\"><a href=\"#19、抽象类和接口实例化问题\" class=\"headerlink\" title=\"19、抽象类和接口实例化问题\"></a>19、抽象类和接口实例化问题</h3><p>抽象类和接口一样，不能实例化；<br>（1）如果某个类继承了抽象类，要想实例化必须实现抽象类中所有抽象方法，否则这个类也是抽象类；<br>（2）接口可以有static final常量，但是不能是“空 final”，也可以被非常量表达式初始化。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Random</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>(<span class=\"number\">47</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">RANDOM_INT</span> <span class=\"operator\">=</span> a.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"variable\">RANDOM_LONG</span> <span class=\"operator\">=</span> a.nextLong() * <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）当一个类继承抽象类并实现多个接口，顺序是先继承，再实现。  </p>\n<h3 id=\"20、怎么调用抽象类中的抽象方法\"><a href=\"#20、怎么调用抽象类中的抽象方法\" class=\"headerlink\" title=\"20、怎么调用抽象类中的抽象方法\"></a>20、怎么调用抽象类中的抽象方法</h3><p>（1）创建一个interface接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个抽象类去实现这个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestAbstractImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实现了接口方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.testAbstractMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAbstractMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）创建一个普通类继承这个抽象类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TestAbstractImpl</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAbstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;继承了抽象类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）测试  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestImpl</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestImpl</span>();</span><br><span class=\"line\">        test.testAbstractMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------------------&quot;</span>);</span><br><span class=\"line\">        test.testMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">继承了抽象类</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">实现了接口方法</span><br><span class=\"line\">继承了抽象类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、迭代器设计模式\"><a href=\"#21、迭代器设计模式\" class=\"headerlink\" title=\"21、迭代器设计模式\"></a>21、迭代器设计模式</h3><p>（1）创建一个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Selector</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">end</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\tObject <span class=\"title function_\">current</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个类实现这个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sequence</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Sequence</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">\t\titems = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[size];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object x)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(next &lt; items.length) &#123;</span><br><span class=\"line\">\t\t\titems[next++] = x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SequenceSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Selector</span> &#123; <span class=\"comment\">// 内部类，相当于外部类的属性</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">end</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i == items.length;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">current</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> items[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i &lt; items.length) &#123;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Selector <span class=\"title function_\">selector</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SequenceSelector</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Sequence</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sequence</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tsequence.add(Integer.toString(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> sequence.selector();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!selector.end()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(selector.current());</span><br><span class=\"line\">\t\t\tselector.next();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：Sequence类只是一个固定大小的Object的数组，以类的形式包装了起来。可以调用add()方法增加新的Object。要获取Sequence中的每一个对象，可以使用Selector接口。Selector允许检查Object数组是否到末尾了（end()），访问当前对象（current()），以及移到数组的下一个对象（next()）。  </p>\n<h3 id=\"22、内部类调用外部类的方法\"><a href=\"#22、内部类调用外部类的方法\" class=\"headerlink\" title=\"22、内部类调用外部类的方法\"></a>22、内部类调用外部类的方法</h3><p>在内部类想要获取外部类对象的引用，可以使用：<code>外部类.this</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;A.f()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> A <span class=\"title function_\">outer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> A.<span class=\"built_in\">this</span>; <span class=\"comment\">// 使用这样的方式获取外部类对象的引用</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Inner <span class=\"title function_\">inner</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t\tA.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> a.inner();</span><br><span class=\"line\">\t\tinner.outer().f(); <span class=\"comment\">//输出：A.f()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、创建内部类的方法\"><a href=\"#23、创建内部类的方法\" class=\"headerlink\" title=\"23、创建内部类的方法\"></a>23、创建内部类的方法</h3><p>要创建内部类（是非静态内部类）对象：<code>先new外部类对象，再外部类对象.new 内部类()</code>。<br>注意：<br>（1）虽然静态类不能实例化，但是静态内部类是可以实例化的，静态内部类和内部类的区别就是，创建内部类必须先创建外部类，而静态内部类不用创建外部类；<br>（2）普通内部类不能有static字段和方法，但是<code>JDK16</code>以后是可以允许有的！  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 内部类</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t\tA.<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a.<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// 先new外部类对象，再外部类对象.new 内部类()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、内部类相当于外部类中的属性\"><a href=\"#24、内部类相当于外部类中的属性\" class=\"headerlink\" title=\"24、内部类相当于外部类中的属性\"></a>24、内部类相当于外部类中的属性</h3><p>如果用<code>private</code>修饰内部类，则除了拥有该内部类的外部类能访问，其他都不能访问；如果用<code>protected</code>修饰内部类，只有拥有该内部类的外部类及其子类，以及与该外部类同一包中的类能访问，其他都不能访问。  </p>\n<h3 id=\"25、只要在匿名内部类中会使用到的参数都得加上final修饰\"><a href=\"#25、只要在匿名内部类中会使用到的参数都得加上final修饰\" class=\"headerlink\" title=\"25、只要在匿名内部类中会使用到的参数都得加上final修饰\"></a>25、只要在匿名内部类中会使用到的参数都得加上final修饰</h3><p>（1）例子一：在匿名内部类中使用到了参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Destination</span> &#123;</span><br><span class=\"line\">\tString <span class=\"title function_\">readLabel</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Destination <span class=\"title function_\">destination</span><span class=\"params\">(<span class=\"keyword\">final</span> String dest, <span class=\"keyword\">final</span> <span class=\"type\">float</span> price)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Destination</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> cost;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcost = Math.round(price);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cost &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;over budget!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> dest;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> String <span class=\"title function_\">readLabel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> label;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Destination</span> <span class=\"variable\">destination</span> <span class=\"operator\">=</span> demo.destination(<span class=\"string\">&quot;Tasmania&quot;</span>, <span class=\"number\">101.0f</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">over budget!</span><br></pre></td></tr></table></figure>\n<p>（2）例子二：在匿名内部类中没有使用到参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要有参构造的话使用抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Base constructor i = &quot;</span> + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的参数i不为final，因为匿名内部类中没有使用到i</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Base <span class=\"title function_\">base</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(i) &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;Inside instance initializer&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;In anonymous f()&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Base</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> demo.base(<span class=\"number\">47</span>);</span><br><span class=\"line\">\t\tbase.f();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">Base <span class=\"type\">constructor</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">47</span></span><br><span class=\"line\">Inside instance initializer</span><br><span class=\"line\">In anonymous <span class=\"title function_\">f</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n<p>注意：在此例中，不要求变量i一定是final的，因为i被传递给匿名内部类的基类的构造器，它并不会在匿名内部类中被直接使用。  </p>\n<h3 id=\"26、接口与内部类的使用\"><a href=\"#26、接口与内部类的使用\" class=\"headerlink\" title=\"26、接口与内部类的使用\"></a>26、接口与内部类的使用</h3><p>如果在使用接口时，有很多类实现这个接口，并存在公共的代码，使得这些公共代码可以被这个接口的所有不同实现类所共有，那么可以使用接口内部的嵌套类会很方便：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ClassInInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">howdy</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口内部的嵌套类</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassInInterface</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">howdy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;howdy&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t\tClassInInterface.<span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassInInterface</span>.Test();</span><br><span class=\"line\">\t\t\ttest.howdy();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">howdy</span><br></pre></td></tr></table></figure>\n<p>可以使用嵌套内部类来放置测试代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBed</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">TestBed</span> <span class=\"variable\">testBed</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBed</span>();</span><br><span class=\"line\">\t\t\ttestBed.f();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\"><a href=\"#27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\" class=\"headerlink\" title=\"27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\"></a>27、静态代码块、构造代码块、构造函数以及Java类初始化顺序</h3><p>（1）构造函数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span> &#123;&#125; <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>构造函数</code>，需要注意：  </p>\n<ol>\n<li>对象一建立，就会调用与之相应的<code>构造函数</code>，也就是说，不建立对象，<code>构造函数</code>时不会运行的。  </li>\n<li><code>构造函数</code>的作用是用于给对象进行初始化。  </li>\n<li>一个对象建立，<code>构造函数</code>只运行一次，而一般方法可以被该对象调用多次。</li>\n</ol>\n<p>（2）构造代码块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造代码块</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>构造代码块</code>，需要注意：<br><code>构造代码块</code>的作用是给对象进行初始化。对象一建立就运行<code>构造代码块</code>了，而且优先于<code>构造函数</code>执行。这里要强调一下，有对象建立，才会运行<code>构造代码块</code>，类不能调用<code>构造代码块</code>的，而且<code>构造代码块</code>与<code>构造函数</code>的执行顺序是先执行<code>构造代码块</code>，再执行<code>构造函数</code>。<br><code>构造代码块</code>与<code>构造函数</code>的区别是：<br><code>构造代码块</code>是给所有对象进行统一初始化，而<code>构造函数</code>是给对应的对象初始化，因为<code>构造函数</code>是可以多个的，运行哪个<code>构造函数</code>就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的<code>构造代码块</code>。也就是说，<code>构造代码块</code>中定义的是不同对象共性的初始化内容。<br>（3）静态代码块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 静态代码块</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>静态代码块</code>，要注意的是：  </p>\n<ol>\n<li>它是随着类的加载而执行，只执行一次，并优先于主函数。具体说，<code>静态代码块</code>是由类调用的。类调用时，先执行<code>静态代码块</code>，然后才执行主函数的。  </li>\n<li><code>静态代码块</code>其实就是给类初始化的，而<code>构造代码块</code>是给对象初始化的。  </li>\n<li><code>静态代码块</code>中的变量是局部变量，与普通函数中的局部变量性质没有区别。  </li>\n<li>一个类中可以有多个<code>静态代码块</code>。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  staitc <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>; <span class=\"comment\">// 先执行1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 再执行2</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    cnt += <span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 最后执行4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    System.out.println(cnt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 再执行3</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    cnt /= <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（4）Java类初始化顺序<br>对于一个类而言，按照如下顺序执行：<br><code>执行静态代码块</code> -&gt; <code>执行构造代码</code> -&gt; <code>块执行构造函数</code>。<br>对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序依次是：<br><code>静态变量、静态初始化块</code> -&gt; <code>变量、初始化块</code> -&gt; <code>构造器</code>。<br>当涉及到继承时，按照如下顺序执行：<br>执行父类的静态代码块，并初始化父类静态成员变量<br>执行子类的静态代码块，并初始化子类静态成员变量<br>执行父类的构造代码块，执行父类的构造函数，并初始化父类普通成员变量<br>执行子类的构造代码块， 执行子类的构造函数，并初始化子类普通成员变量<br>例子一：没有new对象时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br></pre></td></tr></table></figure>\n<p>例子二：new了一个对象  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloA a=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br></pre></td></tr></table></figure>\n<p>例子三：new了多个对象  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloA a=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();</span><br><span class=\"line\">        HelloA b=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br></pre></td></tr></table></figure>\n<p>例子四：有静态变量和变量时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InitialOrderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 静态变量 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">staticField</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;静态变量&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 变量 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">String</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;变量&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 静态初始化块 */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println( staticField );</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;静态初始化块&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 初始化块 */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println( field );</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;初始化块&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 构造器 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">InitialOrderTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;构造器&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InitialOrderTest</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">静态变量</span><br><span class=\"line\">静态初始化块</span><br><span class=\"line\">变量</span><br><span class=\"line\">初始化块</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n<p>例子五：有继承关系时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HelloA</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloB b=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloB</span>();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">B的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br><span class=\"line\">B的构造代码块</span><br><span class=\"line\">B的构造函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、为什么需要内部类？\"><a href=\"#28、为什么需要内部类？\" class=\"headerlink\" title=\"28、为什么需要内部类？\"></a>28、为什么需要内部类？</h3><p>当一个类实现多个接口时，有两种方式可以选择：<code>使用传统方式，直接实现多个接口</code>和<code>使用内部类</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口A</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口B</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传统方式实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span>, B &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内部类实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Y</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\tB <span class=\"title function_\">makeB</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>() &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesA</span><span class=\"params\">(A a)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesB</span><span class=\"params\">(B b)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 传统方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">X</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">X</span>();</span><br><span class=\"line\">\t\ttakesA(x);</span><br><span class=\"line\">\t\ttakesB(x);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 内部类</span></span><br><span class=\"line\">\t\t<span class=\"type\">Y</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Y</span>();</span><br><span class=\"line\">\t\ttakesA(y);</span><br><span class=\"line\">\t\ttakesB(<span class=\"keyword\">new</span> <span class=\"title class_\">Y</span>().makeB());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那如果不是实现多个接口，而是继承多个类呢？<br>那就不能使用<code>传统方式</code>了，只能使用<code>内部类方式</code>了：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">E</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Z</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\">\tE <span class=\"title function_\">makeE</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">E</span>() &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesD</span><span class=\"params\">(D d)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesE</span><span class=\"params\">(E e)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Z</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Z</span>();</span><br><span class=\"line\">\t\ttakesD(z);</span><br><span class=\"line\">\t\ttakesE(z.makeE());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"29、Collection接口\"><a href=\"#29、Collection接口\" class=\"headerlink\" title=\"29、Collection接口\"></a>29、Collection接口</h3><p>（1）<code>Tree-</code>前缀：按照比较结果的升序排列，例如：TreeSet、TreeMap；<br>（2）<code>LinkedHash-</code>前缀：按照被添加的顺序排列例如：LinkedHashSet、LinkedHashMap（不仅按照插入顺序保存，还保留了HashMap的查询速度）；<br>（3）LinkedList还可以用作<code>栈</code>、<code>队列</code>、<code>双端队列</code>；  </p>\n<h3 id=\"30、格式化字符\"><a href=\"#30、格式化字符\" class=\"headerlink\" title=\"30、格式化字符\"></a>30、格式化字符</h3><p>（1）<code>%s</code>：字符串；<br>（2）<code>%c</code>：字符；<br>（3）<code>%b</code>：布尔值；<br>（4）<code>%d</code>：十进制整数；<br>（5）<code>%x</code>：十六进制整数；<br>（6）<code>%o</code>：八进制整数；<br>（7）<code>%f</code>：浮点数；<br>（8）<code>%e</code>：指数；<br>（9）<code>%g</code>：通用浮点数（f和e中较短的）；<br>（10）<code>%h</code>：散列码（十六进制）；<br>（11）<code>%%</code>：字面值百分号（%）<br>（12）<code>%n</code>：换行符；<br>（13）<code>%tx</code>：日期与时间（x代表日期和时间转换符，例如：<code>%tT</code>代表时间，<code>%tF</code>代表日期）。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Formatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Formatter</span>(System.out);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;a = %c\\n&quot;</span>, a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;s: %s\\n&quot;</span>, a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;d: %d\\n&quot;</span>, (<span class=\"type\">int</span>)a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;b: %b\\n&quot;</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = <span class=\"type\">a</span></span><br><span class=\"line\"><span class=\"variable\">a</span> <span class=\"operator\">=</span> a</span><br><span class=\"line\">s: a</span><br><span class=\"line\">d: <span class=\"number\">97</span></span><br><span class=\"line\">b: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31、泛型用于方法中\"><a href=\"#31、泛型用于方法中\" class=\"headerlink\" title=\"31、泛型用于方法中\"></a>31、泛型用于方法中</h3><p>案例一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageDTO</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long total;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long pages;</span><br><span class=\"line\">\t<span class=\"comment\">// 分页结果集，这里的T对应上面类名的T</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;T&gt; list;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 泛型用于方法中</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将Page&lt;PO&gt;转化成Page&lt;VO&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意：这里因为是静态方法，所以不能用类上面的T泛型</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;PO&gt; p, Class&lt;VO&gt; clazz)</span> &#123;</span><br><span class=\"line\">\t\tPageDTO&lt;VO&gt; dto = <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置总条数</span></span><br><span class=\"line\">\t\tdto.setTotal(p.getTotal());</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置总页数</span></span><br><span class=\"line\">\t\tdto.setPages(p.getPages());</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前页结果集</span></span><br><span class=\"line\">\t\tList&lt;PO&gt; records = p.getRecords();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class=\"line\">\t\t\tdto.setList(Collections.emptyList());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdto.setList(BeanUtil.copyToList(records, clazz));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例二：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageQuery</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 页码</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 每页数据的条数</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">pageSize</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 排序字段</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sortBy;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否升序</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Boolean</span> <span class=\"variable\">isAsc</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 泛型用于方法中</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPage</span><span class=\"params\">(OrderItem ... items)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置分页条件</span></span><br><span class=\"line\">\t\tPage&lt;T&gt; page = Page.of(pageNo, pageSize);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置排序条件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StrUtil.isNotBlank(sortBy)) &#123;</span><br><span class=\"line\">\t\t\tpage.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(sortBy, isAsc));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (items != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 为空就默认排序</span></span><br><span class=\"line\">\t\t\tpage.addOrder(items);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> page;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 重载的运用</span></span><br><span class=\"line\">\t<span class=\"comment\">// 根据defaultSortBy和defaultAsc排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPage</span><span class=\"params\">(String defaultSortBy, Boolean defaultAsc)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(defaultSortBy, defaultAsc));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认第一个实现是根据创建时间降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPageDefaultSortByCreateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;create_time&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认第二个实现是根据更新时间降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPageDefaultSortByUpdateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;update_time&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例一和案例二的使用例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(UserQuery query)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">\tPage&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPage&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> PageDTO.of(p, UserVO.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例一可以优化成，调用者自己去决定怎么set数据，而不是在方法内部set（相当于在<code>of()</code>方法中添加一个参数，用来传行为）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;PO&gt; p, Function&lt;PO, VO&gt; convertor)</span> &#123;</span><br><span class=\"line\">\tPageDTO&lt;VO&gt; dto = <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置总条数</span></span><br><span class=\"line\">\tdto.setTotal(p.getTotal());</span><br><span class=\"line\">\t<span class=\"comment\">// 设置总页数</span></span><br><span class=\"line\">\tdto.setPages(p.getPages());</span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前页结果集</span></span><br><span class=\"line\">\tList&lt;PO&gt; records = p.getRecords();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class=\"line\">\t\tdto.setList(Collections.emptyList());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 以前做法</span></span><br><span class=\"line\">\t<span class=\"comment\">// dto.setList(BeanUtil.copyToList(records, clazz));</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 现在改成由调用者自己决定set</span></span><br><span class=\"line\">\tdto.setList(records.stream().map(convertor).collect(Collectors.toList()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用例子</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(UserQuery query)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">\tPage&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPage&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class=\"line\">\t<span class=\"comment\">// 例子一</span></span><br><span class=\"line\">\t<span class=\"comment\">// return PageDTO.of(p, user -&gt; BeanUtil.copyToList(user, UserVO.class));</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 例子二</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> PageDTO.of(p, user -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝基础属性</span></span><br><span class=\"line\">\t\t<span class=\"type\">UserVO</span> <span class=\"variable\">vo</span> <span class=\"operator\">=</span> BeanUtil.copyToList(user, UserVO.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝扩展属性</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// vo.setExt(user.getExt());</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32、HTTP状态码\"><a href=\"#32、HTTP状态码\" class=\"headerlink\" title=\"32、HTTP状态码\"></a>32、HTTP状态码</h3><p>（1）2xx  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">200</span>：ok</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">204</span>：no content，表示请求成功，但响应报文不含实体的主体部分</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">205</span>：reset content，表示请求成功，不含主体，要求重置请求内容</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">206</span>：partial content，即部分内容，当客户端请求一个资源的一部分时，服务器会返回这个状态码，表示服务器成功处理了部分GET请求。这种情况通常发生在客户端继续请求一个未完成的下载，或者客户端尝试实现带宽遏流等情况下</span><br></pre></td></tr></table></figure>\n<p>（2）3xx（重定向）  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">301</span>：moved permanently，永久性重定向，表示资源已被分配了新的url</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">302</span>：found，临时性重定向，表示资源临时被分配了新的url</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">303</span>：see other，表示资源存在另一个url，应使用get方法获取</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">304</span>：not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</span><br><span class=\"line\"><span class=\"attribute\">5</span>. <span class=\"number\">307</span>：temporary redirect，临时重定向，和<span class=\"number\">302</span>类似，但是期望客户端保持请求方法不变，向新的地址发出请求</span><br></pre></td></tr></table></figure>\n<p>（3）4xx（客户端错误）</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">400</span>：bad request，请求报文存在语法错误</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">401</span>：unauthorized，表示发送的请求需要有http认证的认证信息</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">403</span>：forbidden，表示对请求资源的访问被服务器拒绝</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">404</span>：not found，表示在服务器上没有找到请求的资源</span><br></pre></td></tr></table></figure>\n<p>（4）5xx（服务器错误）</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">500</span>：internal server error，表示服务器端在执行请求时发生了错误</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">501</span>：not implemented，表示服务器不支持当前请求所需要的某个功能</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">503</span>：service unavailable，表示服务器暂时处于超负载或正在停机维护，无法处理请求</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33、session和cookie的区别\"><a href=\"#33、session和cookie的区别\" class=\"headerlink\" title=\"33、session和cookie的区别\"></a>33、session和cookie的区别</h3><p>（1）<code>cookie</code>：就是存储在浏览器的一小段信息，以键值对形式存储，存的都是字符串。<br>特点：  </p>\n<ol>\n<li>以key-value键值对形式存储；  </li>\n<li>cookie由服务器产生，通过response返回，浏览器保存（cookie服务器产生，浏览器保存，下次请求路径是在header中携带cookie）；  </li>\n<li>cookie有大小限制4K；  </li>\n<li>cookie有时间限制，默认30分钟；  </li>\n<li>cookie不能存储敏感信息，例如密码。</li>\n</ol>\n<p>（2）<code>session</code>：就是会话（同一个浏览器请求同一个服务器，无论打开多少个窗口，这些窗口都共享一个会话），会话就是浏览器和服务器保存链接的一种形式，主要作用就是记录用户的状态，记录用户相关的信息。<br>特点：  </p>\n<ol>\n<li>存储在服务器端；  </li>\n<li>以键值对存储，值可以是任何值；  </li>\n<li>会话也有时间限制（如果用户长时间没有访问，则会话会自动删除）；  </li>\n<li>浏览器关闭，会话结束，如果重新打开浏览器，则是新会话；  </li>\n<li>session的安全性相对较高。</li>\n</ol>\n<h3 id=\"34、转发和重定向\"><a href=\"#34、转发和重定向\" class=\"headerlink\" title=\"34、转发和重定向\"></a>34、转发和重定向</h3><p>（1）<code>重定向</code>  </p>\n<ol>\n<li>浏览器行为；  </li>\n<li>浏览器做了2次请求；  </li>\n<li>上次请求的request对象会丢失；  </li>\n<li>url发生改变；  </li>\n<li>可以是任意的网络资源。</li>\n</ol>\n<p>（2）<code>转发</code>  </p>\n<ol>\n<li>服务器行为；  </li>\n<li>浏览器只做了一次行为；  </li>\n<li>转发带有用户的HttpServletRequest；  </li>\n<li>url没有变化；  </li>\n<li>只能在当前项目进行，不能到网络资源。</li>\n</ol>\n<h3 id=\"35、servlet的生命周期\"><a href=\"#35、servlet的生命周期\" class=\"headerlink\" title=\"35、servlet的生命周期\"></a>35、<code>servlet</code>的生命周期</h3><p>每个servlet只会创建一个对象，第一次请求servlet时，对象会创建，并执行<code>init()</code>方法，后续每次请求servlet，只会调用它的服务方法<code>dopost()</code>方法、<code>doget()</code>方法、<code>service()</code>方法等，tomcat关闭，会销毁servlet对象。  </p>\n<h3 id=\"36、tomcat容器如何创建servlet实例\"><a href=\"#36、tomcat容器如何创建servlet实例\" class=\"headerlink\" title=\"36、tomcat容器如何创建servlet实例\"></a>36、<code>tomcat</code>容器如何创建<code>servlet</code>实例</h3><p>（1）先到缓存中寻找有没有这个对象；  </p>\n<ol>\n<li>如果没有，就通过反射去创建相应的对象（执行构造方法）；  </li>\n<li>tomcat会把对象存放到缓存中；  </li>\n<li>执行初始化方法<code>init()</code>；  </li>\n<li>如果有，直接获取到这个对象；</li>\n</ol>\n<p>（2）执行服务方法；<br>（3）返回响应的数据到客户端（浏览器）。  </p>\n<h3 id=\"37、什么是xss攻击，如何避免？\"><a href=\"#37、什么是xss攻击，如何避免？\" class=\"headerlink\" title=\"37、什么是xss攻击，如何避免？\"></a>37、什么是<code>xss</code>攻击，如何避免？</h3><p>（1）<code>xss</code>攻击<br>就是<code>跨站脚本攻击</code>，它是web程序中常见的漏洞。原理是攻击者往web页面里插入恶意的脚本代码（<code>css</code>代码、<code>javascript</code>代码），当用户浏览该页面时，嵌入其中的脚本代码会被执行，从而达到恶意攻击用户的目的，如盗取用户cookie、破坏页面结构、重定向到其他网站等。<br>（2）避免方法<br>预防xss的核心是必须对输入的数据做过滤处理。  </p>\n<h3 id=\"38、什么是csrf攻击，如何避免？\"><a href=\"#38、什么是csrf攻击，如何避免？\" class=\"headerlink\" title=\"38、什么是csrf攻击，如何避免？\"></a>38、什么是<code>csrf</code>攻击，如何避免？</h3><p>（1）<code>csrf</code>攻击（Cross-Site Request Forgery）<br>就是<code>跨站请求伪造</code>，可以理解为攻击者盗用了你的身份，以你的名义发送恶意请求，比如：以你的名义发送邮件、发消息、购买商品，虚拟货币转账等。<br>（2）避免方法<br>验证请求来源地址，关键操作添加验证码，在请求地址添加token并验证。  </p>\n<h3 id=\"39、拦截器Interceptor和过滤器Filter的区别\"><a href=\"#39、拦截器Interceptor和过滤器Filter的区别\" class=\"headerlink\" title=\"39、拦截器Interceptor和过滤器Filter的区别\"></a>39、拦截器<code>Interceptor</code>和过滤器<code>Filter</code>的区别</h3><p>（1）<code>拦截器</code>是spring中的，只能作用于DispatcherServlet，<code>过滤器</code>是servlet的；<br>（2）<code>拦截器</code>基于Java反射机制，<code>过滤器</code>基于函数回调；<br>（3）<code>拦截器</code>只对action请求起作用，<code>过滤器</code>几乎所有请求都起作用；<br>（4）<code>拦截器</code>可以多次被调用，<code>过滤器</code>只能在初始化的时候被调用一次。  </p>\n<h3 id=\"40、Mybatis的理解\"><a href=\"#40、Mybatis的理解\" class=\"headerlink\" title=\"40、Mybatis的理解\"></a>40、<code>Mybatis</code>的理解</h3><p>（1）<code>Mybatis</code>是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程，程序员直接编写原生态SQL，可以严格控制SQL执行性能，灵活度高；<br>（2）<code>Mybatis</code>可以使用XML或注解来配置和映射原生信息，将pojo映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集；<br>（3）通过XML文件或注解的方式将要执行的各种statement配置起来，并通过Java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为Java对象并返回。  </p>\n<h3 id=\"41、-和-的区别\"><a href=\"#41、-和-的区别\" class=\"headerlink\" title=\"41、#{}和${}的区别\"></a>41、<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>的区别</h3><p>（1）<code>#&#123;&#125;</code><br><code>#&#123;&#125;</code>是sql的参数占位符，Mybatis会将sql中的<code>#&#123;&#125;</code>替换为<code>?</code>号，在sql执行前会使用<code>PreparedStatement</code>的参数设置方法，按序给sql的<code>?</code>号占位符设置参数。<br>（2）<code>$&#123;&#125;</code><br><code>$&#123;&#125;</code>是<code>Properties</code>文件中的变量占位符，它可以用于标签属性值和sql内部，例如：<code>$&#123;driver&#125;</code>会被替换为<code>com.mysql.jdbc.Driver</code>。  </p>\n<h3 id=\"42、Mybatis如何传递多个参数\"><a href=\"#42、Mybatis如何传递多个参数\" class=\"headerlink\" title=\"42、Mybatis如何传递多个参数\"></a>42、<code>Mybatis</code>如何传递多个参数</h3><p>（1）若Dao层函数有多个参数，那么其对应的xml中，<code>#&#123;0&#125;</code>代表接收的是第一个参数，<code>#&#123;1&#125;</code>代表第二个，以此类推；<br>（2）使用<code>@Param</code>注解，在Dao层方法的参数前加<code>@Param</code>注解，注解内的参数名和<code>#&#123;&#125;</code>中的保持一致；<br>（3）多个参数封装成map，以HashMap的形式传递到mapper中。  </p>\n<h3 id=\"43、加密技术\"><a href=\"#43、加密技术\" class=\"headerlink\" title=\"43、加密技术\"></a>43、加密技术</h3><p>1、对称加密技术（私人密钥加密）<br>文件加密和解密使用相同的密钥。<br><strong>常见的对称加密技术</strong>：<br>（1）数据加密标准算法<code>DES</code><br>主要采用替换和移位的方法加密，用56位密钥对64位二进制数据块进行加密，每次加密可对64位的输入数据进行16轮编码，经一系列替换和移位后，输入的64位原始数据转换成完全不同的64位输出数据。<br>特点：<code>DES算法速度快，密钥生产容易</code>。<br>（2）三重DES<code>3DES</code>或<code>TDEA</code><br>在DES的基础上采用三重DES，即用两个56位的密钥K1和K2，发送方用K1加密，K2解密，再使用K1加密；接收方则使用K1解密，K2加密，再使用K1解密。<br>（3）RC-5<br>（4）国际数据加密算法<code>IDEA</code><br>类似于三重DES，IDEA的密钥是128位。<br>（5）高级加密标准算法<code>AES</code><br>基于排列和置换运算，排列是对数据重新进行安排，置换是将一个数据单元替换为另一个，AES使用几种不同的方法来执行排列和置换运算。<br>AES是一个迭代、对称密钥分组的密码，它可以使用128、192和256位密钥，并且用128位（16字节）分组加密和解密数据。  </p>\n<p>2、非对称加密技术（两个密钥：公开密钥<code>Publickey</code>和私有密钥<code>Privatekey</code>）<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。  </p>\n<img src=\"/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<img src=\"/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>说明：甲方生成一对密钥并将其中的一把作为公用密钥向其他方公开，得到该公开密钥的乙方使用该密钥对信息进行加密后再发送给甲方，甲方用自己保存的私有密钥对密文解密。<br>注意：加密和解密花费时间长，速度慢，不适于对文件加密，只适用于对少量数据加密。<br>常用的有：RSA。  </p>\n<h3 id=\"44、认证技术\"><a href=\"#44、认证技术\" class=\"headerlink\" title=\"44、认证技术\"></a>44、认证技术</h3><p>主要解决网络通信过程中通信双方的身份认可。<br>1、信息摘要<code>MD5</code><br>描述了一份较长的信息或文件，它可以被看作一份长文件的“数字指纹”。信息摘要用于创建数字签名，对于特定的文件而言，信息摘要是唯一的，可以被公开的。<br><code>MD5</code>以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。  </p>\n<p>2、数字签名<br>一对多，任何拥有发送放公开密钥的人都可以验证数字签名的正确性。<br>（1）信息发送者使用一个单向散列函数（Hash函数）对信息生成<code>信息摘要</code>；<br>（2）信息发送者使用自己的<code>私钥</code>加密<code>信息摘要</code>，生成<code>数字签名</code>；<br>（3）信息发送者把信息本身（原始信息）和<code>数字签名</code>一起发送出去；<br>（4）信息接收者通过使用与信息发送者使用的同一个单向散列函数（Hash函数）对接收的信息本身生成新的<code>信息摘要</code>，再使用信息发送者的公钥对接收到的<code>数字签名</code>进行解密，然后将解密得到的<code>信息摘要</code>和刚才生成的新<code>信息摘要</code>作对比，以确认信息发送者的身份和信息是否被修改。<br>注意：签名一般指用自己的私钥对数据进行加密！！！  </p>\n<p>3、数字加密<br>多对一，任何知道接收方公开密钥的人都可以向接收方发送加密信息。<br>（1）当信息发送者需要发送信息时，首先生成一个<code>对称密钥</code>，用该<code>对称密钥</code>加密要发送的报文；<br>（2）信息发送者用信息接收者的<code>公钥</code>加密上述<code>对称密钥</code>；<br>（3）信息发送者将第（1）步和第（2）步的结果结合在一起传给信息接收者，称为<code>数字信封</code>；<br>（4）信息接收者使用自己的<code>私钥</code>解密被加密的<code>对称密钥</code>，再用此<code>对称密钥</code>解密被发送方加密的密文，得到真正的报文。  </p>\n<h3 id=\"45、排序算法\"><a href=\"#45、排序算法\" class=\"headerlink\" title=\"45、排序算法\"></a>45、排序算法</h3><p>1、直接插入排序<br>前提已经按顺序排序好了，然后将要插入的记录的关键字ki依次与关键字ki-1、ki-2进行比较，找到应该插入的位置。  </p>\n<p>2、冒泡排序<br>首先将第一个记录的关键字和第二个记录的关键字进行比较，若为逆序，则交换两个记录的值，然后比较第二个记录和第三个记录的关键字。  </p>\n<p>3、简单选择排序（不稳定）<br>顺序扫描序列中的元素，记住遇到的最小元素（一次扫描完毕就找到了一个最小的元素，反复扫描就能完成排序工作）。  </p>\n<p>4、快速排序<br>通过一趟排序划分为两个部分，第一部分小于第二部分。<br>设i和j，分别为第一个和最后一个，设判断记录（一般是第一个）为pivot，首先从j所指位置向前比较，小于pivot的元素就将该位置的数移到i处，然后从i处向后比较，如此重复。  </p>\n<h3 id=\"46、SQL语句执行顺序\"><a href=\"#46、SQL语句执行顺序\" class=\"headerlink\" title=\"46、SQL语句执行顺序\"></a>46、SQL语句执行顺序</h3><p><code>select</code>、<code>from</code>、<code>where</code>、<code>group by</code>、<code>having</code>、<code>order by</code>。<br>注意：<br>1、<code>where</code>后面的使用：<br>（1）<code>in</code>：在集合中，<code>where id in (...)</code>；<br>（2）<code>not in</code>：不在集合中，<code>where id not in (...)</code>；<br>（3）<code>like</code>：与<code>_</code>和<code>%</code>进行单个和多个字符匹配，<code>where name like &#39;_明&#39;</code>查询名为明的姓名；<br><code>like</code>也可与<code>escape</code>关键字（定义转义符）搭配使用：  </p>\n<ol>\n<li><code>like &#39;ab\\%cd%&#39; escape &#39;\\&#39;</code>：匹配所有以<code>ab%cd</code>开头的字符串。  </li>\n<li><code>like &#39;ab\\\\cd%&#39; escape &#39;\\&#39;</code>：匹配所有以<code>ab\\cd</code>开头的字符串。</li>\n</ol>\n<p>（4）<code>is null</code>：为空，<code>where name is null</code>；<br>（5）<code>is not null</code>：不为空，<code>where name is not null</code>；<br>（6）<code>and</code>：与，<code>where name is not null and age &gt; 18</code>；<br>（7）<code>or</code>：或，<code>where name is not null or age &gt; 18</code>；<br>（8）<code>not</code>：非，<code>where not (name is not null and age &gt; 18)</code>；<br>（9）<code>between</code>：在两个数之间，<code>where age between 18 and 20</code>。  </p>\n<h3 id=\"47、SQL语句谓词使用\"><a href=\"#47、SQL语句谓词使用\" class=\"headerlink\" title=\"47、SQL语句谓词使用\"></a>47、SQL语句谓词使用</h3><p>1、<code>ALL</code>：&gt; ALL，大于子查询结果中的所有值。<br>2、<code>ANY</code>：&gt; ANY，大于子查询结果中的某个值。<br>例一：查询其他系比计算机系CS，所有学生年龄都要小的学生姓名及年龄。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sd：系；<span class=\"operator\">&lt;&gt;</span>：不等于</span><br><span class=\"line\"><span class=\"keyword\">select</span> name, age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sd <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span>) <span class=\"keyword\">and</span> sd <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>例二：查询其他系比计算机系某一学生年龄小的学生姓名及年龄。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name, age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"keyword\">any</span>(<span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sd <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span>) <span class=\"keyword\">and</span> sd <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"48、数据库常见问题\"><a href=\"#48、数据库常见问题\" class=\"headerlink\" title=\"48、数据库常见问题\"></a>48、数据库常见问题</h3><p>1、事务<br>用户对数据库进行的一系列操作。  </p>\n<p>2、丢失修改<br>两个事务T1、T2，T1在t1时读取了A值为16，T2在t2时读取了A值也为16，t3时，T1执行了16-1&#x3D;15，把15存入数据库，完成了事务，而t4时，T2也执行了16-1&#x3D;15的操作并也存入数据库完成事务，事务T1的结果被覆盖丢失了。  </p>\n<p>3、不可重复读<br>两个事务T1、T2，事务T1读取了A、B的值为50、100，执行A+B&#x3D;150，事务T1还没完成的情况下，事务T2修改了B的值为200存入数据库，之后事务T1再次执行A+B操作，两次相同的执行，结果不一样。  </p>\n<p>4、幻读<br>两个事务T1、T2，T1去查询工资为1000的，比如查出来5人，在事务T1还没有完成的情况下，事务T2插入了一条工资为1000的记录，之后事务T1再次查询却变成6人。  </p>\n<p>5、脏读<br>两个事务T1、T2，事务T1修改了A值，并存入数据库，之后事务T2读取了事务T1修改之后的A值并做了一系列操作，这时，事务T1回滚了，那事务T2做的操作就无效了。  </p>\n<h3 id=\"49、数据库的锁\"><a href=\"#49、数据库的锁\" class=\"headerlink\" title=\"49、数据库的锁\"></a>49、数据库的锁</h3><p>1、封锁（并发控制的主要技术）<br>（1）排它锁（X锁或写锁）<br>若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他事务不能再对A加任何类型的锁，直到T释放A上的锁。<br>（2）共享锁（S锁或读锁）<br>若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其他事务只能再对A加S锁，直到T释放A上的锁。<br>保证了其他事务可以读A，但再T释放A上的锁之前不能修改A。  </p>\n<p>2、活锁<br>事务T1封锁了数据A时，事务T2请求封锁数据A，于是事务T2等待，当T1释放了A上的锁后，系统首先批准了T3请求，于是T2继续等待，同理批准了T4、T5…，T2永远都在等待。  </p>\n<p>3、死锁<br>两个事务以上分别请求封锁对方已经封锁的数据，导致长期等待。  </p>\n<h3 id=\"50、三级封锁协议\"><a href=\"#50、三级封锁协议\" class=\"headerlink\" title=\"50、三级封锁协议\"></a>50、三级封锁协议</h3><p>1、一级封锁协议（解决丢失修改）<br>事务在修改数据之前，必须先对其加上X锁，直到事务结束才释放。  </p>\n<p>2、二级封锁协议（解决脏读，不能解决不可重复读，因为它读完就释放）<br>在一级的基础上，加上事务在读数据之前，必须先对其加上S锁，读完后释放。  </p>\n<p>3、三级封锁协议（都解决了）<br>在一级的基础上，加上事务在读数据之前，必须先加上S锁，知道事务结束再释放。  </p>\n<h3 id=\"51、数据库三大范式\"><a href=\"#51、数据库三大范式\" class=\"headerlink\" title=\"51、数据库三大范式\"></a>51、数据库三大范式</h3><p>1、解释<code>候选码</code>、<code>主码</code>、<code>主属性</code><br>（1）候选码：某一属性或属性组的值能唯一标识一个元组，则该属性或属性组为候选码。<br>（2）主码：有多个候选码，则选定其中一个为主码。<br>（3）主属性：包含在任何候选码中的属性。  </p>\n<p>2、第一范式（1NF）<br>数据表中每一个字段都不可再分。  </p>\n<p>3、第二范式（2NF）<br>在满足第一范式的基础上，还要满足所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分。<br>例如：在成绩表（学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，学号或课程号都不能单独决定成绩，所以（学号，课程号）-&gt; 成绩完全依赖。<br>又例如：比赛表里面（球员编号，姓名，年龄，比赛编号，比赛时间，比赛场地），候选键和主键都是（球员编号，比赛编号），（球员编号，比赛编号）-&gt;（姓名，年龄，比赛时间，比赛场地）显然不满足2NF，因为：（球员编号）-&gt;（姓名，年龄），（比赛编号）-&gt;（比赛时间，比赛场地），这样会产生很多问题：比如一个球员参加了n场比赛，那么该球员的姓名和年龄就重复很多次了。  </p>\n<p>4、第三范式（3FN）<br>在满足第二范式的基础上，满足所有非主键字段都直接和主键相关，都互相独立。  </p>\n","more":"<hr>\n<h3 id=\"1、重载区分\"><a href=\"#1、重载区分\" class=\"headerlink\" title=\"1、重载区分\"></a>1、重载区分</h3><p><code>Java重载</code>不能以返回值区分（不能以方法类型），只能以方法参数的类型、个数和顺序区分（顺序不推荐）。  </p>\n<h3 id=\"2、static方法调用规则\"><a href=\"#2、static方法调用规则\" class=\"headerlink\" title=\"2、static方法调用规则\"></a>2、static方法调用规则</h3><p>（1）在<code>static方法</code>内不能调用非静态方法，但是非静态方法可以调用<code>static方法</code>。<br>（2）<code>static</code>关键字不能应用于局部变量。  </p>\n<h3 id=\"3、finalize方法\"><a href=\"#3、finalize方法\" class=\"headerlink\" title=\"3、finalize方法\"></a>3、finalize方法</h3><p><code>finalize方法</code>：当垃圾回收器（gc）执行时会触发该方法（不推荐使用该方法，java9已废弃）。  </p>\n<h3 id=\"4、volatile关键字作用\"><a href=\"#4、volatile关键字作用\" class=\"headerlink\" title=\"4、volatile关键字作用\"></a>4、volatile关键字作用</h3><p>（1）保证可见性（两个线程A、B互相可见）；<br>（2）不保证原子性；<br>（3）防止指令重排。  </p>\n<h3 id=\"5、数组\"><a href=\"#5、数组\" class=\"headerlink\" title=\"5、数组\"></a>5、数组</h3><p>（1）数组的声明<br>正确的方式：<code>int[] a</code>或者<code>int a[]</code><br>错误的方式：<code>int[3] a</code>或者<code>int a[6]</code><br>原因：针对声明数组的时候，编译器不允许指定数组的大小。<br>（2）数组的初始化  </p>\n<ol>\n<li><code>int[] a = &#123;1,2,3,4&#125;;</code>  </li>\n<li><code>int[] a = new int[3];</code>  </li>\n<li><code>int[] a = new[]&#123;1,2,3,4&#125;;</code>（1. 是3. 的简写）</li>\n</ol>\n<h3 id=\"6、try-catch执行顺序\"><a href=\"#6、try-catch执行顺序\" class=\"headerlink\" title=\"6、try..catch执行顺序\"></a>6、try..catch执行顺序</h3><p>（1）<code>try..catch</code>捕获到异常，<code>try</code>中后面的代码不会继续执行，但是<code>catch</code>括号外面的会执行。<br>（2）如果<code>try</code>中有<code>return</code>，先执行<code>try</code>中<code>return</code>之前的逻辑，再执行<code>finally</code>，最后执行<code>return</code>。<br>（3）<code>finally</code>中一般是不推荐有<code>return</code>语句的！！！如果有，会覆盖<code>try</code>中的<code>return</code>。<br>1、放for循环里面和外面区别<br>（1）放for循环外面，一旦出现异常，就会终止循环；<br>（2）放for循环里面，一旦出现异常，就会终止当前循环，继续执行下一个循环。  </p>\n<h3 id=\"7、权限修饰符\"><a href=\"#7、权限修饰符\" class=\"headerlink\" title=\"7、权限修饰符\"></a>7、权限修饰符</h3><p><code>public</code> &gt; <code>protected</code> &gt; <code>default</code> &gt; <code>private</code>。<br>（1）<code>public</code>：公共权限，可以被任何类访问，无论它们是否在同一包中；<br>（2）<code>protected</code>：受保护权限，可以被同一个包中的类以及该类的子类访问；<br>（3）<code>default</code>：默认权限，只有同一个包中的类可以访问。  </p>\n<h3 id=\"8、基本类型判断\"><a href=\"#8、基本类型判断\" class=\"headerlink\" title=\"8、基本类型判断\"></a>8、基本类型判断</h3><p><code>==、!=</code>；引用类型判断：<code>equals</code>（默认比较引用，不是比较值，所以自定义类时必须重写equals）。  </p>\n<h3 id=\"9、Java标签用法\"><a href=\"#9、Java标签用法\" class=\"headerlink\" title=\"9、Java标签用法\"></a>9、Java标签用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlabelOne:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (;<span class=\"literal\">true</span>;) &#123;</span><br><span class=\"line\">\t\t\t\tlabelTwo:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (;i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;i = &quot;</span> + i);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;break&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\ti ++;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue labelOne&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\ti ++;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span> labelOne;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;break labelOne&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span> labelOne;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;k &lt; <span class=\"number\">5</span>;k ++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (k == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;continue labelTwo&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">continue</span> labelTwo;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">continue</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">break</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelTwo</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"type\">labelOne</span></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">break</span> labelOne</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、java基本数据类型\"><a href=\"#10、java基本数据类型\" class=\"headerlink\" title=\"10、java基本数据类型\"></a>10、java基本数据类型</h3><p>（1）<code>boolean</code>：1b（bit），1位，占用4字节（<code>Boolean</code>）；<br>（2）<code>char</code>：2B（Bytes），16b（bits），16位（<code>Character</code>）；<br>（3）<code>byte</code>：1B（Byte），8b（bits），8位，-128〜127（<code>Byte</code>）；<br>（4）<code>short</code>：2B（Bytes），16b（bits）16位，-12^15〜2^15-1（<code>Short</code>）；<br>（5）<code>int</code>：4B（Bytes），32b（bits），32位，-2^31〜2^31-1（<code>Integer</code>）；<br>（6）<code>long</code>：8B（Bytes），64b（bits）64位，-2^63〜2^63-1（<code>Long</code>）；<br>（7）<code>float</code>：4B（Bytes），32b（bits），32位，-3.4E+38〜3.4E+38（<code>Float</code>）；<br>（8）<code>double</code>：8B（Bytes），64b（bits），64位，-1.7E+308〜1.7E+308（<code>Double</code>）。<br>类中的字段是基本类型，没有初始化，java也会默认加上默认值（针对类中，只有在类中的字段才会自动加上默认值，方法中的变量不会）。<br>（1）<code>boolean</code>：false；<br>（2）<code>char</code>：’\\u0000’（null）；<br>（3）<code>byte</code>：(byte)0；<br>（4）<code>short</code>：(short)0；<br>（5）<code>int</code>：0；<br>（6）<code>long</code>：0L；<br>（7）<code>float</code>：0.0f；<br>（8）<code>double</code>：0.0d。  </p>\n<h3 id=\"11、堆和栈\"><a href=\"#11、堆和栈\" class=\"headerlink\" title=\"11、堆和栈\"></a>11、堆和栈</h3><p>堆：存放java对象（唯一的）；栈：不唯一，是根据线程定，比如main线程的栈。  </p>\n<h3 id=\"12、java的回收机制\"><a href=\"#12、java的回收机制\" class=\"headerlink\" title=\"12、java的回收机制\"></a>12、java的回收机制</h3><p>java有一个垃圾回收器，用来监视new创建的对象，如果某个对象的引用没用了，便会释放该对象，例如：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// s在作用域外是无法使用的，所以引用s没用了，释放</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、高精度数字\"><a href=\"#13、高精度数字\" class=\"headerlink\" title=\"13、高精度数字\"></a>13、高精度数字</h3><p>（1）<code>BigInteger</code>：整数；<br>（2）<code>BigDecimal</code>：定点数。  </p>\n<h3 id=\"14、基本类型和引用类型给值问题\"><a href=\"#14、基本类型和引用类型给值问题\" class=\"headerlink\" title=\"14、基本类型和引用类型给值问题\"></a>14、基本类型和引用类型给值问题</h3><p>基本类型给值是深给值，引用类型是浅给值。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、static静态初始化\"><a href=\"#15、static静态初始化\" class=\"headerlink\" title=\"15、static静态初始化\"></a>15、static静态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\tA() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f1</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">\tB() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">\t\ta2.f1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f2</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f2&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 4，这里的顺序无关紧要</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">A</span> <span class=\"variable\">a3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 7</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 5</span></span><br><span class=\"line\">\tC () &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">\t\ta4.f1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f3</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">a5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Test1&quot;</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">C</span>(); <span class=\"comment\">// 9</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Test2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">C</span>();</span><br><span class=\"line\">\t\tb.f2();</span><br><span class=\"line\">\t\tc.f3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">f1</span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">Test1</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">Test2</span><br><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">f1</span><br><span class=\"line\">f2</span><br><span class=\"line\">f3</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）Test类中有3个static，执行main方法时，先初始化static<code>1</code>和<code>2</code>；<br>（2）执行<code>1</code>，生成B对象，B类中存在<code>3</code>、<code>4</code>两个static，先执行<code>3</code>；<br>（3）生成A对象，执行A的构造方法，输出A；<br>（4）执行<code>4</code>，生成A对象，输出A；<br>（5）执行B的构造方法，输出B，然后输出f1；<br>（6）同理<code>（2）</code>，先执行<code>5</code>、<code>6</code>、<code>7</code>，输出A，A，A，然后执行C的构造方法，输出C，f1；<br>（7）然后开始执行main方法，输出Test1；<br>（8）执行<code>9</code>，C类中，static只执行一次，所以<code>5</code>、<code>6</code>不执行，只执行<code>7</code>，输出A；<br>（9）然后执行C的构造方法，输出C，f1；<br>（10）后面同理，输出Test2，A，C，f1，f2，f3。  </p>\n<h3 id=\"16、继承和组合\"><a href=\"#16、继承和组合\" class=\"headerlink\" title=\"16、继承和组合\"></a>16、继承和组合</h3><p>不止可以使用继承，还可以使用组合，<code>继承</code>是去继承某个类，然后拥有这个类的方法、属性；而<code>组合</code>是在一个新类中声明某个类的对象，并创建这个类的对象，这样就可以使用这个类的方法、属性。  </p>\n<h3 id=\"17、代理和组合很像：\"><a href=\"#17、代理和组合很像：\" class=\"headerlink\" title=\"17、代理和组合很像：\"></a>17、代理和组合很像：</h3><p>（1）组合  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LunTai</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">run</span> <span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">LunTai</span> <span class=\"variable\">lunTai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LunTai</span>(); <span class=\"comment\">// 组合</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>().lunTai.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）代理  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FandDong</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">zuFang</span> <span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZhongJie</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">FandDong</span> <span class=\"variable\">fd</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FangDong</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zuFang</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tfd.zuFang(); <span class=\"comment\">// 代理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、Java向上转型\"><a href=\"#18、Java向上转型\" class=\"headerlink\" title=\"18、Java向上转型\"></a>18、Java向上转型</h3><p>（1）调用的属性是父类的属性；（父类和子类都有field属性，向上转型之后得到的对象，调用field属性是父类的）<br>（2）调用的方法，只能调用父类有的方法，如果子类重写了该方法，调用的就是子类的；<br>（3）不能调用子类独有的方法；<br>（4）如果父类的a方法是private，子类重写了a方法，这个a方法属于子类独有的方法，因为父类的a方法是private，相当于加了final关键字，是不能被重写的；<br>（5）向上转型静态方法执行的是父类的，普通方法执行的是子类的。  </p>\n<h3 id=\"19、抽象类和接口实例化问题\"><a href=\"#19、抽象类和接口实例化问题\" class=\"headerlink\" title=\"19、抽象类和接口实例化问题\"></a>19、抽象类和接口实例化问题</h3><p>抽象类和接口一样，不能实例化；<br>（1）如果某个类继承了抽象类，要想实例化必须实现抽象类中所有抽象方法，否则这个类也是抽象类；<br>（2）接口可以有static final常量，但是不能是“空 final”，也可以被非常量表达式初始化。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Random</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>(<span class=\"number\">47</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">RANDOM_INT</span> <span class=\"operator\">=</span> a.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"variable\">RANDOM_LONG</span> <span class=\"operator\">=</span> a.nextLong() * <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）当一个类继承抽象类并实现多个接口，顺序是先继承，再实现。  </p>\n<h3 id=\"20、怎么调用抽象类中的抽象方法\"><a href=\"#20、怎么调用抽象类中的抽象方法\" class=\"headerlink\" title=\"20、怎么调用抽象类中的抽象方法\"></a>20、怎么调用抽象类中的抽象方法</h3><p>（1）创建一个interface接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个抽象类去实现这个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestAbstractImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实现了接口方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.testAbstractMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAbstractMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）创建一个普通类继承这个抽象类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TestAbstractImpl</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAbstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;继承了抽象类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）测试  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestImpl</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestImpl</span>();</span><br><span class=\"line\">        test.testAbstractMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------------------&quot;</span>);</span><br><span class=\"line\">        test.testMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">继承了抽象类</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">实现了接口方法</span><br><span class=\"line\">继承了抽象类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、迭代器设计模式\"><a href=\"#21、迭代器设计模式\" class=\"headerlink\" title=\"21、迭代器设计模式\"></a>21、迭代器设计模式</h3><p>（1）创建一个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Selector</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">end</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\tObject <span class=\"title function_\">current</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个类实现这个接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sequence</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[] items;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Sequence</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">\t\titems = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[size];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object x)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(next &lt; items.length) &#123;</span><br><span class=\"line\">\t\t\titems[next++] = x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SequenceSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Selector</span> &#123; <span class=\"comment\">// 内部类，相当于外部类的属性</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">end</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i == items.length;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">current</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> items[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i &lt; items.length) &#123;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Selector <span class=\"title function_\">selector</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SequenceSelector</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Sequence</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sequence</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tsequence.add(Integer.toString(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> sequence.selector();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!selector.end()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(selector.current());</span><br><span class=\"line\">\t\t\tselector.next();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：Sequence类只是一个固定大小的Object的数组，以类的形式包装了起来。可以调用add()方法增加新的Object。要获取Sequence中的每一个对象，可以使用Selector接口。Selector允许检查Object数组是否到末尾了（end()），访问当前对象（current()），以及移到数组的下一个对象（next()）。  </p>\n<h3 id=\"22、内部类调用外部类的方法\"><a href=\"#22、内部类调用外部类的方法\" class=\"headerlink\" title=\"22、内部类调用外部类的方法\"></a>22、内部类调用外部类的方法</h3><p>在内部类想要获取外部类对象的引用，可以使用：<code>外部类.this</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;A.f()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> A <span class=\"title function_\">outer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> A.<span class=\"built_in\">this</span>; <span class=\"comment\">// 使用这样的方式获取外部类对象的引用</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Inner <span class=\"title function_\">inner</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t\tA.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> a.inner();</span><br><span class=\"line\">\t\tinner.outer().f(); <span class=\"comment\">//输出：A.f()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、创建内部类的方法\"><a href=\"#23、创建内部类的方法\" class=\"headerlink\" title=\"23、创建内部类的方法\"></a>23、创建内部类的方法</h3><p>要创建内部类（是非静态内部类）对象：<code>先new外部类对象，再外部类对象.new 内部类()</code>。<br>注意：<br>（1）虽然静态类不能实例化，但是静态内部类是可以实例化的，静态内部类和内部类的区别就是，创建内部类必须先创建外部类，而静态内部类不用创建外部类；<br>（2）普通内部类不能有static字段和方法，但是<code>JDK16</code>以后是可以允许有的！  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 内部类</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">\t\tA.<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a.<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// 先new外部类对象，再外部类对象.new 内部类()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、内部类相当于外部类中的属性\"><a href=\"#24、内部类相当于外部类中的属性\" class=\"headerlink\" title=\"24、内部类相当于外部类中的属性\"></a>24、内部类相当于外部类中的属性</h3><p>如果用<code>private</code>修饰内部类，则除了拥有该内部类的外部类能访问，其他都不能访问；如果用<code>protected</code>修饰内部类，只有拥有该内部类的外部类及其子类，以及与该外部类同一包中的类能访问，其他都不能访问。  </p>\n<h3 id=\"25、只要在匿名内部类中会使用到的参数都得加上final修饰\"><a href=\"#25、只要在匿名内部类中会使用到的参数都得加上final修饰\" class=\"headerlink\" title=\"25、只要在匿名内部类中会使用到的参数都得加上final修饰\"></a>25、只要在匿名内部类中会使用到的参数都得加上final修饰</h3><p>（1）例子一：在匿名内部类中使用到了参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Destination</span> &#123;</span><br><span class=\"line\">\tString <span class=\"title function_\">readLabel</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Destination <span class=\"title function_\">destination</span><span class=\"params\">(<span class=\"keyword\">final</span> String dest, <span class=\"keyword\">final</span> <span class=\"type\">float</span> price)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Destination</span>() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> cost;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcost = Math.round(price);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cost &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;over budget!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">label</span> <span class=\"operator\">=</span> dest;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> String <span class=\"title function_\">readLabel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> label;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Destination</span> <span class=\"variable\">destination</span> <span class=\"operator\">=</span> demo.destination(<span class=\"string\">&quot;Tasmania&quot;</span>, <span class=\"number\">101.0f</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">over budget!</span><br></pre></td></tr></table></figure>\n<p>（2）例子二：在匿名内部类中没有使用到参数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要有参构造的话使用抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Base constructor i = &quot;</span> + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的参数i不为final，因为匿名内部类中没有使用到i</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Base <span class=\"title function_\">base</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(i) &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;Inside instance initializer&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;In anonymous f()&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Demo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">Base</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> demo.base(<span class=\"number\">47</span>);</span><br><span class=\"line\">\t\tbase.f();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">Base <span class=\"type\">constructor</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">47</span></span><br><span class=\"line\">Inside instance initializer</span><br><span class=\"line\">In anonymous <span class=\"title function_\">f</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n<p>注意：在此例中，不要求变量i一定是final的，因为i被传递给匿名内部类的基类的构造器，它并不会在匿名内部类中被直接使用。  </p>\n<h3 id=\"26、接口与内部类的使用\"><a href=\"#26、接口与内部类的使用\" class=\"headerlink\" title=\"26、接口与内部类的使用\"></a>26、接口与内部类的使用</h3><p>如果在使用接口时，有很多类实现这个接口，并存在公共的代码，使得这些公共代码可以被这个接口的所有不同实现类所共有，那么可以使用接口内部的嵌套类会很方便：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ClassInInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">howdy</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口内部的嵌套类</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassInInterface</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">howdy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;howdy&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t\tClassInInterface.<span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassInInterface</span>.Test();</span><br><span class=\"line\">\t\t\ttest.howdy();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">howdy</span><br></pre></td></tr></table></figure>\n<p>可以使用嵌套内部类来放置测试代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBed</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">TestBed</span> <span class=\"variable\">testBed</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBed</span>();</span><br><span class=\"line\">\t\t\ttestBed.f();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\"><a href=\"#27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\" class=\"headerlink\" title=\"27、静态代码块、构造代码块、构造函数以及Java类初始化顺序\"></a>27、静态代码块、构造代码块、构造函数以及Java类初始化顺序</h3><p>（1）构造函数  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span> &#123;&#125; <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>构造函数</code>，需要注意：  </p>\n<ol>\n<li>对象一建立，就会调用与之相应的<code>构造函数</code>，也就是说，不建立对象，<code>构造函数</code>时不会运行的。  </li>\n<li><code>构造函数</code>的作用是用于给对象进行初始化。  </li>\n<li>一个对象建立，<code>构造函数</code>只运行一次，而一般方法可以被该对象调用多次。</li>\n</ol>\n<p>（2）构造代码块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造代码块</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>构造代码块</code>，需要注意：<br><code>构造代码块</code>的作用是给对象进行初始化。对象一建立就运行<code>构造代码块</code>了，而且优先于<code>构造函数</code>执行。这里要强调一下，有对象建立，才会运行<code>构造代码块</code>，类不能调用<code>构造代码块</code>的，而且<code>构造代码块</code>与<code>构造函数</code>的执行顺序是先执行<code>构造代码块</code>，再执行<code>构造函数</code>。<br><code>构造代码块</code>与<code>构造函数</code>的区别是：<br><code>构造代码块</code>是给所有对象进行统一初始化，而<code>构造函数</code>是给对应的对象初始化，因为<code>构造函数</code>是可以多个的，运行哪个<code>构造函数</code>就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的<code>构造代码块</code>。也就是说，<code>构造代码块</code>中定义的是不同对象共性的初始化内容。<br>（3）静态代码块  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 静态代码块</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>静态代码块</code>，要注意的是：  </p>\n<ol>\n<li>它是随着类的加载而执行，只执行一次，并优先于主函数。具体说，<code>静态代码块</code>是由类调用的。类调用时，先执行<code>静态代码块</code>，然后才执行主函数的。  </li>\n<li><code>静态代码块</code>其实就是给类初始化的，而<code>构造代码块</code>是给对象初始化的。  </li>\n<li><code>静态代码块</code>中的变量是局部变量，与普通函数中的局部变量性质没有区别。  </li>\n<li>一个类中可以有多个<code>静态代码块</code>。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  staitc <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>; <span class=\"comment\">// 先执行1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 再执行2</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    cnt += <span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 最后执行4</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    System.out.println(cnt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 再执行3</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    cnt /= <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（4）Java类初始化顺序<br>对于一个类而言，按照如下顺序执行：<br><code>执行静态代码块</code> -&gt; <code>执行构造代码</code> -&gt; <code>块执行构造函数</code>。<br>对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序依次是：<br><code>静态变量、静态初始化块</code> -&gt; <code>变量、初始化块</code> -&gt; <code>构造器</code>。<br>当涉及到继承时，按照如下顺序执行：<br>执行父类的静态代码块，并初始化父类静态成员变量<br>执行子类的静态代码块，并初始化子类静态成员变量<br>执行父类的构造代码块，执行父类的构造函数，并初始化父类普通成员变量<br>执行子类的构造代码块， 执行子类的构造函数，并初始化子类普通成员变量<br>例子一：没有new对象时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br></pre></td></tr></table></figure>\n<p>例子二：new了一个对象  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloA a=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br></pre></td></tr></table></figure>\n<p>例子三：new了多个对象  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloA a=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();</span><br><span class=\"line\">        HelloA b=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br></pre></td></tr></table></figure>\n<p>例子四：有静态变量和变量时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InitialOrderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 静态变量 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">staticField</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;静态变量&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 变量 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">String</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;变量&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 静态初始化块 */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println( staticField );</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;静态初始化块&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 初始化块 */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println( field );</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;初始化块&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/* 构造器 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">InitialOrderTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;构造器&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InitialOrderTest</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">静态变量</span><br><span class=\"line\">静态初始化块</span><br><span class=\"line\">变量</span><br><span class=\"line\">初始化块</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n<p>例子五：有继承关系时  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloA</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloB</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HelloA</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的构造函数&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造代码块</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的构造代码块&quot;</span>);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B的静态代码块&quot;</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloB b=<span class=\"keyword\">new</span> <span class=\"title class_\">HelloB</span>();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\">A的静态代码块</span><br><span class=\"line\">B的静态代码块</span><br><span class=\"line\">A的构造代码块</span><br><span class=\"line\">A的构造函数</span><br><span class=\"line\">B的构造代码块</span><br><span class=\"line\">B的构造函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、为什么需要内部类？\"><a href=\"#28、为什么需要内部类？\" class=\"headerlink\" title=\"28、为什么需要内部类？\"></a>28、为什么需要内部类？</h3><p>当一个类实现多个接口时，有两种方式可以选择：<code>使用传统方式，直接实现多个接口</code>和<code>使用内部类</code>。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口A</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口B</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传统方式实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span>, B &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内部类实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Y</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">\tB <span class=\"title function_\">makeB</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>() &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesA</span><span class=\"params\">(A a)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesB</span><span class=\"params\">(B b)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 传统方式</span></span><br><span class=\"line\">\t\t<span class=\"type\">X</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">X</span>();</span><br><span class=\"line\">\t\ttakesA(x);</span><br><span class=\"line\">\t\ttakesB(x);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 内部类</span></span><br><span class=\"line\">\t\t<span class=\"type\">Y</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Y</span>();</span><br><span class=\"line\">\t\ttakesA(y);</span><br><span class=\"line\">\t\ttakesB(<span class=\"keyword\">new</span> <span class=\"title class_\">Y</span>().makeB());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那如果不是实现多个接口，而是继承多个类呢？<br>那就不能使用<code>传统方式</code>了，只能使用<code>内部类方式</code>了：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">E</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Z</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\">\tE <span class=\"title function_\">makeE</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">E</span>() &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesD</span><span class=\"params\">(D d)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takesE</span><span class=\"params\">(E e)</span> &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Z</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Z</span>();</span><br><span class=\"line\">\t\ttakesD(z);</span><br><span class=\"line\">\t\ttakesE(z.makeE());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"29、Collection接口\"><a href=\"#29、Collection接口\" class=\"headerlink\" title=\"29、Collection接口\"></a>29、Collection接口</h3><p>（1）<code>Tree-</code>前缀：按照比较结果的升序排列，例如：TreeSet、TreeMap；<br>（2）<code>LinkedHash-</code>前缀：按照被添加的顺序排列例如：LinkedHashSet、LinkedHashMap（不仅按照插入顺序保存，还保留了HashMap的查询速度）；<br>（3）LinkedList还可以用作<code>栈</code>、<code>队列</code>、<code>双端队列</code>；  </p>\n<h3 id=\"30、格式化字符\"><a href=\"#30、格式化字符\" class=\"headerlink\" title=\"30、格式化字符\"></a>30、格式化字符</h3><p>（1）<code>%s</code>：字符串；<br>（2）<code>%c</code>：字符；<br>（3）<code>%b</code>：布尔值；<br>（4）<code>%d</code>：十进制整数；<br>（5）<code>%x</code>：十六进制整数；<br>（6）<code>%o</code>：八进制整数；<br>（7）<code>%f</code>：浮点数；<br>（8）<code>%e</code>：指数；<br>（9）<code>%g</code>：通用浮点数（f和e中较短的）；<br>（10）<code>%h</code>：散列码（十六进制）；<br>（11）<code>%%</code>：字面值百分号（%）<br>（12）<code>%n</code>：换行符；<br>（13）<code>%tx</code>：日期与时间（x代表日期和时间转换符，例如：<code>%tT</code>代表时间，<code>%tF</code>代表日期）。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Formatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Formatter</span>(System.out);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;a = %c\\n&quot;</span>, a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;s: %s\\n&quot;</span>, a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;d: %d\\n&quot;</span>, (<span class=\"type\">int</span>)a);</span><br><span class=\"line\">        formatter.format(<span class=\"string\">&quot;b: %b\\n&quot;</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = <span class=\"type\">a</span></span><br><span class=\"line\"><span class=\"variable\">a</span> <span class=\"operator\">=</span> a</span><br><span class=\"line\">s: a</span><br><span class=\"line\">d: <span class=\"number\">97</span></span><br><span class=\"line\">b: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31、泛型用于方法中\"><a href=\"#31、泛型用于方法中\" class=\"headerlink\" title=\"31、泛型用于方法中\"></a>31、泛型用于方法中</h3><p>案例一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageDTO</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long total;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long pages;</span><br><span class=\"line\">\t<span class=\"comment\">// 分页结果集，这里的T对应上面类名的T</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;T&gt; list;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 泛型用于方法中</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将Page&lt;PO&gt;转化成Page&lt;VO&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意：这里因为是静态方法，所以不能用类上面的T泛型</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;PO&gt; p, Class&lt;VO&gt; clazz)</span> &#123;</span><br><span class=\"line\">\t\tPageDTO&lt;VO&gt; dto = <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置总条数</span></span><br><span class=\"line\">\t\tdto.setTotal(p.getTotal());</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置总页数</span></span><br><span class=\"line\">\t\tdto.setPages(p.getPages());</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取当前页结果集</span></span><br><span class=\"line\">\t\tList&lt;PO&gt; records = p.getRecords();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class=\"line\">\t\t\tdto.setList(Collections.emptyList());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdto.setList(BeanUtil.copyToList(records, clazz));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例二：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageQuery</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 页码</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 每页数据的条数</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">pageSize</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 排序字段</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sortBy;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否升序</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Boolean</span> <span class=\"variable\">isAsc</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 泛型用于方法中</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPage</span><span class=\"params\">(OrderItem ... items)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置分页条件</span></span><br><span class=\"line\">\t\tPage&lt;T&gt; page = Page.of(pageNo, pageSize);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置排序条件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StrUtil.isNotBlank(sortBy)) &#123;</span><br><span class=\"line\">\t\t\tpage.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(sortBy, isAsc));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (items != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 为空就默认排序</span></span><br><span class=\"line\">\t\t\tpage.addOrder(items);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> page;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 重载的运用</span></span><br><span class=\"line\">\t<span class=\"comment\">// 根据defaultSortBy和defaultAsc排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPage</span><span class=\"params\">(String defaultSortBy, Boolean defaultAsc)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(defaultSortBy, defaultAsc));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认第一个实现是根据创建时间降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPageDefaultSortByCreateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;create_time&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认第二个实现是根据更新时间降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toPageDefaultSortByUpdateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> toPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;update_time&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例一和案例二的使用例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(UserQuery query)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">\tPage&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPage&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> PageDTO.of(p, UserVO.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例一可以优化成，调用者自己去决定怎么set数据，而不是在方法内部set（相当于在<code>of()</code>方法中添加一个参数，用来传行为）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;PO&gt; p, Function&lt;PO, VO&gt; convertor)</span> &#123;</span><br><span class=\"line\">\tPageDTO&lt;VO&gt; dto = <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置总条数</span></span><br><span class=\"line\">\tdto.setTotal(p.getTotal());</span><br><span class=\"line\">\t<span class=\"comment\">// 设置总页数</span></span><br><span class=\"line\">\tdto.setPages(p.getPages());</span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前页结果集</span></span><br><span class=\"line\">\tList&lt;PO&gt; records = p.getRecords();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (CollUtil.isEmpty(records)) &#123;</span><br><span class=\"line\">\t\tdto.setList(Collections.emptyList());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 以前做法</span></span><br><span class=\"line\">\t<span class=\"comment\">// dto.setList(BeanUtil.copyToList(records, clazz));</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 现在改成由调用者自己决定set</span></span><br><span class=\"line\">\tdto.setList(records.stream().map(convertor).collect(Collectors.toList()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用例子</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的UserQuery继承了PageQuery，所以可以调用toPageDefaultSortByCreateTime()方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(UserQuery query)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">\tPage&lt;User&gt; page = query.toPageDefaultSortByCreateTime();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPage&lt;User&gt; p = userMapper.queryUsersPage(name, page);</span><br><span class=\"line\">\t<span class=\"comment\">// 例子一</span></span><br><span class=\"line\">\t<span class=\"comment\">// return PageDTO.of(p, user -&gt; BeanUtil.copyToList(user, UserVO.class));</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 例子二</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> PageDTO.of(p, user -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝基础属性</span></span><br><span class=\"line\">\t\t<span class=\"type\">UserVO</span> <span class=\"variable\">vo</span> <span class=\"operator\">=</span> BeanUtil.copyToList(user, UserVO.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝扩展属性</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// vo.setExt(user.getExt());</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32、HTTP状态码\"><a href=\"#32、HTTP状态码\" class=\"headerlink\" title=\"32、HTTP状态码\"></a>32、HTTP状态码</h3><p>（1）2xx  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">200</span>：ok</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">204</span>：no content，表示请求成功，但响应报文不含实体的主体部分</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">205</span>：reset content，表示请求成功，不含主体，要求重置请求内容</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">206</span>：partial content，即部分内容，当客户端请求一个资源的一部分时，服务器会返回这个状态码，表示服务器成功处理了部分GET请求。这种情况通常发生在客户端继续请求一个未完成的下载，或者客户端尝试实现带宽遏流等情况下</span><br></pre></td></tr></table></figure>\n<p>（2）3xx（重定向）  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">301</span>：moved permanently，永久性重定向，表示资源已被分配了新的url</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">302</span>：found，临时性重定向，表示资源临时被分配了新的url</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">303</span>：see other，表示资源存在另一个url，应使用get方法获取</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">304</span>：not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</span><br><span class=\"line\"><span class=\"attribute\">5</span>. <span class=\"number\">307</span>：temporary redirect，临时重定向，和<span class=\"number\">302</span>类似，但是期望客户端保持请求方法不变，向新的地址发出请求</span><br></pre></td></tr></table></figure>\n<p>（3）4xx（客户端错误）</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">400</span>：bad request，请求报文存在语法错误</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">401</span>：unauthorized，表示发送的请求需要有http认证的认证信息</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">403</span>：forbidden，表示对请求资源的访问被服务器拒绝</span><br><span class=\"line\"><span class=\"attribute\">4</span>. <span class=\"number\">404</span>：not found，表示在服务器上没有找到请求的资源</span><br></pre></td></tr></table></figure>\n<p>（4）5xx（服务器错误）</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">1</span>. <span class=\"number\">500</span>：internal server error，表示服务器端在执行请求时发生了错误</span><br><span class=\"line\"><span class=\"attribute\">2</span>. <span class=\"number\">501</span>：not implemented，表示服务器不支持当前请求所需要的某个功能</span><br><span class=\"line\"><span class=\"attribute\">3</span>. <span class=\"number\">503</span>：service unavailable，表示服务器暂时处于超负载或正在停机维护，无法处理请求</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33、session和cookie的区别\"><a href=\"#33、session和cookie的区别\" class=\"headerlink\" title=\"33、session和cookie的区别\"></a>33、session和cookie的区别</h3><p>（1）<code>cookie</code>：就是存储在浏览器的一小段信息，以键值对形式存储，存的都是字符串。<br>特点：  </p>\n<ol>\n<li>以key-value键值对形式存储；  </li>\n<li>cookie由服务器产生，通过response返回，浏览器保存（cookie服务器产生，浏览器保存，下次请求路径是在header中携带cookie）；  </li>\n<li>cookie有大小限制4K；  </li>\n<li>cookie有时间限制，默认30分钟；  </li>\n<li>cookie不能存储敏感信息，例如密码。</li>\n</ol>\n<p>（2）<code>session</code>：就是会话（同一个浏览器请求同一个服务器，无论打开多少个窗口，这些窗口都共享一个会话），会话就是浏览器和服务器保存链接的一种形式，主要作用就是记录用户的状态，记录用户相关的信息。<br>特点：  </p>\n<ol>\n<li>存储在服务器端；  </li>\n<li>以键值对存储，值可以是任何值；  </li>\n<li>会话也有时间限制（如果用户长时间没有访问，则会话会自动删除）；  </li>\n<li>浏览器关闭，会话结束，如果重新打开浏览器，则是新会话；  </li>\n<li>session的安全性相对较高。</li>\n</ol>\n<h3 id=\"34、转发和重定向\"><a href=\"#34、转发和重定向\" class=\"headerlink\" title=\"34、转发和重定向\"></a>34、转发和重定向</h3><p>（1）<code>重定向</code>  </p>\n<ol>\n<li>浏览器行为；  </li>\n<li>浏览器做了2次请求；  </li>\n<li>上次请求的request对象会丢失；  </li>\n<li>url发生改变；  </li>\n<li>可以是任意的网络资源。</li>\n</ol>\n<p>（2）<code>转发</code>  </p>\n<ol>\n<li>服务器行为；  </li>\n<li>浏览器只做了一次行为；  </li>\n<li>转发带有用户的HttpServletRequest；  </li>\n<li>url没有变化；  </li>\n<li>只能在当前项目进行，不能到网络资源。</li>\n</ol>\n<h3 id=\"35、servlet的生命周期\"><a href=\"#35、servlet的生命周期\" class=\"headerlink\" title=\"35、servlet的生命周期\"></a>35、<code>servlet</code>的生命周期</h3><p>每个servlet只会创建一个对象，第一次请求servlet时，对象会创建，并执行<code>init()</code>方法，后续每次请求servlet，只会调用它的服务方法<code>dopost()</code>方法、<code>doget()</code>方法、<code>service()</code>方法等，tomcat关闭，会销毁servlet对象。  </p>\n<h3 id=\"36、tomcat容器如何创建servlet实例\"><a href=\"#36、tomcat容器如何创建servlet实例\" class=\"headerlink\" title=\"36、tomcat容器如何创建servlet实例\"></a>36、<code>tomcat</code>容器如何创建<code>servlet</code>实例</h3><p>（1）先到缓存中寻找有没有这个对象；  </p>\n<ol>\n<li>如果没有，就通过反射去创建相应的对象（执行构造方法）；  </li>\n<li>tomcat会把对象存放到缓存中；  </li>\n<li>执行初始化方法<code>init()</code>；  </li>\n<li>如果有，直接获取到这个对象；</li>\n</ol>\n<p>（2）执行服务方法；<br>（3）返回响应的数据到客户端（浏览器）。  </p>\n<h3 id=\"37、什么是xss攻击，如何避免？\"><a href=\"#37、什么是xss攻击，如何避免？\" class=\"headerlink\" title=\"37、什么是xss攻击，如何避免？\"></a>37、什么是<code>xss</code>攻击，如何避免？</h3><p>（1）<code>xss</code>攻击<br>就是<code>跨站脚本攻击</code>，它是web程序中常见的漏洞。原理是攻击者往web页面里插入恶意的脚本代码（<code>css</code>代码、<code>javascript</code>代码），当用户浏览该页面时，嵌入其中的脚本代码会被执行，从而达到恶意攻击用户的目的，如盗取用户cookie、破坏页面结构、重定向到其他网站等。<br>（2）避免方法<br>预防xss的核心是必须对输入的数据做过滤处理。  </p>\n<h3 id=\"38、什么是csrf攻击，如何避免？\"><a href=\"#38、什么是csrf攻击，如何避免？\" class=\"headerlink\" title=\"38、什么是csrf攻击，如何避免？\"></a>38、什么是<code>csrf</code>攻击，如何避免？</h3><p>（1）<code>csrf</code>攻击（Cross-Site Request Forgery）<br>就是<code>跨站请求伪造</code>，可以理解为攻击者盗用了你的身份，以你的名义发送恶意请求，比如：以你的名义发送邮件、发消息、购买商品，虚拟货币转账等。<br>（2）避免方法<br>验证请求来源地址，关键操作添加验证码，在请求地址添加token并验证。  </p>\n<h3 id=\"39、拦截器Interceptor和过滤器Filter的区别\"><a href=\"#39、拦截器Interceptor和过滤器Filter的区别\" class=\"headerlink\" title=\"39、拦截器Interceptor和过滤器Filter的区别\"></a>39、拦截器<code>Interceptor</code>和过滤器<code>Filter</code>的区别</h3><p>（1）<code>拦截器</code>是spring中的，只能作用于DispatcherServlet，<code>过滤器</code>是servlet的；<br>（2）<code>拦截器</code>基于Java反射机制，<code>过滤器</code>基于函数回调；<br>（3）<code>拦截器</code>只对action请求起作用，<code>过滤器</code>几乎所有请求都起作用；<br>（4）<code>拦截器</code>可以多次被调用，<code>过滤器</code>只能在初始化的时候被调用一次。  </p>\n<h3 id=\"40、Mybatis的理解\"><a href=\"#40、Mybatis的理解\" class=\"headerlink\" title=\"40、Mybatis的理解\"></a>40、<code>Mybatis</code>的理解</h3><p>（1）<code>Mybatis</code>是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程，程序员直接编写原生态SQL，可以严格控制SQL执行性能，灵活度高；<br>（2）<code>Mybatis</code>可以使用XML或注解来配置和映射原生信息，将pojo映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集；<br>（3）通过XML文件或注解的方式将要执行的各种statement配置起来，并通过Java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为Java对象并返回。  </p>\n<h3 id=\"41、-和-的区别\"><a href=\"#41、-和-的区别\" class=\"headerlink\" title=\"41、#{}和${}的区别\"></a>41、<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>的区别</h3><p>（1）<code>#&#123;&#125;</code><br><code>#&#123;&#125;</code>是sql的参数占位符，Mybatis会将sql中的<code>#&#123;&#125;</code>替换为<code>?</code>号，在sql执行前会使用<code>PreparedStatement</code>的参数设置方法，按序给sql的<code>?</code>号占位符设置参数。<br>（2）<code>$&#123;&#125;</code><br><code>$&#123;&#125;</code>是<code>Properties</code>文件中的变量占位符，它可以用于标签属性值和sql内部，例如：<code>$&#123;driver&#125;</code>会被替换为<code>com.mysql.jdbc.Driver</code>。  </p>\n<h3 id=\"42、Mybatis如何传递多个参数\"><a href=\"#42、Mybatis如何传递多个参数\" class=\"headerlink\" title=\"42、Mybatis如何传递多个参数\"></a>42、<code>Mybatis</code>如何传递多个参数</h3><p>（1）若Dao层函数有多个参数，那么其对应的xml中，<code>#&#123;0&#125;</code>代表接收的是第一个参数，<code>#&#123;1&#125;</code>代表第二个，以此类推；<br>（2）使用<code>@Param</code>注解，在Dao层方法的参数前加<code>@Param</code>注解，注解内的参数名和<code>#&#123;&#125;</code>中的保持一致；<br>（3）多个参数封装成map，以HashMap的形式传递到mapper中。  </p>\n<h3 id=\"43、加密技术\"><a href=\"#43、加密技术\" class=\"headerlink\" title=\"43、加密技术\"></a>43、加密技术</h3><p>1、对称加密技术（私人密钥加密）<br>文件加密和解密使用相同的密钥。<br><strong>常见的对称加密技术</strong>：<br>（1）数据加密标准算法<code>DES</code><br>主要采用替换和移位的方法加密，用56位密钥对64位二进制数据块进行加密，每次加密可对64位的输入数据进行16轮编码，经一系列替换和移位后，输入的64位原始数据转换成完全不同的64位输出数据。<br>特点：<code>DES算法速度快，密钥生产容易</code>。<br>（2）三重DES<code>3DES</code>或<code>TDEA</code><br>在DES的基础上采用三重DES，即用两个56位的密钥K1和K2，发送方用K1加密，K2解密，再使用K1加密；接收方则使用K1解密，K2加密，再使用K1解密。<br>（3）RC-5<br>（4）国际数据加密算法<code>IDEA</code><br>类似于三重DES，IDEA的密钥是128位。<br>（5）高级加密标准算法<code>AES</code><br>基于排列和置换运算，排列是对数据重新进行安排，置换是将一个数据单元替换为另一个，AES使用几种不同的方法来执行排列和置换运算。<br>AES是一个迭代、对称密钥分组的密码，它可以使用128、192和256位密钥，并且用128位（16字节）分组加密和解密数据。  </p>\n<p>2、非对称加密技术（两个密钥：公开密钥<code>Publickey</code>和私有密钥<code>Privatekey</code>）<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。  </p>\n<img src=\"/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png\" class=\"\">  \n<img src=\"/2024/07/24/Java-Thinking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png\" class=\"\">  \n<p>说明：甲方生成一对密钥并将其中的一把作为公用密钥向其他方公开，得到该公开密钥的乙方使用该密钥对信息进行加密后再发送给甲方，甲方用自己保存的私有密钥对密文解密。<br>注意：加密和解密花费时间长，速度慢，不适于对文件加密，只适用于对少量数据加密。<br>常用的有：RSA。  </p>\n<h3 id=\"44、认证技术\"><a href=\"#44、认证技术\" class=\"headerlink\" title=\"44、认证技术\"></a>44、认证技术</h3><p>主要解决网络通信过程中通信双方的身份认可。<br>1、信息摘要<code>MD5</code><br>描述了一份较长的信息或文件，它可以被看作一份长文件的“数字指纹”。信息摘要用于创建数字签名，对于特定的文件而言，信息摘要是唯一的，可以被公开的。<br><code>MD5</code>以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。  </p>\n<p>2、数字签名<br>一对多，任何拥有发送放公开密钥的人都可以验证数字签名的正确性。<br>（1）信息发送者使用一个单向散列函数（Hash函数）对信息生成<code>信息摘要</code>；<br>（2）信息发送者使用自己的<code>私钥</code>加密<code>信息摘要</code>，生成<code>数字签名</code>；<br>（3）信息发送者把信息本身（原始信息）和<code>数字签名</code>一起发送出去；<br>（4）信息接收者通过使用与信息发送者使用的同一个单向散列函数（Hash函数）对接收的信息本身生成新的<code>信息摘要</code>，再使用信息发送者的公钥对接收到的<code>数字签名</code>进行解密，然后将解密得到的<code>信息摘要</code>和刚才生成的新<code>信息摘要</code>作对比，以确认信息发送者的身份和信息是否被修改。<br>注意：签名一般指用自己的私钥对数据进行加密！！！  </p>\n<p>3、数字加密<br>多对一，任何知道接收方公开密钥的人都可以向接收方发送加密信息。<br>（1）当信息发送者需要发送信息时，首先生成一个<code>对称密钥</code>，用该<code>对称密钥</code>加密要发送的报文；<br>（2）信息发送者用信息接收者的<code>公钥</code>加密上述<code>对称密钥</code>；<br>（3）信息发送者将第（1）步和第（2）步的结果结合在一起传给信息接收者，称为<code>数字信封</code>；<br>（4）信息接收者使用自己的<code>私钥</code>解密被加密的<code>对称密钥</code>，再用此<code>对称密钥</code>解密被发送方加密的密文，得到真正的报文。  </p>\n<h3 id=\"45、排序算法\"><a href=\"#45、排序算法\" class=\"headerlink\" title=\"45、排序算法\"></a>45、排序算法</h3><p>1、直接插入排序<br>前提已经按顺序排序好了，然后将要插入的记录的关键字ki依次与关键字ki-1、ki-2进行比较，找到应该插入的位置。  </p>\n<p>2、冒泡排序<br>首先将第一个记录的关键字和第二个记录的关键字进行比较，若为逆序，则交换两个记录的值，然后比较第二个记录和第三个记录的关键字。  </p>\n<p>3、简单选择排序（不稳定）<br>顺序扫描序列中的元素，记住遇到的最小元素（一次扫描完毕就找到了一个最小的元素，反复扫描就能完成排序工作）。  </p>\n<p>4、快速排序<br>通过一趟排序划分为两个部分，第一部分小于第二部分。<br>设i和j，分别为第一个和最后一个，设判断记录（一般是第一个）为pivot，首先从j所指位置向前比较，小于pivot的元素就将该位置的数移到i处，然后从i处向后比较，如此重复。  </p>\n<h3 id=\"46、SQL语句执行顺序\"><a href=\"#46、SQL语句执行顺序\" class=\"headerlink\" title=\"46、SQL语句执行顺序\"></a>46、SQL语句执行顺序</h3><p><code>select</code>、<code>from</code>、<code>where</code>、<code>group by</code>、<code>having</code>、<code>order by</code>。<br>注意：<br>1、<code>where</code>后面的使用：<br>（1）<code>in</code>：在集合中，<code>where id in (...)</code>；<br>（2）<code>not in</code>：不在集合中，<code>where id not in (...)</code>；<br>（3）<code>like</code>：与<code>_</code>和<code>%</code>进行单个和多个字符匹配，<code>where name like &#39;_明&#39;</code>查询名为明的姓名；<br><code>like</code>也可与<code>escape</code>关键字（定义转义符）搭配使用：  </p>\n<ol>\n<li><code>like &#39;ab\\%cd%&#39; escape &#39;\\&#39;</code>：匹配所有以<code>ab%cd</code>开头的字符串。  </li>\n<li><code>like &#39;ab\\\\cd%&#39; escape &#39;\\&#39;</code>：匹配所有以<code>ab\\cd</code>开头的字符串。</li>\n</ol>\n<p>（4）<code>is null</code>：为空，<code>where name is null</code>；<br>（5）<code>is not null</code>：不为空，<code>where name is not null</code>；<br>（6）<code>and</code>：与，<code>where name is not null and age &gt; 18</code>；<br>（7）<code>or</code>：或，<code>where name is not null or age &gt; 18</code>；<br>（8）<code>not</code>：非，<code>where not (name is not null and age &gt; 18)</code>；<br>（9）<code>between</code>：在两个数之间，<code>where age between 18 and 20</code>。  </p>\n<h3 id=\"47、SQL语句谓词使用\"><a href=\"#47、SQL语句谓词使用\" class=\"headerlink\" title=\"47、SQL语句谓词使用\"></a>47、SQL语句谓词使用</h3><p>1、<code>ALL</code>：&gt; ALL，大于子查询结果中的所有值。<br>2、<code>ANY</code>：&gt; ANY，大于子查询结果中的某个值。<br>例一：查询其他系比计算机系CS，所有学生年龄都要小的学生姓名及年龄。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sd：系；<span class=\"operator\">&lt;&gt;</span>：不等于</span><br><span class=\"line\"><span class=\"keyword\">select</span> name, age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"keyword\">all</span>(<span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sd <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span>) <span class=\"keyword\">and</span> sd <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>例二：查询其他系比计算机系某一学生年龄小的学生姓名及年龄。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name, age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"keyword\">any</span>(<span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sd <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span>) <span class=\"keyword\">and</span> sd <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"48、数据库常见问题\"><a href=\"#48、数据库常见问题\" class=\"headerlink\" title=\"48、数据库常见问题\"></a>48、数据库常见问题</h3><p>1、事务<br>用户对数据库进行的一系列操作。  </p>\n<p>2、丢失修改<br>两个事务T1、T2，T1在t1时读取了A值为16，T2在t2时读取了A值也为16，t3时，T1执行了16-1&#x3D;15，把15存入数据库，完成了事务，而t4时，T2也执行了16-1&#x3D;15的操作并也存入数据库完成事务，事务T1的结果被覆盖丢失了。  </p>\n<p>3、不可重复读<br>两个事务T1、T2，事务T1读取了A、B的值为50、100，执行A+B&#x3D;150，事务T1还没完成的情况下，事务T2修改了B的值为200存入数据库，之后事务T1再次执行A+B操作，两次相同的执行，结果不一样。  </p>\n<p>4、幻读<br>两个事务T1、T2，T1去查询工资为1000的，比如查出来5人，在事务T1还没有完成的情况下，事务T2插入了一条工资为1000的记录，之后事务T1再次查询却变成6人。  </p>\n<p>5、脏读<br>两个事务T1、T2，事务T1修改了A值，并存入数据库，之后事务T2读取了事务T1修改之后的A值并做了一系列操作，这时，事务T1回滚了，那事务T2做的操作就无效了。  </p>\n<h3 id=\"49、数据库的锁\"><a href=\"#49、数据库的锁\" class=\"headerlink\" title=\"49、数据库的锁\"></a>49、数据库的锁</h3><p>1、封锁（并发控制的主要技术）<br>（1）排它锁（X锁或写锁）<br>若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他事务不能再对A加任何类型的锁，直到T释放A上的锁。<br>（2）共享锁（S锁或读锁）<br>若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其他事务只能再对A加S锁，直到T释放A上的锁。<br>保证了其他事务可以读A，但再T释放A上的锁之前不能修改A。  </p>\n<p>2、活锁<br>事务T1封锁了数据A时，事务T2请求封锁数据A，于是事务T2等待，当T1释放了A上的锁后，系统首先批准了T3请求，于是T2继续等待，同理批准了T4、T5…，T2永远都在等待。  </p>\n<p>3、死锁<br>两个事务以上分别请求封锁对方已经封锁的数据，导致长期等待。  </p>\n<h3 id=\"50、三级封锁协议\"><a href=\"#50、三级封锁协议\" class=\"headerlink\" title=\"50、三级封锁协议\"></a>50、三级封锁协议</h3><p>1、一级封锁协议（解决丢失修改）<br>事务在修改数据之前，必须先对其加上X锁，直到事务结束才释放。  </p>\n<p>2、二级封锁协议（解决脏读，不能解决不可重复读，因为它读完就释放）<br>在一级的基础上，加上事务在读数据之前，必须先对其加上S锁，读完后释放。  </p>\n<p>3、三级封锁协议（都解决了）<br>在一级的基础上，加上事务在读数据之前，必须先加上S锁，知道事务结束再释放。  </p>\n<h3 id=\"51、数据库三大范式\"><a href=\"#51、数据库三大范式\" class=\"headerlink\" title=\"51、数据库三大范式\"></a>51、数据库三大范式</h3><p>1、解释<code>候选码</code>、<code>主码</code>、<code>主属性</code><br>（1）候选码：某一属性或属性组的值能唯一标识一个元组，则该属性或属性组为候选码。<br>（2）主码：有多个候选码，则选定其中一个为主码。<br>（3）主属性：包含在任何候选码中的属性。  </p>\n<p>2、第一范式（1NF）<br>数据表中每一个字段都不可再分。  </p>\n<p>3、第二范式（2NF）<br>在满足第一范式的基础上，还要满足所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分。<br>例如：在成绩表（学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，学号或课程号都不能单独决定成绩，所以（学号，课程号）-&gt; 成绩完全依赖。<br>又例如：比赛表里面（球员编号，姓名，年龄，比赛编号，比赛时间，比赛场地），候选键和主键都是（球员编号，比赛编号），（球员编号，比赛编号）-&gt;（姓名，年龄，比赛时间，比赛场地）显然不满足2NF，因为：（球员编号）-&gt;（姓名，年龄），（比赛编号）-&gt;（比赛时间，比赛场地），这样会产生很多问题：比如一个球员参加了n场比赛，那么该球员的姓名和年龄就重复很多次了。  </p>\n<p>4、第三范式（3FN）<br>在满足第二范式的基础上，满足所有非主键字段都直接和主键相关，都互相独立。  </p>\n","categories":[{"name":"书本知识","path":"api/categories/书本知识.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"书本知识","path":"api/tags/书本知识.json"}]}