{"title":"Git 学习笔记","slug":"Git","date":"2023-09-25T09:52:33.000Z","updated":"2024-07-12T07:43:37.559Z","comments":true,"path":"api/articles/Git.json","realPath":null,"excerpt":null,"covers":["/2023/09/25/Git/1.jpg","/2023/09/25/Git/2.jpg","/2023/09/25/Git/3.jpg","/2023/09/25/Git/4.png","/2023/09/25/Git/5.jpg","/2023/09/25/Git/6.jpg","/2023/09/25/Git/Git8.jpg","/2023/09/25/Git/Git9.jpg","/2023/09/25/Git/Git10.jpg","/2023/09/25/Git/Git11.jpg","/2023/09/25/Git/Git12.jpg","/2023/09/25/Git/Git13.jpg","/2023/09/25/Git/7.jpg","/2023/09/25/Git/Git14.jpg"],"cover":null,"content":"<hr>\n<h1 id=\"一、图标含义\"><a href=\"#一、图标含义\" class=\"headerlink\" title=\"一、图标含义\"></a>一、图标含义</h1><h3 id=\"1、简单说明\"><a href=\"#1、简单说明\" class=\"headerlink\" title=\"1、简单说明\"></a>1、简单说明</h3><p>（1）<a href=\"https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u\">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>\n<h3 id=\"2、日常更新上传的步骤：\"><a href=\"#2、日常更新上传的步骤：\" class=\"headerlink\" title=\"2、日常更新上传的步骤：\"></a>2、日常更新上传的步骤：</h3><ul>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"3、关于IDEA集成字体颜色\"><a href=\"#3、关于IDEA集成字体颜色\" class=\"headerlink\" title=\"3、关于IDEA集成字体颜色\"></a>3、关于IDEA集成字体颜色</h3><ul>\n<li><span style=\"color:green\">绿色</span>，已经加入控制暂未提交</li>\n<li><span style=\"color:red\">红色</span>，未加入版本控制</li>\n<li><span style=\"color:blue\">蓝色</span>，加入，已提交，有改动</li>\n<li>白色，加入，已提交，无改动</li>\n<li><span style=\"color:#cccccc\">灰色</span>，版本控制已忽略文件</li>\n</ul>\n<h3 id=\"4、分支说明：\"><a href=\"#4、分支说明：\" class=\"headerlink\" title=\"4、分支说明：\"></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。  </p>\n<img src=\"/2023/09/25/Git/1.jpg\" class=\"\">  \n<p>（1）分支：使用分支意味着你把工作从开发主线上分离出来，避免影响开发主线，多线程开发，可以同时开启多个人物的开发，多个任务之间互不影响；<br>（2）master主分支（主干）：永远存放可用的稳定版本，不推荐直接在<code>master</code>分支上开发，防止多个程序员在编写不同的功能模块时，其中一个程序员模块出现问题导致其他人的功能模块在版本回退时受到影响；  </p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Git-常用命令\"><a href=\"#二、Git-常用命令\" class=\"headerlink\" title=\"二、Git 常用命令\"></a>二、Git 常用命令</h1><h3 id=\"1、设置全局变量\"><a href=\"#1、设置全局变量\" class=\"headerlink\" title=\"1、设置全局变量\"></a>1、设置全局变量</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置系统级别，对应整个计算机，文件在 D:\\Git\\mingw64\\etc\\.gitconfig（64位机）</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置用户级别，对应着Windows用户，文件在 C:\\Users\\我的用户\\.gitconfig</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.name</span> <span class=\"string\">&quot;zjy&quot;</span> <span class=\"comment\">// 这个和账号没关系，只是一个用户签名</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.email</span> <span class=\"string\">&quot;xxxx@qq.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置项目级别</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">local</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、常用操作\"><a href=\"#2、常用操作\" class=\"headerlink\" title=\"2、常用操作\"></a>2、常用操作</h3><h6 id=\"（1）初始化（git-init）\"><a href=\"#（1）初始化（git-init）\" class=\"headerlink\" title=\"（1）初始化（git init）\"></a>（1）初始化（git init）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）下载项目（git-clone）\"><a href=\"#（2）下载项目（git-clone）\" class=\"headerlink\" title=\"（2）下载项目（git clone）\"></a>（2）下载项目（git clone）</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 【url】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）查看所有提交跟踪状态（git-status）\"><a href=\"#（3）查看所有提交跟踪状态（git-status）\" class=\"headerlink\" title=\"（3）查看所有提交跟踪状态（git status）\"></a>（3）查看所有提交跟踪状态（git status）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\">// 单个文件查看</span><br><span class=\"line\">git status 文件名</span><br></pre></td></tr></table></figure>\n<h6 id=\"（4）加入到暂存区（git-add）\"><a href=\"#（4）加入到暂存区（git-add）\" class=\"headerlink\" title=\"（4）加入到暂存区（git add）\"></a>（4）加入到暂存区（git add）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加所有文件到暂存区</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<h6 id=\"（5）提交暂存区的文件到本地仓库（git-commit）\"><a href=\"#（5）提交暂存区的文件到本地仓库（git-commit）\" class=\"headerlink\" title=\"（5）提交暂存区的文件到本地仓库（git commit）\"></a>（5）提交暂存区的文件到本地仓库（git commit）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 【提交的备注信息】</span><br><span class=\"line\"></span><br><span class=\"line\">// add和commit一起执行，第一次提交的时候不能用</span><br><span class=\"line\">git commit -am 【提交的备注信息】</span><br><span class=\"line\"></span><br><span class=\"line\">// 只修改提交注释</span><br><span class=\"line\">git commit --amend -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（6）创建公钥密钥\"><a href=\"#（6）创建公钥密钥\" class=\"headerlink\" title=\"（6）创建公钥密钥\"></a>（6）创建公钥密钥</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（7）列出所有分支（git-branch）\"><a href=\"#（7）列出所有分支（git-branch）\" class=\"headerlink\" title=\"（7）列出所有分支（git branch）\"></a>（7）列出所有分支（git branch）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 列出所有本地分支 </span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有本地分支和分支信息</span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有本地分支和追踪分支：origin/master（追踪分支）</span><br><span class=\"line\">git branch -av</span><br></pre></td></tr></table></figure>\n<h6 id=\"（8）分支重命名（git-branch-m）\"><a href=\"#（8）分支重命名（git-branch-m）\" class=\"headerlink\" title=\"（8）分支重命名（git branch -m）\"></a>（8）分支重命名（git branch -m）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 分支重命名</span><br><span class=\"line\">git branch -m 【旧的分支名】 【新的分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（9）新建一个分支，但依然停留在当前分支\"><a href=\"#（9）新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"（9）新建一个分支，但依然停留在当前分支\"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（10）新建一个分支，并切换到该分支\"><a href=\"#（10）新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"（10）新建一个分支，并切换到该分支\"></a>（10）新建一个分支，并切换到该分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\">// 远程有dev分支，本地没有，已经使用git pull命令将dev分支拉到追踪分支（origin/dev），但是本地还没有dev分支，需要执行下面命令</span><br><span class=\"line\">git checkout -b dev origin/dev // 说明：在本地创建一个dev分支，并切换到dev分支，并把dev分支和追踪分支关联</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建本地分支，并将他关联到远程同名分支，用于本地分支名和远程分支名不一致</span><br><span class=\"line\">git checkout --track origin/branch_name  </span><br></pre></td></tr></table></figure>\n<h6 id=\"（11）切换分支（git-checkout）\"><a href=\"#（11）切换分支（git-checkout）\" class=\"headerlink\" title=\"（11）切换分支（git checkout）\"></a>（11）切换分支（git checkout）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 只切换分支</span><br><span class=\"line\">git checkout 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）合并指定分支到当前分支\"><a href=\"#（12）合并指定分支到当前分支\" class=\"headerlink\" title=\"（12）合并指定分支到当前分支\"></a>（12）合并指定分支到当前分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在分支1使用该命令，分支2合并到分支1</span><br><span class=\"line\">// 例如：在分支1使用，git merge 分支2，将分支2合并到分支1</span><br><span class=\"line\">git merge 【要合并的分支名字】（默认是不使用--no-ff模式）</span><br><span class=\"line\">/* 说明：  </span><br><span class=\"line\"> * 1、--no-ff模式：有两个分支dev、test，两个分支提交点都是一样的，dev开发，提交了两次，这样就比test多了两个提交，使用--no-ff模式将dev合并到test，在test分支上使用git merge dev --no-ff，首先test分支会在dev分支最新节点前新建一个新的节点，然后再将test的head指针指向这个节点（注意：此时dev分支最新节点和此节点中间没有箭头或者线条连接，相当于dev还未合并到test，需要在dev分支在执行git merge test）；  </span><br><span class=\"line\"> * 2、默认模式：dev合并到test，在test分支上使用git merge dev，直接将test的head指针指向dev最新的节点；  </span><br><span class=\"line\"> * 3、两个模式的区别：相当于--no-ff模式比默认模式多了一个节点，并且--no-ff模式需要执行两次合并才是真正合并。  </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">// 在分支1使用该命令，将分支1合并到分支2（将自己写的代码提到最前面）</span><br><span class=\"line\">// 例如：在分支1使用，git rebase 分支2，将分支1合并到分支2</span><br><span class=\"line\">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）删除分支\"><a href=\"#（12）删除分支\" class=\"headerlink\" title=\"（12）删除分支\"></a>（12）删除分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除远程分支方法一：git push origin --delete dev（删除远程dev分支）</span><br><span class=\"line\">git push origin --delete 【分支名字】</span><br><span class=\"line\">// 删除远程分支方法二：git branch -dr origin/dev（删除远程dev分支），origin指代远程</span><br><span class=\"line\">git branch -dr 【remote/branch】</span><br><span class=\"line\">// 删除远程分支方法三：git push origin :dev（删除远程dev分支）</span><br><span class=\"line\">git push origin :【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（13）强制移动HEAD\"><a href=\"#（13）强制移动HEAD\" class=\"headerlink\" title=\"（13）强制移动HEAD\"></a>（13）强制移动HEAD</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将master向上移动3个节点</span><br><span class=\"line\">git branch -f master HEAD~3</span><br></pre></td></tr></table></figure>\n<h6 id=\"（14）查看日志信息\"><a href=\"#（14）查看日志信息\" class=\"headerlink\" title=\"（14）查看日志信息\"></a>（14）查看日志信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h6 id=\"（15）查看详细信息\"><a href=\"#（15）查看详细信息\" class=\"headerlink\" title=\"（15）查看详细信息\"></a>（15）查看详细信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\">// 图形界面</span><br><span class=\"line\">git log --graph</span><br><span class=\"line\"></span><br><span class=\"line\">// 信息更详细简略</span><br><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n<h6 id=\"（16）回退到某个版本\"><a href=\"#（16）回退到某个版本\" class=\"headerlink\" title=\"（16）回退到某个版本\"></a>（16）回退到某个版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 版本号从日志信息里查看</span><br><span class=\"line\">git reset --hard 【版本号（sha1值）】</span><br><span class=\"line\"></span><br><span class=\"line\">// 回退到上个版本</span><br><span class=\"line\">git reset --hard HEAD^（也可以 git reset --hard HEAD~1）</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过sha1值回退，先git log查看sha1值</span><br><span class=\"line\">git reset --hard HEAD 【sha1值】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（17）查看远程库所有别名\"><a href=\"#（17）查看远程库所有别名\" class=\"headerlink\" title=\"（17）查看远程库所有别名\"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h6 id=\"（18）将本地项目与远程仓库建立连接\"><a href=\"#（18）将本地项目与远程仓库建立连接\" class=\"headerlink\" title=\"（18）将本地项目与远程仓库建立连接\"></a>（18）将本地项目与远程仓库建立连接</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 【远程仓库地址】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（19）推送本地库的代码到远程库\"><a href=\"#（19）推送本地库的代码到远程库\" class=\"headerlink\" title=\"（19）推送本地库的代码到远程库\"></a>（19）推送本地库的代码到远程库</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push （别名） 【分支名】</span><br><span class=\"line\"></span><br><span class=\"line\">// 在本地dev分支，远程没有dev分支，需要将本地dev分支推送到远程，说明：origin dev表示远程的dev；</span><br><span class=\"line\">git push -u origin dev</span><br><span class=\"line\">git push --set-upstream origin dev // 也可以用这个</span><br></pre></td></tr></table></figure>\n<h6 id=\"（20）拉取远程库的代码到本地库\"><a href=\"#（20）拉取远程库的代码到本地库\" class=\"headerlink\" title=\"（20）拉取远程库的代码到本地库\"></a>（20）拉取远程库的代码到本地库</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull （别名） 【分支名】</span><br><span class=\"line\"></span><br><span class=\"line\">// 将远程origin的dev分支拉取到本地dev分支：git pull origin dev:dev，如果远程分支名和本地分支名相同，可以省略为：git pull origin dev</span><br><span class=\"line\">git pull 【远程主机名（origin）】 【远程分支名】:【本地分支名】// 相当于 git pull + git checkout -b 【本地分支名】 【远程主机名（origin）】/【远程分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（21）添加别名\"><a href=\"#（21）添加别名\" class=\"headerlink\" title=\"（21）添加别名\"></a>（21）添加别名</h6><p>说明：添加别名后，clone的时候就不用赋值https或者ssh链接来下载，直接使用别名。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看所有别名</span><br><span class=\"line\">git remote -v </span><br><span class=\"line\"></span><br><span class=\"line\">// 添加别名</span><br><span class=\"line\">git remote add 【别名】 【链接地址】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（22）临时保存（暂存）\"><a href=\"#（22）临时保存（暂存）\" class=\"headerlink\" title=\"（22）临时保存（暂存）\"></a>（22）临时保存（暂存）</h6><p>说明：如果在dev分支上开发的功能还未完成，就突然要求去test分支处理新的需求，此时就需要临时保存dev上的代码。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 临时保存</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看有多少个临时保存点</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果只有一个临时保存点，想要恢复</span><br><span class=\"line\">git stash pop // 将临时保存点删除并还原</span><br><span class=\"line\">git stash apply // 不删除临时保存点并还原，如果执行之后想要删除，就执行：git stash drop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果有多个临时保存点</span><br><span class=\"line\">git stash pop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】// 如果不指定，默认还原最近一次（第一个）</span><br></pre></td></tr></table></figure>\n<h6 id=\"（23）检测无效的追踪分支\"><a href=\"#（23）检测无效的追踪分支\" class=\"headerlink\" title=\"（23）检测无效的追踪分支\"></a>（23）检测无效的追踪分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin --dry-run</span><br></pre></td></tr></table></figure>\n<h6 id=\"（24）删除无效的追踪分支\"><a href=\"#（24）删除无效的追踪分支\" class=\"headerlink\" title=\"（24）删除无效的追踪分支\"></a>（24）删除无效的追踪分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure>\n<h6 id=\"（25）标签\"><a href=\"#（25）标签\" class=\"headerlink\" title=\"（25）标签\"></a>（25）标签</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建标签（简单创建）：git tag v1.0（创建v1.0标签）</span><br><span class=\"line\">git tag 【标签名】</span><br><span class=\"line\">// 创建带有说明的标签（详细创建）</span><br><span class=\"line\">git tag -a v1.0 -m &quot;version 1.0 released&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 推送标签</span><br><span class=\"line\">git push origin v1.0</span><br><span class=\"line\">// 推送标签完成写法，第一个v1.0是远程，第二个是本地</span><br><span class=\"line\">git push origin refs/tags/v1.0:refs/tags/v1.0</span><br><span class=\"line\">// 推送多个标签</span><br><span class=\"line\">git push origin v1.0 v2.0</span><br><span class=\"line\">// 推送所有标签</span><br><span class=\"line\">git push origin --tags</span><br><span class=\"line\"></span><br><span class=\"line\">// 拉取远程所有标签</span><br><span class=\"line\">git fetch origin --tags</span><br><span class=\"line\">// 拉取远程某个标签</span><br><span class=\"line\">git fetch origin tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除本地标签</span><br><span class=\"line\">git tag -d v1.0</span><br><span class=\"line\">// 删除远程标签</span><br><span class=\"line\">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure>\n<h6 id=\"（26）删除远程仓库（不是分支，是仓库！）\"><a href=\"#（26）删除远程仓库（不是分支，是仓库！）\" class=\"headerlink\" title=\"（26）删除远程仓库（不是分支，是仓库！）\"></a>（26）删除远程仓库（不是分支，是仓库！）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 执行这条指令之后，Git就会将已经添加的名为“origin”的远程仓库删除</span><br><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n<h6 id=\"（27）在A项目引入B项目\"><a href=\"#（27）在A项目引入B项目\" class=\"headerlink\" title=\"（27）在A项目引入B项目\"></a>（27）在A项目引入B项目</h6><p>说明：当A项目需要B项目时，传统的做法是将B项目打包成依赖，引入A项目；但是如果B项目还没完成，在编写过程中，不可能每次都打包成依赖放到A项目，这个时候我们需要实时地将B项目引入A项目。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在A项目中执行命令，针对的是本地，远程需要推送之后才会有</span><br><span class=\"line\">git submodule add 【B项目远程仓库的地址】</span><br><span class=\"line\"></span><br><span class=\"line\">// clone一个包含子模块的项目</span><br><span class=\"line\">git clone 【项目地址】 --recurse-submodules</span><br><span class=\"line\">git clone 【项目地址】 --recursive // 也可以</span><br><span class=\"line\">// 忘记加参数的clone</span><br><span class=\"line\">git submodule update --init // 相当于git submodule init + git submodule update</span><br><span class=\"line\">// 要拉取所有层层嵌套的子模块</span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\">// 命令默认拉取主分支（master），想要修改这个默认拉取分支可以修改 .gitmodules 文件中子模块对应的 branch 值，或者执行：</span><br><span class=\"line\">git config submodule.xxx.branch dev // xxx指代仓库名</span><br><span class=\"line\">// 或者执行同时将配置写入文件，这样其他人拉取父项目也会获取该配置：</span><br><span class=\"line\">git config -f .gitmodules submodule.xxx.branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新A项目中引入的B项目</span><br><span class=\"line\">// 方法一：进入A项目中的B项目执行：</span><br><span class=\"line\">git pull</span><br><span class=\"line\">// 方法二：在A项目中执行：</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\">// 方法三：在A项目中执行：</span><br><span class=\"line\">git submodule foreach git pull</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除A项目中的B项目</span><br><span class=\"line\">// 第一步：删除暂存区</span><br><span class=\"line\">git rm --cached B</span><br><span class=\"line\">// 第二步：删除B项目</span><br><span class=\"line\">rm -rf B</span><br><span class=\"line\">// 第三步：删除远程的</span><br><span class=\"line\">git add . // 先执行</span><br><span class=\"line\">git commit -m &quot;delete B&quot; // 再执行</span><br><span class=\"line\">git push // 最后执行</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、git用法图解\"><a href=\"#三、git用法图解\" class=\"headerlink\" title=\"三、git用法图解\"></a>三、git用法图解</h1><img src=\"/2023/09/25/Git/2.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Git流程说明\"><a href=\"#四、Git流程说明\" class=\"headerlink\" title=\"四、Git流程说明\"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"五、Git集成IDEA\"><a href=\"#五、Git集成IDEA\" class=\"headerlink\" title=\"五、Git集成IDEA\"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \\ ”</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[core]</span></span><br><span class=\"line\">    <span class=\"attr\">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>\n<p>2、IDEA配置Git</p>\n<img src=\"/2023/09/25/Git/3.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\"><a href=\"#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\" class=\"headerlink\" title=\"六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes\"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖成a的，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"七、IDEA上面使用Git怎么回退\"><a href=\"#七、IDEA上面使用Git怎么回退\" class=\"headerlink\" title=\"七、IDEA上面使用Git怎么回退\"></a>七、IDEA上面使用Git怎么回退</h1><h3 id=\"1、提交到暂存区\"><a href=\"#1、提交到暂存区\" class=\"headerlink\" title=\"1、提交到暂存区\"></a>1、提交到暂存区</h3><p>说明：将文件<code>add</code>到暂存区，进行版本控制；如果将错误的文件<code>add</code>到暂存区，想要回退，直接右键选中需要回退的文件，点击<code>git</code> -》<code>rollback</code>就可以回退了。</p>\n<h3 id=\"2、提交到本地仓库\"><a href=\"#2、提交到本地仓库\" class=\"headerlink\" title=\"2、提交到本地仓库\"></a>2、提交到本地仓库</h3><p>说明：将暂存区的文件<code>commit</code>到本地仓库，如果提交到本地仓库的文件想要回退：<br>1、使用<code>IDEA</code>操作<br>（1）右键选中需要回退的文件，点击git</p>\n<img src=\"/2023/09/25/Git/4.png\" class=\"\">\n<p>（2）使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>\n<img src=\"/2023/09/25/Git/5.jpg\" class=\"\">\n<p>（3）回退</p>\n<img src=\"/2023/09/25/Git/6.jpg\" class=\"\">\n<p>（4）如远程仓库也需要回退，本地仓库回退之后直接执行<code>git push -f</code>，强制推送远程仓库。<br>2、使用<code>git</code>命令：<br>（1）查看上面第二大点中的回退命令即可；<br>（2）如果回退之后想要撤回：先执行<code>git reflog</code>，查看所有日志，复制要撤回到的sha1值，再执行<code>git reset --hard 【sha1值】</code>进行撤回。</p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"八、Git提交规范（fix、feat等字段含义）\"><a href=\"#八、Git提交规范（fix、feat等字段含义）\" class=\"headerlink\" title=\"八、Git提交规范（fix、feat等字段含义）\"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\"><a href=\"#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\" class=\"headerlink\" title=\"九、git merge和git rebase使用方法（都是针对本地来进行合并的）\"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支<code>master、dev、test</code>：<br>（1）A在<code>dev</code>上开发功能，完成功能开发，先得在<code>dev</code>分支提交开发的功能模块，然后推送到远程服务器，然后<code>git checkout master</code>切换到本地的<code>master</code>分支，使用<code>git merge dev</code>将在<code>dev</code>分支上开发的功能合并到本地的<code>master</code>分支，然后推送到远程服务器；<br>（2）B在本地切换到<code>master</code>分支，更新代码，在本地<code>git checkout test</code>切换到<code>test</code>分支，在使用<code>git rebase master</code>，以刚更新下来的<code>master</code>代码为基准，把<code>test</code>分支上的代码添加到<code>master</code>分支后面，分支还是在<code>test</code>上（实际就是把<code>master</code>分支和<code>test</code>分支所有节点重新排序，把test分支上的节点添加在master分支节点后面，覆盖原来test分支的节点）。<br><strong>再说明：</strong><br>有一个分支<code>master</code>：<br>（1）A、B开发人员分别在<code>master</code>分支上切两个分支：<code>dev、test</code>（此时<code>master、dev、test</code>分支的节点都是一样的；<br>（2）A在<code>dev</code>分支上开发，B在<code>test</code>分支上开发，A和B同时开发；<br>（3）A先开发完成了，先提交代码到远程的<code>dev</code>分支上，然后更新<code>master</code>分支上的代码（保证<code>master</code>分支上的代码是最新的），然后在<code>dev</code>分支上执行<code>git merge master</code>，将<code>master</code>分支合并到<code>dev</code>上，再把<code>dev</code>分支提交到远程的<code>dev</code>分支上，然后请求<code>pull request</code>进行合并（或者将<code>master</code>分支代码更新下来后，在<code>master</code>分支上执行<code>git merge dev</code>，直接将最新的<code>dev</code>分支代码合并到<code>master</code>分支上，然后推送到远程<code>master</code>分支）；<br>（4）B开发完成了，将<code>test</code>分支上的代码推送到远程<code>test</code>分支上，然后更新<code>master</code>分支上的代码，在<code>test</code>分支上执行<code>git rebase master</code>，此时会在<code>test</code>分支上，将<code>test</code>分支上新的提交记录给重新取过来，添加到<code>master</code>分支提交记录后面，然后把新排序好的记录覆盖之前<code>test</code>分支上的记录，此时它会提示再更新<code>test</code>分支或者强制推送，注意再更新时，不要把远程旧的没有更改过的代码覆盖了本地最新的已经修改过的代码）。<br><strong>特别注意：</strong>如果你的分支已经是公开的提交对象，并且已经有人基于你的这些提交对象开展了后续的开发工作，那你之后就不能再使用git rebase了，因为git rebase会破坏掉后续开发人员的提交记录，导致后续开发人员的工作无法进行。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"十、分支的使用\"><a href=\"#十、分支的使用\" class=\"headerlink\" title=\"十、分支的使用\"></a>十、分支的使用</h1><p>1、创建分支</p>\n<img src=\"/2023/09/25/Git/Git8.jpg\" class=\"\">\n<p>2、创建名称</p>\n<img src=\"/2023/09/25/Git/Git9.jpg\" class=\"\">\n<p>3、查看版本分支</p>\n<img src=\"/2023/09/25/Git/Git10.jpg\" class=\"\">\n<p>4、切换分支</p>\n<img src=\"/2023/09/25/Git/Git11.jpg\" class=\"\">\n<p>5、将开发好的分支合并到主分支<br>（1）首先将分支切换到主分支；<br>（2）然后在目录下鼠标右键，按照下图所示选择：</p>\n<img src=\"/2023/09/25/Git/Git12.jpg\" class=\"\">\n<p>6、删除分支<br>说明：当被删分支合并之后被删除，不会影响合并结果。<br>打开查看版本分支（看<code>3、</code>），选中需要删除的分支，右键：</p>\n<img src=\"/2023/09/25/Git/Git13.jpg\" class=\"\">\n\n\n<br/>\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"十一、Git常见的问题\"><a href=\"#十一、Git常见的问题\" class=\"headerlink\" title=\"十一、Git常见的问题\"></a>十一、Git常见的问题</h1><h3 id=\"1、error-remote-origin-already-exists\"><a href=\"#1、error-remote-origin-already-exists\" class=\"headerlink\" title=\"1、error: remote origin already exists.\"></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>\n<h3 id=\"2、怎么将本地仓库和远程仓库关联\"><a href=\"#2、怎么将本地仓库和远程仓库关联\" class=\"headerlink\" title=\"2、怎么将本地仓库和远程仓库关联\"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>\n<img src=\"/2023/09/25/Git/7.jpg\" class=\"\">  \n<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、error-failed-to-push-some-refs-to’xxxx’\"><a href=\"#3、error-failed-to-push-some-refs-to’xxxx’\" class=\"headerlink\" title=\"3、error: failed to push some refs to’xxxx’\"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>\n<ol>\n<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>\n<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>\n</ol>\n<h3 id=\"4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\"><a href=\"#4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\" class=\"headerlink\" title=\"4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\"></a>4、Hexo主题themes-文件夹无法提交到GitHub的解决方法</h3><p><strong>说明：</strong>因为themes&#x2F;zhaoo也是从仓库里拉取下来的 他关联到了作者的git仓库所以提交不上去。<br><strong>解决办法：</strong><br>（1）将<code>.git</code>文件夹删除或者移动到别的地方；<br>（2）进入到themes文件夹下，执行命令<code>git rm --cache 主题文件名</code>，从暂存区删除该文件夹；<br>比如：我的主题名为：zhaoo，我就在themes目录下执行<code>git rm --cache zhaoo</code>。<br>（3）然后执行命令：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add themes&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>（4）如果<code>.git</code>文件夹没有删除就移回去。  </p>\n<h3 id=\"5、git提交错了？别慌，直接删除提交记录\"><a href=\"#5、git提交错了？别慌，直接删除提交记录\" class=\"headerlink\" title=\"5、git提交错了？别慌，直接删除提交记录\"></a>5、git提交错了？别慌，直接删除提交记录</h3><p>1、场景<br>不小心将错误代码或者错误的信息提交到了远程仓库，想要删除这条提交记录以及历史记录。<br>2、说明<br><code>git revert</code>和<code>git reset</code>这两个命令都有撤销操作。<br>3、使用<code>git revert</code>撤销提交<br>用于撤销一个或多个提交，但是会保留历史提交记录。<br>（1）语法<br><code>git revert &lt;commit-hash&gt;</code>：撤销单个提交（这会创建一个新的提交，用于撤销指定的提交的更改）。<br><code>git revert &lt;commit-hash1&gt; &lt;commit-hash2&gt;...</code>：撤销多个提交。<br><code>git revert HEAD</code>：撤销最近的提交。<br><code>git revert &lt;commit-hash1&gt;^..&lt;commit-hash2&gt;</code>：撤销某个范围内的提交（这会撤销从不包括到包括范围内的所有提交）。<br>（2）实操  </p>\n<ul>\n<li>先用<code>git log</code>查看提交记录，找到要撤销的提交记录的commit-hash，然后执行<code>git revert &lt;commit-hash&gt;</code>，例如：<code>b1b56b50a0859556623283946972e495d4a42fc1</code>；  </li>\n<li>然后，执行单个文件撤销命令<code>git revert b1b56b50a0859556623283946972e495d4a42fc1</code>或者直接执行<code>git revert HEAD</code>，撤销最近的一次提交；  </li>\n<li>执行命令后，会让我们为本次更改提交说明；  </li>\n<li>执行成功后，代码内容已经回退了，但是git的推送历史记录还是存在。</li>\n</ul>\n<p>4、使用<code>git reset</code>撤销提交<br>用于撤销一个或多个提交，也会删除历史提交记录。<br>（1）语法<br><code>git reset --soft HEAD~1</code>：撤销提交，保留修改（这会将 HEAD 指向的分支的最新提交撤销掉，并保留所有更改在工作目录中，这样你就可以重新提交，并修改提交信息）。<br><code>git reset HEAD~1</code>：撤销提交，取消暂存的文件（这会将 HEAD 指向的分支的最新提交撤销掉，并将暂存区的文件取消暂存，但保留在工作目录中。这样你可以重新选择要暂存的文件）。<br><code>git reset --hard HEAD~1</code>：撤销提交，丢弃修改（这会将 HEAD 指向的分支的最新提交撤销掉，并丢弃所有更改，包括暂存区和工作目录中的文件。这样你就可以完全回到上一个提交的状态）。<br><code>git reset --hard &lt;commit-hash&gt;</code>：将 HEAD 指针移动到指定的提交（这会将 HEAD 指针移动到指定的提交，并丢弃所有更改。这可以用来回滚到历史提交状态）。<br>（2）实操<br>如果本地没有其他修改，暂存区也没有文件，那么可以直接使用<code>git reset HEAD~1</code>回退到指定提交，例如：<br>执行<code>git reset HEAD~1</code>，然后执行<code>git push --force</code>，强制推送，这样就可以删除提交历史记录。<br><strong>注意：</strong><br>使用<code>--force</code>选项将覆盖远程仓库的提交历史，这意味着远程仓库的历史将会变为你本地仓库的历史。这是非常危险 的操作！！一定要确保本地代码和远程代码是相关的！！一定要谨慎操作！！  </p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"十二、IDEA上git的提交图解\"><a href=\"#十二、IDEA上git的提交图解\" class=\"headerlink\" title=\"十二、IDEA上git的提交图解\"></a>十二、IDEA上git的提交图解</h1><img src=\"/2023/09/25/Git/Git14.jpg\" class=\"\">\n<p>1、黄色标签：<code>head</code>指针，用来表示当前分支位置；<br>2、绿色标签：表示本地分支，如果有两个绿色标签，表示本地有两个分支；<br>3、紫色标签：表示远程分支，如果有两个紫色标签，表示远程有两个分支；  </p>\n","more":"<hr>\n<h1 id=\"一、图标含义\"><a href=\"#一、图标含义\" class=\"headerlink\" title=\"一、图标含义\"></a>一、图标含义</h1><h3 id=\"1、简单说明\"><a href=\"#1、简单说明\" class=\"headerlink\" title=\"1、简单说明\"></a>1、简单说明</h3><p>（1）<a href=\"https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u\">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>\n<h3 id=\"2、日常更新上传的步骤：\"><a href=\"#2、日常更新上传的步骤：\" class=\"headerlink\" title=\"2、日常更新上传的步骤：\"></a>2、日常更新上传的步骤：</h3><ul>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"3、关于IDEA集成字体颜色\"><a href=\"#3、关于IDEA集成字体颜色\" class=\"headerlink\" title=\"3、关于IDEA集成字体颜色\"></a>3、关于IDEA集成字体颜色</h3><ul>\n<li><span style=\"color:green\">绿色</span>，已经加入控制暂未提交</li>\n<li><span style=\"color:red\">红色</span>，未加入版本控制</li>\n<li><span style=\"color:blue\">蓝色</span>，加入，已提交，有改动</li>\n<li>白色，加入，已提交，无改动</li>\n<li><span style=\"color:#cccccc\">灰色</span>，版本控制已忽略文件</li>\n</ul>\n<h3 id=\"4、分支说明：\"><a href=\"#4、分支说明：\" class=\"headerlink\" title=\"4、分支说明：\"></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。  </p>\n<img src=\"/2023/09/25/Git/1.jpg\" class=\"\">  \n<p>（1）分支：使用分支意味着你把工作从开发主线上分离出来，避免影响开发主线，多线程开发，可以同时开启多个人物的开发，多个任务之间互不影响；<br>（2）master主分支（主干）：永远存放可用的稳定版本，不推荐直接在<code>master</code>分支上开发，防止多个程序员在编写不同的功能模块时，其中一个程序员模块出现问题导致其他人的功能模块在版本回退时受到影响；  </p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Git-常用命令\"><a href=\"#二、Git-常用命令\" class=\"headerlink\" title=\"二、Git 常用命令\"></a>二、Git 常用命令</h1><h3 id=\"1、设置全局变量\"><a href=\"#1、设置全局变量\" class=\"headerlink\" title=\"1、设置全局变量\"></a>1、设置全局变量</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置系统级别，对应整个计算机，文件在 D:\\Git\\mingw64\\etc\\.gitconfig（64位机）</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置用户级别，对应着Windows用户，文件在 C:\\Users\\我的用户\\.gitconfig</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.name</span> <span class=\"string\">&quot;zjy&quot;</span> <span class=\"comment\">// 这个和账号没关系，只是一个用户签名</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.email</span> <span class=\"string\">&quot;xxxx@qq.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置项目级别</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">local</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、常用操作\"><a href=\"#2、常用操作\" class=\"headerlink\" title=\"2、常用操作\"></a>2、常用操作</h3><h6 id=\"（1）初始化（git-init）\"><a href=\"#（1）初始化（git-init）\" class=\"headerlink\" title=\"（1）初始化（git init）\"></a>（1）初始化（git init）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）下载项目（git-clone）\"><a href=\"#（2）下载项目（git-clone）\" class=\"headerlink\" title=\"（2）下载项目（git clone）\"></a>（2）下载项目（git clone）</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 【url】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）查看所有提交跟踪状态（git-status）\"><a href=\"#（3）查看所有提交跟踪状态（git-status）\" class=\"headerlink\" title=\"（3）查看所有提交跟踪状态（git status）\"></a>（3）查看所有提交跟踪状态（git status）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\">// 单个文件查看</span><br><span class=\"line\">git status 文件名</span><br></pre></td></tr></table></figure>\n<h6 id=\"（4）加入到暂存区（git-add）\"><a href=\"#（4）加入到暂存区（git-add）\" class=\"headerlink\" title=\"（4）加入到暂存区（git add）\"></a>（4）加入到暂存区（git add）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加所有文件到暂存区</span><br><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<h6 id=\"（5）提交暂存区的文件到本地仓库（git-commit）\"><a href=\"#（5）提交暂存区的文件到本地仓库（git-commit）\" class=\"headerlink\" title=\"（5）提交暂存区的文件到本地仓库（git commit）\"></a>（5）提交暂存区的文件到本地仓库（git commit）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 【提交的备注信息】</span><br><span class=\"line\"></span><br><span class=\"line\">// add和commit一起执行，第一次提交的时候不能用</span><br><span class=\"line\">git commit -am 【提交的备注信息】</span><br><span class=\"line\"></span><br><span class=\"line\">// 只修改提交注释</span><br><span class=\"line\">git commit --amend -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（6）创建公钥密钥\"><a href=\"#（6）创建公钥密钥\" class=\"headerlink\" title=\"（6）创建公钥密钥\"></a>（6）创建公钥密钥</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（7）列出所有分支（git-branch）\"><a href=\"#（7）列出所有分支（git-branch）\" class=\"headerlink\" title=\"（7）列出所有分支（git branch）\"></a>（7）列出所有分支（git branch）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 列出所有本地分支 </span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有本地分支和分支信息</span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出所有本地分支和追踪分支：origin/master（追踪分支）</span><br><span class=\"line\">git branch -av</span><br></pre></td></tr></table></figure>\n<h6 id=\"（8）分支重命名（git-branch-m）\"><a href=\"#（8）分支重命名（git-branch-m）\" class=\"headerlink\" title=\"（8）分支重命名（git branch -m）\"></a>（8）分支重命名（git branch -m）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 分支重命名</span><br><span class=\"line\">git branch -m 【旧的分支名】 【新的分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（9）新建一个分支，但依然停留在当前分支\"><a href=\"#（9）新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"（9）新建一个分支，但依然停留在当前分支\"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（10）新建一个分支，并切换到该分支\"><a href=\"#（10）新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"（10）新建一个分支，并切换到该分支\"></a>（10）新建一个分支，并切换到该分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\">// 远程有dev分支，本地没有，已经使用git pull命令将dev分支拉到追踪分支（origin/dev），但是本地还没有dev分支，需要执行下面命令</span><br><span class=\"line\">git checkout -b dev origin/dev // 说明：在本地创建一个dev分支，并切换到dev分支，并把dev分支和追踪分支关联</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建本地分支，并将他关联到远程同名分支，用于本地分支名和远程分支名不一致</span><br><span class=\"line\">git checkout --track origin/branch_name  </span><br></pre></td></tr></table></figure>\n<h6 id=\"（11）切换分支（git-checkout）\"><a href=\"#（11）切换分支（git-checkout）\" class=\"headerlink\" title=\"（11）切换分支（git checkout）\"></a>（11）切换分支（git checkout）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 只切换分支</span><br><span class=\"line\">git checkout 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）合并指定分支到当前分支\"><a href=\"#（12）合并指定分支到当前分支\" class=\"headerlink\" title=\"（12）合并指定分支到当前分支\"></a>（12）合并指定分支到当前分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在分支1使用该命令，分支2合并到分支1</span><br><span class=\"line\">// 例如：在分支1使用，git merge 分支2，将分支2合并到分支1</span><br><span class=\"line\">git merge 【要合并的分支名字】（默认是不使用--no-ff模式）</span><br><span class=\"line\">/* 说明：  </span><br><span class=\"line\"> * 1、--no-ff模式：有两个分支dev、test，两个分支提交点都是一样的，dev开发，提交了两次，这样就比test多了两个提交，使用--no-ff模式将dev合并到test，在test分支上使用git merge dev --no-ff，首先test分支会在dev分支最新节点前新建一个新的节点，然后再将test的head指针指向这个节点（注意：此时dev分支最新节点和此节点中间没有箭头或者线条连接，相当于dev还未合并到test，需要在dev分支在执行git merge test）；  </span><br><span class=\"line\"> * 2、默认模式：dev合并到test，在test分支上使用git merge dev，直接将test的head指针指向dev最新的节点；  </span><br><span class=\"line\"> * 3、两个模式的区别：相当于--no-ff模式比默认模式多了一个节点，并且--no-ff模式需要执行两次合并才是真正合并。  </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">// 在分支1使用该命令，将分支1合并到分支2（将自己写的代码提到最前面）</span><br><span class=\"line\">// 例如：在分支1使用，git rebase 分支2，将分支1合并到分支2</span><br><span class=\"line\">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）删除分支\"><a href=\"#（12）删除分支\" class=\"headerlink\" title=\"（12）删除分支\"></a>（12）删除分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除远程分支方法一：git push origin --delete dev（删除远程dev分支）</span><br><span class=\"line\">git push origin --delete 【分支名字】</span><br><span class=\"line\">// 删除远程分支方法二：git branch -dr origin/dev（删除远程dev分支），origin指代远程</span><br><span class=\"line\">git branch -dr 【remote/branch】</span><br><span class=\"line\">// 删除远程分支方法三：git push origin :dev（删除远程dev分支）</span><br><span class=\"line\">git push origin :【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（13）强制移动HEAD\"><a href=\"#（13）强制移动HEAD\" class=\"headerlink\" title=\"（13）强制移动HEAD\"></a>（13）强制移动HEAD</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将master向上移动3个节点</span><br><span class=\"line\">git branch -f master HEAD~3</span><br></pre></td></tr></table></figure>\n<h6 id=\"（14）查看日志信息\"><a href=\"#（14）查看日志信息\" class=\"headerlink\" title=\"（14）查看日志信息\"></a>（14）查看日志信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h6 id=\"（15）查看详细信息\"><a href=\"#（15）查看详细信息\" class=\"headerlink\" title=\"（15）查看详细信息\"></a>（15）查看详细信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\">// 图形界面</span><br><span class=\"line\">git log --graph</span><br><span class=\"line\"></span><br><span class=\"line\">// 信息更详细简略</span><br><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n<h6 id=\"（16）回退到某个版本\"><a href=\"#（16）回退到某个版本\" class=\"headerlink\" title=\"（16）回退到某个版本\"></a>（16）回退到某个版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 版本号从日志信息里查看</span><br><span class=\"line\">git reset --hard 【版本号（sha1值）】</span><br><span class=\"line\"></span><br><span class=\"line\">// 回退到上个版本</span><br><span class=\"line\">git reset --hard HEAD^（也可以 git reset --hard HEAD~1）</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过sha1值回退，先git log查看sha1值</span><br><span class=\"line\">git reset --hard HEAD 【sha1值】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（17）查看远程库所有别名\"><a href=\"#（17）查看远程库所有别名\" class=\"headerlink\" title=\"（17）查看远程库所有别名\"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h6 id=\"（18）将本地项目与远程仓库建立连接\"><a href=\"#（18）将本地项目与远程仓库建立连接\" class=\"headerlink\" title=\"（18）将本地项目与远程仓库建立连接\"></a>（18）将本地项目与远程仓库建立连接</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 【远程仓库地址】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（19）推送本地库的代码到远程库\"><a href=\"#（19）推送本地库的代码到远程库\" class=\"headerlink\" title=\"（19）推送本地库的代码到远程库\"></a>（19）推送本地库的代码到远程库</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push （别名） 【分支名】</span><br><span class=\"line\"></span><br><span class=\"line\">// 在本地dev分支，远程没有dev分支，需要将本地dev分支推送到远程，说明：origin dev表示远程的dev；</span><br><span class=\"line\">git push -u origin dev</span><br><span class=\"line\">git push --set-upstream origin dev // 也可以用这个</span><br></pre></td></tr></table></figure>\n<h6 id=\"（20）拉取远程库的代码到本地库\"><a href=\"#（20）拉取远程库的代码到本地库\" class=\"headerlink\" title=\"（20）拉取远程库的代码到本地库\"></a>（20）拉取远程库的代码到本地库</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull （别名） 【分支名】</span><br><span class=\"line\"></span><br><span class=\"line\">// 将远程origin的dev分支拉取到本地dev分支：git pull origin dev:dev，如果远程分支名和本地分支名相同，可以省略为：git pull origin dev</span><br><span class=\"line\">git pull 【远程主机名（origin）】 【远程分支名】:【本地分支名】// 相当于 git pull + git checkout -b 【本地分支名】 【远程主机名（origin）】/【远程分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（21）添加别名\"><a href=\"#（21）添加别名\" class=\"headerlink\" title=\"（21）添加别名\"></a>（21）添加别名</h6><p>说明：添加别名后，clone的时候就不用赋值https或者ssh链接来下载，直接使用别名。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看所有别名</span><br><span class=\"line\">git remote -v </span><br><span class=\"line\"></span><br><span class=\"line\">// 添加别名</span><br><span class=\"line\">git remote add 【别名】 【链接地址】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（22）临时保存（暂存）\"><a href=\"#（22）临时保存（暂存）\" class=\"headerlink\" title=\"（22）临时保存（暂存）\"></a>（22）临时保存（暂存）</h6><p>说明：如果在dev分支上开发的功能还未完成，就突然要求去test分支处理新的需求，此时就需要临时保存dev上的代码。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 临时保存</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看有多少个临时保存点</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果只有一个临时保存点，想要恢复</span><br><span class=\"line\">git stash pop // 将临时保存点删除并还原</span><br><span class=\"line\">git stash apply // 不删除临时保存点并还原，如果执行之后想要删除，就执行：git stash drop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果有多个临时保存点</span><br><span class=\"line\">git stash pop 【使用git stash list获取左边的名字（stash@&#123;0&#125;）】// 如果不指定，默认还原最近一次（第一个）</span><br></pre></td></tr></table></figure>\n<h6 id=\"（23）检测无效的追踪分支\"><a href=\"#（23）检测无效的追踪分支\" class=\"headerlink\" title=\"（23）检测无效的追踪分支\"></a>（23）检测无效的追踪分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin --dry-run</span><br></pre></td></tr></table></figure>\n<h6 id=\"（24）删除无效的追踪分支\"><a href=\"#（24）删除无效的追踪分支\" class=\"headerlink\" title=\"（24）删除无效的追踪分支\"></a>（24）删除无效的追踪分支</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure>\n<h6 id=\"（25）标签\"><a href=\"#（25）标签\" class=\"headerlink\" title=\"（25）标签\"></a>（25）标签</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建标签（简单创建）：git tag v1.0（创建v1.0标签）</span><br><span class=\"line\">git tag 【标签名】</span><br><span class=\"line\">// 创建带有说明的标签（详细创建）</span><br><span class=\"line\">git tag -a v1.0 -m &quot;version 1.0 released&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 推送标签</span><br><span class=\"line\">git push origin v1.0</span><br><span class=\"line\">// 推送标签完成写法，第一个v1.0是远程，第二个是本地</span><br><span class=\"line\">git push origin refs/tags/v1.0:refs/tags/v1.0</span><br><span class=\"line\">// 推送多个标签</span><br><span class=\"line\">git push origin v1.0 v2.0</span><br><span class=\"line\">// 推送所有标签</span><br><span class=\"line\">git push origin --tags</span><br><span class=\"line\"></span><br><span class=\"line\">// 拉取远程所有标签</span><br><span class=\"line\">git fetch origin --tags</span><br><span class=\"line\">// 拉取远程某个标签</span><br><span class=\"line\">git fetch origin tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除本地标签</span><br><span class=\"line\">git tag -d v1.0</span><br><span class=\"line\">// 删除远程标签</span><br><span class=\"line\">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure>\n<h6 id=\"（26）删除远程仓库（不是分支，是仓库！）\"><a href=\"#（26）删除远程仓库（不是分支，是仓库！）\" class=\"headerlink\" title=\"（26）删除远程仓库（不是分支，是仓库！）\"></a>（26）删除远程仓库（不是分支，是仓库！）</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 执行这条指令之后，Git就会将已经添加的名为“origin”的远程仓库删除</span><br><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n<h6 id=\"（27）在A项目引入B项目\"><a href=\"#（27）在A项目引入B项目\" class=\"headerlink\" title=\"（27）在A项目引入B项目\"></a>（27）在A项目引入B项目</h6><p>说明：当A项目需要B项目时，传统的做法是将B项目打包成依赖，引入A项目；但是如果B项目还没完成，在编写过程中，不可能每次都打包成依赖放到A项目，这个时候我们需要实时地将B项目引入A项目。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在A项目中执行命令，针对的是本地，远程需要推送之后才会有</span><br><span class=\"line\">git submodule add 【B项目远程仓库的地址】</span><br><span class=\"line\"></span><br><span class=\"line\">// clone一个包含子模块的项目</span><br><span class=\"line\">git clone 【项目地址】 --recurse-submodules</span><br><span class=\"line\">git clone 【项目地址】 --recursive // 也可以</span><br><span class=\"line\">// 忘记加参数的clone</span><br><span class=\"line\">git submodule update --init // 相当于git submodule init + git submodule update</span><br><span class=\"line\">// 要拉取所有层层嵌套的子模块</span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\">// 命令默认拉取主分支（master），想要修改这个默认拉取分支可以修改 .gitmodules 文件中子模块对应的 branch 值，或者执行：</span><br><span class=\"line\">git config submodule.xxx.branch dev // xxx指代仓库名</span><br><span class=\"line\">// 或者执行同时将配置写入文件，这样其他人拉取父项目也会获取该配置：</span><br><span class=\"line\">git config -f .gitmodules submodule.xxx.branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新A项目中引入的B项目</span><br><span class=\"line\">// 方法一：进入A项目中的B项目执行：</span><br><span class=\"line\">git pull</span><br><span class=\"line\">// 方法二：在A项目中执行：</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\">// 方法三：在A项目中执行：</span><br><span class=\"line\">git submodule foreach git pull</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除A项目中的B项目</span><br><span class=\"line\">// 第一步：删除暂存区</span><br><span class=\"line\">git rm --cached B</span><br><span class=\"line\">// 第二步：删除B项目</span><br><span class=\"line\">rm -rf B</span><br><span class=\"line\">// 第三步：删除远程的</span><br><span class=\"line\">git add . // 先执行</span><br><span class=\"line\">git commit -m &quot;delete B&quot; // 再执行</span><br><span class=\"line\">git push // 最后执行</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、git用法图解\"><a href=\"#三、git用法图解\" class=\"headerlink\" title=\"三、git用法图解\"></a>三、git用法图解</h1><img src=\"/2023/09/25/Git/2.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Git流程说明\"><a href=\"#四、Git流程说明\" class=\"headerlink\" title=\"四、Git流程说明\"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"五、Git集成IDEA\"><a href=\"#五、Git集成IDEA\" class=\"headerlink\" title=\"五、Git集成IDEA\"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \\ ”</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[core]</span></span><br><span class=\"line\">    <span class=\"attr\">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>\n<p>2、IDEA配置Git</p>\n<img src=\"/2023/09/25/Git/3.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\"><a href=\"#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\" class=\"headerlink\" title=\"六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes\"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖成a的，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"七、IDEA上面使用Git怎么回退\"><a href=\"#七、IDEA上面使用Git怎么回退\" class=\"headerlink\" title=\"七、IDEA上面使用Git怎么回退\"></a>七、IDEA上面使用Git怎么回退</h1><h3 id=\"1、提交到暂存区\"><a href=\"#1、提交到暂存区\" class=\"headerlink\" title=\"1、提交到暂存区\"></a>1、提交到暂存区</h3><p>说明：将文件<code>add</code>到暂存区，进行版本控制；如果将错误的文件<code>add</code>到暂存区，想要回退，直接右键选中需要回退的文件，点击<code>git</code> -》<code>rollback</code>就可以回退了。</p>\n<h3 id=\"2、提交到本地仓库\"><a href=\"#2、提交到本地仓库\" class=\"headerlink\" title=\"2、提交到本地仓库\"></a>2、提交到本地仓库</h3><p>说明：将暂存区的文件<code>commit</code>到本地仓库，如果提交到本地仓库的文件想要回退：<br>1、使用<code>IDEA</code>操作<br>（1）右键选中需要回退的文件，点击git</p>\n<img src=\"/2023/09/25/Git/4.png\" class=\"\">\n<p>（2）使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>\n<img src=\"/2023/09/25/Git/5.jpg\" class=\"\">\n<p>（3）回退</p>\n<img src=\"/2023/09/25/Git/6.jpg\" class=\"\">\n<p>（4）如远程仓库也需要回退，本地仓库回退之后直接执行<code>git push -f</code>，强制推送远程仓库。<br>2、使用<code>git</code>命令：<br>（1）查看上面第二大点中的回退命令即可；<br>（2）如果回退之后想要撤回：先执行<code>git reflog</code>，查看所有日志，复制要撤回到的sha1值，再执行<code>git reset --hard 【sha1值】</code>进行撤回。</p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"八、Git提交规范（fix、feat等字段含义）\"><a href=\"#八、Git提交规范（fix、feat等字段含义）\" class=\"headerlink\" title=\"八、Git提交规范（fix、feat等字段含义）\"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\"><a href=\"#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\" class=\"headerlink\" title=\"九、git merge和git rebase使用方法（都是针对本地来进行合并的）\"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支<code>master、dev、test</code>：<br>（1）A在<code>dev</code>上开发功能，完成功能开发，先得在<code>dev</code>分支提交开发的功能模块，然后推送到远程服务器，然后<code>git checkout master</code>切换到本地的<code>master</code>分支，使用<code>git merge dev</code>将在<code>dev</code>分支上开发的功能合并到本地的<code>master</code>分支，然后推送到远程服务器；<br>（2）B在本地切换到<code>master</code>分支，更新代码，在本地<code>git checkout test</code>切换到<code>test</code>分支，在使用<code>git rebase master</code>，以刚更新下来的<code>master</code>代码为基准，把<code>test</code>分支上的代码添加到<code>master</code>分支后面，分支还是在<code>test</code>上（实际就是把<code>master</code>分支和<code>test</code>分支所有节点重新排序，把test分支上的节点添加在master分支节点后面，覆盖原来test分支的节点）。<br><strong>再说明：</strong><br>有一个分支<code>master</code>：<br>（1）A、B开发人员分别在<code>master</code>分支上切两个分支：<code>dev、test</code>（此时<code>master、dev、test</code>分支的节点都是一样的；<br>（2）A在<code>dev</code>分支上开发，B在<code>test</code>分支上开发，A和B同时开发；<br>（3）A先开发完成了，先提交代码到远程的<code>dev</code>分支上，然后更新<code>master</code>分支上的代码（保证<code>master</code>分支上的代码是最新的），然后在<code>dev</code>分支上执行<code>git merge master</code>，将<code>master</code>分支合并到<code>dev</code>上，再把<code>dev</code>分支提交到远程的<code>dev</code>分支上，然后请求<code>pull request</code>进行合并（或者将<code>master</code>分支代码更新下来后，在<code>master</code>分支上执行<code>git merge dev</code>，直接将最新的<code>dev</code>分支代码合并到<code>master</code>分支上，然后推送到远程<code>master</code>分支）；<br>（4）B开发完成了，将<code>test</code>分支上的代码推送到远程<code>test</code>分支上，然后更新<code>master</code>分支上的代码，在<code>test</code>分支上执行<code>git rebase master</code>，此时会在<code>test</code>分支上，将<code>test</code>分支上新的提交记录给重新取过来，添加到<code>master</code>分支提交记录后面，然后把新排序好的记录覆盖之前<code>test</code>分支上的记录，此时它会提示再更新<code>test</code>分支或者强制推送，注意再更新时，不要把远程旧的没有更改过的代码覆盖了本地最新的已经修改过的代码）。<br><strong>特别注意：</strong>如果你的分支已经是公开的提交对象，并且已经有人基于你的这些提交对象开展了后续的开发工作，那你之后就不能再使用git rebase了，因为git rebase会破坏掉后续开发人员的提交记录，导致后续开发人员的工作无法进行。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"十、分支的使用\"><a href=\"#十、分支的使用\" class=\"headerlink\" title=\"十、分支的使用\"></a>十、分支的使用</h1><p>1、创建分支</p>\n<img src=\"/2023/09/25/Git/Git8.jpg\" class=\"\">\n<p>2、创建名称</p>\n<img src=\"/2023/09/25/Git/Git9.jpg\" class=\"\">\n<p>3、查看版本分支</p>\n<img src=\"/2023/09/25/Git/Git10.jpg\" class=\"\">\n<p>4、切换分支</p>\n<img src=\"/2023/09/25/Git/Git11.jpg\" class=\"\">\n<p>5、将开发好的分支合并到主分支<br>（1）首先将分支切换到主分支；<br>（2）然后在目录下鼠标右键，按照下图所示选择：</p>\n<img src=\"/2023/09/25/Git/Git12.jpg\" class=\"\">\n<p>6、删除分支<br>说明：当被删分支合并之后被删除，不会影响合并结果。<br>打开查看版本分支（看<code>3、</code>），选中需要删除的分支，右键：</p>\n<img src=\"/2023/09/25/Git/Git13.jpg\" class=\"\">\n\n\n<br/>\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"十一、Git常见的问题\"><a href=\"#十一、Git常见的问题\" class=\"headerlink\" title=\"十一、Git常见的问题\"></a>十一、Git常见的问题</h1><h3 id=\"1、error-remote-origin-already-exists\"><a href=\"#1、error-remote-origin-already-exists\" class=\"headerlink\" title=\"1、error: remote origin already exists.\"></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>\n<h3 id=\"2、怎么将本地仓库和远程仓库关联\"><a href=\"#2、怎么将本地仓库和远程仓库关联\" class=\"headerlink\" title=\"2、怎么将本地仓库和远程仓库关联\"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>\n<img src=\"/2023/09/25/Git/7.jpg\" class=\"\">  \n<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、error-failed-to-push-some-refs-to’xxxx’\"><a href=\"#3、error-failed-to-push-some-refs-to’xxxx’\" class=\"headerlink\" title=\"3、error: failed to push some refs to’xxxx’\"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>\n<ol>\n<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>\n<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>\n</ol>\n<h3 id=\"4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\"><a href=\"#4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\" class=\"headerlink\" title=\"4、Hexo主题themes-文件夹无法提交到GitHub的解决方法\"></a>4、Hexo主题themes-文件夹无法提交到GitHub的解决方法</h3><p><strong>说明：</strong>因为themes&#x2F;zhaoo也是从仓库里拉取下来的 他关联到了作者的git仓库所以提交不上去。<br><strong>解决办法：</strong><br>（1）将<code>.git</code>文件夹删除或者移动到别的地方；<br>（2）进入到themes文件夹下，执行命令<code>git rm --cache 主题文件名</code>，从暂存区删除该文件夹；<br>比如：我的主题名为：zhaoo，我就在themes目录下执行<code>git rm --cache zhaoo</code>。<br>（3）然后执行命令：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add themes&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>（4）如果<code>.git</code>文件夹没有删除就移回去。  </p>\n<h3 id=\"5、git提交错了？别慌，直接删除提交记录\"><a href=\"#5、git提交错了？别慌，直接删除提交记录\" class=\"headerlink\" title=\"5、git提交错了？别慌，直接删除提交记录\"></a>5、git提交错了？别慌，直接删除提交记录</h3><p>1、场景<br>不小心将错误代码或者错误的信息提交到了远程仓库，想要删除这条提交记录以及历史记录。<br>2、说明<br><code>git revert</code>和<code>git reset</code>这两个命令都有撤销操作。<br>3、使用<code>git revert</code>撤销提交<br>用于撤销一个或多个提交，但是会保留历史提交记录。<br>（1）语法<br><code>git revert &lt;commit-hash&gt;</code>：撤销单个提交（这会创建一个新的提交，用于撤销指定的提交的更改）。<br><code>git revert &lt;commit-hash1&gt; &lt;commit-hash2&gt;...</code>：撤销多个提交。<br><code>git revert HEAD</code>：撤销最近的提交。<br><code>git revert &lt;commit-hash1&gt;^..&lt;commit-hash2&gt;</code>：撤销某个范围内的提交（这会撤销从不包括到包括范围内的所有提交）。<br>（2）实操  </p>\n<ul>\n<li>先用<code>git log</code>查看提交记录，找到要撤销的提交记录的commit-hash，然后执行<code>git revert &lt;commit-hash&gt;</code>，例如：<code>b1b56b50a0859556623283946972e495d4a42fc1</code>；  </li>\n<li>然后，执行单个文件撤销命令<code>git revert b1b56b50a0859556623283946972e495d4a42fc1</code>或者直接执行<code>git revert HEAD</code>，撤销最近的一次提交；  </li>\n<li>执行命令后，会让我们为本次更改提交说明；  </li>\n<li>执行成功后，代码内容已经回退了，但是git的推送历史记录还是存在。</li>\n</ul>\n<p>4、使用<code>git reset</code>撤销提交<br>用于撤销一个或多个提交，也会删除历史提交记录。<br>（1）语法<br><code>git reset --soft HEAD~1</code>：撤销提交，保留修改（这会将 HEAD 指向的分支的最新提交撤销掉，并保留所有更改在工作目录中，这样你就可以重新提交，并修改提交信息）。<br><code>git reset HEAD~1</code>：撤销提交，取消暂存的文件（这会将 HEAD 指向的分支的最新提交撤销掉，并将暂存区的文件取消暂存，但保留在工作目录中。这样你可以重新选择要暂存的文件）。<br><code>git reset --hard HEAD~1</code>：撤销提交，丢弃修改（这会将 HEAD 指向的分支的最新提交撤销掉，并丢弃所有更改，包括暂存区和工作目录中的文件。这样你就可以完全回到上一个提交的状态）。<br><code>git reset --hard &lt;commit-hash&gt;</code>：将 HEAD 指针移动到指定的提交（这会将 HEAD 指针移动到指定的提交，并丢弃所有更改。这可以用来回滚到历史提交状态）。<br>（2）实操<br>如果本地没有其他修改，暂存区也没有文件，那么可以直接使用<code>git reset HEAD~1</code>回退到指定提交，例如：<br>执行<code>git reset HEAD~1</code>，然后执行<code>git push --force</code>，强制推送，这样就可以删除提交历史记录。<br><strong>注意：</strong><br>使用<code>--force</code>选项将覆盖远程仓库的提交历史，这意味着远程仓库的历史将会变为你本地仓库的历史。这是非常危险 的操作！！一定要确保本地代码和远程代码是相关的！！一定要谨慎操作！！  </p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"十二、IDEA上git的提交图解\"><a href=\"#十二、IDEA上git的提交图解\" class=\"headerlink\" title=\"十二、IDEA上git的提交图解\"></a>十二、IDEA上git的提交图解</h1><img src=\"/2023/09/25/Git/Git14.jpg\" class=\"\">\n<p>1、黄色标签：<code>head</code>指针，用来表示当前分支位置；<br>2、绿色标签：表示本地分支，如果有两个绿色标签，表示本地有两个分支；<br>3、紫色标签：表示远程分支，如果有两个紫色标签，表示远程有两个分支；  </p>\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"版本控制","path":"api/tags/版本控制.json"},{"name":"Git","path":"api/tags/Git.json"}]}