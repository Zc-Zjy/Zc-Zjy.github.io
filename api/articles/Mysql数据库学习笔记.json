{"title":"Mysql数据库学习笔记","slug":"Mysql数据库学习笔记","date":"2023-10-12T08:58:32.000Z","updated":"2025-07-22T09:38:01.646Z","comments":true,"path":"api/articles/Mysql数据库学习笔记.json","realPath":null,"excerpt":null,"covers":["/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg","/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg","/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg","/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.jpg"],"cover":null,"content":"<hr>\n<h1 id=\"一、名词介绍\"><a href=\"#一、名词介绍\" class=\"headerlink\" title=\"一、名词介绍\"></a>一、名词介绍</h1><h3 id=\"1、基础\"><a href=\"#1、基础\" class=\"headerlink\" title=\"1、基础\"></a>1、基础</h3><p>1、<code>DML</code>：数据操作语言，用来对数据库中的数据进行增删改操作，包含以下三个指令：<code>insert</code>、<code>delete</code>、<code>update</code>。<br>2、<code>DDL</code>：数据定义语言，用来定义数据库对象：数据库、数据表、视图、索引等，包含以下三个指令：<code>create</code>、<code>drop</code>、<code>alter</code>。<br>3、<code>DCL</code>：数据控制语言，用来定义数据库的访问权限和安全级别，以及创建用户，授予或回收权限等，包含以下三个指令：<code>grant</code>、<code>revoke</code>、<code>commit</code>。<br>4、<code>DQL</code>：数据查询语言，用来查询数据库中表的记录，使用最多，包含以下三个指令：<code>select</code>、<code>distinct</code>、<code>where</code>。<br>5、事务问题<br>（1）<code>脏读</code>：一个事务读取了另一个事务未提交的数据（可以理解为：在同一个事务中，查询到了另一个事务未提交的数据）。<br>例如：事务A开启事务，然后更新数据1，此时事务A并没有提交（没有完成事务），事务B开启事务，查询数据1，查询出来的是事务A更新之后的数据1，此时事务A回滚了事务，事务B查询的数据1就是脏读数据。<br>（2）<code>不可重复读</code>：一个事务先后读取同一条数据，两次读取的数据不同（可以理解为：在同一个事务中，两次查询的数据不同）。<br>例如：事务A开启事务，查询数据1，查询之后事务B此时开启事务更新数据1，然后事务B提交（完成事务），之后事务A又查询了数据1，两次查询结果不一致。<br>（3）<code>幻读</code>：一个事务在读取数据时，一开始没有对应的数据，但是在插入数据时（另一个事务插入了一条数据），发现这条数据已经存在了，好像发生了”幻影”（可以理解为：同一个事务中，做查询、插入的操作得到的结果不一致，查询时要查的数据不存在，插入时又报该数据已经存在）。<br>例如：事务A开启事务，先查询数据1，没有查询到数据1，然后准备做插入数据1操作，此时事务B开启事务，插入了数据1，然后提交（完成事务），事务A插入数据1时，报错（因为数据1已经存在）。<br>6、事务隔离级别<br>（1）说明：数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。<br>（2）<code>读未提交</code>（Read Uncommitied）：事务可以读取未被提交的数据，容易产生脏读（一个事务读取了另一个事务未提交的数据，是真正的错误）、不可重复读（一个事务读取了另一个事务提交的修改数据）和幻读（一个事务读取了另一个事务提交的插入数据）等问题。<br>（3）<code>读已提交</code>（Read Commitied）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。<br>（4）<code>可重复读</code>（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改，可以避免脏读和不可重复读，但仍有幻读的问题。（Mysql默认使用级别）<br>（5）<code>串行化</code>（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务，可以避免以上所有问题，但效率较低，不适用于高并发场景。  </p>\n<h3 id=\"2、存储引擎\"><a href=\"#2、存储引擎\" class=\"headerlink\" title=\"2、存储引擎\"></a>2、存储引擎</h3><p>1、<code>InnoDB</code><br>（1）介绍：是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL 5.5之后，InnoDB是默认的存储引擎。<br>（2）特点  </p>\n<ul>\n<li>DML操作遵循ACID模型，支持事务；  </li>\n<li>行级锁，提高并发访问性能；  </li>\n<li>支持外键FOREIGN KEY约束，保证数据的完整性和正确性。</li>\n</ul>\n<p>（3）文件<br>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。<br>这里有个参数：innodb_file_per_table，如果该参数开启，每张表对应一个ibd文件，否则，所有表数据存储在一个共享空间ibdata文件中，这样清空整个表空间时，效率更高，默认8版本是打开的。<br>可以在mysql命令行输入：<code>show variables like &#39;innodb_file_per_table&#39;;</code>，查看该参数是否开启。<br>在cmd命令行输入：<code>ibd2sdi xxx.ibd</code>，可以查看表的相关信息。  </p>\n<p>2、<code>MyISAM</code><br>（1）介绍：是一种比较早的存储引擎，由早期的MySQL开发公司WebGain开发，目前已经被Oracle公司收购。<br>（2）特点  </p>\n<ul>\n<li>不支持事务，不支持外键；  </li>\n<li>支持表锁，不支持行锁；  </li>\n<li>访问速度快。</li>\n</ul>\n<p>（3）文件  </p>\n<ul>\n<li>xxx.sdi：存储表结构信息。  </li>\n<li>xxx.MYD：存储数据。  </li>\n<li>xxx.MYI：存储索引。</li>\n</ul>\n<p>3、<code>Memory</code><br>（1）介绍：使用内存来存储数据，访问速度非常快，但是一旦服务关闭，数据就会丢失。<br>（2）特点  </p>\n<ul>\n<li>内存存放，访问速度快；  </li>\n<li>支持hash索引和BTree索引；  </li>\n<li>支持表锁，不支持行锁；  </li>\n<li>支持的数据类型有限，比如：只支持整数类型、字符串类型。</li>\n</ul>\n<p>（3）文件<br>xxx.sdi：存储表结构信息。  </p>\n<p>4、存储引擎的选择<br>（1）<code>InnoDB</code>：是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。<br>（2）<code>MyISAM</code>：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。<br>（3）<code>Memory</code>：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。  </p>\n<h3 id=\"3、锁\"><a href=\"#3、锁\" class=\"headerlink\" title=\"3、锁\"></a>3、锁</h3><p>1、分类<br>（1）全局锁：锁定数据库中的所有表；<br>（2）表级锁：每次操作锁住整张表；<br>（3）行级锁：每次操作锁住对应的行数据。  </p>\n<p>2、全局锁<br>（1）介绍<br>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句、DDL语句、以及更新操作的事务提交语句都将被阻塞。其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。<br>（2）语法<br><code>flush tables with read lock;</code>：加全局锁。<br><code>unlock tables;</code>：解锁。  </p>\n<p>3、表锁<br>分类：表锁、元数据锁（meta data lock，MDL）、意向锁。<br>（1）表锁：表共享读锁（read lock）、表独占写锁（wirte lock）。    </p>\n<ul>\n<li>语法：</li>\n</ul>\n<ol>\n<li>加锁：lock tables 【表名】 read&#x2F;write;  </li>\n<li>解锁：unlock tables（或者直接关闭mysql连接）。</li>\n</ol>\n<ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>读锁：不会阻塞其他客户端的读操作，但是会阻塞写操作；  </li>\n<li>写锁：会阻塞其他客户端的读操作和写操作。</li>\n</ol>\n<p>（2）元数据锁（MDL）：在MySQL5.5版本引入，MDL加锁过程是系统自动控制，无需显示使用，主要用于保护表结构不被修改。当执行以下操作时会自动获取MDL锁：  </p>\n<ul>\n<li>DML操作：SELECT, INSERT, UPDATE, DELETE等，也就是当我们对一张表进行增删改查的时候（注意！这里是对表进行增删改查操作！），加共享MDL锁(SHARED_READ或SHARED_WRITE)，之后与EXCLUSIVE互斥，也就是说，加了这个锁之后，做增删改查时，这个事务没结束的话，其他线程就不可以对这个表进行表结构修改；  </li>\n<li>DDL操作：ALTER TABLE, DROP TABLE等，也就是当我们对表结构进行变更操作的时候（注意！这里是对表结构操作！），加排他MDL锁(EXCLUSIVE)，与其他操作都互斥。</li>\n</ul>\n<p>（3）意向锁  </p>\n<ul>\n<li>意向锁由来<br>当线程A对某个表进行更新操作时，会对这行数据加行锁，此时线程B对该表进行操作，在操作之前，它会先去检查表中是否有行锁，它会逐行检查，这样效率低，所以引入了意向锁。线程A在进行更新操作时，不仅会对行加行锁，还会对表加表锁，也就是意向锁，这样线程B就不用逐行去检查。<br>意向锁大致分为两种：意向共享锁（IS）和意向排他锁（IX）。  </li>\n<li>可以通过这个sql查询意向锁加锁情况：<br><code>select object_schema, object_name, index_name, lock_type, lock_mode, lock_data from performance_schema.data_locks;</code>。  </li>\n<li>意向共享锁：由select… lock in share mode添加（手动在select语句后面加上lock in share mode，才能加意向共享锁）；  </li>\n<li>意向排他锁：由insert、update、delete、select… for update（这个sql和普通的select语句的区别是加锁，普通的不加锁）添加（自动加意向排他锁）。</li>\n</ul>\n<p>4、行级锁<br>每次操作，锁住对应的行数据，锁的粒度最小，发生锁冲突的概率最低，并发度最高，应用再InnoDB存储引擎中。<br>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录（数据）加的锁。对于行级锁，主要分为以下三种：  </p>\n<ul>\n<li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete，在读已提交（RC）和可重复读（RR）隔离级别下都支持；  </li>\n<li>间隙锁（Gap Lock）：锁定索引记录前的间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert产生幻读，在可重复读（RR）隔离级别下都支持；  </li>\n<li>临键锁（Next-Key Lock）：行级和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙Gap，在可重复读（RR）隔离级别下支持。</li>\n</ul>\n<p>（1）行锁<br>InnoDB实现了以下两种类型的行锁：  </p>\n<ul>\n<li>共享锁（S）：当一个事务获取到共享锁，则允许另一个事务来读此行，但是阻止其他事务获得相同数据集的排他锁；  </li>\n<li>排他锁（X）：当一个事务获取排他锁，它可以更新数据，然后它阻止其他事务获得相同数据集的共享锁和排他锁。</li>\n</ul>\n<p>在执行增删改查操作时，分别加的锁：  </p>\n<ul>\n<li>insert：排他锁，自动加锁；  </li>\n<li>update：排他锁，自动加锁；  </li>\n<li>delete：排他锁，自动加锁；  </li>\n<li>select：不加任何锁；  </li>\n<li>select… lock in share mode：共享锁，需要手动在select之后加上lock in share mode；  </li>\n<li>select… for update：排他锁，需要手动在select之后加上for update。</li>\n</ul>\n<p><strong>注意事项：</strong><br>InnoDB的行锁是针对索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时加的锁就是表锁。<br>比如：如果name没有索引，执行update stu set name &#x3D; ‘A’ where name &#x3D; ‘C’，此时加的锁就是表锁。<br>（2）间隙锁和临键锁<br>间隙锁唯一的目的是防止其他事务插入间隙，间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。<br><strong>注意事项：</strong>  </p>\n<ul>\n<li><p>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁；<br>比如：事务A执行update stu set age &#x3D; 10 where id &#x3D; 5（假设id为5的数据不存在，只存在id为3和id为8的数据），此时id为3的数据和id为8的数据之间的间隙会被锁住（这里不包含id为3和8的数据本身，只包含间隙），事务B执行插入id为7的事务，会执行不了，得等事务A提交事务之后，才能执行（因为7在3和8之间，而3到8之间的间隙被事务A锁住了）。  </p>\n</li>\n<li><p>索引上的等值查询（普通索引），临键锁（next-key lock）退化为间隙锁；<br>比如：给age字段创建一个普通索引，然后事务A执行更新id为3的操作时，临键锁变为间隙锁，同时锁住id为3数据的前面和后面的间隙。  </p>\n</li>\n<li><p>索引上的范围查询（唯一索引），会加临键锁。<br>比如：执行select * from stu where id &gt;&#x3D; 19 lock in share mode（这里普通select不加任何锁，所以得使用这种写法），此时会加临键锁，会把19之后的间隙，以及所有数据锁住。</p>\n</li>\n</ul>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Mysql操作命令\"><a href=\"#二、Mysql操作命令\" class=\"headerlink\" title=\"二、Mysql操作命令\"></a>二、Mysql操作命令</h1><h3 id=\"1、连接mysql\"><a href=\"#1、连接mysql\" class=\"headerlink\" title=\"1、连接mysql\"></a>1、连接mysql</h3><p>在Dos（cmd）命令中执行：<code>mysql -u 【mysql用户名】 -p</code>，然后输入密码，比如：<code>mysql -u root -p root</code>。</p>\n<h3 id=\"2、查看数据库\"><a href=\"#2、查看数据库\" class=\"headerlink\" title=\"2、查看数据库\"></a>2、查看数据库</h3><p>连接mysql之后，执行命令：<code>show databases;</code>（别忘记分号），查看数据库有几个。</p>\n<h3 id=\"3、选择要使用哪个数据库\"><a href=\"#3、选择要使用哪个数据库\" class=\"headerlink\" title=\"3、选择要使用哪个数据库\"></a>3、选择要使用哪个数据库</h3><p><code>use test;</code>：选择使用test数据库。</p>\n<h3 id=\"4、查看数据库里有几个表\"><a href=\"#4、查看数据库里有几个表\" class=\"headerlink\" title=\"4、查看数据库里有几个表\"></a>4、查看数据库里有几个表</h3><p><code>show tables;</code>：查看tables数据库有几个表。</p>\n<h3 id=\"5、创建表\"><a href=\"#5、创建表\" class=\"headerlink\" title=\"5、创建表\"></a>5、创建表</h3><p>在mysql命令行输入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> student(</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment comment <span class=\"string\">&#x27;注释&#x27;</span>,</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>name <span class=\"type\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>sex <span class=\"type\">char</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、查看表结构\"><a href=\"#6、查看表结构\" class=\"headerlink\" title=\"6、查看表结构\"></a>6、查看表结构</h3><p><code>desc student;</code>：查看student表结构。</p>\n<h3 id=\"7、设置中文乱码问题\"><a href=\"#7、设置中文乱码问题\" class=\"headerlink\" title=\"7、设置中文乱码问题\"></a>7、设置中文乱码问题</h3><p>1、查看编码<br><code>show variables like &#39;char%&#39;;</code><br>2、更改编码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> character_set_results<span class=\"operator\">=</span>gbk; #结果显示乱码问题</span><br><span class=\"line\"><span class=\"keyword\">set</span> character_set_client<span class=\"operator\">=</span>gbk; #数据写入报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、插入多个数据\"><a href=\"#8、插入多个数据\" class=\"headerlink\" title=\"8、插入多个数据\"></a>8、插入多个数据</h3><p><code>insert into student(name,sex) values (&#39;张三&#39;,&#39;男&#39;),(&#39;李四&#39;,&#39;女&#39;);</code><br>1、大批量插入数据<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用mysql数据库提供的load指令进行插入。<br>具体步骤：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 <span class=\"comment\">--local-infile</span></span><br><span class=\"line\">mysql <span class=\"comment\">--local-infile -u root -p</span></span><br><span class=\"line\"># 设置全局参数load_infile为<span class=\"number\">1</span>，开启从本地加载文件导入数据的开关</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> local_infile<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data <span class=\"keyword\">local</span> infile <span class=\"string\">&#x27;/root/sql.sql&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> `tb_user` fields terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> lines terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>sql.sql文件内容（假设tb_user表中的字段为id，name，sex）：  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1,张三,男</span><br><span class=\"line\">2,李四,女</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、删除数据\"><a href=\"#9、删除数据\" class=\"headerlink\" title=\"9、删除数据\"></a>9、删除数据</h3><p><code>delete from student where name = &#39;张三&#39;;</code></p>\n<h3 id=\"10、更改数据\"><a href=\"#10、更改数据\" class=\"headerlink\" title=\"10、更改数据\"></a>10、更改数据</h3><p><code>update student set name=&#39;张三&#39; where name=&#39;李四&#39;;</code>：把李四改成张三。<br>更新数据时，需要注意：where后面的条件必须是有索引的，比如id（主键），如果不是id，是其它字段就必须建索引，这样它更新时，使用的是行锁，否则它使用的是表锁，影响性能。  </p>\n<h3 id=\"11、删除表\"><a href=\"#11、删除表\" class=\"headerlink\" title=\"11、删除表\"></a>11、删除表</h3><p><code>drop table student;</code></p>\n<h3 id=\"12、表中新增一列属性\"><a href=\"#12、表中新增一列属性\" class=\"headerlink\" title=\"12、表中新增一列属性\"></a>12、表中新增一列属性</h3><p>语法：<code>alter table 【表名】 add 【列名】 【列类型】;</code><br>例子：<code>alter table table_name add col_name char(5);</code>（向table_name表新增一列col_name属性，类型为char）<br>如果我们希望添加在指定的一列，可以用：<br><code>alter table table_name add column_name varchar(255) not null after name;</code><br>注意，上面这个命令的意思是说添加新列到某一列后面。如果想添加到第一列的话，可以用：<br><code>alter table table_name add column column_name varchar(255) not null first;</code></p>\n<h3 id=\"13、添加外键\"><a href=\"#13、添加外键\" class=\"headerlink\" title=\"13、添加外键\"></a>13、添加外键</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 从表名 <span class=\"operator\">/</span><span class=\"operator\">/</span>student</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> (main_id_con)<span class=\"operator\">/</span><span class=\"operator\">/</span>外键 student里的tid</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">FOREIGN</span> KEY (main_id)<span class=\"operator\">/</span><span class=\"operator\">/</span>从表外键字段(tid)</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">REFERENCES</span>  主表(id); <span class=\"operator\">/</span><span class=\"operator\">/</span>teacher</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、多表查询\"><a href=\"#14、多表查询\" class=\"headerlink\" title=\"14、多表查询\"></a>14、多表查询</h3><p>1、内连接（inner join）<br><code>select a.id, a.name, b.order_date from user a inner join orders b on a.id= b.user_id;</code>（仅返回两表匹配的行）。  </p>\n<p>2、左连接（left join&#x2F;left outer join）<br><code>select a.id, a.name, b.order_id from users a left join orders b on a.id = b.user_id;</code>（返回左表所有行，右表匹配不到的行填null）。  </p>\n<p>3、右连接（right join&#x2F;right outer join）<br><code>select b.order_id, a.name from users a right join orders b on a.id = b.user_id;</code>（返回右表所有行，左表匹配不到的行填null）。  </p>\n<p>4、三表连接  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> u.name, o.order_id, p.product_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> users u</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> orders o <span class=\"keyword\">on</span> u.id <span class=\"operator\">=</span> o.user_id</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> products p <span class=\"keyword\">on</span> o.product_id <span class=\"operator\">=</span> p.id</span><br></pre></td></tr></table></figure>\n\n<p>5、自连接  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.employee_name, b.manager_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> employees a</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> employees b <span class=\"keyword\">on</span> a.manager_id <span class=\"operator\">=</span> b.employee_id;</span><br></pre></td></tr></table></figure>\n\n<p>6、完整示例  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"><span class=\"keyword\">distinct</span> t1.AGENT_ZONE <span class=\"keyword\">as</span> agentzone,   #<span class=\"keyword\">distinct</span> : 去重</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> t1.G_CORP_NAME) <span class=\"keyword\">as</span> unitcount,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> t1.BATCHNO) <span class=\"keyword\">as</span> batchno,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GBA_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bpnums,  </span><br><span class=\"line\">#<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>:当t1.GAB_BANK_F为<span class=\"number\">2</span>的时候等于<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bcount,</span><br><span class=\"line\">#<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>:当t1.GAB_BANK_F为<span class=\"number\">2</span>的时候等于G_AMOUNT 的值</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> t1.G_AMOUNT <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bamount,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GBA_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tpnums,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tcount,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> t1.G_AMOUNT <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tamount</span><br><span class=\"line\"><span class=\"keyword\">from</span> GJT_WAGES_DETAIL t1</span><br><span class=\"line\"># <span class=\"keyword\">left</span> join...on ：连接查询，即使右表中没有匹配，也从左表返回所有的行</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> GJT_WAGES_SUMMARY t2 </span><br><span class=\"line\"><span class=\"keyword\">on</span> t1.BATCHNO <span class=\"operator\">=</span> t2.BATCHNO</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> WORKDATE <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-04-11&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2021-09-12&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> t1.AGENT_ZONE # 以t1.AGENT_ZONE分组  ，分组后如果还要使用<span class=\"keyword\">where</span>条件，就用<span class=\"keyword\">having</span>代替<span class=\"keyword\">where</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、修改某一列的字段属性\"><a href=\"#15、修改某一列的字段属性\" class=\"headerlink\" title=\"15、修改某一列的字段属性\"></a>15、修改某一列的字段属性</h3><p><code>alter table user modify column sex varchar(50);</code></p>\n<h3 id=\"16、创建一个新表和某一旧表一样\"><a href=\"#16、创建一个新表和某一旧表一样\" class=\"headerlink\" title=\"16、创建一个新表和某一旧表一样\"></a>16、创建一个新表和某一旧表一样</h3><p><code>create table 【新表名】 like 【旧表名】;</code></p>\n<h3 id=\"17、修改某一列的列名\"><a href=\"#17、修改某一列的列名\" class=\"headerlink\" title=\"17、修改某一列的列名\"></a>17、修改某一列的列名</h3><p><code>alter table 【表名】 change 【旧列名】 【新列名】 【新列名类型】;</code></p>\n<h3 id=\"18、删除某一列\"><a href=\"#18、删除某一列\" class=\"headerlink\" title=\"18、删除某一列\"></a>18、删除某一列</h3><p><code>alter table 【表名】 drop 【列名】;</code></p>\n<h3 id=\"19、修改表名\"><a href=\"#19、修改表名\" class=\"headerlink\" title=\"19、修改表名\"></a>19、修改表名</h3><p><code>rename table 【旧表名】 to 【新表名】;</code></p>\n<h3 id=\"20、蠕虫复制\"><a href=\"#20、蠕虫复制\" class=\"headerlink\" title=\"20、蠕虫复制\"></a>20、蠕虫复制</h3><p><code>insert into 【新表】 select * from 【旧表】;</code><br>如果只想复制某几个字段：<br><code>insert into 【新表】(name,sex) select (name,sex) from 【旧表】;</code></p>\n<h3 id=\"21、单个升序、降序查询\"><a href=\"#21、单个升序、降序查询\" class=\"headerlink\" title=\"21、单个升序、降序查询\"></a>21、单个升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【根据什么字段】 【ASC/DESC】;</code>(ASC：升序。DESC：降序)</p>\n<h3 id=\"22、多个字段升序、降序查询\"><a href=\"#22、多个字段升序、降序查询\" class=\"headerlink\" title=\"22、多个字段升序、降序查询\"></a>22、多个字段升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【字段1】 【ASC/DESC】,【字段2】 【ASC/DESC】;</code>（ASC：升序。DESC：降序）<br>（1）想要将null值的数据往后就：（默认）<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls last;</code><br>（2）想要将null值的数据往前排就：<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls first;</code></p>\n<h3 id=\"23、分页\"><a href=\"#23、分页\" class=\"headerlink\" title=\"23、分页\"></a>23、分页</h3><p><code>select * from table_name limit 10 offset 20;</code>（跳过前20条，取接下来的10条）下面为简写形式（mysql的）：<br><code>limit</code>：跳过几条，当前页显示几条。<br>例如：<br>（1）<code>limit 0,5</code>：跳过0条，从第1条数据开始，显示5条，当前页面显示5条，相当于第一页，查找了5条；<br>（2）<code>limit 5,5</code>：跳过5条，从第6条数据开始，显示5条，当前页面显示5条，相当于第二页，查找了5条；<br>（3）<code>limit 2,5</code>：跳过2条，从第3条数据开始，显示5条，查找出第3、4、5、6、7五条数据显示在当前页面。<br>1、分页优化<br>比如：select * from table_name limit 9000000, 10;<br>可以优化为：select s.* from table_name s inner join (select id from table_name limit 9000000, 10) a on s.id &#x3D; a.id;</p>\n<h3 id=\"24、连接查询\"><a href=\"#24、连接查询\" class=\"headerlink\" title=\"24、连接查询\"></a>24、连接查询</h3><p>1、<code>left join...on...</code>：表1左连接表2，以左为主，表示以表1为主，关联上表2的数据；<br>2、<code>right join...on...</code>：右连接查询，和左连接查询相反；<br>3、<code>inner join...on...</code>：内连接查询，表示以两个表的交集为主，查询出来的数据是两个表交集的部分，其余没有关联的就不额外显示。<br>4、两个表中间逗号为隐式内连接。<br><a href=\"https://segmentfault.com/a/1190000017369618\">具体使用方法请点击</a></p>\n<h3 id=\"25、将数据库中的两个字段拼接\"><a href=\"#25、将数据库中的两个字段拼接\" class=\"headerlink\" title=\"25、将数据库中的两个字段拼接\"></a>25、将数据库中的两个字段拼接</h3><p><code>select id,concat(concat(student_no,&quot;--&quot;),name) as name,class_id from student;</code>：将学生的学号和姓名拼接起来表示（001–小明）。</p>\n<h3 id=\"26、视图\"><a href=\"#26、视图\" class=\"headerlink\" title=\"26、视图\"></a>26、视图</h3><p><strong>说明：</strong>对视图进行增删改操作，也会同步到表，只不过视图中没有的属性列，对应表中的属性列值为null。<br>1、创建视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code>：创建一个视图，如果已经存在视图就替换覆盖，从学生表查询id小于等于10的所有学生作为视图中的数据。<br>2、修改视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code><br>或者<br><code>alter view stu_view as select id,name from student where id &lt;= 10;</code><br>3、删除视图<br><code>drop view if exists view_stu;</code><br>4、视图检查<br><strong>说明：</strong>如果在创建视图的时候加上 with cascaded（或者是local） check option，那么对视图进行增、删、改操作的时候，必须满足where条件才能成功，不然就失败。<br>（1）<code>cascaded</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子二  </span><br><span class=\"line\"># 创建视图一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_1 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建试图二</span><br><span class=\"line\"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，</span><br><span class=\"line\"># 视图一也会默认加上 <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option来进行视图检查。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_2 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> stu_view_1 <span class=\"keyword\">where</span> id <span class=\"operator\">&gt;</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">25</span>大于<span class=\"number\">10</span>可以插入，但是在视图一中，<span class=\"number\">25</span>不小于等于<span class=\"number\">20</span>，所以插入失败。</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">25</span>,<span class=\"string\">&#x27;zxc&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">15</span>大于<span class=\"number\">10</span>可以插入，在视图一中，<span class=\"number\">15</span>小于<span class=\"number\">20</span>，所以插入成功。</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>（2）<code>local</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 例子一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">local</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子二</span><br><span class=\"line\"># 创建视图一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_1 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建视图二</span><br><span class=\"line\"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，视图一按它自己所规定的来进行。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_2 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> stu_view_1 <span class=\"keyword\">where</span> id <span class=\"operator\">&gt;</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">25</span>大于<span class=\"number\">10</span>可以插入，在视图一中，视图一没有设置视图检查，所以插入成功。</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">25</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">8</span>不大于<span class=\"number\">10</span>，所以插入失败。 </span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">8</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>5、视图更新<br>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：<br>（1）聚合函数或窗口函数（sum、min、max、count等）；<br>（2）distinct；<br>（3）group by；<br>（4）having；<br>（5）union 或 unionall  </p>\n<h3 id=\"27、存储过程\"><a href=\"#27、存储过程\" class=\"headerlink\" title=\"27、存储过程\"></a>27、存储过程</h3><p><strong>说明：</strong>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，可以接收参数，也可以返回数据。（也就是数据库SQL语言层面的代码封装与重用）<br>1、创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"comment\">-- SQL 语句</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子：</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。<br>例如：<br>（1）先在命令行执行：<code>delimiter $$</code>（这里表示使用$$符号为结束符）；<br>（2）然后再执行创建语句：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br></pre></td></tr></table></figure>\n<p>2、调用  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> 名称([参数]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子</span><br><span class=\"line\"><span class=\"keyword\">call</span> p1();</span><br></pre></td></tr></table></figure>\n<p>3、查看  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询指定数据库的存储过程及状态信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.routines <span class=\"keyword\">where</span> routine_schema <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查询某个存储过程的定义</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure>\n<p>4、删除  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">procedure</span> [if <span class=\"keyword\">exists</span>] 存储过程名称;</span><br></pre></td></tr></table></figure>\n<p>5、变量<br>（1）系统变量  </p>\n<ol>\n<li>查看系统变量<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有系统变量，下面 [] 的意思是二选一</span><br><span class=\"line\"><span class=\"keyword\">show</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] variables;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以通过 <span class=\"keyword\">like</span> 模糊匹配方式查找变量</span><br><span class=\"line\"><span class=\"keyword\">show</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;xxx变量名&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看指定变量的值，两个@表示系统变量</span><br><span class=\"line\"><span class=\"keyword\">select</span> @@[session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名;</span><br></pre></td></tr></table></figure></li>\n<li>设置系统变量<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名 <span class=\"operator\">=</span> 值;</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> @@[session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名 <span class=\"operator\">=</span> 值;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（2）用户自定义变量<br><strong>说明：</strong>不用提前声明，在用的时候直接用“@变量名” 使用就可以了。（两个@是系统变量，一个@是用户自定义变量）  </p>\n<ol>\n<li>赋值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用<span class=\"keyword\">set</span>赋值</span><br><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"variable\">@var_name</span> <span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> <span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用<span class=\"keyword\">select</span>赋值</span><br><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段名 <span class=\"keyword\">into</span> <span class=\"variable\">@var_name</span> <span class=\"keyword\">from</span> 表名;</span><br></pre></td></tr></table></figure></li>\n<li>使用<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"variable\">@var_name</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（3）局部变量<br><strong>说明：</strong>是根据需要定义在局部生效的变量，访问之前，需要 declare 声明，可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 begin…end 块。  </p>\n<ol>\n<li>声明<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 变量类型就是数据库字段类型</span><br><span class=\"line\"><span class=\"keyword\">declare</span> 变量名 变量类型;</span><br></pre></td></tr></table></figure></li>\n<li>赋值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> 变量名 <span class=\"operator\">=</span> 值;</span><br><span class=\"line\"><span class=\"keyword\">set</span> 变量名 :<span class=\"operator\">=</span> 值;</span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段名 <span class=\"keyword\">into</span> 变量名 <span class=\"keyword\">from</span> 表名...;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>6、<code>if</code>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件 <span class=\"keyword\">then</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">elseif 条件<span class=\"number\">2</span> <span class=\"keyword\">then</span>      <span class=\"comment\">-- 可选</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">else</span>                   <span class=\"comment\">-- 可选</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">end</span> if;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据定义的分数score变量，判定当前分数对应的分数等级</span><br><span class=\"line\"># score <span class=\"operator\">&gt;=</span> <span class=\"number\">85</span>分，等级为优秀</span><br><span class=\"line\"># score <span class=\"operator\">&gt;=</span> <span class=\"number\">60</span>分且 score <span class=\"operator\">&lt;</span> <span class=\"number\">85</span>分为及格</span><br><span class=\"line\"># score <span class=\"operator\">&lt;</span> <span class=\"number\">60</span>分为不及格</span><br><span class=\"line\"># 无参</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> score <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">58</span>;</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">result</span> varcher(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    if  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">85</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;优秀&#x27;</span>;</span><br><span class=\"line\">    elseif  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">60</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;不及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> if;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">result</span>; # 将结果查询出来</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 有参（是需要将结果返回）</span><br><span class=\"line\"># 下面参数说明：<span class=\"keyword\">in</span>表示入参，<span class=\"keyword\">out</span>表示返回结果的参数</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p2(<span class=\"keyword\">in</span> score <span class=\"type\">int</span>,<span class=\"keyword\">out</span> <span class=\"keyword\">result</span> <span class=\"type\">varchar</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\">    if  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">85</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;优秀&#x27;</span>;</span><br><span class=\"line\">    elseif  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">60</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;不及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> if;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用，<span class=\"variable\">@result</span>表示 用用户自定义变量接收p2的返回值</span><br><span class=\"line\"><span class=\"keyword\">call</span> p2(<span class=\"number\">68</span>,<span class=\"variable\">@result</span>);</span><br></pre></td></tr></table></figure>\n<p>7、<code>case</code>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法格式</span><br><span class=\"line\"># 语法一，如果search_condition1成立，则执行statement_list1</span><br><span class=\"line\"><span class=\"keyword\">case</span></span><br><span class=\"line\">    <span class=\"keyword\">when</span> search_condition1 <span class=\"keyword\">then</span> statement_list1</span><br><span class=\"line\">    [<span class=\"keyword\">when</span> search_condition2 <span class=\"keyword\">then</span> statement_list2]...</span><br><span class=\"line\">    [<span class=\"keyword\">else</span> statement_list]</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 语法二，说明：case_value是表达式，如果表达式的结果为 search_condition1，就执行 search_condition1后的 <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> case_value</span><br><span class=\"line\">    <span class=\"keyword\">when</span> search_condition1 <span class=\"keyword\">then</span> statement_list1</span><br><span class=\"line\">    [<span class=\"keyword\">when</span> search_condition2 <span class=\"keyword\">then</span> statement_list2]...</span><br><span class=\"line\">    [<span class=\"keyword\">else</span> statement_list]</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据传入的月份，判定月份所属的季节</span><br><span class=\"line\"># <span class=\"number\">1</span><span class=\"number\">-3</span>月份，为第一季度</span><br><span class=\"line\"># <span class=\"number\">4</span><span class=\"number\">-6</span>月份，为第二季度</span><br><span class=\"line\"># <span class=\"number\">7</span><span class=\"number\">-9</span>月份，为第三季度</span><br><span class=\"line\"># <span class=\"number\">10</span><span class=\"number\">-12</span>月份，为第四季度</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1(<span class=\"keyword\">in</span> <span class=\"keyword\">month</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">result</span> <span class=\"type\">varchar</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">3</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第一季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第二季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">7</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">9</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第三季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">12</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第四季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;非法参数&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br><span class=\"line\">\t# 查询展示，相当于println输出</span><br><span class=\"line\">    <span class=\"keyword\">select</span> concat(<span class=\"string\">&#x27;您输入的月份为：&#x27;</span>,<span class=\"keyword\">month</span>,<span class=\"string\">&#x27;,所有的季度为：&#x27;</span>,<span class=\"keyword\">result</span>);  </span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p1(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>8、<code>while</code>语法<br><strong>说明：</strong>满足条件后再执行循环体中的SQL语句。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法，先判定条件，如果条件为<span class=\"literal\">true</span>，则执行逻辑，否则不执行</span><br><span class=\"line\">while 条件 do</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\"><span class=\"keyword\">end</span> while;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    while n <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> do</span><br><span class=\"line\">        <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> while;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>9、<code>repeat</code>语法<br><strong>说明：</strong>当满足条件的时候退出循环。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法，先执行一次逻辑，然后判断逻辑是否满足，</span><br><span class=\"line\"># 如果满足就退出；如果不满足就继续循环</span><br><span class=\"line\">repeat</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\">    until 条件</span><br><span class=\"line\"><span class=\"keyword\">end</span> repeat;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    repeat </span><br><span class=\"line\">        <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    until n <span class=\"operator\">&lt;=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span> repeat;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>10、<code>loop</code>语法<br><strong>说明：</strong>简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环。loop配合下面两个语句使用：<br>（1）leave：配合循环使用，退出循环；<br>（2）iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一个循环。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法</span><br><span class=\"line\">[begin_label]:loop</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\"><span class=\"keyword\">end</span> loop [end_label];</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出两个语句的使用</span><br><span class=\"line\">leavel label; # 退出指定标记的循环体，label为上面begin_label</span><br><span class=\"line\">iterate label; # 直接进入下一次循环</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    sum:loop </span><br><span class=\"line\">        if n <span class=\"operator\">&lt;=</span> <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            leave sum;</span><br><span class=\"line\">        <span class=\"keyword\">end</span> if;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> loop sum;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>11、游标<code>cursor</code><br><strong>说明：</strong>用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。游标的使用包括游标的声明、open、fetch和close。<br>（1）声明游标<br><code>declare 游标名称 cursor for 查询语句;</code><br>（2）打开游标<br><code>open 游标名称;</code><br>（3）获取游标记录<br><code>fetch 游标名称 into 变量[,变量];</code><br>（4）关闭游标<br><code>close 游标名称;</code><br>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据传入的参数 uage，来查询用户表 tb_user 中</span><br><span class=\"line\"># 所有的用户年龄小于等于 uage 的用户姓名和专业</span><br><span class=\"line\"># 并将用户的姓名和专业插入到所创建的一张新表中</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> uage <span class=\"type\">int</span>) # 创建存储过程</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    # 注意：游标的声明必须在普通的声明之后</span><br><span class=\"line\">    # 声明两个变量uname、upro</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> uname <span class=\"type\">varchar</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> upro <span class=\"type\">varchar</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    # 声明一个游标，并把查询结果集赋值给这个游标</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> u_cursor <span class=\"keyword\">cursor</span> <span class=\"keyword\">for</span> <span class=\"keyword\">select</span> name,profession <span class=\"keyword\">from</span> tb_user <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;=</span> uage;</span><br><span class=\"line\">    # 声明一个条件处理程序，如果满足状态<span class=\"number\">02000</span>就关闭游标</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> exit handler <span class=\"keyword\">for</span> <span class=\"keyword\">SQLSTATE</span> <span class=\"string\">&#x27;02000&#x27;</span> <span class=\"keyword\">close</span> u_cursor</span><br><span class=\"line\">     </span><br><span class=\"line\">    # 如果表 tb_user_pro 存在就删除</span><br><span class=\"line\">    <span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> tb_user_pro;</span><br><span class=\"line\">    # 如果表 tb_user_pro 不存在就创建</span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> tb_user_pro(</span><br><span class=\"line\">        id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">        name <span class=\"type\">varchar</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">        profession <span class=\"type\">varchar</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    # 开启游标</span><br><span class=\"line\">    <span class=\"keyword\">open</span> u_cursor;</span><br><span class=\"line\">    # 循环遍历游标，将游标中的name和profession的值分别赋值给上面声明的uname和upro</span><br><span class=\"line\">    #  将uanme和upro插入新创建的表 tb_user_pro 中</span><br><span class=\"line\">    while <span class=\"literal\">true</span> do</span><br><span class=\"line\">        <span class=\"keyword\">fetch</span> u_cursor <span class=\"keyword\">into</span> uname,upro;</span><br><span class=\"line\">        <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tb_user_pro <span class=\"keyword\">values</span>(<span class=\"keyword\">null</span>,uname,upro);</span><br><span class=\"line\">    <span class=\"keyword\">end</span> while;</span><br><span class=\"line\">    # 关闭游标</span><br><span class=\"line\">    <span class=\"keyword\">close</span> u_cursor;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n<p>12、条件处理程序<code>handler</code><br><strong>说明：</strong>用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法</span><br><span class=\"line\"># handler_action说明：continue:继续执行当前程序  exit:终止执行当前程序</span><br><span class=\"line\"># condition_value说明：<span class=\"keyword\">SQLSTATE</span> sqlstate_value:状态码</span><br><span class=\"line\"><span class=\"keyword\">declare</span> handler_action handler <span class=\"keyword\">for</span> condition_value[,condition_value]... statement;</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子在<span class=\"number\">11</span>例子中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、触发器\"><a href=\"#28、触发器\" class=\"headerlink\" title=\"28、触发器\"></a>28、触发器</h3><p><strong>说明：</strong>可以在insert、update和delete之前或者之后，触发并执行触发器中定义的SQL语句的集合。<br>使用两个 old 和 new 来引用触发器中发生的变化内容：<br>（1）insert型触发器（只有new）<br>new表示将要或者已经新增的数据。<br>（2）update型触发器（有 old 也有 new ）<br>old表示修改之前的数据，new表示将要或已经修改后的数据<br>（3）delete型触发器（只有old）<br>old表示将要或者已经删除的数据<br>1、语法<br>（1）创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># trigger_name：触发器名称</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> trigger_name</span><br><span class=\"line\"># 选择是之前还是之后，是插入、更新还是删除</span><br><span class=\"line\">before<span class=\"operator\">/</span>after  <span class=\"keyword\">insert</span><span class=\"operator\">/</span><span class=\"keyword\">update</span><span class=\"operator\">/</span><span class=\"keyword\">delete</span></span><br><span class=\"line\"># table_name：表名。<span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span>：行级触发器（mysql中只支持行级）</span><br><span class=\"line\"><span class=\"keyword\">on</span> table_name <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    trigger_content; # 触发器的逻辑</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p>（2）查看<br><code>show triggers;</code><br>（3）删除  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果没有指定 schema_name，默认为当前数据库</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">trigger</span> [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure>\n<p>2、例子<br>想要在插入用户表之后，把信息也插入到 tb_user 表中：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> tb_user_insert_trigger</span><br><span class=\"line\">after <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> tb_user <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"operator\">/</span><span class=\"operator\">/</span> 说明：new.id：插入到用户表的id；new.name：插入到用户表的姓名</span><br><span class=\"line\">    <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> user_logs(id,operation,operate_time,operate_id,operate_name) <span class=\"keyword\">values</span>(<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;insert&#x27;</span>,now(),new.id,new.name);</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、去重\"><a href=\"#29、去重\" class=\"headerlink\" title=\"29、去重\"></a>29、去重</h3><p>1、使用<code>distinct</code><br>说明：<code>distinct</code>关键词用于返回唯一不同的值，放在查询语句中的第一个字段前使用，且作用于主句所有列。<br>（1）单例去重<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slect <span class=\"keyword\">distinct</span> column_name <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<p>例如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">---</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>（2）多列去重<br>说明：<code>distinct</code>多列去重，是根据指定的去重列信息来进行，即只有所有指定的列信息都相同，才会被认为是重复的信息。<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> column1,column2 <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> sex,age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"keyword\">null</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<p>如果我只想对多列中的某个列去重，怎么做呢？<br>解决办法一：<br>使用<code>group_concat函数</code>（查看group_concant函数教程）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> group_concat(<span class=\"keyword\">distinct</span> sex) <span class=\"keyword\">as</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>解决办法二：<br>使用<code>group by</code>  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>（3）针对null处理<br><code>distinct</code>不会过滤null值，返回结果会包含null值，比如在多列去重的第一个例子中。<br>所以一般结合<code>count()</code>函数来使用，因为<code>count()</code>函数会过滤掉null项。<br>例如：<br>单使用<code>distinct</code>  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>结合<code>count()</code>函数使用  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> age) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出，实际将<span class=\"keyword\">null</span>过滤掉了</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> age)</span><br><span class=\"line\"><span class=\"comment\">-------------------</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>2、使用<code>group by</code><br>（1）单列去重<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> columns <span class=\"keyword\">from</span> table_name <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> columns;</span><br></pre></td></tr></table></figure>\n<p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>（2）多列去重<br>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex,age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"keyword\">null</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p>3、两者的区别<br>（1）<code>group by</code>可以在多列去重中进行单列去重，而<code>distinct</code>需要借助其它方式来进行。<code>group by</code>的原理是先对结果进行分组排序，然后返回每组中的第一条数据，且是根据<code>group by</code>的后接字段进行去重的。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>（2）在语义相同，有索引的情况下，<code>group by</code>和<code>distinct</code>都能使用索引，效率相同，因为<code>group by</code>和<code>distinct</code>近乎等价，<code>distinct</code>可以被看做特殊的<code>group by</code>；<br>（3）在语义相同，无索引的情况下，<code>distinct</code>效率高于<code>group by</code>，原因是<code>distinct</code>和<code>group by</code>都会进行分组操作，但<code>group by</code>在Mysql8.0之前会进行隐式排序，导致触发filesort，sql执行效率低下，但从Mysql8.0开始，Mysql就删除了隐式排序，所以，此时在语义相同，无索引的情况下，<code>group by</code>和<code>distinct</code>的执行效率也是近乎等价的。<br>（4）推荐使用<code>group by</code>，因为<code>group by</code>语义更为清晰，可对数据进行更为复杂的一些处理，相比于<code>distinct</code>来说，<code>group by</code>的语义明确，且由于<code>distinct</code>关键字会对所有字段生效，在进行复合业务处理时，<code>group by</code>的使用灵活性更高，<code>group by</code>能根据分组情况，对数据进行更为复杂的处理，例如通过<code>having</code>对数据进行过滤，或通过聚合函数对数据进行运输。  </p>\n<h3 id=\"30、更新数据库\"><a href=\"#30、更新数据库\" class=\"headerlink\" title=\"30、更新数据库\"></a>30、更新数据库</h3><p>1、方法一（不需要登录mysql客户端）<br>根据mysql命令执行sql脚本文件：<br><code>mysql -u username -p database_name【数据库名】 &lt; path/to/your/script.sql</code>。<br>注意：<br>（1）不能有中文；<br>（2）是<code>/</code>。  </p>\n<p>2、方法二<br>（1）使用<code>cmd</code>或者直接使用mysqlShell登录到mysql客户端；<br>（2）使用<code>use database_name【数据库名】;</code>；<br>（3）使用<code>source /path/to/your/demo.sql;</code>。  </p>\n<h3 id=\"31、导出数据（不含表结构）\"><a href=\"#31、导出数据（不含表结构）\" class=\"headerlink\" title=\"31、导出数据（不含表结构）\"></a>31、导出数据（不含表结构）</h3><p>可以使用<code>mysqldump</code>命令，在mysql的<code>bin</code>目录下查看是否有<code>mysqldump.exe</code>文件，如果有路径，使用绝对路径。<br>1、使用方法：<br><code>mysqldump -u 用户名 -p --no-create-info 数据库名 表名 &gt; 导出文件名.sql</code>。<br>参数说明：<br>（1）<code>-u</code>：指定用户名；<br>（2）<code>-p</code>：指定密码；<br>（3）<code>--no-create-info</code>：不导出表结构；<br>（4）<code>数据库名</code>：要导出的数据库名；<br>（5）<code>表名</code>：要导出的表名；<br>（6）<code>&gt; 导出文件名.sql</code>：将输出重定向到指定文件。<br>注意：如果数据包含中文或特殊字符，添加<code>--default-character-set=utf8mb4</code>指定编码，如下：<br><code>mysqldump -u root -p --no-create-info --default-character-set=utf8mb4 mydb mytable &gt; data.sql</code>。<br>其他输出选项：<br>（1）<code>--add-drop-database</code>：在每个数据库创建语句前加上drop database语句；<br>（2）<code>--add-drop-table</code>：在每个表创建语句前加上drop table语句，默认开启，不开启（–skip-add-drop-table）；<br>（3）<code>-d --no-data</code>：不包含数据。  </p>\n<p>2、扩展用法<br>（1）导出多张表的数据<br><code>mysqldump -u root -p --no-create-info mydb table1 table2 &gt; tables_data.sql</code>。<br>（2）导出时筛选数据（按条件导出）<br><code>mysqldump -u root -p --no-create-info --where=&quot;id &lt; 100&quot; mydb mytable &gt; filtered_data.sql</code>。<br>（3）导出为CSV格式<br><code>mysqldump</code>默认生成sql文件，但可以通过下面命令导出CSV格式：<br><code>mysql -u root -p -e &quot;SELECT * FROM mydb.mytable&quot; -B | sed &quot;s/&#39;/\\&#39;/;s/\\t/\\&quot;,\\&quot;/g;s/^/\\&quot;/;s/$/\\&quot;/;s/\\n//g&quot; &gt; data.csv</code>。<br>参数说明：<br><code>-e &quot;SELECT * FROM mydb.mytable&quot;</code>：直接执行 SQL 查询；<br><code>-B</code>：禁用表格格式化；<br><code>sed</code>：命令用于将结果转换为CSV格式。  </p>\n<h3 id=\"32、查看数据库各语句的使用频次\"><a href=\"#32、查看数据库各语句的使用频次\" class=\"headerlink\" title=\"32、查看数据库各语句的使用频次\"></a>32、查看数据库各语句的使用频次</h3><p>Mysql客户端连接成功后，通过show [session | global] status命令可以提供服务器状态信息，通过如下指令，可以查看当前数据库的insert、update、delete、select的访问频次。<br><code>show global status like &#39;Com______&#39;;</code>。（6个下划线）<br>1、计算读写比例  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_select&#x27;</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">reads</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_insert&#x27;</span>) <span class=\"operator\">+</span></span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_update&#x27;</span>) <span class=\"operator\">+</span></span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_delete&#x27;</span>) <span class=\"keyword\">AS</span> writes;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"33、sql慢查询\"><a href=\"#33、sql慢查询\" class=\"headerlink\" title=\"33、sql慢查询\"></a>33、sql慢查询</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的SQL语句，通过慢查询日志，可以找出哪些SQL语句的执行效率低，以便进行优化。<br>1、查看慢查询日志是否开启<br><code>show variables like &#39;slow_query_log&#39;;</code>。  </p>\n<p>2、开启慢查询日志<br>在<code>my.cnf</code>配置文件中配置：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启mysql慢日志查询开关</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\"># 设置慢日志输出文件位置，不配置的话默认为/var/lib/mysql/localhost-slow.log</span><br><span class=\"line\">slow_query_log_file=/var/lib/mysql/mysql-slow.log</span><br><span class=\"line\"># 设置慢日志的时间阈值，单位秒，sql执行超过1秒，就会视为慢查询，记录慢查询日志</span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n<p>修改配置文件后，重启mysql服务。  </p>\n<h3 id=\"34、范围查询、非范围查询（between）\"><a href=\"#34、范围查询、非范围查询（between）\" class=\"headerlink\" title=\"34、范围查询、非范围查询（between）\"></a>34、范围查询、非范围查询（between）</h3><p>1、范围查询<br><code>select * from table_name where column1 between 50 and 100;</code>。  </p>\n<p>2、非范围查询<br><code>select * from table_name where column1 not between 50 and 100;</code>。  </p>\n<h3 id=\"35、包含、不包含查询（in）\"><a href=\"#35、包含、不包含查询（in）\" class=\"headerlink\" title=\"35、包含、不包含查询（in）\"></a>35、包含、不包含查询（in）</h3><p>1、包含查询<br><code>select * from table_name where column1 in (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);</code>。  </p>\n<p>2、不包含查询<br><code>select * from table_name where column1 not in (&#39;a&#39;, &#39;b&#39;, c);</code>。  </p>\n<h3 id=\"36、模糊查询\"><a href=\"#36、模糊查询\" class=\"headerlink\" title=\"36、模糊查询\"></a>36、模糊查询</h3><p>1、通配符<code>%</code><br><code>select * from table_name where name like &#39;Mr.%&#39;;</code>（以Mr.开头的字符串）。  </p>\n<p>2、单个字符通配符<code>_</code><br><code>select * from table_name where name like &#39;A_&#39;;</code>（以A开头，后跟任意一个字符）。  </p>\n<p>3、不匹配模糊查询<br><code>select * from table_name where name not like &#39;%.com&#39;;</code>。  </p>\n<h3 id=\"37、正则表达式查询\"><a href=\"#37、正则表达式查询\" class=\"headerlink\" title=\"37、正则表达式查询\"></a>37、正则表达式查询</h3><p><code>select * from table_name where name regexp &#39;^[0-9]&#39;;</code>（以数字开头的字符串）。  </p>\n<h3 id=\"38、分组\"><a href=\"#38、分组\" class=\"headerlink\" title=\"38、分组\"></a>38、分组</h3><p>1、常见分组示例<br>场景：有一张用户表（id、name、age、sex、create_year），根据create_year分组，显示所有用户信息。<br>使用窗口函数<code>ROW_NUMBER()</code>为每个分组内的记录分配唯一序号，然后在外部查询中筛选出每个分组的所有记录。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> grouped_users <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    create_year,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id) <span class=\"keyword\">AS</span> rn</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> user_table</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  id,</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  sex,</span><br><span class=\"line\">  create_year</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> grouped_users</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_year, rn;</span><br></pre></td></tr></table></figure>\n<p>如果需要统计每个分组的记录数，可以添加聚合函数：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> grouped_users <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    create_year,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id) <span class=\"keyword\">AS</span> rn,</span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year) <span class=\"keyword\">AS</span> total_in_year</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> user_table</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  id,</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  sex,</span><br><span class=\"line\">  create_year,</span><br><span class=\"line\">  total_in_year</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> grouped_users</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_year, rn;</span><br></pre></td></tr></table></figure>\n\n<p>2、分组统计<br><code>select category, count(*) as count from table_name group by category;</code>。  </p>\n<p>3、多字段分组<br><code>select year, category, sum(amount) as total from table_name group by year, category;</code>。  </p>\n<p>4、分组后过滤（having）<br><code>select category, count(*) as count from table_name group by category having count &gt; 10;</code>。  </p>\n<p>5、先过滤再分组（where + group by）<br><code>select category, sum(amount) as total from table_name where year = 2025 group by category;</code>。  </p>\n<p>6、分组排序（group by + order by）<br><code>select category, avg(score) as avg_score from table_name group by category order by avg_score desc;</code>。  </p>\n<h3 id=\"39、子查询与CTE\"><a href=\"#39、子查询与CTE\" class=\"headerlink\" title=\"39、子查询与CTE\"></a>39、子查询与CTE</h3><p>1、单行子查询（在where中使用子查询）<br><code>select * from products where peice &gt; (select avg(price) from products);</code>。  </p>\n<p>2、多行子查询（在in中使用子查询）<br><code>select * from users where country in (select country from top_customers);</code>。  </p>\n<p>3、存在性子查询（exists）<br><code>select * from users u where exists (select 1 from orders o where o.user_id = u.id);</code>。<br>解释：<br>主查询：从users表中选择所有列（*）。<br>子查询（EXISTS 部分）：<br>（1）检查对于每个用户u，是否存在至少一条订单记录o满足o.user_id &#x3D; u.id；<br>（2）如果存在，则主查询保留该用户；否则过滤掉；<br>（3）子查询返回1仅作为存在标志（通常用SELECT 1而非SELECT *，性能更优）。  </p>\n<p>4、不存在性子查询（not exists）<br><code>select * from users u where not exists (select 1 from orders o where o.user_id = u.id);</code>。  </p>\n<p>5、CTE公共表达式（with子句）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> t_table <span class=\"keyword\">as</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">month</span>, <span class=\"built_in\">sum</span>(amount) <span class=\"keyword\">as</span> total</span><br><span class=\"line\">\t<span class=\"keyword\">from</span> sales</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_table <span class=\"keyword\">where</span> total <span class=\"operator\">&gt;</span> <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"40、日期处理\"><a href=\"#40、日期处理\" class=\"headerlink\" title=\"40、日期处理\"></a>40、日期处理</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 提取日期部分</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  <span class=\"type\">date</span>(order_time) <span class=\"keyword\">as</span> order_date, <span class=\"comment\">--提取日期，如：2023-10-01</span></span><br><span class=\"line\">  <span class=\"built_in\">extract</span>(<span class=\"keyword\">year</span> <span class=\"keyword\">from</span> order_time) <span class=\"keyword\">as</span> <span class=\"keyword\">year</span>, <span class=\"comment\">-- 提取年份</span></span><br><span class=\"line\">  <span class=\"built_in\">extract</span>(<span class=\"keyword\">month</span> <span class=\"keyword\">from</span> order_time) <span class=\"keyword\">as</span> <span class=\"keyword\">month</span> <span class=\"comment\">-- 提取月份</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 日期计算</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  order_time,</span><br><span class=\"line\">  order_time <span class=\"operator\">+</span> <span class=\"type\">interval</span> <span class=\"string\">&#x27;7 day&#x27;</span> <span class=\"keyword\">as</span> next_week_date <span class=\"comment\">-- 加7天</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"41、explain查看sql执行计划\"><a href=\"#41、explain查看sql执行计划\" class=\"headerlink\" title=\"41、explain查看sql执行计划\"></a>41、explain查看sql执行计划</h3><p>直接在select语句之前加上关键字<code>explain/desc</code>。<br>1、解释每列意思<br>（1）id<br>select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，值越大，越先执行）。<br>（2）select_type<br>表示select的类型，常见的取值有simple（简单表，即不使用表连接或者子查询）、primary（主查询，即外层的查询）、union（union中的第二个或者后面的查询语句）、subquery（select&#x2F;where之后包含了子查询）等。<br>（3）type（重点关注）<br>表示连接类型，性能由好到差的连接类型为null、system、const、eq_ref、ref、range、index、all。<br>（4）possible_key（重点关注）<br>显示可能应用在这张表上的索引，一个或多个。<br>（5）key（重点关注）<br>实际使用的索引，如果为null，则没有使用索引。<br>（6）key_len（重点关注）<br>表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。<br>（7）rows<br>mysql认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。<br>（8）filtered<br>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。  </p>\n<h3 id=\"42、数据库备份\"><a href=\"#42、数据库备份\" class=\"headerlink\" title=\"42、数据库备份\"></a>42、数据库备份</h3><p>下面的命令不是在mysql命令执行，是在cmd中执行。<br>加全局锁备份：<code>mysqldump -u root -p database_name &gt; xxx.sql;</code>：将database_name数据库备份到xxx.sql。<br>不加全局锁备份：<code>mysqldump --single-transaction -u root -p database_name &gt; xxx.sql;</code>。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、使用Mysql遇到的问题\"><a href=\"#三、使用Mysql遇到的问题\" class=\"headerlink\" title=\"三、使用Mysql遇到的问题\"></a>三、使用Mysql遇到的问题</h1><h3 id=\"1、如何解决错误-“public-key-retrieval-is-not-allowed”\"><a href=\"#1、如何解决错误-“public-key-retrieval-is-not-allowed”\" class=\"headerlink\" title=\"1、如何解决错误 “public key retrieval is not allowed”\"></a>1、如何解决错误 “public key retrieval is not allowed”</h3><p>1、说明<br>在使用<code>MySQL</code>数据库时，你可能会遇到一个错误，即<code>public key retrieval is not allowed</code>。这个错误通常出现在尝试连接或访问数据库时，而且可能会导致一些功能无法正常使用。<br>2、错误原因<br><code>public key retrieval is not allowed</code>错误通常是由于<code>MySQL</code>服务器配置的安全设置所导致的。默认情况下，<code>MySQL</code>服务器禁用了<code>public key</code>的检索功能，这是为了增加服务器的安全性而采取的一种措施。在某些情况下，这种设置会导致特定的功能无法正常工作，比如 SSL 连接或使用加密的用户密码。<br>3、解决办法<br>（1）修改<code>MySQL</code>服务器的配置文件以允许<code>public key</code>的检索功能。以下是具体步骤：  </p>\n<ul>\n<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>\n<li>在 [mysqld] 部分添加或修改以下行：  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 这个选项将允许所有用户以任意密码连接到 MySQL 服务器。</span><br><span class=\"line\">skip-grant-tables </span><br></pre></td></tr></table></figure></li>\n<li>保存并关闭配置文件；  </li>\n<li>重新启动 MySQL 服务器。</li>\n</ul>\n<p><strong>注意：</strong>这种方法会降低<code>MySQL</code>服务器的安全性，因为所有用户都可以以任意密码连接到服务器。因此，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（2）在连接数据库时使用命令行选项来允许 public key 的检索功能。以下是具体步骤：  </p>\n<ul>\n<li>打开命令行终端；  </li>\n<li>输入以下命令连接到 MySQL 服务器：  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> 这个命令将以禁用 SSL 连接的模式连接到 MySQL 服务器，从而允许 public key 的检索功能</span><br><span class=\"line\">mysql <span class=\"params\">--ssl-mode=DISABLED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> 如果是springboot yml配置文件，需要添加 allowPublicKeyRetrieval=<span class=\"literal\">true</span></span><br><span class=\"line\">url: jdbc<span class=\"function\">:mysql</span>:<span class=\"string\">//localhost</span><span class=\"function\">:3306</span>/cloud_user?useSSL=<span class=\"literal\">false</span>&amp;allowPublicKeyRetrieval=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>输入用户名和密码以登录到 MySQL 服务器。</li>\n</ul>\n<p>请注意，这种方法也会降低连接的安全性，因为禁用了 SSL 连接。同样地，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（3）使用正式的<code>SSL</code>证书<br>如果你需要在生产环境中使用<code>SSL</code>连接，并且遇到了<code>public key retrieval is not allowed</code>错误，那么你应该考虑使用有效的<code>SSL</code>证书。以下是具体步骤：  </p>\n<ul>\n<li>获取一个有效的 SSL 证书，并确保其配置了正确的公钥；  </li>\n<li>将 SSL 证书和密钥文件放置在指定目录（比如 &#x2F;etc&#x2F;mysql&#x2F;ssl&#x2F;）；  </li>\n<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>\n<li>在 [mysqld] 部分添加或修改以下行：  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 这些选项将告诉 MySQL 服务器使用指定的 SSL 证书和密钥文件。</span><br><span class=\"line\">ssl-ca=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>ca-cert.pem</span><br><span class=\"line\">ssl-cert=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>server-cert.pem</span><br><span class=\"line\">ssl-key=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>server-key.pem</span><br></pre></td></tr></table></figure></li>\n<li>保存并关闭配置文件；  </li>\n<li>重新启动 MySQL 服务器。</li>\n</ul>\n<h3 id=\"2、先排序再分组问题\"><a href=\"#2、先排序再分组问题\" class=\"headerlink\" title=\"2、先排序再分组问题\"></a>2、先排序再分组问题</h3><p>1、说明<br>在执行包含了分组、排序的sql时，会先执行<code>group by</code>分组，再执行<code>order by</code>排序，导致排序失效，如果想先排序再分组，解决办法在下面。<br>2、场景<br>拥有一张包含活动信息的数据表，其中涵盖活动名词、开始时间、类型等字段。我的任务是，根据开始时间先排序，然后在每个类型中选择最新的那条记录。<br>3、方法一（针对<code>5.7版本</code>）<br>在子查询中首先对数据进行排序，然后在外部查询中使用分组操作（<strong>注意：</strong>此处子查询必须添加<code>limit</code>，值根据实际情况调整），添加<code>limit</code>可以保留排序后的顺序。<br><code>order by</code>：<code>desc</code>为倒叙（大到小），<code>asc</code>：为正序（小到大）。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> start_time limit <span class=\"number\">100000</span>)t1 <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> type <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> type;</span><br></pre></td></tr></table></figure>\n<p>这个查询首先将整个表按照开始时间降序排序，然后在外部查询中按类别进行分组，由于已经排序，每个类型中的第一行即为最新的记录。<br>4、方法二（针对<code>8.0版本</code>）<br>通过使用窗口函数（如<code>row_number()</code>）在内部查询中为每一行分配一个行号，然后在外部查询中筛选行号为1的记录。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t1.<span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> <span class=\"operator\">*</span>,</span><br><span class=\"line\">  <span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> type <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> start_time <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> rn</span><br><span class=\"line\">  <span class=\"keyword\">from</span> test</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.rn <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><code>row_number()</code>：为每一行添加行号；<br><code>partition by type</code>：按照类别分组；<br><code>order by start_time desc</code>：按照开始时间倒叙排序。<br>这个查询首先为每个类型中的每一行分配一个行号，然后在外部查询中筛选行号为1的记录，这些记录即为每个类型中开始时间最新的记录。  </p>\n<h3 id=\"3、子查询的特殊示例\"><a href=\"#3、子查询的特殊示例\" class=\"headerlink\" title=\"3、子查询的特殊示例\"></a>3、子查询的特殊示例</h3><p>场景：<br>查询与”张三”的薪资及直属领导相同的员工信息。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 下面的sql相当于：</span></span><br><span class=\"line\"><span class=\"comment\">-- select * from employee where salary = &#x27;张三的薪资&#x27; and manager_id = &#x27;张三的直属领导id&#x27;;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> (salary, manager_id) <span class=\"operator\">=</span> (<span class=\"keyword\">select</span> salary, manager_id <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Mysql函数使用\"><a href=\"#四、Mysql函数使用\" class=\"headerlink\" title=\"四、Mysql函数使用\"></a>四、Mysql函数使用</h1><h3 id=\"1、聚合函数\"><a href=\"#1、聚合函数\" class=\"headerlink\" title=\"1、聚合函数\"></a>1、聚合函数</h3><h4 id=\"（1）计数count\"><a href=\"#（1）计数count\" class=\"headerlink\" title=\"（1）计数count\"></a>（1）计数count</h4><p><code>select count(*) from table_name;</code><br>1、count(*)<br>计算所有行的数量，包括NULL值行。  </p>\n<p>2、count(1)<br>计算所有行的数量，等同于count(*)。  </p>\n<p>3、count(id)<br>计算指定列中非NULL值的数量。  </p>\n<p>4、性能比较<br><code>count(*)</code>最优、<code>count(1)</code>等同于<code>count(*)</code>、count(id)稍慢。  </p>\n<h4 id=\"（2）去重计数\"><a href=\"#（2）去重计数\" class=\"headerlink\" title=\"（2）去重计数\"></a>（2）去重计数</h4><p><code>select count(distinct column1) from table_name;</code>。  </p>\n<h4 id=\"（3）求和sum\"><a href=\"#（3）求和sum\" class=\"headerlink\" title=\"（3）求和sum\"></a>（3）求和sum</h4><p><code>select sum(amount) as total_amount from table_name;</code>。  </p>\n<h4 id=\"（4）求平均值avg\"><a href=\"#（4）求平均值avg\" class=\"headerlink\" title=\"（4）求平均值avg\"></a>（4）求平均值avg</h4><p><code>select avg(score) as avg_score from table_name;</code>。  </p>\n<h4 id=\"（5）求最大值max\"><a href=\"#（5）求最大值max\" class=\"headerlink\" title=\"（5）求最大值max\"></a>（5）求最大值max</h4><p><code>select max(price) as max_price from table_name;</code>。  </p>\n<h4 id=\"（6）求最小值min\"><a href=\"#（6）求最小值min\" class=\"headerlink\" title=\"（6）求最小值min\"></a>（6）求最小值min</h4><p><code>select min(price) as min_price from table_name;</code>。  </p>\n<h4 id=\"（7）组合聚合函数（多聚合统计）\"><a href=\"#（7）组合聚合函数（多聚合统计）\" class=\"headerlink\" title=\"（7）组合聚合函数（多聚合统计）\"></a>（7）组合聚合函数（多聚合统计）</h4><p><code>select category, count(*) as cnt, sum(amount) as total, avg(price) as avg_price from table_name group by category;</code>。  </p>\n<h3 id=\"2、窗口函数（分析函数）\"><a href=\"#2、窗口函数（分析函数）\" class=\"headerlink\" title=\"2、窗口函数（分析函数）\"></a>2、窗口函数（分析函数）</h3><p>1、行号排序（row_number()）<br><code>select *, row_number() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>2、并列排序（rank()，会跳号）<br>相同数值排名相同，但是会跳号，比如：1、1、3（这里本来是2，但是跳号了）。<br><code>select *, rank() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>3、连续排序（dense_rank()，不跳号）<br>相同数值排名相同，不跳号，比如：1、1、2。<br><code>select *, dense_rank() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>4、分组内排序（partition by）<br>用于将数据分组后，在每个分组内单独计算窗口函数。<br>（1）示例一（各部门中进行排序）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> sales <span class=\"keyword\">DESC</span>) <span class=\"keyword\">AS</span> dept_rank</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees;</span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> name </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> dept_rank </span>|</span><br><span class=\"line\">|<span class=\"string\">------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">-----------</span>|</span><br><span class=\"line\">|<span class=\"string\"> Alice</span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 100   </span>|<span class=\"string\"> 1         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Bob  </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 90    </span>|<span class=\"string\"> 2         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Carol</span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 1         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Dave </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 70    </span>|<span class=\"string\"> 2         </span>|</span><br></pre></td></tr></table></figure>\n<p>（2）示例二（组内累计计算，如各部门销售额累计）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    <span class=\"type\">date</span>,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(sales) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"type\">date</span>) <span class=\"keyword\">AS</span> running_total</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sales_data;</span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> date       </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> running_total </span>|</span><br><span class=\"line\">|<span class=\"string\">------------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">---------------</span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-01 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 100   </span>|<span class=\"string\"> 100           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-02 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 50    </span>|<span class=\"string\"> 150           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-03 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 230           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-01 </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 80            </span>|</span><br></pre></td></tr></table></figure>\n<p>按department分组后，在每组内按date排序，计算sales的累计和。<br>（3）示例三（组内占比，如各部门销售额占比）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    sales <span class=\"operator\">/</span> <span class=\"built_in\">SUM</span>(sales) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department) <span class=\"operator\">*</span> <span class=\"number\">100</span> <span class=\"keyword\">AS</span> percentage</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> name </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> percentage </span>|</span><br><span class=\"line\">|<span class=\"string\">------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">------------</span>|</span><br><span class=\"line\">|<span class=\"string\"> Alice</span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 5000  </span>|<span class=\"string\"> 55.56%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Bob  </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 4000  </span>|<span class=\"string\"> 44.44%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Carol</span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 4500  </span>|<span class=\"string\"> 60.00%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Dave </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 3000  </span>|<span class=\"string\"> 40.00%     </span>|</span><br></pre></td></tr></table></figure>\n<p>（4）示例四（多列分组）<br>按 department 和 year 分组后，再组内排名。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    <span class=\"keyword\">year</span>,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department, <span class=\"keyword\">year</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> sales <span class=\"keyword\">DESC</span>) <span class=\"keyword\">AS</span> rank</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sales_data;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"3、其他函数\"><a href=\"#3、其他函数\" class=\"headerlink\" title=\"3、其他函数\"></a>3、其他函数</h3><h4 id=\"（1）group-concat函数\"><a href=\"#（1）group-concat函数\" class=\"headerlink\" title=\"（1）group_concat函数\"></a>（1）group_concat函数</h4><p>1、有一张表结构test  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">   id   </span>|<span class=\"string\">   age   </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   20    </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   20    </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   10    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   30    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   40    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   40    </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   50    </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   60    </span>|<span class=\"string\">  </span></span><br></pre></td></tr></table></figure>\n<p>2、以id分组，将age字段的值拼成一行，逗号分隔（默认）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>3、以id分组，将age字段的值拼成一行，分号分隔  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age separator <span class=\"string\">&#x27;;&#x27;</span>) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age separator <span class=\"string\">&#x27;;&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>;<span class=\"number\">20</span>;<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>;<span class=\"number\">40</span>;<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>;<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>4、以id分组，去除重复的age值  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(<span class=\"keyword\">distinct</span> age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(<span class=\"keyword\">distinct</span> age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>,<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>5、以id分组，将age字段的值拼成一行，逗号分隔，并按age排序（<code>desc倒序</code>）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>6、设置group_concat函数长度限制<br>临时设置法：<br>在命令行输入  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> session group_concat_max_len <span class=\"operator\">=</span> <span class=\"number\">18446744073709551615</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> max_allowed_packet <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"operator\">*</span> <span class=\"number\">1024</span> <span class=\"operator\">*</span> <span class=\"number\">1024</span> <span class=\"operator\">*</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>永久设置法：<br>在mysql配置文件中添加  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_allowed_packet <span class=\"operator\">=</span> <span class=\"number\">20</span>M</span><br><span class=\"line\">group_concat_max_len <span class=\"operator\">=</span> <span class=\"number\">18446744073709551615</span></span><br></pre></td></tr></table></figure>\n<p>重启mysql服务。  </p>\n<h4 id=\"（2）concat-ws函数\"><a href=\"#（2）concat-ws函数\" class=\"headerlink\" title=\"（2）concat_ws函数\"></a>（2）concat_ws函数</h4><p>可以用来将一列的值进行拼接，也可以实现多个字段的拼接。<br>1、有一张test表  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">   id   </span>|<span class=\"string\">   name   </span>|<span class=\"string\">   age   </span>|<span class=\"string\">   gender   </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   25    </span>|<span class=\"string\">   female   </span>|</span><br><span class=\"line\">|<span class=\"string\">   2    </span>|<span class=\"string\">   Bob    </span>|<span class=\"string\">   30    </span>|<span class=\"string\">   male     </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   25    </span>|<span class=\"string\">   female   </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   30    </span>|<span class=\"string\">   female   </span>|</span><br></pre></td></tr></table></figure>\n<p>2、例子  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> concat_ws(<span class=\"string\">&#x27;,&#x27;</span>,name,age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name,age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">Alice,<span class=\"number\">25</span></span><br><span class=\"line\">Alice,<span class=\"number\">30</span></span><br><span class=\"line\">Bob,<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（3）with-rollup\"><a href=\"#（3）with-rollup\" class=\"headerlink\" title=\"（3）with rollup\"></a>（3）with rollup</h4><p>1、说明<br>可以实现在分组统计数据基础上再进行相同的统计。<br>2、例子<br>例如我们按名字进行分组，再统计每个人登录的次数：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">sum</span>(sign_num) <span class=\"keyword\">as</span> sign_num <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"operator\">|</span>   name   <span class=\"operator\">|</span>   sign_num   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小丽   <span class=\"operator\">|</span>          <span class=\"number\">2</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小明   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小王   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   <span class=\"keyword\">null</span>   <span class=\"operator\">|</span>          <span class=\"number\">16</span>   <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n<p>其中记录null表示所有人的登录次数，我们可以使用<code>coalesce</code>来设置一个可以取代null的名称，<code>coalesce</code>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> coalescec(a,b,c);</span><br></pre></td></tr></table></figure>\n<p>参数说明：如果a&#x3D;&#x3D;null，则选择b；如果b&#x3D;&#x3D;null，则选择c；如果a!&#x3D;null，则选择a；如果a，b，c都为null，则返回null。<br>修改上面例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">coalesce</span>(name,<span class=\"string\">&#x27;总数&#x27;</span>),<span class=\"built_in\">sum</span>(sign_num) <span class=\"keyword\">as</span> sign_num <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"operator\">|</span>   name   <span class=\"operator\">|</span>   sign_num   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小丽   <span class=\"operator\">|</span>          <span class=\"number\">2</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小明   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小王   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   总数   <span class=\"operator\">|</span>         <span class=\"number\">16</span>   <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（4）coalesce函数\"><a href=\"#（4）coalesce函数\" class=\"headerlink\" title=\"（4）coalesce函数\"></a>（4）coalesce函数</h4><p><code>coalesce</code>函数接受多个参数，返回参数列表中的第一个非null值：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">coalesce</span>(age, <span class=\"number\">0</span>) <span class=\"keyword\">as</span> age <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>以上sql语句中，如果age为null，则coalesce函数返回0。  </p>\n<h4 id=\"（5）ifnull函数\"><a href=\"#（5）ifnull函数\" class=\"headerlink\" title=\"（5）ifnull函数\"></a>（5）ifnull函数</h4><p>是<code>coalesce</code>函数特定版本，它接受两个参数，如果第一个参数为null，则返回第二个参数。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,ifnull(age, <span class=\"number\">0</span>) <span class=\"keyword\">as</span> age <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（6）find-in-set函数\"><a href=\"#（6）find-in-set函数\" class=\"headerlink\" title=\"（6）find_in_set函数\"></a>（6）find_in_set函数</h4><p>1、说明<br><code>find_in_set(str,strlist)</code>：查询表中的字段（strlist）中包含（str）的结果，返回结果为记录或null。<br>str：要查询的字符串；<br>strlist：表中的字段名，该字段值要是以<code>,</code>分隔的字符串。<br>2、例子1  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> find_in_set(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a,b,c,d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：2。<br>说明：strlist中下标从1开始，然后b在strlist中下标位置为第二个，所以返回2。<br>3、例子2  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> find_in_set(<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1,2&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：0。<br>说明：因为6不在strlist中，所以返回0。<br>4、例子3<br>sys_dept表为：  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">dept_id</span>  ancestors</span><br><span class=\"line\"><span class=\"attribute\">101</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attribute\">201</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attribute\">202</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br><span class=\"line\"><span class=\"attribute\">203</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br><span class=\"line\"><span class=\"attribute\">204</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br></pre></td></tr></table></figure>\n<p>查询语句为：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept_id <span class=\"keyword\">from</span> sys_dept <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;201&#x27;</span>,ancestors);</span><br></pre></td></tr></table></figure>\n<p>结果为：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td></tr></table></figure>\n<p>说明：从<code>sys_dept</code>表中查询，ancestors字段中含有201的数据，并只返回dept_id列，如果要查询201根目录和所有子目录数据，比如204，就是：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept_id <span class=\"keyword\">from</span> sys_dept <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;201&#x27;</span>,ancestors) <span class=\"keyword\">or</span> dept_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;201&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>结果为：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td></tr></table></figure>\n<p>5、和<code>in</code>的区别<br>弄个测试表：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `test` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">8</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> auto_increment,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `llist` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key(`id`)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">2</span>, <span class=\"string\">&#x27;name2&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">3</span>, <span class=\"string\">&#x27;name3&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>原来以为mysql可以这样查询：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> <span class=\"string\">&#x27;daodao&#x27;</span> <span class=\"keyword\">in</span> (list); </span><br></pre></td></tr></table></figure>\n<p>上面这样查是查不到的数据的，会为null；只有将list改为：’daodao’,’xiaohe’,’xiaoqin’才能查询到数据，因为list是变量，而’daodao’,’xiaohe’,’xiaoqin’是常量，所以只有改成下面这样才能查询到数据：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> <span class=\"string\">&#x27;daodao&#x27;</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;daodao&#x27;</span>,<span class=\"string\">&#x27;xiaohe&#x27;</span>,<span class=\"string\">&#x27;xiaoqin&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p>或者使用<code>find_in_set()</code>：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;daodao&#x27;</span>,list); </span><br></pre></td></tr></table></figure>\n<p>总结：所以如果list是常量，则可以直接用<code>IN</code>， 否则要用<code>find_in_set()</code>函数。  </p>\n<h4 id=\"（7）field函数\"><a href=\"#（7）field函数\" class=\"headerlink\" title=\"（7）field函数\"></a>（7）field函数</h4><p>1、使用场景<br>在日常开发过程中，排序是经常用到的，有时候有这样的需求，需要在查询结果中根据某个字段的具体值来排序，比如：有张用户表，想按照‘seiki’、‘iris’来排序。<br>2、例子<br>（1）正序  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># field(str, str1, str2 ,str3.....)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> field(name,<span class=\"string\">&#x27;seiki&#x27;</span>,<span class=\"string\">&#x27;iris&#x27;</span>,<span class=\"string\">&#x27;xut&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id\t\tname\tage</span><br><span class=\"line\"># 这里还有很多记录，不在str1，str2，str3中的记录，然后会把这些记录放在前面</span><br><span class=\"line\"># 把在str1，str2，str3中的记录放在后面，str值相同的按照主键的顺序排列</span><br><span class=\"line\">......（前面还有很多记录，这里省略）</span><br><span class=\"line\"><span class=\"number\">3</span>\t\tseiki\t<span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">4</span>\t\tseiki\t<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">1</span>\t\tiris\t<span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">2</span>\t\tiris\t<span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">6</span>\t\txut\t\t<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span>\t\txut\t\t<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>（2）倒叙  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> field(name,<span class=\"string\">&#x27;seiki&#x27;</span>,<span class=\"string\">&#x27;iris&#x27;</span>,<span class=\"string\">&#x27;xut&#x27;</span>) <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（8）char-length函数\"><a href=\"#（8）char-length函数\" class=\"headerlink\" title=\"（8）char_length函数\"></a>（8）char_length函数</h4><p>char_length(str)：返回字符串str的字符数。  </p>\n<h4 id=\"（9）concat-ws函数\"><a href=\"#（9）concat-ws函数\" class=\"headerlink\" title=\"（9）concat_ws函数\"></a>（9）concat_ws函数</h4><p>concat_ws(s, s1, s2….sn)：将s1，s2……sn用s连起来。  </p>\n<h4 id=\"（10）format函数\"><a href=\"#（10）format函数\" class=\"headerlink\" title=\"（10）format函数\"></a>（10）format函数</h4><p>format(x, n)：将数字x按照“x,xxx.xx”格式返回，n为x保留的小数点位数，最后一位四舍五入。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> format(<span class=\"number\">250500.5634</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"number\">250</span>,<span class=\"number\">500.56</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（11）insert函数\"><a href=\"#（11）insert函数\" class=\"headerlink\" title=\"（11）insert函数\"></a>（11）insert函数</h4><p>insert(str1, x, len, str2)：将str1第x位开始，长度为len的字符串替换为str2。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">insert</span>(<span class=\"string\">&#x27;google.com&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"string\">&#x27;runoob&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出，将<span class=\"string\">&#x27;google.com&#x27;</span>从第<span class=\"number\">1</span>位开始，长度为<span class=\"number\">6</span>的字符串替换为<span class=\"string\">&#x27;runoob&#x27;</span></span><br><span class=\"line\">runoob.com</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（12）locate函数\"><a href=\"#（12）locate函数\" class=\"headerlink\" title=\"（12）locate函数\"></a>（12）locate函数</h4><p>locate(str1, str2)：返回str2在str1中第一次出现的位置，如果str2不在str1中，则返回0。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> locate(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（13）lcase函数、lower函数\"><a href=\"#（13）lcase函数、lower函数\" class=\"headerlink\" title=\"（13）lcase函数、lower函数\"></a>（13）lcase函数、lower函数</h4><p>lcase(str)：将字符串str中的字母全部转换为小写。<br>lower(str)：将字符串str中的字母全部转换为小写。  </p>\n<h4 id=\"（14）left函数\"><a href=\"#（14）left函数\" class=\"headerlink\" title=\"（14）left函数\"></a>（14）left函数</h4><p>left(str, len)：返回字符串str的前len个字符。  </p>\n<h4 id=\"（15）ltrim函数\"><a href=\"#（15）ltrim函数\" class=\"headerlink\" title=\"（15）ltrim函数\"></a>（15）ltrim函数</h4><p>ltrim(str)：删除字符串str左侧的空格。  </p>\n<h4 id=\"（16）position函数\"><a href=\"#（16）position函数\" class=\"headerlink\" title=\"（16）position函数\"></a>（16）position函数</h4><p>position(str1 in s)：从字符串s中获取str1的开始位置。  </p>\n<h4 id=\"（17）repeat函数\"><a href=\"#（17）repeat函数\" class=\"headerlink\" title=\"（17）repeat函数\"></a>（17）repeat函数</h4><p>repeat(str, n)：将字符串str重复n次。  </p>\n<h4 id=\"（18）replace函数\"><a href=\"#（18）replace函数\" class=\"headerlink\" title=\"（18）replace函数\"></a>（18）replace函数</h4><p>replace(s, s1, s2)：将s中的s1替换为s2。  </p>\n<h4 id=\"（19）reverse函数\"><a href=\"#（19）reverse函数\" class=\"headerlink\" title=\"（19）reverse函数\"></a>（19）reverse函数</h4><p>reverse(str)：将字符串str的顺序反过来。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、优化\"><a href=\"#五、优化\" class=\"headerlink\" title=\"五、优化\"></a>五、优化</h1><h3 id=\"1、索引\"><a href=\"#1、索引\" class=\"headerlink\" title=\"1、索引\"></a>1、索引</h3><p>1、介绍<br>如果没有使用索引，在查找时，会从第一个数据开始查找。<br>使用了索引，首先会再创建一个数据结构，比如二叉树，然后查找时会先根据二叉树的规则（左树比根节点小，右树比根节点大）对数据结构来进行查找，然后返回对应的数据。  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">  \n\n<p>2、索引结构<br>（1）B+树（B+Tree）索引<br>最常见的索引类型，大部分引擎都支持B+树索引。<br>InnoDB、MyISAM、Memory都支持。<br>以一颗最大度数为3（3阶）的B+Tree为例：  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">  \n<p>说明：所有的元素都会出现在叶子节点，并且叶子节点形成一个单向链表；非叶子节点不存储数据。<br>（2）Hash索引<br>底层数据结构是用哈希表实现的，只有精确匹配索引的查询才有效，不支持范围查询。<br>InnoDB、MyISAM不支持，Memory支持。<br>（3）R-Tree（空间索引）<br>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少。<br>InnoDB、Memory不支持，MyISAM支持。<br>（4）Full-text（全文索引）<br>是一种通过建立倒排索引，快速匹配文档的方式。<br>InnoDB5.6版本之后支持，MyISAM支持，Memory不支持。<br>（5）B-Tree（B树：又称多路平衡查找树）<br>以一颗最大度数（一个节点的子节点个数）为5（5阶）的B-Tree为例，每个节点最多存储4个key，5个指针）：  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">  \n<p>说明：小于20的在第一个指针；20-30之间的在第二个指针，其它同理。  </p>\n<p>3、索引分类<br>（1）基本分类  </p>\n<ul>\n<li>主键索引<br>针对于表中的主键创建的索引，默认自动创建，只能有一个，关键字（primary）。  </li>\n<li>唯一索引<br>避免同一个表中某数据列中的值重复，可以有多个，关键字（unique）。  </li>\n<li>常规索引<br>快速定位特定数据，可以有多个。  </li>\n<li>全文索引<br>全文索引查找的是文本中的关键词，而不是比较索引中的值，可以有多个，关键字（fulltext）。</li>\n</ul>\n<p>（2）特殊分类  </p>\n<ul>\n<li>InnoDB聚集索引<br>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据，必须有，且只有一个（默认主键是聚集索引）。<br>聚集索引选取规则：</li>\n</ul>\n<ol>\n<li>如果存在主键，主键索引就是聚集索引；  </li>\n<li>如果不存在主键，将使用第一个唯一索引作为聚集索引；  </li>\n<li>如果表没有主键，也没有唯一所哟，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li>\n</ol>\n<ul>\n<li>InnoDB二级索引<br>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个。  <img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.jpg\" class=\"\">  \n说明：</li>\n</ul>\n<ol>\n<li>聚集索引最下面的叶子节点绿色部分存的就是行数据，例如：叶子节点5存的就是id为5的数据；  </li>\n<li>name属性建为索引，它不会成为聚集索引了，因为聚集索引是主键，只能有一个，所以name索引为二级索引；  </li>\n<li>二级索引叶子节点黄色部分存的是主键id。</li>\n</ol>\n<ul>\n<li>举例说明（以上图为例）<br>执行<code>select * from user where name = &#39;Arm&#39;;</code>：</li>\n</ul>\n<ol>\n<li>它会先使用二级索引，Arm和Lee比较，A在L前面，所以走到第一个指针，和Geek比较，找到Arm；  </li>\n<li>Arm下面的id为10，它再使用聚集索引，用10去查找。</li>\n</ol>\n<p>4、索引语法<br>（1）创建索引<br><code>create [unique|fulltext] index index_name on table_name (index_col_name,...);</code><br>（2）查看索引<br><code>show index from table_name;</code><br>（3）删除索引<br><code>drop index index_name on table_name;</code><br>（4）修改索引<br>先删除，再创建。  </p>\n<p>5、索引的使用<br>（1）最左前缀法则<br>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>比如：由id、name、card三个字段组成的联合索引idx_user_id_name_card，在查询时，必须满足最左边（id）存在，才能使索引生效；假如查询时，使用了id，但是跳过了name（没有使用name），直接使用了card，则只会id生效，card索引不生效。  </p>\n<ul>\n<li><code>select * from user where id = 1 and name = &quot;xiaoming&quot; and card = &quot;1&quot;</code>：索引生效；  </li>\n<li><code>select * from user where name = &quot;xiaoming&quot; and card = &quot;1&quot;</code>：索引不生效；  </li>\n<li><code>select * from user where id = 1 and card = &quot;1&quot;</code>：只有id索引生效。</li>\n</ul>\n<p>6、索引失效的常见<br>（1）范围查询<br>联合索引中，出现范围查询（&lt;,&gt;），范围查询右侧的列索引失效。<br>比如：由profession、age、status三个字段组成的联合索引。<br><code>select * from user where profession = &quot;软件工程&quot; and age &gt; 30 and status = &quot;0&quot;</code>：只有profession和age生效，范围查询右侧的status失效；<br>可以使用大于等于来规避失效：<br><code>select * from user where profession = &quot;软件工程&quot; and age &gt;= 30 and status = &quot;0&quot;</code>：都生效。<br>（2）索引列运算<br>不要在索引列上进行运算操作，否则索引将失效。<br>比如：只有phone字段组成的单列索引，查询phone第10位数字开始，后两位等于15的数据。<br><code>select * from user where substring(phone, 10, 2) = &#39;15&#39;</code>：索引失效。<br>（3）字符串不加引号<br>字符串类型字段使用时，不加引号，索引将失效。<br>比如：只有phone字段组成的单列索引，然后这个字段类型是varchar。<br><code>select * from user where phone = 13987645632</code>：查询时，没有用引号，索引失效。<br>（4）模糊查询<br>当%放在前面（like ‘%value’）或者前后都有（like ‘%value%’）时，索引失效；<br>当%放在后面（like ‘value%’）时，索引有效。<br>（5）or连接的条件<br>用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到（都会失效）；只有or前后的列都有索引，才会生效。<br>（6）数据分步影响<br>如果mysql评估使用索引比全表更慢，则不会使用索引。  </p>\n<p>7、sql提示<br>场景：假如有一个由profession、age、status三个字段组成的联合索引和profession单列索引，我们在执行<code>select * from user where profession = &quot;软件工程&quot;</code>查询时，mysql会优先使用聚合索引，如果我们想要使用单列索引，可以手动设置。<br>可以使用下面三种方式：<br>（1）use index：告诉mysql，你可以使用哪些索引；<br><code>explain select * from user use index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。<br>（2）ignore index：告诉mysql，不要使用哪些索引；<br><code>explain select * from user ignore index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。<br>（3）force index：强制mysql使用某个索引。<br><code>explain select * from user force index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。  </p>\n<p>8、覆盖索引<br>索引包含所有需要查询的字段的值，被称之为覆盖索引。<br>覆盖索引可以减少树的搜索次数，显著提升查询性能。<br>（1）<code>select * from user where id = 2</code>：因为id为主键索引，而默认主键索引为聚集索引，所以只用查询一个索引就能返回数据。<br>（2）我们建立name索引，此时name索引为二级索引，叶子节点存储的数据是id，然后查询<code>select id,name from user where name = &#39;Arm&#39;</code>：它需要先对name二级索引进行查找，因为二级索引叶子节点下面存储的是id，我们再看我们要查询的字段只有id，name，此时进行二级索引查找就可以查到我们需要的字段，不用回表（再次对id聚集所有查询），这就是覆盖索引。<br>（3）<code>select id,name,gender from user where name = &#39;Arm&#39;</code>：这个比上面（2）中多查找了一个gender字段，此时就涉及到回表查询，它需要先对name二级索引进行查找，然后根据id聚集索引进行回表查询，所以不是覆盖索引。  </p>\n<p>9、前缀索引<br>当字段类型为字符串（varchar、text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提供索引效率。<br>（1）创建前缀索引<br><code>create index idx_xxx on table_name(column(n))</code>：n为提取column字段前面n个字符作为索引。<br>（2）前缀长度<br>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高，则查询效率越高，唯一索引的选择性是1，这个最好的索引选择性，性能也是最好的，可以根据下面来计算选择性：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">column</span>) <span class=\"operator\">/</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> table_name;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"built_in\">substring</span>(<span class=\"keyword\">column</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"operator\">/</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<p>9、索引设计原则<br>（1）针对于数据量较大（100W条），且查询比较频繁的表建立索引。<br>（2）针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。<br>（3）尽量选择区分度高（比如手机号、身份证号这些不会重复的）的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。<br>（4）如果字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。<br>（5）尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。<br>（6）要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。<br>（7）如果索引列不能存储null值，请再创建表时使用not null约束它，当优化器知道每列是否包含null值时，它可以更好地确定哪个索引最有效地用于查询。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、Mysql日志\"><a href=\"#六、Mysql日志\" class=\"headerlink\" title=\"六、Mysql日志\"></a>六、Mysql日志</h1><h3 id=\"1、错误日志\"><a href=\"#1、错误日志\" class=\"headerlink\" title=\"1、错误日志\"></a>1、错误日志</h3><p><code>show variables like &#39;%log_error%&#39;;</code>：查看错误日志在哪里。  </p>\n<h3 id=\"2、二进制日志\"><a href=\"#2、二进制日志\" class=\"headerlink\" title=\"2、二进制日志\"></a>2、二进制日志</h3><p>1、介绍<br>二进制日志记录了所有的DDL（数据定义语言）语句和DML（数据库操作语言）语句，但不包括数据查询（select、show）语句。<br>Mysql8版本，默认二进制日志是开启的：<code>show variables like &#39;%log_bin%&#39;;</code>查看各个参数。<br>可以看到log_bin_basename，这个对应的value值就是二进制日志存放的路径，只要是binlog前缀的都是二进制文件。  </p>\n<p>2、作用<br>（1）灾难时的数据恢复；<br>（2）Mysql的主从复制。  </p>\n<p>3、二进制日志文件查看<br>由于二进制日志文件是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具<code>mysqlbinlog</code>来查看，具体语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqlbinlog [参数选项] logfilename</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\"><span class=\"operator\">-</span>d：指定数据库名称，只列出指定的数据库相关操作</span><br><span class=\"line\"><span class=\"operator\">-</span>o：忽略掉日志中的前n行命名</span><br><span class=\"line\"><span class=\"operator\">-</span>v：将行事件（数据变更的记录）重构为<span class=\"keyword\">sql</span>语句</span><br><span class=\"line\"><span class=\"operator\">-</span>w：将行事件（数据变更的记录）重构为<span class=\"keyword\">sql</span>语句，并输出注释信息</span><br></pre></td></tr></table></figure>\n\n<p>4、二进制日志删除<br>对于比较繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不清除，将会占用大量磁盘空间。可以通过以下几种方式清理日志：<br>（1）<code>reset master</code>：删除全部binlog日志，删除之后，日志编号，将从binlog.000001重新开始；<br>（2）<code>purge master logs to &#39;binlog.******&#39;</code>：删除******编号之前的所有日志；<br>（3）<code>purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code>：删除日志为“yyyy-mm-dd hh24：mi：ss”之前产生的所有日志。<br>也可以在mysql的配置文件中配置二进制日志的过期时间，设置了之后，二进制日志到时间就会自动删除，可以通过下面的命名查看过期时间：<br><code>show variables like &#39;%binlog_expire%&#39;;</code>单位是秒。  </p>\n<h3 id=\"3、查询日志\"><a href=\"#3、查询日志\" class=\"headerlink\" title=\"3、查询日志\"></a>3、查询日志</h3><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的sql语句。默认情况下，查询日志是没有开启的，如需开启查询日志，可以设置，通过下面命名查看参数：<br><code>show variables like &#39;%general%&#39;;</code>。<br>修改mysql的配置文件&#x2F;etc&#x2F;my.cnf文件：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该选项用来开启查询日志，可选值：0关闭，1开启</span><br><span class=\"line\">general_log=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置日志的文件名，如果没有指定，默认为host_name.log</span><br><span class=\"line\">general_log_file=mysql_query.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、慢查询日志\"><a href=\"#4、慢查询日志\" class=\"headerlink\" title=\"4、慢查询日志\"></a>4、慢查询日志</h3><p>慢查询日志记录了所有执行时间超过参数long_query_time设置值，并且扫描记录数不小于min_examined_row_limit的所有sql语句。默认不开启，long_query_time默认为10秒，精度可以到微妙。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 慢查询日志</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行时间参数</span><br><span class=\"line\">long_query_time=2</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认不会记录管理语句和不使用索引的查询语句</span><br><span class=\"line\"># 开启记录执行较慢的管理语句</span><br><span class=\"line\">log_slow_admin_statements=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启记录执行较慢的未使用索引的查询语句</span><br><span class=\"line\">log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","more":"<hr>\n<h1 id=\"一、名词介绍\"><a href=\"#一、名词介绍\" class=\"headerlink\" title=\"一、名词介绍\"></a>一、名词介绍</h1><h3 id=\"1、基础\"><a href=\"#1、基础\" class=\"headerlink\" title=\"1、基础\"></a>1、基础</h3><p>1、<code>DML</code>：数据操作语言，用来对数据库中的数据进行增删改操作，包含以下三个指令：<code>insert</code>、<code>delete</code>、<code>update</code>。<br>2、<code>DDL</code>：数据定义语言，用来定义数据库对象：数据库、数据表、视图、索引等，包含以下三个指令：<code>create</code>、<code>drop</code>、<code>alter</code>。<br>3、<code>DCL</code>：数据控制语言，用来定义数据库的访问权限和安全级别，以及创建用户，授予或回收权限等，包含以下三个指令：<code>grant</code>、<code>revoke</code>、<code>commit</code>。<br>4、<code>DQL</code>：数据查询语言，用来查询数据库中表的记录，使用最多，包含以下三个指令：<code>select</code>、<code>distinct</code>、<code>where</code>。<br>5、事务问题<br>（1）<code>脏读</code>：一个事务读取了另一个事务未提交的数据（可以理解为：在同一个事务中，查询到了另一个事务未提交的数据）。<br>例如：事务A开启事务，然后更新数据1，此时事务A并没有提交（没有完成事务），事务B开启事务，查询数据1，查询出来的是事务A更新之后的数据1，此时事务A回滚了事务，事务B查询的数据1就是脏读数据。<br>（2）<code>不可重复读</code>：一个事务先后读取同一条数据，两次读取的数据不同（可以理解为：在同一个事务中，两次查询的数据不同）。<br>例如：事务A开启事务，查询数据1，查询之后事务B此时开启事务更新数据1，然后事务B提交（完成事务），之后事务A又查询了数据1，两次查询结果不一致。<br>（3）<code>幻读</code>：一个事务在读取数据时，一开始没有对应的数据，但是在插入数据时（另一个事务插入了一条数据），发现这条数据已经存在了，好像发生了”幻影”（可以理解为：同一个事务中，做查询、插入的操作得到的结果不一致，查询时要查的数据不存在，插入时又报该数据已经存在）。<br>例如：事务A开启事务，先查询数据1，没有查询到数据1，然后准备做插入数据1操作，此时事务B开启事务，插入了数据1，然后提交（完成事务），事务A插入数据1时，报错（因为数据1已经存在）。<br>6、事务隔离级别<br>（1）说明：数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。<br>（2）<code>读未提交</code>（Read Uncommitied）：事务可以读取未被提交的数据，容易产生脏读（一个事务读取了另一个事务未提交的数据，是真正的错误）、不可重复读（一个事务读取了另一个事务提交的修改数据）和幻读（一个事务读取了另一个事务提交的插入数据）等问题。<br>（3）<code>读已提交</code>（Read Commitied）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。<br>（4）<code>可重复读</code>（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改，可以避免脏读和不可重复读，但仍有幻读的问题。（Mysql默认使用级别）<br>（5）<code>串行化</code>（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务，可以避免以上所有问题，但效率较低，不适用于高并发场景。  </p>\n<h3 id=\"2、存储引擎\"><a href=\"#2、存储引擎\" class=\"headerlink\" title=\"2、存储引擎\"></a>2、存储引擎</h3><p>1、<code>InnoDB</code><br>（1）介绍：是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL 5.5之后，InnoDB是默认的存储引擎。<br>（2）特点  </p>\n<ul>\n<li>DML操作遵循ACID模型，支持事务；  </li>\n<li>行级锁，提高并发访问性能；  </li>\n<li>支持外键FOREIGN KEY约束，保证数据的完整性和正确性。</li>\n</ul>\n<p>（3）文件<br>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。<br>这里有个参数：innodb_file_per_table，如果该参数开启，每张表对应一个ibd文件，否则，所有表数据存储在一个共享空间ibdata文件中，这样清空整个表空间时，效率更高，默认8版本是打开的。<br>可以在mysql命令行输入：<code>show variables like &#39;innodb_file_per_table&#39;;</code>，查看该参数是否开启。<br>在cmd命令行输入：<code>ibd2sdi xxx.ibd</code>，可以查看表的相关信息。  </p>\n<p>2、<code>MyISAM</code><br>（1）介绍：是一种比较早的存储引擎，由早期的MySQL开发公司WebGain开发，目前已经被Oracle公司收购。<br>（2）特点  </p>\n<ul>\n<li>不支持事务，不支持外键；  </li>\n<li>支持表锁，不支持行锁；  </li>\n<li>访问速度快。</li>\n</ul>\n<p>（3）文件  </p>\n<ul>\n<li>xxx.sdi：存储表结构信息。  </li>\n<li>xxx.MYD：存储数据。  </li>\n<li>xxx.MYI：存储索引。</li>\n</ul>\n<p>3、<code>Memory</code><br>（1）介绍：使用内存来存储数据，访问速度非常快，但是一旦服务关闭，数据就会丢失。<br>（2）特点  </p>\n<ul>\n<li>内存存放，访问速度快；  </li>\n<li>支持hash索引和BTree索引；  </li>\n<li>支持表锁，不支持行锁；  </li>\n<li>支持的数据类型有限，比如：只支持整数类型、字符串类型。</li>\n</ul>\n<p>（3）文件<br>xxx.sdi：存储表结构信息。  </p>\n<p>4、存储引擎的选择<br>（1）<code>InnoDB</code>：是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。<br>（2）<code>MyISAM</code>：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。<br>（3）<code>Memory</code>：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。  </p>\n<h3 id=\"3、锁\"><a href=\"#3、锁\" class=\"headerlink\" title=\"3、锁\"></a>3、锁</h3><p>1、分类<br>（1）全局锁：锁定数据库中的所有表；<br>（2）表级锁：每次操作锁住整张表；<br>（3）行级锁：每次操作锁住对应的行数据。  </p>\n<p>2、全局锁<br>（1）介绍<br>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句、DDL语句、以及更新操作的事务提交语句都将被阻塞。其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。<br>（2）语法<br><code>flush tables with read lock;</code>：加全局锁。<br><code>unlock tables;</code>：解锁。  </p>\n<p>3、表锁<br>分类：表锁、元数据锁（meta data lock，MDL）、意向锁。<br>（1）表锁：表共享读锁（read lock）、表独占写锁（wirte lock）。    </p>\n<ul>\n<li>语法：</li>\n</ul>\n<ol>\n<li>加锁：lock tables 【表名】 read&#x2F;write;  </li>\n<li>解锁：unlock tables（或者直接关闭mysql连接）。</li>\n</ol>\n<ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>读锁：不会阻塞其他客户端的读操作，但是会阻塞写操作；  </li>\n<li>写锁：会阻塞其他客户端的读操作和写操作。</li>\n</ol>\n<p>（2）元数据锁（MDL）：在MySQL5.5版本引入，MDL加锁过程是系统自动控制，无需显示使用，主要用于保护表结构不被修改。当执行以下操作时会自动获取MDL锁：  </p>\n<ul>\n<li>DML操作：SELECT, INSERT, UPDATE, DELETE等，也就是当我们对一张表进行增删改查的时候（注意！这里是对表进行增删改查操作！），加共享MDL锁(SHARED_READ或SHARED_WRITE)，之后与EXCLUSIVE互斥，也就是说，加了这个锁之后，做增删改查时，这个事务没结束的话，其他线程就不可以对这个表进行表结构修改；  </li>\n<li>DDL操作：ALTER TABLE, DROP TABLE等，也就是当我们对表结构进行变更操作的时候（注意！这里是对表结构操作！），加排他MDL锁(EXCLUSIVE)，与其他操作都互斥。</li>\n</ul>\n<p>（3）意向锁  </p>\n<ul>\n<li>意向锁由来<br>当线程A对某个表进行更新操作时，会对这行数据加行锁，此时线程B对该表进行操作，在操作之前，它会先去检查表中是否有行锁，它会逐行检查，这样效率低，所以引入了意向锁。线程A在进行更新操作时，不仅会对行加行锁，还会对表加表锁，也就是意向锁，这样线程B就不用逐行去检查。<br>意向锁大致分为两种：意向共享锁（IS）和意向排他锁（IX）。  </li>\n<li>可以通过这个sql查询意向锁加锁情况：<br><code>select object_schema, object_name, index_name, lock_type, lock_mode, lock_data from performance_schema.data_locks;</code>。  </li>\n<li>意向共享锁：由select… lock in share mode添加（手动在select语句后面加上lock in share mode，才能加意向共享锁）；  </li>\n<li>意向排他锁：由insert、update、delete、select… for update（这个sql和普通的select语句的区别是加锁，普通的不加锁）添加（自动加意向排他锁）。</li>\n</ul>\n<p>4、行级锁<br>每次操作，锁住对应的行数据，锁的粒度最小，发生锁冲突的概率最低，并发度最高，应用再InnoDB存储引擎中。<br>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录（数据）加的锁。对于行级锁，主要分为以下三种：  </p>\n<ul>\n<li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete，在读已提交（RC）和可重复读（RR）隔离级别下都支持；  </li>\n<li>间隙锁（Gap Lock）：锁定索引记录前的间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert产生幻读，在可重复读（RR）隔离级别下都支持；  </li>\n<li>临键锁（Next-Key Lock）：行级和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙Gap，在可重复读（RR）隔离级别下支持。</li>\n</ul>\n<p>（1）行锁<br>InnoDB实现了以下两种类型的行锁：  </p>\n<ul>\n<li>共享锁（S）：当一个事务获取到共享锁，则允许另一个事务来读此行，但是阻止其他事务获得相同数据集的排他锁；  </li>\n<li>排他锁（X）：当一个事务获取排他锁，它可以更新数据，然后它阻止其他事务获得相同数据集的共享锁和排他锁。</li>\n</ul>\n<p>在执行增删改查操作时，分别加的锁：  </p>\n<ul>\n<li>insert：排他锁，自动加锁；  </li>\n<li>update：排他锁，自动加锁；  </li>\n<li>delete：排他锁，自动加锁；  </li>\n<li>select：不加任何锁；  </li>\n<li>select… lock in share mode：共享锁，需要手动在select之后加上lock in share mode；  </li>\n<li>select… for update：排他锁，需要手动在select之后加上for update。</li>\n</ul>\n<p><strong>注意事项：</strong><br>InnoDB的行锁是针对索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时加的锁就是表锁。<br>比如：如果name没有索引，执行update stu set name &#x3D; ‘A’ where name &#x3D; ‘C’，此时加的锁就是表锁。<br>（2）间隙锁和临键锁<br>间隙锁唯一的目的是防止其他事务插入间隙，间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。<br><strong>注意事项：</strong>  </p>\n<ul>\n<li><p>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁；<br>比如：事务A执行update stu set age &#x3D; 10 where id &#x3D; 5（假设id为5的数据不存在，只存在id为3和id为8的数据），此时id为3的数据和id为8的数据之间的间隙会被锁住（这里不包含id为3和8的数据本身，只包含间隙），事务B执行插入id为7的事务，会执行不了，得等事务A提交事务之后，才能执行（因为7在3和8之间，而3到8之间的间隙被事务A锁住了）。  </p>\n</li>\n<li><p>索引上的等值查询（普通索引），临键锁（next-key lock）退化为间隙锁；<br>比如：给age字段创建一个普通索引，然后事务A执行更新id为3的操作时，临键锁变为间隙锁，同时锁住id为3数据的前面和后面的间隙。  </p>\n</li>\n<li><p>索引上的范围查询（唯一索引），会加临键锁。<br>比如：执行select * from stu where id &gt;&#x3D; 19 lock in share mode（这里普通select不加任何锁，所以得使用这种写法），此时会加临键锁，会把19之后的间隙，以及所有数据锁住。</p>\n</li>\n</ul>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"二、Mysql操作命令\"><a href=\"#二、Mysql操作命令\" class=\"headerlink\" title=\"二、Mysql操作命令\"></a>二、Mysql操作命令</h1><h3 id=\"1、连接mysql\"><a href=\"#1、连接mysql\" class=\"headerlink\" title=\"1、连接mysql\"></a>1、连接mysql</h3><p>在Dos（cmd）命令中执行：<code>mysql -u 【mysql用户名】 -p</code>，然后输入密码，比如：<code>mysql -u root -p root</code>。</p>\n<h3 id=\"2、查看数据库\"><a href=\"#2、查看数据库\" class=\"headerlink\" title=\"2、查看数据库\"></a>2、查看数据库</h3><p>连接mysql之后，执行命令：<code>show databases;</code>（别忘记分号），查看数据库有几个。</p>\n<h3 id=\"3、选择要使用哪个数据库\"><a href=\"#3、选择要使用哪个数据库\" class=\"headerlink\" title=\"3、选择要使用哪个数据库\"></a>3、选择要使用哪个数据库</h3><p><code>use test;</code>：选择使用test数据库。</p>\n<h3 id=\"4、查看数据库里有几个表\"><a href=\"#4、查看数据库里有几个表\" class=\"headerlink\" title=\"4、查看数据库里有几个表\"></a>4、查看数据库里有几个表</h3><p><code>show tables;</code>：查看tables数据库有几个表。</p>\n<h3 id=\"5、创建表\"><a href=\"#5、创建表\" class=\"headerlink\" title=\"5、创建表\"></a>5、创建表</h3><p>在mysql命令行输入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> student(</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment comment <span class=\"string\">&#x27;注释&#x27;</span>,</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>name <span class=\"type\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"operator\">&gt;</span>sex <span class=\"type\">char</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、查看表结构\"><a href=\"#6、查看表结构\" class=\"headerlink\" title=\"6、查看表结构\"></a>6、查看表结构</h3><p><code>desc student;</code>：查看student表结构。</p>\n<h3 id=\"7、设置中文乱码问题\"><a href=\"#7、设置中文乱码问题\" class=\"headerlink\" title=\"7、设置中文乱码问题\"></a>7、设置中文乱码问题</h3><p>1、查看编码<br><code>show variables like &#39;char%&#39;;</code><br>2、更改编码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> character_set_results<span class=\"operator\">=</span>gbk; #结果显示乱码问题</span><br><span class=\"line\"><span class=\"keyword\">set</span> character_set_client<span class=\"operator\">=</span>gbk; #数据写入报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、插入多个数据\"><a href=\"#8、插入多个数据\" class=\"headerlink\" title=\"8、插入多个数据\"></a>8、插入多个数据</h3><p><code>insert into student(name,sex) values (&#39;张三&#39;,&#39;男&#39;),(&#39;李四&#39;,&#39;女&#39;);</code><br>1、大批量插入数据<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用mysql数据库提供的load指令进行插入。<br>具体步骤：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 <span class=\"comment\">--local-infile</span></span><br><span class=\"line\">mysql <span class=\"comment\">--local-infile -u root -p</span></span><br><span class=\"line\"># 设置全局参数load_infile为<span class=\"number\">1</span>，开启从本地加载文件导入数据的开关</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> local_infile<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data <span class=\"keyword\">local</span> infile <span class=\"string\">&#x27;/root/sql.sql&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> `tb_user` fields terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> lines terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>sql.sql文件内容（假设tb_user表中的字段为id，name，sex）：  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1,张三,男</span><br><span class=\"line\">2,李四,女</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、删除数据\"><a href=\"#9、删除数据\" class=\"headerlink\" title=\"9、删除数据\"></a>9、删除数据</h3><p><code>delete from student where name = &#39;张三&#39;;</code></p>\n<h3 id=\"10、更改数据\"><a href=\"#10、更改数据\" class=\"headerlink\" title=\"10、更改数据\"></a>10、更改数据</h3><p><code>update student set name=&#39;张三&#39; where name=&#39;李四&#39;;</code>：把李四改成张三。<br>更新数据时，需要注意：where后面的条件必须是有索引的，比如id（主键），如果不是id，是其它字段就必须建索引，这样它更新时，使用的是行锁，否则它使用的是表锁，影响性能。  </p>\n<h3 id=\"11、删除表\"><a href=\"#11、删除表\" class=\"headerlink\" title=\"11、删除表\"></a>11、删除表</h3><p><code>drop table student;</code></p>\n<h3 id=\"12、表中新增一列属性\"><a href=\"#12、表中新增一列属性\" class=\"headerlink\" title=\"12、表中新增一列属性\"></a>12、表中新增一列属性</h3><p>语法：<code>alter table 【表名】 add 【列名】 【列类型】;</code><br>例子：<code>alter table table_name add col_name char(5);</code>（向table_name表新增一列col_name属性，类型为char）<br>如果我们希望添加在指定的一列，可以用：<br><code>alter table table_name add column_name varchar(255) not null after name;</code><br>注意，上面这个命令的意思是说添加新列到某一列后面。如果想添加到第一列的话，可以用：<br><code>alter table table_name add column column_name varchar(255) not null first;</code></p>\n<h3 id=\"13、添加外键\"><a href=\"#13、添加外键\" class=\"headerlink\" title=\"13、添加外键\"></a>13、添加外键</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 从表名 <span class=\"operator\">/</span><span class=\"operator\">/</span>student</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> (main_id_con)<span class=\"operator\">/</span><span class=\"operator\">/</span>外键 student里的tid</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">FOREIGN</span> KEY (main_id)<span class=\"operator\">/</span><span class=\"operator\">/</span>从表外键字段(tid)</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>   <span class=\"keyword\">REFERENCES</span>  主表(id); <span class=\"operator\">/</span><span class=\"operator\">/</span>teacher</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、多表查询\"><a href=\"#14、多表查询\" class=\"headerlink\" title=\"14、多表查询\"></a>14、多表查询</h3><p>1、内连接（inner join）<br><code>select a.id, a.name, b.order_date from user a inner join orders b on a.id= b.user_id;</code>（仅返回两表匹配的行）。  </p>\n<p>2、左连接（left join&#x2F;left outer join）<br><code>select a.id, a.name, b.order_id from users a left join orders b on a.id = b.user_id;</code>（返回左表所有行，右表匹配不到的行填null）。  </p>\n<p>3、右连接（right join&#x2F;right outer join）<br><code>select b.order_id, a.name from users a right join orders b on a.id = b.user_id;</code>（返回右表所有行，左表匹配不到的行填null）。  </p>\n<p>4、三表连接  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> u.name, o.order_id, p.product_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> users u</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> orders o <span class=\"keyword\">on</span> u.id <span class=\"operator\">=</span> o.user_id</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> products p <span class=\"keyword\">on</span> o.product_id <span class=\"operator\">=</span> p.id</span><br></pre></td></tr></table></figure>\n\n<p>5、自连接  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.employee_name, b.manager_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> employees a</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> employees b <span class=\"keyword\">on</span> a.manager_id <span class=\"operator\">=</span> b.employee_id;</span><br></pre></td></tr></table></figure>\n\n<p>6、完整示例  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"><span class=\"keyword\">distinct</span> t1.AGENT_ZONE <span class=\"keyword\">as</span> agentzone,   #<span class=\"keyword\">distinct</span> : 去重</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> t1.G_CORP_NAME) <span class=\"keyword\">as</span> unitcount,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> t1.BATCHNO) <span class=\"keyword\">as</span> batchno,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GBA_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bpnums,  </span><br><span class=\"line\">#<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>:当t1.GAB_BANK_F为<span class=\"number\">2</span>的时候等于<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bcount,</span><br><span class=\"line\">#<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>:当t1.GAB_BANK_F为<span class=\"number\">2</span>的时候等于G_AMOUNT 的值</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;2&#x27;</span> <span class=\"keyword\">then</span> t1.G_AMOUNT <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> bamount,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GBA_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tpnums,</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tcount,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> t1.GAB_BANK_F <span class=\"keyword\">when</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> t1.G_AMOUNT <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> tamount</span><br><span class=\"line\"><span class=\"keyword\">from</span> GJT_WAGES_DETAIL t1</span><br><span class=\"line\"># <span class=\"keyword\">left</span> join...on ：连接查询，即使右表中没有匹配，也从左表返回所有的行</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> GJT_WAGES_SUMMARY t2 </span><br><span class=\"line\"><span class=\"keyword\">on</span> t1.BATCHNO <span class=\"operator\">=</span> t2.BATCHNO</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> WORKDATE <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-04-11&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2021-09-12&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> t1.AGENT_ZONE # 以t1.AGENT_ZONE分组  ，分组后如果还要使用<span class=\"keyword\">where</span>条件，就用<span class=\"keyword\">having</span>代替<span class=\"keyword\">where</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、修改某一列的字段属性\"><a href=\"#15、修改某一列的字段属性\" class=\"headerlink\" title=\"15、修改某一列的字段属性\"></a>15、修改某一列的字段属性</h3><p><code>alter table user modify column sex varchar(50);</code></p>\n<h3 id=\"16、创建一个新表和某一旧表一样\"><a href=\"#16、创建一个新表和某一旧表一样\" class=\"headerlink\" title=\"16、创建一个新表和某一旧表一样\"></a>16、创建一个新表和某一旧表一样</h3><p><code>create table 【新表名】 like 【旧表名】;</code></p>\n<h3 id=\"17、修改某一列的列名\"><a href=\"#17、修改某一列的列名\" class=\"headerlink\" title=\"17、修改某一列的列名\"></a>17、修改某一列的列名</h3><p><code>alter table 【表名】 change 【旧列名】 【新列名】 【新列名类型】;</code></p>\n<h3 id=\"18、删除某一列\"><a href=\"#18、删除某一列\" class=\"headerlink\" title=\"18、删除某一列\"></a>18、删除某一列</h3><p><code>alter table 【表名】 drop 【列名】;</code></p>\n<h3 id=\"19、修改表名\"><a href=\"#19、修改表名\" class=\"headerlink\" title=\"19、修改表名\"></a>19、修改表名</h3><p><code>rename table 【旧表名】 to 【新表名】;</code></p>\n<h3 id=\"20、蠕虫复制\"><a href=\"#20、蠕虫复制\" class=\"headerlink\" title=\"20、蠕虫复制\"></a>20、蠕虫复制</h3><p><code>insert into 【新表】 select * from 【旧表】;</code><br>如果只想复制某几个字段：<br><code>insert into 【新表】(name,sex) select (name,sex) from 【旧表】;</code></p>\n<h3 id=\"21、单个升序、降序查询\"><a href=\"#21、单个升序、降序查询\" class=\"headerlink\" title=\"21、单个升序、降序查询\"></a>21、单个升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【根据什么字段】 【ASC/DESC】;</code>(ASC：升序。DESC：降序)</p>\n<h3 id=\"22、多个字段升序、降序查询\"><a href=\"#22、多个字段升序、降序查询\" class=\"headerlink\" title=\"22、多个字段升序、降序查询\"></a>22、多个字段升序、降序查询</h3><p><code>select * from 【表名】 where 【查询条件】 order by 【字段1】 【ASC/DESC】,【字段2】 【ASC/DESC】;</code>（ASC：升序。DESC：降序）<br>（1）想要将null值的数据往后就：（默认）<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls last;</code><br>（2）想要将null值的数据往前排就：<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls first;</code></p>\n<h3 id=\"23、分页\"><a href=\"#23、分页\" class=\"headerlink\" title=\"23、分页\"></a>23、分页</h3><p><code>select * from table_name limit 10 offset 20;</code>（跳过前20条，取接下来的10条）下面为简写形式（mysql的）：<br><code>limit</code>：跳过几条，当前页显示几条。<br>例如：<br>（1）<code>limit 0,5</code>：跳过0条，从第1条数据开始，显示5条，当前页面显示5条，相当于第一页，查找了5条；<br>（2）<code>limit 5,5</code>：跳过5条，从第6条数据开始，显示5条，当前页面显示5条，相当于第二页，查找了5条；<br>（3）<code>limit 2,5</code>：跳过2条，从第3条数据开始，显示5条，查找出第3、4、5、6、7五条数据显示在当前页面。<br>1、分页优化<br>比如：select * from table_name limit 9000000, 10;<br>可以优化为：select s.* from table_name s inner join (select id from table_name limit 9000000, 10) a on s.id &#x3D; a.id;</p>\n<h3 id=\"24、连接查询\"><a href=\"#24、连接查询\" class=\"headerlink\" title=\"24、连接查询\"></a>24、连接查询</h3><p>1、<code>left join...on...</code>：表1左连接表2，以左为主，表示以表1为主，关联上表2的数据；<br>2、<code>right join...on...</code>：右连接查询，和左连接查询相反；<br>3、<code>inner join...on...</code>：内连接查询，表示以两个表的交集为主，查询出来的数据是两个表交集的部分，其余没有关联的就不额外显示。<br>4、两个表中间逗号为隐式内连接。<br><a href=\"https://segmentfault.com/a/1190000017369618\">具体使用方法请点击</a></p>\n<h3 id=\"25、将数据库中的两个字段拼接\"><a href=\"#25、将数据库中的两个字段拼接\" class=\"headerlink\" title=\"25、将数据库中的两个字段拼接\"></a>25、将数据库中的两个字段拼接</h3><p><code>select id,concat(concat(student_no,&quot;--&quot;),name) as name,class_id from student;</code>：将学生的学号和姓名拼接起来表示（001–小明）。</p>\n<h3 id=\"26、视图\"><a href=\"#26、视图\" class=\"headerlink\" title=\"26、视图\"></a>26、视图</h3><p><strong>说明：</strong>对视图进行增删改操作，也会同步到表，只不过视图中没有的属性列，对应表中的属性列值为null。<br>1、创建视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code>：创建一个视图，如果已经存在视图就替换覆盖，从学生表查询id小于等于10的所有学生作为视图中的数据。<br>2、修改视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code><br>或者<br><code>alter view stu_view as select id,name from student where id &lt;= 10;</code><br>3、删除视图<br><code>drop view if exists view_stu;</code><br>4、视图检查<br><strong>说明：</strong>如果在创建视图的时候加上 with cascaded（或者是local） check option，那么对视图进行增、删、改操作的时候，必须满足where条件才能成功，不然就失败。<br>（1）<code>cascaded</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子二  </span><br><span class=\"line\"># 创建视图一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_1 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建试图二</span><br><span class=\"line\"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，</span><br><span class=\"line\"># 视图一也会默认加上 <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option来进行视图检查。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_2 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> stu_view_1 <span class=\"keyword\">where</span> id <span class=\"operator\">&gt;</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">25</span>大于<span class=\"number\">10</span>可以插入，但是在视图一中，<span class=\"number\">25</span>不小于等于<span class=\"number\">20</span>，所以插入失败。</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">25</span>,<span class=\"string\">&#x27;zxc&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">15</span>大于<span class=\"number\">10</span>可以插入，在视图一中，<span class=\"number\">15</span>小于<span class=\"number\">20</span>，所以插入成功。</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>（2）<code>local</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 例子一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">local</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view <span class=\"keyword\">values</span>(<span class=\"number\">15</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子二</span><br><span class=\"line\"># 创建视图一</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_1 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> id <span class=\"operator\">&lt;=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建视图二</span><br><span class=\"line\"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，视图一按它自己所规定的来进行。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> replace <span class=\"keyword\">view</span> stu_view_2 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> id,name <span class=\"keyword\">from</span> stu_view_1 <span class=\"keyword\">where</span> id <span class=\"operator\">&gt;</span> <span class=\"number\">10</span> <span class=\"keyword\">with</span> <span class=\"keyword\">cascaded</span> <span class=\"keyword\">check</span> option;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">25</span>大于<span class=\"number\">10</span>可以插入，在视图一中，视图一没有设置视图检查，所以插入成功。</span><br><span class=\"line\"># 成功的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">25</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 在视图二中，<span class=\"number\">8</span>不大于<span class=\"number\">10</span>，所以插入失败。 </span><br><span class=\"line\"># 失败的是：<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> stu_view_2 <span class=\"keyword\">values</span>(<span class=\"number\">8</span>,<span class=\"string\">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>5、视图更新<br>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：<br>（1）聚合函数或窗口函数（sum、min、max、count等）；<br>（2）distinct；<br>（3）group by；<br>（4）having；<br>（5）union 或 unionall  </p>\n<h3 id=\"27、存储过程\"><a href=\"#27、存储过程\" class=\"headerlink\" title=\"27、存储过程\"></a>27、存储过程</h3><p><strong>说明：</strong>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，可以接收参数，也可以返回数据。（也就是数据库SQL语言层面的代码封装与重用）<br>1、创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"comment\">-- SQL 语句</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子：</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。<br>例如：<br>（1）先在命令行执行：<code>delimiter $$</code>（这里表示使用$$符号为结束符）；<br>（2）然后再执行创建语句：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br></pre></td></tr></table></figure>\n<p>2、调用  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">call</span> 名称([参数]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子</span><br><span class=\"line\"><span class=\"keyword\">call</span> p1();</span><br></pre></td></tr></table></figure>\n<p>3、查看  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询指定数据库的存储过程及状态信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.routines <span class=\"keyword\">where</span> routine_schema <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查询某个存储过程的定义</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure>\n<p>4、删除  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">procedure</span> [if <span class=\"keyword\">exists</span>] 存储过程名称;</span><br></pre></td></tr></table></figure>\n<p>5、变量<br>（1）系统变量  </p>\n<ol>\n<li>查看系统变量<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有系统变量，下面 [] 的意思是二选一</span><br><span class=\"line\"><span class=\"keyword\">show</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] variables;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以通过 <span class=\"keyword\">like</span> 模糊匹配方式查找变量</span><br><span class=\"line\"><span class=\"keyword\">show</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;xxx变量名&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看指定变量的值，两个@表示系统变量</span><br><span class=\"line\"><span class=\"keyword\">select</span> @@[session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名;</span><br></pre></td></tr></table></figure></li>\n<li>设置系统变量<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> [session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名 <span class=\"operator\">=</span> 值;</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> @@[session <span class=\"operator\">|</span> <span class=\"keyword\">global</span>] 系统变量名 <span class=\"operator\">=</span> 值;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（2）用户自定义变量<br><strong>说明：</strong>不用提前声明，在用的时候直接用“@变量名” 使用就可以了。（两个@是系统变量，一个@是用户自定义变量）  </p>\n<ol>\n<li>赋值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用<span class=\"keyword\">set</span>赋值</span><br><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"variable\">@var_name</span> <span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> <span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用<span class=\"keyword\">select</span>赋值</span><br><span class=\"line\"># 第一种方式</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr [,<span class=\"variable\">@var_name</span> :<span class=\"operator\">=</span> expr]...;</span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段名 <span class=\"keyword\">into</span> <span class=\"variable\">@var_name</span> <span class=\"keyword\">from</span> 表名;</span><br></pre></td></tr></table></figure></li>\n<li>使用<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"variable\">@var_name</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（3）局部变量<br><strong>说明：</strong>是根据需要定义在局部生效的变量，访问之前，需要 declare 声明，可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 begin…end 块。  </p>\n<ol>\n<li>声明<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 变量类型就是数据库字段类型</span><br><span class=\"line\"><span class=\"keyword\">declare</span> 变量名 变量类型;</span><br></pre></td></tr></table></figure></li>\n<li>赋值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> 变量名 <span class=\"operator\">=</span> 值;</span><br><span class=\"line\"><span class=\"keyword\">set</span> 变量名 :<span class=\"operator\">=</span> 值;</span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段名 <span class=\"keyword\">into</span> 变量名 <span class=\"keyword\">from</span> 表名...;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>6、<code>if</code>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件 <span class=\"keyword\">then</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">elseif 条件<span class=\"number\">2</span> <span class=\"keyword\">then</span>      <span class=\"comment\">-- 可选</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">else</span>                   <span class=\"comment\">-- 可选</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">end</span> if;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据定义的分数score变量，判定当前分数对应的分数等级</span><br><span class=\"line\"># score <span class=\"operator\">&gt;=</span> <span class=\"number\">85</span>分，等级为优秀</span><br><span class=\"line\"># score <span class=\"operator\">&gt;=</span> <span class=\"number\">60</span>分且 score <span class=\"operator\">&lt;</span> <span class=\"number\">85</span>分为及格</span><br><span class=\"line\"># score <span class=\"operator\">&lt;</span> <span class=\"number\">60</span>分为不及格</span><br><span class=\"line\"># 无参</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> score <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">58</span>;</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">result</span> varcher(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    if  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">85</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;优秀&#x27;</span>;</span><br><span class=\"line\">    elseif  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">60</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;不及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> if;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">result</span>; # 将结果查询出来</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 有参（是需要将结果返回）</span><br><span class=\"line\"># 下面参数说明：<span class=\"keyword\">in</span>表示入参，<span class=\"keyword\">out</span>表示返回结果的参数</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p2(<span class=\"keyword\">in</span> score <span class=\"type\">int</span>,<span class=\"keyword\">out</span> <span class=\"keyword\">result</span> <span class=\"type\">varchar</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\">    if  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">85</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;优秀&#x27;</span>;</span><br><span class=\"line\">    elseif  score  <span class=\"operator\">&gt;=</span>  <span class=\"number\">60</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>  <span class=\"keyword\">result</span>  :<span class=\"operator\">=</span>  <span class=\"string\">&#x27;不及格&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> if;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用，<span class=\"variable\">@result</span>表示 用用户自定义变量接收p2的返回值</span><br><span class=\"line\"><span class=\"keyword\">call</span> p2(<span class=\"number\">68</span>,<span class=\"variable\">@result</span>);</span><br></pre></td></tr></table></figure>\n<p>7、<code>case</code>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法格式</span><br><span class=\"line\"># 语法一，如果search_condition1成立，则执行statement_list1</span><br><span class=\"line\"><span class=\"keyword\">case</span></span><br><span class=\"line\">    <span class=\"keyword\">when</span> search_condition1 <span class=\"keyword\">then</span> statement_list1</span><br><span class=\"line\">    [<span class=\"keyword\">when</span> search_condition2 <span class=\"keyword\">then</span> statement_list2]...</span><br><span class=\"line\">    [<span class=\"keyword\">else</span> statement_list]</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 语法二，说明：case_value是表达式，如果表达式的结果为 search_condition1，就执行 search_condition1后的 <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> case_value</span><br><span class=\"line\">    <span class=\"keyword\">when</span> search_condition1 <span class=\"keyword\">then</span> statement_list1</span><br><span class=\"line\">    [<span class=\"keyword\">when</span> search_condition2 <span class=\"keyword\">then</span> statement_list2]...</span><br><span class=\"line\">    [<span class=\"keyword\">else</span> statement_list]</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据传入的月份，判定月份所属的季节</span><br><span class=\"line\"># <span class=\"number\">1</span><span class=\"number\">-3</span>月份，为第一季度</span><br><span class=\"line\"># <span class=\"number\">4</span><span class=\"number\">-6</span>月份，为第二季度</span><br><span class=\"line\"># <span class=\"number\">7</span><span class=\"number\">-9</span>月份，为第三季度</span><br><span class=\"line\"># <span class=\"number\">10</span><span class=\"number\">-12</span>月份，为第四季度</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p1(<span class=\"keyword\">in</span> <span class=\"keyword\">month</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">result</span> <span class=\"type\">varchar</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">3</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第一季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第二季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">7</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">9</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第三季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> <span class=\"keyword\">month</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"keyword\">month</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">12</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;第四季度&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">set</span> <span class=\"keyword\">result</span> :<span class=\"operator\">=</span> &quot;非法参数&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">case</span>;</span><br><span class=\"line\">\t# 查询展示，相当于println输出</span><br><span class=\"line\">    <span class=\"keyword\">select</span> concat(<span class=\"string\">&#x27;您输入的月份为：&#x27;</span>,<span class=\"keyword\">month</span>,<span class=\"string\">&#x27;,所有的季度为：&#x27;</span>,<span class=\"keyword\">result</span>);  </span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p1(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>8、<code>while</code>语法<br><strong>说明：</strong>满足条件后再执行循环体中的SQL语句。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法，先判定条件，如果条件为<span class=\"literal\">true</span>，则执行逻辑，否则不执行</span><br><span class=\"line\">while 条件 do</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\"><span class=\"keyword\">end</span> while;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    while n <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> do</span><br><span class=\"line\">        <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> while;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>9、<code>repeat</code>语法<br><strong>说明：</strong>当满足条件的时候退出循环。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法，先执行一次逻辑，然后判断逻辑是否满足，</span><br><span class=\"line\"># 如果满足就退出；如果不满足就继续循环</span><br><span class=\"line\">repeat</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\">    until 条件</span><br><span class=\"line\"><span class=\"keyword\">end</span> repeat;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    repeat </span><br><span class=\"line\">        <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    until n <span class=\"operator\">&lt;=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span> repeat;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>10、<code>loop</code>语法<br><strong>说明：</strong>简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环。loop配合下面两个语句使用：<br>（1）leave：配合循环使用，退出循环；<br>（2）iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一个循环。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法</span><br><span class=\"line\">[begin_label]:loop</span><br><span class=\"line\">    <span class=\"keyword\">SQL</span>逻辑...</span><br><span class=\"line\"><span class=\"keyword\">end</span> loop [end_label];</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出两个语句的使用</span><br><span class=\"line\">leavel label; # 退出指定标记的循环体，label为上面begin_label</span><br><span class=\"line\">iterate label; # 直接进入下一次循环</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例子：计算从<span class=\"number\">1</span>累加到n的值，n为传入的参数值。</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> n <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> total <span class=\"type\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    sum:loop </span><br><span class=\"line\">        if n <span class=\"operator\">&lt;=</span> <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            leave sum;</span><br><span class=\"line\">        <span class=\"keyword\">end</span> if;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> total :<span class=\"operator\">=</span> total <span class=\"operator\">+</span> n;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> n :<span class=\"operator\">=</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> loop sum;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> total;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>11、游标<code>cursor</code><br><strong>说明：</strong>用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。游标的使用包括游标的声明、open、fetch和close。<br>（1）声明游标<br><code>declare 游标名称 cursor for 查询语句;</code><br>（2）打开游标<br><code>open 游标名称;</code><br>（3）获取游标记录<br><code>fetch 游标名称 into 变量[,变量];</code><br>（4）关闭游标<br><code>close 游标名称;</code><br>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据传入的参数 uage，来查询用户表 tb_user 中</span><br><span class=\"line\"># 所有的用户年龄小于等于 uage 的用户姓名和专业</span><br><span class=\"line\"># 并将用户的姓名和专业插入到所创建的一张新表中</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> p(<span class=\"keyword\">in</span> uage <span class=\"type\">int</span>) # 创建存储过程</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    # 注意：游标的声明必须在普通的声明之后</span><br><span class=\"line\">    # 声明两个变量uname、upro</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> uname <span class=\"type\">varchar</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> upro <span class=\"type\">varchar</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    # 声明一个游标，并把查询结果集赋值给这个游标</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> u_cursor <span class=\"keyword\">cursor</span> <span class=\"keyword\">for</span> <span class=\"keyword\">select</span> name,profession <span class=\"keyword\">from</span> tb_user <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;=</span> uage;</span><br><span class=\"line\">    # 声明一个条件处理程序，如果满足状态<span class=\"number\">02000</span>就关闭游标</span><br><span class=\"line\">    <span class=\"keyword\">declare</span> exit handler <span class=\"keyword\">for</span> <span class=\"keyword\">SQLSTATE</span> <span class=\"string\">&#x27;02000&#x27;</span> <span class=\"keyword\">close</span> u_cursor</span><br><span class=\"line\">     </span><br><span class=\"line\">    # 如果表 tb_user_pro 存在就删除</span><br><span class=\"line\">    <span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> tb_user_pro;</span><br><span class=\"line\">    # 如果表 tb_user_pro 不存在就创建</span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> tb_user_pro(</span><br><span class=\"line\">        id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">        name <span class=\"type\">varchar</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">        profession <span class=\"type\">varchar</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    # 开启游标</span><br><span class=\"line\">    <span class=\"keyword\">open</span> u_cursor;</span><br><span class=\"line\">    # 循环遍历游标，将游标中的name和profession的值分别赋值给上面声明的uname和upro</span><br><span class=\"line\">    #  将uanme和upro插入新创建的表 tb_user_pro 中</span><br><span class=\"line\">    while <span class=\"literal\">true</span> do</span><br><span class=\"line\">        <span class=\"keyword\">fetch</span> u_cursor <span class=\"keyword\">into</span> uname,upro;</span><br><span class=\"line\">        <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tb_user_pro <span class=\"keyword\">values</span>(<span class=\"keyword\">null</span>,uname,upro);</span><br><span class=\"line\">    <span class=\"keyword\">end</span> while;</span><br><span class=\"line\">    # 关闭游标</span><br><span class=\"line\">    <span class=\"keyword\">close</span> u_cursor;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用</span><br><span class=\"line\"><span class=\"keyword\">call</span> p(<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n<p>12、条件处理程序<code>handler</code><br><strong>说明：</strong>用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法</span><br><span class=\"line\"># handler_action说明：continue:继续执行当前程序  exit:终止执行当前程序</span><br><span class=\"line\"># condition_value说明：<span class=\"keyword\">SQLSTATE</span> sqlstate_value:状态码</span><br><span class=\"line\"><span class=\"keyword\">declare</span> handler_action handler <span class=\"keyword\">for</span> condition_value[,condition_value]... statement;</span><br><span class=\"line\"></span><br><span class=\"line\"># 例子在<span class=\"number\">11</span>例子中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、触发器\"><a href=\"#28、触发器\" class=\"headerlink\" title=\"28、触发器\"></a>28、触发器</h3><p><strong>说明：</strong>可以在insert、update和delete之前或者之后，触发并执行触发器中定义的SQL语句的集合。<br>使用两个 old 和 new 来引用触发器中发生的变化内容：<br>（1）insert型触发器（只有new）<br>new表示将要或者已经新增的数据。<br>（2）update型触发器（有 old 也有 new ）<br>old表示修改之前的数据，new表示将要或已经修改后的数据<br>（3）delete型触发器（只有old）<br>old表示将要或者已经删除的数据<br>1、语法<br>（1）创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># trigger_name：触发器名称</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> trigger_name</span><br><span class=\"line\"># 选择是之前还是之后，是插入、更新还是删除</span><br><span class=\"line\">before<span class=\"operator\">/</span>after  <span class=\"keyword\">insert</span><span class=\"operator\">/</span><span class=\"keyword\">update</span><span class=\"operator\">/</span><span class=\"keyword\">delete</span></span><br><span class=\"line\"># table_name：表名。<span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span>：行级触发器（mysql中只支持行级）</span><br><span class=\"line\"><span class=\"keyword\">on</span> table_name <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    trigger_content; # 触发器的逻辑</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p>（2）查看<br><code>show triggers;</code><br>（3）删除  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果没有指定 schema_name，默认为当前数据库</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">trigger</span> [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure>\n<p>2、例子<br>想要在插入用户表之后，把信息也插入到 tb_user 表中：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> tb_user_insert_trigger</span><br><span class=\"line\">after <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> tb_user <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"type\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"operator\">/</span><span class=\"operator\">/</span> 说明：new.id：插入到用户表的id；new.name：插入到用户表的姓名</span><br><span class=\"line\">    <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> user_logs(id,operation,operate_time,operate_id,operate_name) <span class=\"keyword\">values</span>(<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;insert&#x27;</span>,now(),new.id,new.name);</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、去重\"><a href=\"#29、去重\" class=\"headerlink\" title=\"29、去重\"></a>29、去重</h3><p>1、使用<code>distinct</code><br>说明：<code>distinct</code>关键词用于返回唯一不同的值，放在查询语句中的第一个字段前使用，且作用于主句所有列。<br>（1）单例去重<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slect <span class=\"keyword\">distinct</span> column_name <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<p>例如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">---</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>（2）多列去重<br>说明：<code>distinct</code>多列去重，是根据指定的去重列信息来进行，即只有所有指定的列信息都相同，才会被认为是重复的信息。<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> column1,column2 <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> sex,age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"keyword\">null</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<p>如果我只想对多列中的某个列去重，怎么做呢？<br>解决办法一：<br>使用<code>group_concat函数</code>（查看group_concant函数教程）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> group_concat(<span class=\"keyword\">distinct</span> sex) <span class=\"keyword\">as</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>解决办法二：<br>使用<code>group by</code>  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>（3）针对null处理<br><code>distinct</code>不会过滤null值，返回结果会包含null值，比如在多列去重的第一个例子中。<br>所以一般结合<code>count()</code>函数来使用，因为<code>count()</code>函数会过滤掉null项。<br>例如：<br>单使用<code>distinct</code>  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> age <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>结合<code>count()</code>函数使用  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> age) <span class=\"keyword\">from</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出，实际将<span class=\"keyword\">null</span>过滤掉了</span><br><span class=\"line\"><span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> age)</span><br><span class=\"line\"><span class=\"comment\">-------------------</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>2、使用<code>group by</code><br>（1）单列去重<br>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> columns <span class=\"keyword\">from</span> table_name <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> columns;</span><br></pre></td></tr></table></figure>\n<p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">age</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p>（2）多列去重<br>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex,age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"keyword\">null</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p>3、两者的区别<br>（1）<code>group by</code>可以在多列去重中进行单列去重，而<code>distinct</code>需要借助其它方式来进行。<code>group by</code>的原理是先对结果进行分组排序，然后返回每组中的第一条数据，且是根据<code>group by</code>的后接字段进行去重的。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex,age <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">sex    <span class=\"operator\">|</span>   age</span><br><span class=\"line\"><span class=\"comment\">-------+-------</span></span><br><span class=\"line\">male   <span class=\"operator\">|</span>   <span class=\"number\">10</span></span><br><span class=\"line\">female <span class=\"operator\">|</span>   <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>（2）在语义相同，有索引的情况下，<code>group by</code>和<code>distinct</code>都能使用索引，效率相同，因为<code>group by</code>和<code>distinct</code>近乎等价，<code>distinct</code>可以被看做特殊的<code>group by</code>；<br>（3）在语义相同，无索引的情况下，<code>distinct</code>效率高于<code>group by</code>，原因是<code>distinct</code>和<code>group by</code>都会进行分组操作，但<code>group by</code>在Mysql8.0之前会进行隐式排序，导致触发filesort，sql执行效率低下，但从Mysql8.0开始，Mysql就删除了隐式排序，所以，此时在语义相同，无索引的情况下，<code>group by</code>和<code>distinct</code>的执行效率也是近乎等价的。<br>（4）推荐使用<code>group by</code>，因为<code>group by</code>语义更为清晰，可对数据进行更为复杂的一些处理，相比于<code>distinct</code>来说，<code>group by</code>的语义明确，且由于<code>distinct</code>关键字会对所有字段生效，在进行复合业务处理时，<code>group by</code>的使用灵活性更高，<code>group by</code>能根据分组情况，对数据进行更为复杂的处理，例如通过<code>having</code>对数据进行过滤，或通过聚合函数对数据进行运输。  </p>\n<h3 id=\"30、更新数据库\"><a href=\"#30、更新数据库\" class=\"headerlink\" title=\"30、更新数据库\"></a>30、更新数据库</h3><p>1、方法一（不需要登录mysql客户端）<br>根据mysql命令执行sql脚本文件：<br><code>mysql -u username -p database_name【数据库名】 &lt; path/to/your/script.sql</code>。<br>注意：<br>（1）不能有中文；<br>（2）是<code>/</code>。  </p>\n<p>2、方法二<br>（1）使用<code>cmd</code>或者直接使用mysqlShell登录到mysql客户端；<br>（2）使用<code>use database_name【数据库名】;</code>；<br>（3）使用<code>source /path/to/your/demo.sql;</code>。  </p>\n<h3 id=\"31、导出数据（不含表结构）\"><a href=\"#31、导出数据（不含表结构）\" class=\"headerlink\" title=\"31、导出数据（不含表结构）\"></a>31、导出数据（不含表结构）</h3><p>可以使用<code>mysqldump</code>命令，在mysql的<code>bin</code>目录下查看是否有<code>mysqldump.exe</code>文件，如果有路径，使用绝对路径。<br>1、使用方法：<br><code>mysqldump -u 用户名 -p --no-create-info 数据库名 表名 &gt; 导出文件名.sql</code>。<br>参数说明：<br>（1）<code>-u</code>：指定用户名；<br>（2）<code>-p</code>：指定密码；<br>（3）<code>--no-create-info</code>：不导出表结构；<br>（4）<code>数据库名</code>：要导出的数据库名；<br>（5）<code>表名</code>：要导出的表名；<br>（6）<code>&gt; 导出文件名.sql</code>：将输出重定向到指定文件。<br>注意：如果数据包含中文或特殊字符，添加<code>--default-character-set=utf8mb4</code>指定编码，如下：<br><code>mysqldump -u root -p --no-create-info --default-character-set=utf8mb4 mydb mytable &gt; data.sql</code>。<br>其他输出选项：<br>（1）<code>--add-drop-database</code>：在每个数据库创建语句前加上drop database语句；<br>（2）<code>--add-drop-table</code>：在每个表创建语句前加上drop table语句，默认开启，不开启（–skip-add-drop-table）；<br>（3）<code>-d --no-data</code>：不包含数据。  </p>\n<p>2、扩展用法<br>（1）导出多张表的数据<br><code>mysqldump -u root -p --no-create-info mydb table1 table2 &gt; tables_data.sql</code>。<br>（2）导出时筛选数据（按条件导出）<br><code>mysqldump -u root -p --no-create-info --where=&quot;id &lt; 100&quot; mydb mytable &gt; filtered_data.sql</code>。<br>（3）导出为CSV格式<br><code>mysqldump</code>默认生成sql文件，但可以通过下面命令导出CSV格式：<br><code>mysql -u root -p -e &quot;SELECT * FROM mydb.mytable&quot; -B | sed &quot;s/&#39;/\\&#39;/;s/\\t/\\&quot;,\\&quot;/g;s/^/\\&quot;/;s/$/\\&quot;/;s/\\n//g&quot; &gt; data.csv</code>。<br>参数说明：<br><code>-e &quot;SELECT * FROM mydb.mytable&quot;</code>：直接执行 SQL 查询；<br><code>-B</code>：禁用表格格式化；<br><code>sed</code>：命令用于将结果转换为CSV格式。  </p>\n<h3 id=\"32、查看数据库各语句的使用频次\"><a href=\"#32、查看数据库各语句的使用频次\" class=\"headerlink\" title=\"32、查看数据库各语句的使用频次\"></a>32、查看数据库各语句的使用频次</h3><p>Mysql客户端连接成功后，通过show [session | global] status命令可以提供服务器状态信息，通过如下指令，可以查看当前数据库的insert、update、delete、select的访问频次。<br><code>show global status like &#39;Com______&#39;;</code>。（6个下划线）<br>1、计算读写比例  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_select&#x27;</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">reads</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_insert&#x27;</span>) <span class=\"operator\">+</span></span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_update&#x27;</span>) <span class=\"operator\">+</span></span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> Variable_value <span class=\"keyword\">FROM</span> performance_schema.global_status <span class=\"keyword\">WHERE</span> Variable_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Com_delete&#x27;</span>) <span class=\"keyword\">AS</span> writes;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"33、sql慢查询\"><a href=\"#33、sql慢查询\" class=\"headerlink\" title=\"33、sql慢查询\"></a>33、sql慢查询</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的SQL语句，通过慢查询日志，可以找出哪些SQL语句的执行效率低，以便进行优化。<br>1、查看慢查询日志是否开启<br><code>show variables like &#39;slow_query_log&#39;;</code>。  </p>\n<p>2、开启慢查询日志<br>在<code>my.cnf</code>配置文件中配置：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启mysql慢日志查询开关</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\"># 设置慢日志输出文件位置，不配置的话默认为/var/lib/mysql/localhost-slow.log</span><br><span class=\"line\">slow_query_log_file=/var/lib/mysql/mysql-slow.log</span><br><span class=\"line\"># 设置慢日志的时间阈值，单位秒，sql执行超过1秒，就会视为慢查询，记录慢查询日志</span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n<p>修改配置文件后，重启mysql服务。  </p>\n<h3 id=\"34、范围查询、非范围查询（between）\"><a href=\"#34、范围查询、非范围查询（between）\" class=\"headerlink\" title=\"34、范围查询、非范围查询（between）\"></a>34、范围查询、非范围查询（between）</h3><p>1、范围查询<br><code>select * from table_name where column1 between 50 and 100;</code>。  </p>\n<p>2、非范围查询<br><code>select * from table_name where column1 not between 50 and 100;</code>。  </p>\n<h3 id=\"35、包含、不包含查询（in）\"><a href=\"#35、包含、不包含查询（in）\" class=\"headerlink\" title=\"35、包含、不包含查询（in）\"></a>35、包含、不包含查询（in）</h3><p>1、包含查询<br><code>select * from table_name where column1 in (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);</code>。  </p>\n<p>2、不包含查询<br><code>select * from table_name where column1 not in (&#39;a&#39;, &#39;b&#39;, c);</code>。  </p>\n<h3 id=\"36、模糊查询\"><a href=\"#36、模糊查询\" class=\"headerlink\" title=\"36、模糊查询\"></a>36、模糊查询</h3><p>1、通配符<code>%</code><br><code>select * from table_name where name like &#39;Mr.%&#39;;</code>（以Mr.开头的字符串）。  </p>\n<p>2、单个字符通配符<code>_</code><br><code>select * from table_name where name like &#39;A_&#39;;</code>（以A开头，后跟任意一个字符）。  </p>\n<p>3、不匹配模糊查询<br><code>select * from table_name where name not like &#39;%.com&#39;;</code>。  </p>\n<h3 id=\"37、正则表达式查询\"><a href=\"#37、正则表达式查询\" class=\"headerlink\" title=\"37、正则表达式查询\"></a>37、正则表达式查询</h3><p><code>select * from table_name where name regexp &#39;^[0-9]&#39;;</code>（以数字开头的字符串）。  </p>\n<h3 id=\"38、分组\"><a href=\"#38、分组\" class=\"headerlink\" title=\"38、分组\"></a>38、分组</h3><p>1、常见分组示例<br>场景：有一张用户表（id、name、age、sex、create_year），根据create_year分组，显示所有用户信息。<br>使用窗口函数<code>ROW_NUMBER()</code>为每个分组内的记录分配唯一序号，然后在外部查询中筛选出每个分组的所有记录。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> grouped_users <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    create_year,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id) <span class=\"keyword\">AS</span> rn</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> user_table</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  id,</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  sex,</span><br><span class=\"line\">  create_year</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> grouped_users</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_year, rn;</span><br></pre></td></tr></table></figure>\n<p>如果需要统计每个分组的记录数，可以添加聚合函数：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> grouped_users <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    sex,</span><br><span class=\"line\">    create_year,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id) <span class=\"keyword\">AS</span> rn,</span><br><span class=\"line\">    <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> create_year) <span class=\"keyword\">AS</span> total_in_year</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> user_table</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  id,</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  sex,</span><br><span class=\"line\">  create_year,</span><br><span class=\"line\">  total_in_year</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> grouped_users</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_year, rn;</span><br></pre></td></tr></table></figure>\n\n<p>2、分组统计<br><code>select category, count(*) as count from table_name group by category;</code>。  </p>\n<p>3、多字段分组<br><code>select year, category, sum(amount) as total from table_name group by year, category;</code>。  </p>\n<p>4、分组后过滤（having）<br><code>select category, count(*) as count from table_name group by category having count &gt; 10;</code>。  </p>\n<p>5、先过滤再分组（where + group by）<br><code>select category, sum(amount) as total from table_name where year = 2025 group by category;</code>。  </p>\n<p>6、分组排序（group by + order by）<br><code>select category, avg(score) as avg_score from table_name group by category order by avg_score desc;</code>。  </p>\n<h3 id=\"39、子查询与CTE\"><a href=\"#39、子查询与CTE\" class=\"headerlink\" title=\"39、子查询与CTE\"></a>39、子查询与CTE</h3><p>1、单行子查询（在where中使用子查询）<br><code>select * from products where peice &gt; (select avg(price) from products);</code>。  </p>\n<p>2、多行子查询（在in中使用子查询）<br><code>select * from users where country in (select country from top_customers);</code>。  </p>\n<p>3、存在性子查询（exists）<br><code>select * from users u where exists (select 1 from orders o where o.user_id = u.id);</code>。<br>解释：<br>主查询：从users表中选择所有列（*）。<br>子查询（EXISTS 部分）：<br>（1）检查对于每个用户u，是否存在至少一条订单记录o满足o.user_id &#x3D; u.id；<br>（2）如果存在，则主查询保留该用户；否则过滤掉；<br>（3）子查询返回1仅作为存在标志（通常用SELECT 1而非SELECT *，性能更优）。  </p>\n<p>4、不存在性子查询（not exists）<br><code>select * from users u where not exists (select 1 from orders o where o.user_id = u.id);</code>。  </p>\n<p>5、CTE公共表达式（with子句）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> t_table <span class=\"keyword\">as</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">month</span>, <span class=\"built_in\">sum</span>(amount) <span class=\"keyword\">as</span> total</span><br><span class=\"line\">\t<span class=\"keyword\">from</span> sales</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_table <span class=\"keyword\">where</span> total <span class=\"operator\">&gt;</span> <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"40、日期处理\"><a href=\"#40、日期处理\" class=\"headerlink\" title=\"40、日期处理\"></a>40、日期处理</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 提取日期部分</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  <span class=\"type\">date</span>(order_time) <span class=\"keyword\">as</span> order_date, <span class=\"comment\">--提取日期，如：2023-10-01</span></span><br><span class=\"line\">  <span class=\"built_in\">extract</span>(<span class=\"keyword\">year</span> <span class=\"keyword\">from</span> order_time) <span class=\"keyword\">as</span> <span class=\"keyword\">year</span>, <span class=\"comment\">-- 提取年份</span></span><br><span class=\"line\">  <span class=\"built_in\">extract</span>(<span class=\"keyword\">month</span> <span class=\"keyword\">from</span> order_time) <span class=\"keyword\">as</span> <span class=\"keyword\">month</span> <span class=\"comment\">-- 提取月份</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 日期计算</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  order_time,</span><br><span class=\"line\">  order_time <span class=\"operator\">+</span> <span class=\"type\">interval</span> <span class=\"string\">&#x27;7 day&#x27;</span> <span class=\"keyword\">as</span> next_week_date <span class=\"comment\">-- 加7天</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"41、explain查看sql执行计划\"><a href=\"#41、explain查看sql执行计划\" class=\"headerlink\" title=\"41、explain查看sql执行计划\"></a>41、explain查看sql执行计划</h3><p>直接在select语句之前加上关键字<code>explain/desc</code>。<br>1、解释每列意思<br>（1）id<br>select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，值越大，越先执行）。<br>（2）select_type<br>表示select的类型，常见的取值有simple（简单表，即不使用表连接或者子查询）、primary（主查询，即外层的查询）、union（union中的第二个或者后面的查询语句）、subquery（select&#x2F;where之后包含了子查询）等。<br>（3）type（重点关注）<br>表示连接类型，性能由好到差的连接类型为null、system、const、eq_ref、ref、range、index、all。<br>（4）possible_key（重点关注）<br>显示可能应用在这张表上的索引，一个或多个。<br>（5）key（重点关注）<br>实际使用的索引，如果为null，则没有使用索引。<br>（6）key_len（重点关注）<br>表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。<br>（7）rows<br>mysql认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。<br>（8）filtered<br>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。  </p>\n<h3 id=\"42、数据库备份\"><a href=\"#42、数据库备份\" class=\"headerlink\" title=\"42、数据库备份\"></a>42、数据库备份</h3><p>下面的命令不是在mysql命令执行，是在cmd中执行。<br>加全局锁备份：<code>mysqldump -u root -p database_name &gt; xxx.sql;</code>：将database_name数据库备份到xxx.sql。<br>不加全局锁备份：<code>mysqldump --single-transaction -u root -p database_name &gt; xxx.sql;</code>。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、使用Mysql遇到的问题\"><a href=\"#三、使用Mysql遇到的问题\" class=\"headerlink\" title=\"三、使用Mysql遇到的问题\"></a>三、使用Mysql遇到的问题</h1><h3 id=\"1、如何解决错误-“public-key-retrieval-is-not-allowed”\"><a href=\"#1、如何解决错误-“public-key-retrieval-is-not-allowed”\" class=\"headerlink\" title=\"1、如何解决错误 “public key retrieval is not allowed”\"></a>1、如何解决错误 “public key retrieval is not allowed”</h3><p>1、说明<br>在使用<code>MySQL</code>数据库时，你可能会遇到一个错误，即<code>public key retrieval is not allowed</code>。这个错误通常出现在尝试连接或访问数据库时，而且可能会导致一些功能无法正常使用。<br>2、错误原因<br><code>public key retrieval is not allowed</code>错误通常是由于<code>MySQL</code>服务器配置的安全设置所导致的。默认情况下，<code>MySQL</code>服务器禁用了<code>public key</code>的检索功能，这是为了增加服务器的安全性而采取的一种措施。在某些情况下，这种设置会导致特定的功能无法正常工作，比如 SSL 连接或使用加密的用户密码。<br>3、解决办法<br>（1）修改<code>MySQL</code>服务器的配置文件以允许<code>public key</code>的检索功能。以下是具体步骤：  </p>\n<ul>\n<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>\n<li>在 [mysqld] 部分添加或修改以下行：  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 这个选项将允许所有用户以任意密码连接到 MySQL 服务器。</span><br><span class=\"line\">skip-grant-tables </span><br></pre></td></tr></table></figure></li>\n<li>保存并关闭配置文件；  </li>\n<li>重新启动 MySQL 服务器。</li>\n</ul>\n<p><strong>注意：</strong>这种方法会降低<code>MySQL</code>服务器的安全性，因为所有用户都可以以任意密码连接到服务器。因此，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（2）在连接数据库时使用命令行选项来允许 public key 的检索功能。以下是具体步骤：  </p>\n<ul>\n<li>打开命令行终端；  </li>\n<li>输入以下命令连接到 MySQL 服务器：  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> 这个命令将以禁用 SSL 连接的模式连接到 MySQL 服务器，从而允许 public key 的检索功能</span><br><span class=\"line\">mysql <span class=\"params\">--ssl-mode=DISABLED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> 如果是springboot yml配置文件，需要添加 allowPublicKeyRetrieval=<span class=\"literal\">true</span></span><br><span class=\"line\">url: jdbc<span class=\"function\">:mysql</span>:<span class=\"string\">//localhost</span><span class=\"function\">:3306</span>/cloud_user?useSSL=<span class=\"literal\">false</span>&amp;allowPublicKeyRetrieval=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>输入用户名和密码以登录到 MySQL 服务器。</li>\n</ul>\n<p>请注意，这种方法也会降低连接的安全性，因为禁用了 SSL 连接。同样地，只有在调试或测试环境中使用此方法时才安全，不建议在生产环境中使用。<br>（3）使用正式的<code>SSL</code>证书<br>如果你需要在生产环境中使用<code>SSL</code>连接，并且遇到了<code>public key retrieval is not allowed</code>错误，那么你应该考虑使用有效的<code>SSL</code>证书。以下是具体步骤：  </p>\n<ul>\n<li>获取一个有效的 SSL 证书，并确保其配置了正确的公钥；  </li>\n<li>将 SSL 证书和密钥文件放置在指定目录（比如 &#x2F;etc&#x2F;mysql&#x2F;ssl&#x2F;）；  </li>\n<li>打开 MySQL 配置文件 my.cnf（或 my.ini）；  </li>\n<li>在 [mysqld] 部分添加或修改以下行：  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 这些选项将告诉 MySQL 服务器使用指定的 SSL 证书和密钥文件。</span><br><span class=\"line\">ssl-ca=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>ca-cert.pem</span><br><span class=\"line\">ssl-cert=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>server-cert.pem</span><br><span class=\"line\">ssl-key=<span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/ssl/</span>server-key.pem</span><br></pre></td></tr></table></figure></li>\n<li>保存并关闭配置文件；  </li>\n<li>重新启动 MySQL 服务器。</li>\n</ul>\n<h3 id=\"2、先排序再分组问题\"><a href=\"#2、先排序再分组问题\" class=\"headerlink\" title=\"2、先排序再分组问题\"></a>2、先排序再分组问题</h3><p>1、说明<br>在执行包含了分组、排序的sql时，会先执行<code>group by</code>分组，再执行<code>order by</code>排序，导致排序失效，如果想先排序再分组，解决办法在下面。<br>2、场景<br>拥有一张包含活动信息的数据表，其中涵盖活动名词、开始时间、类型等字段。我的任务是，根据开始时间先排序，然后在每个类型中选择最新的那条记录。<br>3、方法一（针对<code>5.7版本</code>）<br>在子查询中首先对数据进行排序，然后在外部查询中使用分组操作（<strong>注意：</strong>此处子查询必须添加<code>limit</code>，值根据实际情况调整），添加<code>limit</code>可以保留排序后的顺序。<br><code>order by</code>：<code>desc</code>为倒叙（大到小），<code>asc</code>：为正序（小到大）。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> start_time limit <span class=\"number\">100000</span>)t1 <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> type <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> type;</span><br></pre></td></tr></table></figure>\n<p>这个查询首先将整个表按照开始时间降序排序，然后在外部查询中按类别进行分组，由于已经排序，每个类型中的第一行即为最新的记录。<br>4、方法二（针对<code>8.0版本</code>）<br>通过使用窗口函数（如<code>row_number()</code>）在内部查询中为每一行分配一个行号，然后在外部查询中筛选行号为1的记录。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t1.<span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> <span class=\"operator\">*</span>,</span><br><span class=\"line\">  <span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> type <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> start_time <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> rn</span><br><span class=\"line\">  <span class=\"keyword\">from</span> test</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.rn <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><code>row_number()</code>：为每一行添加行号；<br><code>partition by type</code>：按照类别分组；<br><code>order by start_time desc</code>：按照开始时间倒叙排序。<br>这个查询首先为每个类型中的每一行分配一个行号，然后在外部查询中筛选行号为1的记录，这些记录即为每个类型中开始时间最新的记录。  </p>\n<h3 id=\"3、子查询的特殊示例\"><a href=\"#3、子查询的特殊示例\" class=\"headerlink\" title=\"3、子查询的特殊示例\"></a>3、子查询的特殊示例</h3><p>场景：<br>查询与”张三”的薪资及直属领导相同的员工信息。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 下面的sql相当于：</span></span><br><span class=\"line\"><span class=\"comment\">-- select * from employee where salary = &#x27;张三的薪资&#x27; and manager_id = &#x27;张三的直属领导id&#x27;;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> (salary, manager_id) <span class=\"operator\">=</span> (<span class=\"keyword\">select</span> salary, manager_id <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、Mysql函数使用\"><a href=\"#四、Mysql函数使用\" class=\"headerlink\" title=\"四、Mysql函数使用\"></a>四、Mysql函数使用</h1><h3 id=\"1、聚合函数\"><a href=\"#1、聚合函数\" class=\"headerlink\" title=\"1、聚合函数\"></a>1、聚合函数</h3><h4 id=\"（1）计数count\"><a href=\"#（1）计数count\" class=\"headerlink\" title=\"（1）计数count\"></a>（1）计数count</h4><p><code>select count(*) from table_name;</code><br>1、count(*)<br>计算所有行的数量，包括NULL值行。  </p>\n<p>2、count(1)<br>计算所有行的数量，等同于count(*)。  </p>\n<p>3、count(id)<br>计算指定列中非NULL值的数量。  </p>\n<p>4、性能比较<br><code>count(*)</code>最优、<code>count(1)</code>等同于<code>count(*)</code>、count(id)稍慢。  </p>\n<h4 id=\"（2）去重计数\"><a href=\"#（2）去重计数\" class=\"headerlink\" title=\"（2）去重计数\"></a>（2）去重计数</h4><p><code>select count(distinct column1) from table_name;</code>。  </p>\n<h4 id=\"（3）求和sum\"><a href=\"#（3）求和sum\" class=\"headerlink\" title=\"（3）求和sum\"></a>（3）求和sum</h4><p><code>select sum(amount) as total_amount from table_name;</code>。  </p>\n<h4 id=\"（4）求平均值avg\"><a href=\"#（4）求平均值avg\" class=\"headerlink\" title=\"（4）求平均值avg\"></a>（4）求平均值avg</h4><p><code>select avg(score) as avg_score from table_name;</code>。  </p>\n<h4 id=\"（5）求最大值max\"><a href=\"#（5）求最大值max\" class=\"headerlink\" title=\"（5）求最大值max\"></a>（5）求最大值max</h4><p><code>select max(price) as max_price from table_name;</code>。  </p>\n<h4 id=\"（6）求最小值min\"><a href=\"#（6）求最小值min\" class=\"headerlink\" title=\"（6）求最小值min\"></a>（6）求最小值min</h4><p><code>select min(price) as min_price from table_name;</code>。  </p>\n<h4 id=\"（7）组合聚合函数（多聚合统计）\"><a href=\"#（7）组合聚合函数（多聚合统计）\" class=\"headerlink\" title=\"（7）组合聚合函数（多聚合统计）\"></a>（7）组合聚合函数（多聚合统计）</h4><p><code>select category, count(*) as cnt, sum(amount) as total, avg(price) as avg_price from table_name group by category;</code>。  </p>\n<h3 id=\"2、窗口函数（分析函数）\"><a href=\"#2、窗口函数（分析函数）\" class=\"headerlink\" title=\"2、窗口函数（分析函数）\"></a>2、窗口函数（分析函数）</h3><p>1、行号排序（row_number()）<br><code>select *, row_number() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>2、并列排序（rank()，会跳号）<br>相同数值排名相同，但是会跳号，比如：1、1、3（这里本来是2，但是跳号了）。<br><code>select *, rank() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>3、连续排序（dense_rank()，不跳号）<br>相同数值排名相同，不跳号，比如：1、1、2。<br><code>select *, dense_rank() over (order by sales desc) as rank from employees;</code>。  </p>\n<p>4、分组内排序（partition by）<br>用于将数据分组后，在每个分组内单独计算窗口函数。<br>（1）示例一（各部门中进行排序）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> sales <span class=\"keyword\">DESC</span>) <span class=\"keyword\">AS</span> dept_rank</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees;</span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> name </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> dept_rank </span>|</span><br><span class=\"line\">|<span class=\"string\">------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">-----------</span>|</span><br><span class=\"line\">|<span class=\"string\"> Alice</span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 100   </span>|<span class=\"string\"> 1         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Bob  </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 90    </span>|<span class=\"string\"> 2         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Carol</span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 1         </span>|</span><br><span class=\"line\">|<span class=\"string\"> Dave </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 70    </span>|<span class=\"string\"> 2         </span>|</span><br></pre></td></tr></table></figure>\n<p>（2）示例二（组内累计计算，如各部门销售额累计）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    <span class=\"type\">date</span>,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(sales) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"type\">date</span>) <span class=\"keyword\">AS</span> running_total</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sales_data;</span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> date       </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> running_total </span>|</span><br><span class=\"line\">|<span class=\"string\">------------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">---------------</span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-01 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 100   </span>|<span class=\"string\"> 100           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-02 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 50    </span>|<span class=\"string\"> 150           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-03 </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 230           </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2022-01-01 </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 80    </span>|<span class=\"string\"> 80            </span>|</span><br></pre></td></tr></table></figure>\n<p>按department分组后，在每组内按date排序，计算sales的累计和。<br>（3）示例三（组内占比，如各部门销售额占比）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    sales <span class=\"operator\">/</span> <span class=\"built_in\">SUM</span>(sales) <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department) <span class=\"operator\">*</span> <span class=\"number\">100</span> <span class=\"keyword\">AS</span> percentage</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果示例：  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> name </span>|<span class=\"string\"> department </span>|<span class=\"string\"> sales </span>|<span class=\"string\"> percentage </span>|</span><br><span class=\"line\">|<span class=\"string\">------</span>|<span class=\"string\">------------</span>|<span class=\"string\">-------</span>|<span class=\"string\">------------</span>|</span><br><span class=\"line\">|<span class=\"string\"> Alice</span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 5000  </span>|<span class=\"string\"> 55.56%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Bob  </span>|<span class=\"string\"> Sales      </span>|<span class=\"string\"> 4000  </span>|<span class=\"string\"> 44.44%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Carol</span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 4500  </span>|<span class=\"string\"> 60.00%     </span>|</span><br><span class=\"line\">|<span class=\"string\"> Dave </span>|<span class=\"string\"> HR         </span>|<span class=\"string\"> 3000  </span>|<span class=\"string\"> 40.00%     </span>|</span><br></pre></td></tr></table></figure>\n<p>（4）示例四（多列分组）<br>按 department 和 year 分组后，再组内排名。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    name,</span><br><span class=\"line\">    department,</span><br><span class=\"line\">    <span class=\"keyword\">year</span>,</span><br><span class=\"line\">    sales,</span><br><span class=\"line\">    <span class=\"built_in\">ROW_NUMBER</span>() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> department, <span class=\"keyword\">year</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> sales <span class=\"keyword\">DESC</span>) <span class=\"keyword\">AS</span> rank</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sales_data;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"3、其他函数\"><a href=\"#3、其他函数\" class=\"headerlink\" title=\"3、其他函数\"></a>3、其他函数</h3><h4 id=\"（1）group-concat函数\"><a href=\"#（1）group-concat函数\" class=\"headerlink\" title=\"（1）group_concat函数\"></a>（1）group_concat函数</h4><p>1、有一张表结构test  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">   id   </span>|<span class=\"string\">   age   </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   20    </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   20    </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   10    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   30    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   40    </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   40    </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   50    </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   60    </span>|<span class=\"string\">  </span></span><br></pre></td></tr></table></figure>\n<p>2、以id分组，将age字段的值拼成一行，逗号分隔（默认）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>3、以id分组，将age字段的值拼成一行，分号分隔  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age separator <span class=\"string\">&#x27;;&#x27;</span>) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age separator <span class=\"string\">&#x27;;&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>;<span class=\"number\">20</span>;<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>;<span class=\"number\">40</span>;<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>;<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>4、以id分组，去除重复的age值  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(<span class=\"keyword\">distinct</span> age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(<span class=\"keyword\">distinct</span> age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">20</span>,<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>5、以id分组，将age字段的值拼成一行，逗号分隔，并按age排序（<code>desc倒序</code>）  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,group_concat(age <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id   <span class=\"operator\">|</span>   group_concat(age <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age)</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"operator\">|</span>   <span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"operator\">|</span>   <span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"operator\">|</span>   <span class=\"number\">50</span>,<span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>6、设置group_concat函数长度限制<br>临时设置法：<br>在命令行输入  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> session group_concat_max_len <span class=\"operator\">=</span> <span class=\"number\">18446744073709551615</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> max_allowed_packet <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"operator\">*</span> <span class=\"number\">1024</span> <span class=\"operator\">*</span> <span class=\"number\">1024</span> <span class=\"operator\">*</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>永久设置法：<br>在mysql配置文件中添加  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_allowed_packet <span class=\"operator\">=</span> <span class=\"number\">20</span>M</span><br><span class=\"line\">group_concat_max_len <span class=\"operator\">=</span> <span class=\"number\">18446744073709551615</span></span><br></pre></td></tr></table></figure>\n<p>重启mysql服务。  </p>\n<h4 id=\"（2）concat-ws函数\"><a href=\"#（2）concat-ws函数\" class=\"headerlink\" title=\"（2）concat_ws函数\"></a>（2）concat_ws函数</h4><p>可以用来将一列的值进行拼接，也可以实现多个字段的拼接。<br>1、有一张test表  </p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">   id   </span>|<span class=\"string\">   name   </span>|<span class=\"string\">   age   </span>|<span class=\"string\">   gender   </span>|</span><br><span class=\"line\">|<span class=\"string\">   1    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   25    </span>|<span class=\"string\">   female   </span>|</span><br><span class=\"line\">|<span class=\"string\">   2    </span>|<span class=\"string\">   Bob    </span>|<span class=\"string\">   30    </span>|<span class=\"string\">   male     </span>|</span><br><span class=\"line\">|<span class=\"string\">   3    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   25    </span>|<span class=\"string\">   female   </span>|</span><br><span class=\"line\">|<span class=\"string\">   4    </span>|<span class=\"string\">   Alice  </span>|<span class=\"string\">   30    </span>|<span class=\"string\">   female   </span>|</span><br></pre></td></tr></table></figure>\n<p>2、例子  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> concat_ws(<span class=\"string\">&#x27;,&#x27;</span>,name,age) <span class=\"keyword\">from</span> test <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name,age;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">Alice,<span class=\"number\">25</span></span><br><span class=\"line\">Alice,<span class=\"number\">30</span></span><br><span class=\"line\">Bob,<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（3）with-rollup\"><a href=\"#（3）with-rollup\" class=\"headerlink\" title=\"（3）with rollup\"></a>（3）with rollup</h4><p>1、说明<br>可以实现在分组统计数据基础上再进行相同的统计。<br>2、例子<br>例如我们按名字进行分组，再统计每个人登录的次数：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">sum</span>(sign_num) <span class=\"keyword\">as</span> sign_num <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"operator\">|</span>   name   <span class=\"operator\">|</span>   sign_num   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小丽   <span class=\"operator\">|</span>          <span class=\"number\">2</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小明   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小王   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   <span class=\"keyword\">null</span>   <span class=\"operator\">|</span>          <span class=\"number\">16</span>   <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n<p>其中记录null表示所有人的登录次数，我们可以使用<code>coalesce</code>来设置一个可以取代null的名称，<code>coalesce</code>语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> coalescec(a,b,c);</span><br></pre></td></tr></table></figure>\n<p>参数说明：如果a&#x3D;&#x3D;null，则选择b；如果b&#x3D;&#x3D;null，则选择c；如果a!&#x3D;null，则选择a；如果a，b，c都为null，则返回null。<br>修改上面例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">coalesce</span>(name,<span class=\"string\">&#x27;总数&#x27;</span>),<span class=\"built_in\">sum</span>(sign_num) <span class=\"keyword\">as</span> sign_num <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"operator\">|</span>   name   <span class=\"operator\">|</span>   sign_num   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小丽   <span class=\"operator\">|</span>          <span class=\"number\">2</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小明   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   小王   <span class=\"operator\">|</span>          <span class=\"number\">7</span>   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span>   总数   <span class=\"operator\">|</span>         <span class=\"number\">16</span>   <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（4）coalesce函数\"><a href=\"#（4）coalesce函数\" class=\"headerlink\" title=\"（4）coalesce函数\"></a>（4）coalesce函数</h4><p><code>coalesce</code>函数接受多个参数，返回参数列表中的第一个非null值：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,<span class=\"built_in\">coalesce</span>(age, <span class=\"number\">0</span>) <span class=\"keyword\">as</span> age <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>以上sql语句中，如果age为null，则coalesce函数返回0。  </p>\n<h4 id=\"（5）ifnull函数\"><a href=\"#（5）ifnull函数\" class=\"headerlink\" title=\"（5）ifnull函数\"></a>（5）ifnull函数</h4><p>是<code>coalesce</code>函数特定版本，它接受两个参数，如果第一个参数为null，则返回第二个参数。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name,ifnull(age, <span class=\"number\">0</span>) <span class=\"keyword\">as</span> age <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（6）find-in-set函数\"><a href=\"#（6）find-in-set函数\" class=\"headerlink\" title=\"（6）find_in_set函数\"></a>（6）find_in_set函数</h4><p>1、说明<br><code>find_in_set(str,strlist)</code>：查询表中的字段（strlist）中包含（str）的结果，返回结果为记录或null。<br>str：要查询的字符串；<br>strlist：表中的字段名，该字段值要是以<code>,</code>分隔的字符串。<br>2、例子1  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> find_in_set(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a,b,c,d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：2。<br>说明：strlist中下标从1开始，然后b在strlist中下标位置为第二个，所以返回2。<br>3、例子2  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> find_in_set(<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;1,2&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：0。<br>说明：因为6不在strlist中，所以返回0。<br>4、例子3<br>sys_dept表为：  </p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">dept_id</span>  ancestors</span><br><span class=\"line\"><span class=\"attribute\">101</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attribute\">201</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attribute\">202</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br><span class=\"line\"><span class=\"attribute\">203</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br><span class=\"line\"><span class=\"attribute\">204</span>        <span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">201</span></span><br></pre></td></tr></table></figure>\n<p>查询语句为：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept_id <span class=\"keyword\">from</span> sys_dept <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;201&#x27;</span>,ancestors);</span><br></pre></td></tr></table></figure>\n<p>结果为：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td></tr></table></figure>\n<p>说明：从<code>sys_dept</code>表中查询，ancestors字段中含有201的数据，并只返回dept_id列，如果要查询201根目录和所有子目录数据，比如204，就是：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept_id <span class=\"keyword\">from</span> sys_dept <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;201&#x27;</span>,ancestors) <span class=\"keyword\">or</span> dept_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;201&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>结果为：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td></tr></table></figure>\n<p>5、和<code>in</code>的区别<br>弄个测试表：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `test` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">8</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> auto_increment,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `llist` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key(`id`)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">2</span>, <span class=\"string\">&#x27;name2&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `test` <span class=\"keyword\">values</span> (<span class=\"number\">3</span>, <span class=\"string\">&#x27;name3&#x27;</span>,<span class=\"string\">&#x27;daodao,xiaohe,xiaoqin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>原来以为mysql可以这样查询：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> <span class=\"string\">&#x27;daodao&#x27;</span> <span class=\"keyword\">in</span> (list); </span><br></pre></td></tr></table></figure>\n<p>上面这样查是查不到的数据的，会为null；只有将list改为：’daodao’,’xiaohe’,’xiaoqin’才能查询到数据，因为list是变量，而’daodao’,’xiaohe’,’xiaoqin’是常量，所以只有改成下面这样才能查询到数据：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> <span class=\"string\">&#x27;daodao&#x27;</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;daodao&#x27;</span>,<span class=\"string\">&#x27;xiaohe&#x27;</span>,<span class=\"string\">&#x27;xiaoqin&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p>或者使用<code>find_in_set()</code>：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test <span class=\"keyword\">where</span> find_in_set(<span class=\"string\">&#x27;daodao&#x27;</span>,list); </span><br></pre></td></tr></table></figure>\n<p>总结：所以如果list是常量，则可以直接用<code>IN</code>， 否则要用<code>find_in_set()</code>函数。  </p>\n<h4 id=\"（7）field函数\"><a href=\"#（7）field函数\" class=\"headerlink\" title=\"（7）field函数\"></a>（7）field函数</h4><p>1、使用场景<br>在日常开发过程中，排序是经常用到的，有时候有这样的需求，需要在查询结果中根据某个字段的具体值来排序，比如：有张用户表，想按照‘seiki’、‘iris’来排序。<br>2、例子<br>（1）正序  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># field(str, str1, str2 ,str3.....)</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> field(name,<span class=\"string\">&#x27;seiki&#x27;</span>,<span class=\"string\">&#x27;iris&#x27;</span>,<span class=\"string\">&#x27;xut&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">id\t\tname\tage</span><br><span class=\"line\"># 这里还有很多记录，不在str1，str2，str3中的记录，然后会把这些记录放在前面</span><br><span class=\"line\"># 把在str1，str2，str3中的记录放在后面，str值相同的按照主键的顺序排列</span><br><span class=\"line\">......（前面还有很多记录，这里省略）</span><br><span class=\"line\"><span class=\"number\">3</span>\t\tseiki\t<span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">4</span>\t\tseiki\t<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">1</span>\t\tiris\t<span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">2</span>\t\tiris\t<span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">6</span>\t\txut\t\t<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span>\t\txut\t\t<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>（2）倒叙  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> field(name,<span class=\"string\">&#x27;seiki&#x27;</span>,<span class=\"string\">&#x27;iris&#x27;</span>,<span class=\"string\">&#x27;xut&#x27;</span>) <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（8）char-length函数\"><a href=\"#（8）char-length函数\" class=\"headerlink\" title=\"（8）char_length函数\"></a>（8）char_length函数</h4><p>char_length(str)：返回字符串str的字符数。  </p>\n<h4 id=\"（9）concat-ws函数\"><a href=\"#（9）concat-ws函数\" class=\"headerlink\" title=\"（9）concat_ws函数\"></a>（9）concat_ws函数</h4><p>concat_ws(s, s1, s2….sn)：将s1，s2……sn用s连起来。  </p>\n<h4 id=\"（10）format函数\"><a href=\"#（10）format函数\" class=\"headerlink\" title=\"（10）format函数\"></a>（10）format函数</h4><p>format(x, n)：将数字x按照“x,xxx.xx”格式返回，n为x保留的小数点位数，最后一位四舍五入。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> format(<span class=\"number\">250500.5634</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"number\">250</span>,<span class=\"number\">500.56</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（11）insert函数\"><a href=\"#（11）insert函数\" class=\"headerlink\" title=\"（11）insert函数\"></a>（11）insert函数</h4><p>insert(str1, x, len, str2)：将str1第x位开始，长度为len的字符串替换为str2。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">insert</span>(<span class=\"string\">&#x27;google.com&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"string\">&#x27;runoob&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出，将<span class=\"string\">&#x27;google.com&#x27;</span>从第<span class=\"number\">1</span>位开始，长度为<span class=\"number\">6</span>的字符串替换为<span class=\"string\">&#x27;runoob&#x27;</span></span><br><span class=\"line\">runoob.com</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（12）locate函数\"><a href=\"#（12）locate函数\" class=\"headerlink\" title=\"（12）locate函数\"></a>（12）locate函数</h4><p>locate(str1, str2)：返回str2在str1中第一次出现的位置，如果str2不在str1中，则返回0。  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> locate(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"（13）lcase函数、lower函数\"><a href=\"#（13）lcase函数、lower函数\" class=\"headerlink\" title=\"（13）lcase函数、lower函数\"></a>（13）lcase函数、lower函数</h4><p>lcase(str)：将字符串str中的字母全部转换为小写。<br>lower(str)：将字符串str中的字母全部转换为小写。  </p>\n<h4 id=\"（14）left函数\"><a href=\"#（14）left函数\" class=\"headerlink\" title=\"（14）left函数\"></a>（14）left函数</h4><p>left(str, len)：返回字符串str的前len个字符。  </p>\n<h4 id=\"（15）ltrim函数\"><a href=\"#（15）ltrim函数\" class=\"headerlink\" title=\"（15）ltrim函数\"></a>（15）ltrim函数</h4><p>ltrim(str)：删除字符串str左侧的空格。  </p>\n<h4 id=\"（16）position函数\"><a href=\"#（16）position函数\" class=\"headerlink\" title=\"（16）position函数\"></a>（16）position函数</h4><p>position(str1 in s)：从字符串s中获取str1的开始位置。  </p>\n<h4 id=\"（17）repeat函数\"><a href=\"#（17）repeat函数\" class=\"headerlink\" title=\"（17）repeat函数\"></a>（17）repeat函数</h4><p>repeat(str, n)：将字符串str重复n次。  </p>\n<h4 id=\"（18）replace函数\"><a href=\"#（18）replace函数\" class=\"headerlink\" title=\"（18）replace函数\"></a>（18）replace函数</h4><p>replace(s, s1, s2)：将s中的s1替换为s2。  </p>\n<h4 id=\"（19）reverse函数\"><a href=\"#（19）reverse函数\" class=\"headerlink\" title=\"（19）reverse函数\"></a>（19）reverse函数</h4><p>reverse(str)：将字符串str的顺序反过来。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"五、优化\"><a href=\"#五、优化\" class=\"headerlink\" title=\"五、优化\"></a>五、优化</h1><h3 id=\"1、索引\"><a href=\"#1、索引\" class=\"headerlink\" title=\"1、索引\"></a>1、索引</h3><p>1、介绍<br>如果没有使用索引，在查找时，会从第一个数据开始查找。<br>使用了索引，首先会再创建一个数据结构，比如二叉树，然后查找时会先根据二叉树的规则（左树比根节点小，右树比根节点大）对数据结构来进行查找，然后返回对应的数据。  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">  \n\n<p>2、索引结构<br>（1）B+树（B+Tree）索引<br>最常见的索引类型，大部分引擎都支持B+树索引。<br>InnoDB、MyISAM、Memory都支持。<br>以一颗最大度数为3（3阶）的B+Tree为例：  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">  \n<p>说明：所有的元素都会出现在叶子节点，并且叶子节点形成一个单向链表；非叶子节点不存储数据。<br>（2）Hash索引<br>底层数据结构是用哈希表实现的，只有精确匹配索引的查询才有效，不支持范围查询。<br>InnoDB、MyISAM不支持，Memory支持。<br>（3）R-Tree（空间索引）<br>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少。<br>InnoDB、Memory不支持，MyISAM支持。<br>（4）Full-text（全文索引）<br>是一种通过建立倒排索引，快速匹配文档的方式。<br>InnoDB5.6版本之后支持，MyISAM支持，Memory不支持。<br>（5）B-Tree（B树：又称多路平衡查找树）<br>以一颗最大度数（一个节点的子节点个数）为5（5阶）的B-Tree为例，每个节点最多存储4个key，5个指针）：  </p>\n<img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">  \n<p>说明：小于20的在第一个指针；20-30之间的在第二个指针，其它同理。  </p>\n<p>3、索引分类<br>（1）基本分类  </p>\n<ul>\n<li>主键索引<br>针对于表中的主键创建的索引，默认自动创建，只能有一个，关键字（primary）。  </li>\n<li>唯一索引<br>避免同一个表中某数据列中的值重复，可以有多个，关键字（unique）。  </li>\n<li>常规索引<br>快速定位特定数据，可以有多个。  </li>\n<li>全文索引<br>全文索引查找的是文本中的关键词，而不是比较索引中的值，可以有多个，关键字（fulltext）。</li>\n</ul>\n<p>（2）特殊分类  </p>\n<ul>\n<li>InnoDB聚集索引<br>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据，必须有，且只有一个（默认主键是聚集索引）。<br>聚集索引选取规则：</li>\n</ul>\n<ol>\n<li>如果存在主键，主键索引就是聚集索引；  </li>\n<li>如果不存在主键，将使用第一个唯一索引作为聚集索引；  </li>\n<li>如果表没有主键，也没有唯一所哟，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li>\n</ol>\n<ul>\n<li>InnoDB二级索引<br>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个。  <img src=\"/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.jpg\" class=\"\">  \n说明：</li>\n</ul>\n<ol>\n<li>聚集索引最下面的叶子节点绿色部分存的就是行数据，例如：叶子节点5存的就是id为5的数据；  </li>\n<li>name属性建为索引，它不会成为聚集索引了，因为聚集索引是主键，只能有一个，所以name索引为二级索引；  </li>\n<li>二级索引叶子节点黄色部分存的是主键id。</li>\n</ol>\n<ul>\n<li>举例说明（以上图为例）<br>执行<code>select * from user where name = &#39;Arm&#39;;</code>：</li>\n</ul>\n<ol>\n<li>它会先使用二级索引，Arm和Lee比较，A在L前面，所以走到第一个指针，和Geek比较，找到Arm；  </li>\n<li>Arm下面的id为10，它再使用聚集索引，用10去查找。</li>\n</ol>\n<p>4、索引语法<br>（1）创建索引<br><code>create [unique|fulltext] index index_name on table_name (index_col_name,...);</code><br>（2）查看索引<br><code>show index from table_name;</code><br>（3）删除索引<br><code>drop index index_name on table_name;</code><br>（4）修改索引<br>先删除，再创建。  </p>\n<p>5、索引的使用<br>（1）最左前缀法则<br>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>比如：由id、name、card三个字段组成的联合索引idx_user_id_name_card，在查询时，必须满足最左边（id）存在，才能使索引生效；假如查询时，使用了id，但是跳过了name（没有使用name），直接使用了card，则只会id生效，card索引不生效。  </p>\n<ul>\n<li><code>select * from user where id = 1 and name = &quot;xiaoming&quot; and card = &quot;1&quot;</code>：索引生效；  </li>\n<li><code>select * from user where name = &quot;xiaoming&quot; and card = &quot;1&quot;</code>：索引不生效；  </li>\n<li><code>select * from user where id = 1 and card = &quot;1&quot;</code>：只有id索引生效。</li>\n</ul>\n<p>6、索引失效的常见<br>（1）范围查询<br>联合索引中，出现范围查询（&lt;,&gt;），范围查询右侧的列索引失效。<br>比如：由profession、age、status三个字段组成的联合索引。<br><code>select * from user where profession = &quot;软件工程&quot; and age &gt; 30 and status = &quot;0&quot;</code>：只有profession和age生效，范围查询右侧的status失效；<br>可以使用大于等于来规避失效：<br><code>select * from user where profession = &quot;软件工程&quot; and age &gt;= 30 and status = &quot;0&quot;</code>：都生效。<br>（2）索引列运算<br>不要在索引列上进行运算操作，否则索引将失效。<br>比如：只有phone字段组成的单列索引，查询phone第10位数字开始，后两位等于15的数据。<br><code>select * from user where substring(phone, 10, 2) = &#39;15&#39;</code>：索引失效。<br>（3）字符串不加引号<br>字符串类型字段使用时，不加引号，索引将失效。<br>比如：只有phone字段组成的单列索引，然后这个字段类型是varchar。<br><code>select * from user where phone = 13987645632</code>：查询时，没有用引号，索引失效。<br>（4）模糊查询<br>当%放在前面（like ‘%value’）或者前后都有（like ‘%value%’）时，索引失效；<br>当%放在后面（like ‘value%’）时，索引有效。<br>（5）or连接的条件<br>用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到（都会失效）；只有or前后的列都有索引，才会生效。<br>（6）数据分步影响<br>如果mysql评估使用索引比全表更慢，则不会使用索引。  </p>\n<p>7、sql提示<br>场景：假如有一个由profession、age、status三个字段组成的联合索引和profession单列索引，我们在执行<code>select * from user where profession = &quot;软件工程&quot;</code>查询时，mysql会优先使用聚合索引，如果我们想要使用单列索引，可以手动设置。<br>可以使用下面三种方式：<br>（1）use index：告诉mysql，你可以使用哪些索引；<br><code>explain select * from user use index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。<br>（2）ignore index：告诉mysql，不要使用哪些索引；<br><code>explain select * from user ignore index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。<br>（3）force index：强制mysql使用某个索引。<br><code>explain select * from user force index(idx_user_profession) where profession = &#39;软件工程&#39;</code>。  </p>\n<p>8、覆盖索引<br>索引包含所有需要查询的字段的值，被称之为覆盖索引。<br>覆盖索引可以减少树的搜索次数，显著提升查询性能。<br>（1）<code>select * from user where id = 2</code>：因为id为主键索引，而默认主键索引为聚集索引，所以只用查询一个索引就能返回数据。<br>（2）我们建立name索引，此时name索引为二级索引，叶子节点存储的数据是id，然后查询<code>select id,name from user where name = &#39;Arm&#39;</code>：它需要先对name二级索引进行查找，因为二级索引叶子节点下面存储的是id，我们再看我们要查询的字段只有id，name，此时进行二级索引查找就可以查到我们需要的字段，不用回表（再次对id聚集所有查询），这就是覆盖索引。<br>（3）<code>select id,name,gender from user where name = &#39;Arm&#39;</code>：这个比上面（2）中多查找了一个gender字段，此时就涉及到回表查询，它需要先对name二级索引进行查找，然后根据id聚集索引进行回表查询，所以不是覆盖索引。  </p>\n<p>9、前缀索引<br>当字段类型为字符串（varchar、text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提供索引效率。<br>（1）创建前缀索引<br><code>create index idx_xxx on table_name(column(n))</code>：n为提取column字段前面n个字符作为索引。<br>（2）前缀长度<br>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高，则查询效率越高，唯一索引的选择性是1，这个最好的索引选择性，性能也是最好的，可以根据下面来计算选择性：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">column</span>) <span class=\"operator\">/</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> table_name;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"built_in\">substring</span>(<span class=\"keyword\">column</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"operator\">/</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<p>9、索引设计原则<br>（1）针对于数据量较大（100W条），且查询比较频繁的表建立索引。<br>（2）针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。<br>（3）尽量选择区分度高（比如手机号、身份证号这些不会重复的）的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。<br>（4）如果字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。<br>（5）尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。<br>（6）要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。<br>（7）如果索引列不能存储null值，请再创建表时使用not null约束它，当优化器知道每列是否包含null值时，它可以更好地确定哪个索引最有效地用于查询。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、Mysql日志\"><a href=\"#六、Mysql日志\" class=\"headerlink\" title=\"六、Mysql日志\"></a>六、Mysql日志</h1><h3 id=\"1、错误日志\"><a href=\"#1、错误日志\" class=\"headerlink\" title=\"1、错误日志\"></a>1、错误日志</h3><p><code>show variables like &#39;%log_error%&#39;;</code>：查看错误日志在哪里。  </p>\n<h3 id=\"2、二进制日志\"><a href=\"#2、二进制日志\" class=\"headerlink\" title=\"2、二进制日志\"></a>2、二进制日志</h3><p>1、介绍<br>二进制日志记录了所有的DDL（数据定义语言）语句和DML（数据库操作语言）语句，但不包括数据查询（select、show）语句。<br>Mysql8版本，默认二进制日志是开启的：<code>show variables like &#39;%log_bin%&#39;;</code>查看各个参数。<br>可以看到log_bin_basename，这个对应的value值就是二进制日志存放的路径，只要是binlog前缀的都是二进制文件。  </p>\n<p>2、作用<br>（1）灾难时的数据恢复；<br>（2）Mysql的主从复制。  </p>\n<p>3、二进制日志文件查看<br>由于二进制日志文件是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具<code>mysqlbinlog</code>来查看，具体语法：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqlbinlog [参数选项] logfilename</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\"><span class=\"operator\">-</span>d：指定数据库名称，只列出指定的数据库相关操作</span><br><span class=\"line\"><span class=\"operator\">-</span>o：忽略掉日志中的前n行命名</span><br><span class=\"line\"><span class=\"operator\">-</span>v：将行事件（数据变更的记录）重构为<span class=\"keyword\">sql</span>语句</span><br><span class=\"line\"><span class=\"operator\">-</span>w：将行事件（数据变更的记录）重构为<span class=\"keyword\">sql</span>语句，并输出注释信息</span><br></pre></td></tr></table></figure>\n\n<p>4、二进制日志删除<br>对于比较繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不清除，将会占用大量磁盘空间。可以通过以下几种方式清理日志：<br>（1）<code>reset master</code>：删除全部binlog日志，删除之后，日志编号，将从binlog.000001重新开始；<br>（2）<code>purge master logs to &#39;binlog.******&#39;</code>：删除******编号之前的所有日志；<br>（3）<code>purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code>：删除日志为“yyyy-mm-dd hh24：mi：ss”之前产生的所有日志。<br>也可以在mysql的配置文件中配置二进制日志的过期时间，设置了之后，二进制日志到时间就会自动删除，可以通过下面的命名查看过期时间：<br><code>show variables like &#39;%binlog_expire%&#39;;</code>单位是秒。  </p>\n<h3 id=\"3、查询日志\"><a href=\"#3、查询日志\" class=\"headerlink\" title=\"3、查询日志\"></a>3、查询日志</h3><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的sql语句。默认情况下，查询日志是没有开启的，如需开启查询日志，可以设置，通过下面命名查看参数：<br><code>show variables like &#39;%general%&#39;;</code>。<br>修改mysql的配置文件&#x2F;etc&#x2F;my.cnf文件：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该选项用来开启查询日志，可选值：0关闭，1开启</span><br><span class=\"line\">general_log=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置日志的文件名，如果没有指定，默认为host_name.log</span><br><span class=\"line\">general_log_file=mysql_query.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、慢查询日志\"><a href=\"#4、慢查询日志\" class=\"headerlink\" title=\"4、慢查询日志\"></a>4、慢查询日志</h3><p>慢查询日志记录了所有执行时间超过参数long_query_time设置值，并且扫描记录数不小于min_examined_row_limit的所有sql语句。默认不开启，long_query_time默认为10秒，精度可以到微妙。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 慢查询日志</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行时间参数</span><br><span class=\"line\">long_query_time=2</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认不会记录管理语句和不使用索引的查询语句</span><br><span class=\"line\"># 开启记录执行较慢的管理语句</span><br><span class=\"line\">log_slow_admin_statements=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启记录执行较慢的未使用索引的查询语句</span><br><span class=\"line\">log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"数据库","path":"api/tags/数据库.json"},{"name":"Mysql","path":"api/tags/Mysql.json"}]}