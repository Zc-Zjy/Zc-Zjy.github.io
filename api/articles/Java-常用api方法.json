{"title":"Java 常用api方法","slug":"Java-常用api方法","date":"2024-01-16T03:54:57.000Z","updated":"2024-07-29T01:58:14.639Z","comments":true,"path":"api/articles/Java-常用api方法.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号\"><a href=\"#一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号\" class=\"headerlink\" title=\"一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)\"></a>一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)</h1><p>这个问题需要考虑以下几个方面：<br>1、获取到当前的年月份；<br>2、要去数据库查询是否存在流水号数据；<br>3、存在就获取最大的那个流水号，实现自增加1的效果；<br>4、不存在就要生成新的流水号，并且存入数据库；<br>实现的代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">generateOddNumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newOddNum</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\">    <span class=\"type\">LocalDate</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDate.now(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">     <span class=\"comment\">// 格式化当前时间</span></span><br><span class=\"line\">    <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> now.format(formatter);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前最大的订单号</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">maxOddNum</span> <span class=\"operator\">=</span> findMaxOrderNo(prefix); </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxOddNum != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里需要将自增后的数字按照“xxx”的格式，格式化成例如“001”这种</span></span><br><span class=\"line\">        newOddNum = prefix + String.format(<span class=\"string\">&quot;%03d&quot;</span>,(Integer.parseInt(maxOddNum.substring(<span class=\"number\">8</span>)) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newOddNum = prefix + <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newOddNum ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、身份证显示前3后4中间\"><a href=\"#二、身份证显示前3后4中间\" class=\"headerlink\" title=\"二、身份证显示前3后4中间*\"></a>二、身份证显示前3后4中间*</h1><p>方法一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.micrometer.core.instrument.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.BadPaddingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.InvalidKeyException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用密码对称加减密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * 此处还会处理身份证加密，前三后四，输出</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AESEncyptUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加密密码，因为后面会替换成国密算法，简单点实现此算法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">SecretKeySpec</span> <span class=\"variable\">keySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(<span class=\"string\">&quot;qasw@TYU^967/fht&quot;</span>.getBytes(StandardCharsets.UTF_8),<span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ciper非线程安全对象，不能共用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encrypt</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class=\"line\">            cipher.init(Cipher.ENCRYPT_MODE,keySpec);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = cipher.doFinal(source.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">decrypt</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class=\"line\">            cipher.init(Cipher.DECRYPT_MODE,keySpec);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = cipher.doFinal(Base64.getDecoder().decode(source));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(data,StandardCharsets.UTF_8);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理身份证，保留前三后四，中间全部替换成星号</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getIdentyCardPartCode</span><span class=\"params\">(String identyCardCode)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(identyCardCode)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 前三后四原则</span></span><br><span class=\"line\">        <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;(.&#123;3&#125;)(.*?)(.&#123;4&#125;$)&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(identyCardCode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matcher.find()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">3</span>);</span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            builder.append(s1);</span><br><span class=\"line\">            builder.append(s2.replaceAll(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;*&quot;</span>));</span><br><span class=\"line\">            builder.append(s3);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IDCardUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MASK_CHAR</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_LENGTH</span> <span class=\"operator\">=</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_LENGTH</span> <span class=\"operator\">=</span> <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码只显示前3后4位，其它用*号来表示</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">maskIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idCard == <span class=\"literal\">null</span> || idCard.length() &lt; MIN_LENGTH) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> idCard;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        sb.append(idCard.substring(<span class=\"number\">0</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; i &lt; idCard.length() - <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            sb.append(MASK_CHAR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(idCard.substring(idCard.length() - <span class=\"number\">4</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码完全显示</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">showIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idCard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码变回*号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">hideIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maskIDCard(idCard);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、Collections-工具类\"><a href=\"#三、Collections-工具类\" class=\"headerlink\" title=\"三、Collections 工具类\"></a>三、Collections 工具类</h1><p><code>Collections</code> 是一个操作<code>Set，List，Map</code>等的集合工具类，位于<code>java.util</code>包下（在<code>rt.jar</code>包中）。  </p>\n<h3 id=\"1、将元素添加到list\"><a href=\"#1、将元素添加到list\" class=\"headerlink\" title=\"1、将元素添加到list\"></a>1、将元素添加到list</h3><p><code>public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code>：将elements元素添加到c中。<br>1、例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统添加方式</span></span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素1&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素2&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素3&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素4&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素5&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用:Collections.addAll()</span></span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list, <span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组添加到list 中</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list, arr);</span><br></pre></td></tr></table></figure>\n<p>2、<code>Collections.addAll()</code>和<code>list.addAll()</code>的区别  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Collections.addAll()</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\"> ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"> Collections.addAll(list, arr);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// list.addAll()</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.addAll(Arrays.asList(arr));</span><br></pre></td></tr></table></figure>\n<p>可以看出：<br>（1）<code>list.addAll()</code>在添加数组的时候，需要先对数组进行处理转换成<code>list</code>；<br>（2）<code>list.addAll()</code>无法直接添加多个元素，需要将多个元素转换成<code>list</code>；<br>（3）<code>Collections.addAll()</code>是静态方法，<code>list.add()</code>是实例方法。</p>\n<h3 id=\"2、List重排\"><a href=\"#2、List重排\" class=\"headerlink\" title=\"2、List重排\"></a>2、List重排</h3><p><code>public static void shuffle(List&lt;?&gt; list)</code>：对<code>list</code>中的所有元素打乱顺序，重排。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个List 集合</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用Collections的addAll()方法</span></span><br><span class=\"line\">\t\tCollections.addAll(numbers, <span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">345</span>,<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;原集合：&quot;</span> + numbers);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重排顺序</span></span><br><span class=\"line\">\t\tCollections.shuffle(numbers);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;重排顺序之后集合：&quot;</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、自然排序（升序排序）\"><a href=\"#3、自然排序（升序排序）\" class=\"headerlink\" title=\"3、自然排序（升序排序）\"></a>3、自然排序（升序排序）</h3><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：根据元素的自然顺序，对指定列表按升序进行排序。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;     </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;     </span><br><span class=\"line\">     &#125;      </span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个字符串List 集合</span></span><br><span class=\"line\">\t\tList&lt;String&gt; stringDemo = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;wolrd&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;all&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;原集合&quot;</span> + stringDemo);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用排序算法</span></span><br><span class=\"line\">\t\tCollections.sort(stringDemo);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;排序之后&quot;</span>+stringDemo);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个自定义类型的List 集合</span></span><br><span class=\"line\">\t\tList&lt;Person&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>)); </span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>)); </span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;--&quot;</span> + people);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果Person类中，这里报错了，为什么呢？ 在这里埋个伏笔，且看下文</span></span><br><span class=\"line\">\t\tCollections.sort(people);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;----&quot;</span> + people);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、<code>Comparable</code>和<code>Comparator</code><br><strong>说明：</strong>我们上面代码最后一个例子，使用了我们自定义的类型，在使用排序时，给我们报错了？这是为什么呢？整型包装类和字符串类型，和我们的自定义类型有什么区别？<br>通过API文档，查看<code>sort()</code>方法，可以看到根据元素的自然顺序对指定列表按升序进行排序。列表中的所有元素都必须实现<code>Comparable</code>接口。此外，列表中的所有元素都必须是可相互比较的。 而<code>Comparable</code>接口只有一个方法<code>int compareTo(T o)</code>比较此对象与指定对象的顺序。<br>说的白话一些，就是我们使用自定义类型，进行集合排序的时候，需要实现这个<code>Comparable接口</code>，并且重写<code>compareTo(T o)</code>。<br>（1）例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;Person2&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person2</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person2&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Person2 o)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重写方法如何写呢？</span></span><br><span class=\"line\"><span class=\"comment\">//        return 0; //默认元素都是相同的</span></span><br><span class=\"line\">        <span class=\"comment\">//自定义规则   我们通过person 的年龄进行比较  this 代表本身，而 o 代表传参的person对象</span></span><br><span class=\"line\">        <span class=\"comment\">//这里的比较规则</span></span><br><span class=\"line\">        <span class=\"comment\">//  ==》  升序 自己 - 别人</span></span><br><span class=\"line\">        <span class=\"comment\">//  ==》  降序 别人 - 自己</span></span><br><span class=\"line\"><span class=\"comment\">//        return this.getAge() - o.getAge(); //升</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> o.getAge() - <span class=\"built_in\">this</span>.getAge(); <span class=\"comment\">//降</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Person2&gt; people2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>));</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>));</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--&quot;</span> + people2);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">// 现在就不会报错了</span></span><br><span class=\"line\">        Collections.sort(people2);</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----&quot;</span> + people2);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>但是上面这种使用自定义类去实现<code>Comparable接口</code>，然后直接在类里面重写<code>compareTo(T o)</code>方法不太实际，我们不可能每个自定义类都去干这件事，所以可以使用下面的方法：<br>（2）<code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Comparator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>)); </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>));   </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--&quot;</span> + people);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二个参数 采用匿名内部类的方式传参 - 可以复习之前有关内部类的使用</span></span><br><span class=\"line\">        Collections.sort(people, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Person o1, Person o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里怎么用呢 自定义按年龄排序</span></span><br><span class=\"line\"><span class=\"comment\">//                return 0;</span></span><br><span class=\"line\"><span class=\"comment\">//                return o1.getAge() - o2.getAge(); //升序</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.getAge() - o1.getAge(); <span class=\"comment\">//降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//结论： 前者 -后者  升序 反之，降序</span></span><br><span class=\"line\">                <span class=\"comment\">//这种方式 我们优先使用</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后----&quot;</span> + people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、BeanUilts实体类映射工具\"><a href=\"#四、BeanUilts实体类映射工具\" class=\"headerlink\" title=\"四、BeanUilts实体类映射工具\"></a>四、BeanUilts实体类映射工具</h1><p>1、说明<br><code>import org.springframework.beans.BeanUtils</code>包下的<code>BeanUilts</code>。<br>2、例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被复制的类，例如：实体类</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phoneNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Role role;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制到的类，例如：vo类</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserInfoCopy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserInfo</span> <span class=\"variable\">userInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserInfo</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;xiaohong&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">UserInfoCopy</span> <span class=\"variable\">userInfoCopy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserInfoCopy</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(userInfo,userInfoCopy);</span><br><span class=\"line\">        System.out.println(userInfo.toString());</span><br><span class=\"line\">        System.out.println(userInfoCopy.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//UserInfo(id=1, username=xiaohong, password=123, phoneNum=123, email=123, role=Role(id=1, roleName=123, description=123))</span></span><br><span class=\"line\"><span class=\"comment\">//UserInfoCopy(id=null, username=xiaohong, password=123, sex=null)</span></span><br></pre></td></tr></table></figure>\n<p>4、特别说明<br>（1）<code>BeanUtils.copyProperties(userInfo,userInfoCopy)</code>：第一个参数是被复制的类（实体类），第二个参数是复制到的类（VO类），VO类中必须要有实体类的字段，也可以有实体类中没有的字段，复制之后，类型不同的字段为null，实体类中没有的字段为null。<br>（2）<code>PropertyUtils.copyProperties(VO，实体类)</code>：有自动转换类型功能，上面那个没有，这个功能性差，耗时长。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"五、MapStruct：实体映射最强工具类\"><a href=\"#五、MapStruct：实体映射最强工具类\" class=\"headerlink\" title=\"五、MapStruct：实体映射最强工具类\"></a>五、MapStruct：实体映射最强工具类</h1><p><a href=\"https://www.jianshu.com/p/340245270651\">详细教程</a><br>1、说明<br>这个工具用来映射实体类。<br>2、例子<br>从数据库查询出来了一个user对象（包含id，用户名，密码，手机号，邮箱，角色这些字段）和一个对应的角色对象role（包含id，角色名，角色描述这些字段），现在在controller需要用到user对象的id，用户名，和role角色对象的角色名三个属性。<br>一种方式是直接把两个对象传递到controller层，但是这样会多出很多没用的属性。更通用的方式是需要用到的属性封装成一个类(DTO)，通过传输这个类的实例来完成数据传输。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phoneNum;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Role role;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Role</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个类就是封装的类</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRoleDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 用户id  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long userId;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 用户名  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 角色名  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟从数据库中查出user对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Before</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">       <span class=\"type\">Role</span> <span class=\"variable\">role</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"number\">2L</span>, <span class=\"string\">&quot;administrator&quot;</span>, <span class=\"string\">&quot;超级管理员&quot;</span>);  </span><br><span class=\"line\">       user  = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;17677778888&quot;</span>, <span class=\"string\">&quot;123@qq.com&quot;</span>, role);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟把user对象转换成UserRoleDto对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Test</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(user.getId());  </span><br><span class=\"line\">        userRoleDto.setName(user.getUsername());  </span><br><span class=\"line\">        userRoleDto.setRoleName(user.getRole().getRoleName());  </span><br><span class=\"line\">        System.out.println(userRoleDto);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>使用<code>MapStruct</code>解决上述问题：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">default</span> UserRoleDto <span class=\"title function_\">defaultConvert</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(<span class=\"number\">0L</span>);  </span><br><span class=\"line\">        userRoleDto.setName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        userRoleDto.setRoleName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> userRoleDto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">userRoleMapperInstances</span> <span class=\"operator\">=</span> UserRoleMapper.INSTANCES;  </span><br><span class=\"line\">    <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> userRoleMapperInstances.defaultConvert();  </span><br><span class=\"line\">    System.out.println(userRoleDto);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>abstract class</code>来代替接口：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">defaultConvert</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(<span class=\"number\">0L</span>);  </span><br><span class=\"line\">        userRoleDto.setName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        userRoleDto.setRoleName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> userRoleDto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>可以使用多个参数：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mapstruct.demo;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 多个参数中的值绑定   </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 源1  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> role 源2  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 从源1、2中提取出的结果  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user, Role role)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接使用参数作为属性值：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mapstruct.demo;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 直接使用参数作为值  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> myRoleName  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;myRoleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">useParameter</span><span class=\"params\">(User user, String myRoleName)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Role</span> <span class=\"variable\">role</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Before</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        role = <span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"number\">2L</span>, <span class=\"string\">&quot;administrator&quot;</span>, <span class=\"string\">&quot;超级管理员&quot;</span>);  </span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;17677778888&quot;</span>, <span class=\"string\">&quot;123@qq.com&quot;</span>, role);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Test</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">instances</span> <span class=\"operator\">=</span> UserRoleMapper.INSTANCES;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> instances.useParameter(user, <span class=\"string\">&quot;myUserRole&quot;</span>);  </span><br><span class=\"line\">        System.out.println(userRoleDto);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>更新对象属性：<br>在之前的例子中<code>UserRoleDto useParameter(User user, String myRoleName)</code>;都是通过类似上面的方法来生成一个对象。而<code>MapStruct</code>提供了另外一种方式来更新一个对象中的属性。<br><code>@MappingTarget</code>：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper1</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper1</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper1.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;userId&quot;, target = &quot;id&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;name&quot;, target = &quot;username&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;roleName&quot;, target = &quot;role.roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateDto</span><span class=\"params\">(UserRoleDto userRoleDto, <span class=\"meta\">@MappingTarget</span> User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, <span class=\"meta\">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>通过<code>@MappingTarget</code>来指定目标类是谁（谁的属性需要被更新）。<code>@Mapping</code>还是用来定义属性对应规则。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, <span class=\"meta\">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br></pre></td></tr></table></figure>\n<p><code>@MappingTarget</code>标注的类<code>UserRoleDto</code>为目标类，user类为源类，调用此方法，会把源类中的属性更新到目标类中。更新规则还是由<code>@Mapping</code>指定。<br>使用Spring依赖注入：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerName;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 这里主要是这个componentModel 属性，它的值就是当前要使用的依赖注入的环境  </span></span><br><span class=\"line\"><span class=\"meta\">@Mapper(componentModel = &quot;spring&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CustomerMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;)</span>  </span><br><span class=\"line\">    CustomerDto <span class=\"title function_\">toCustomerDto</span><span class=\"params\">(Customer customer)</span>;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p><code>@Mapper(componentModel = &quot;spring&quot;)</code>，表示把当前<code>Mapper</code>类纳入spring容器。可以在其它类中直接注入了：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>  </span><br><span class=\"line\"><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoMapstructApplication</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"comment\">// 注入Mapper  </span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomerMapper mapper;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        SpringApplication.run(DemoMapstructApplication.class, args);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">customer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>);  </span><br><span class=\"line\">        <span class=\"type\">CustomerDto</span> <span class=\"variable\">customerDto</span> <span class=\"operator\">=</span> mapper.toCustomerDto(customer);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> customerDto.toString();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>自定义类型转换：<br>有时候，在对象转换的时候可能会出现这样一个问题，就是源对象中的类型是Boolean类型，而目标对象类型是String类型，这种情况可以通过@Mapper的uses属性来实现：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isDisable;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerName;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String disable;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义转换规则的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BooleanStrFormat</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toStr</span><span class=\"params\">(Boolean isDisable)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDisable) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Y&quot;</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;N&quot;</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">toBoolean</span><span class=\"params\">(String str)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">&quot;Y&quot;</span>)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义Mapper，@Mapper( uses = &#123; BooleanStrFormat.class&#125;)，注意，这里的users属性用于引用之前定义的转换规则的类</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper( uses = &#123; BooleanStrFormat.class&#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CustomerMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">CustomerMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(CustomerMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;isDisable&quot;, target = &quot;disable&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    CustomerDto <span class=\"title function_\">toCustomerDto</span><span class=\"params\">(Customer customer)</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这样子，<code>Customer</code>类中的<code>isDisable</code>属性的<code>true</code>就会转变成<code>CustomerDto</code>中的<code>disable</code>属性的<code>yes</code>。</p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、BeanUtils-copyProperties转换List\"><a href=\"#六、BeanUtils-copyProperties转换List\" class=\"headerlink\" title=\"六、BeanUtils.copyProperties转换List\"></a>六、BeanUtils.copyProperties转换List</h1><p>说明：<code>BeanUtils.copyProperties</code>只能应用实体类，那<code>List</code>类要怎么使用？可以使用下面的方法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单个类转换</span></span><br><span class=\"line\"><span class=\"comment\"> * List转换工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConverUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单个类转换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">conver</span><span class=\"params\">(Object sourceObj, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sourceObj == <span class=\"literal\">null</span> || targetClass == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">targetObj</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            targetObj = targetClass.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BeanUtils.copyProperties(sourceObj, targetObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> targetObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * List之间转换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceList</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">converList</span><span class=\"params\">(List&lt;?&gt; sourceList, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(sourceList) || targetClass == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceList.stream().map(sourceObj -&gt; conver(sourceObj, targetClass)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"七、关于处理List-转-List-的问题\"><a href=\"#七、关于处理List-转-List-的问题\" class=\"headerlink\" title=\"七、关于处理List 转 List 的问题\"></a>七、关于处理List<LinkedTreeMap> 转 List<T> 的问题</h1><p>1、出现场景<br>当<code>Controller</code>方法使用<code>map</code>万能参数来接收前端传过来的数据，然后如果<code>map</code>中存在<code>List</code>类型时，获取<code>List</code>类型，将<code>List</code>类型循环转成具体的实体类时，就会发生异常报错。<br>2、解决方法  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mList</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> aClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getList</span><span class=\"params\">(List&lt;T&gt; mList, Class&lt;T[]&gt; aClass)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">toJson</span> <span class=\"operator\">=</span> gson.toJson(mList);</span><br><span class=\"line\">        T[] array = gson.fromJson(toJson , (Type) aClass);</span><br><span class=\"line\">        List&lt;T&gt; newList = Arrays.asList(array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、使用例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json是一个map，其中包含一个List</span></span><br><span class=\"line\">List&lt;DetectionRuleVO&gt; ruleList = (List&lt;DetectionRuleVO&gt;) json.get(<span class=\"string\">&quot;ruleList&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用getList处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class=\"line\">ruleList = ListUtil.getList(ruleList, DetectionRuleVO[].class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不使用上面getList方法转换，下面会报错</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (DetectionRuleVO detectionRuleVO: ruleList) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理业务....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"八、BigDecimal用法\"><a href=\"#八、BigDecimal用法\" class=\"headerlink\" title=\"八、BigDecimal用法\"></a>八、BigDecimal用法</h1><p>1、强烈建议<br>（1）使用<code>BigDecimal</code>构造对象时，优先使用<code>String</code>构造方法来进行构造，例子：<code>BigDecimal a = new BigDecimal(&quot;0.1&quot;)</code>；<br>（2）如果使用<code>double</code>构造方法，请这样操作：先使用<code>Double.toString(double)</code>方法，然后使用<code>BigDecimal(String)</code>构造方法，将<code>double</code>转换为<code>String</code>，要获取该结果，请使用<code>static valueOf(double)</code>方法。<br>2、方法使用<br>（1）<code>BigDecimal</code>大小比较<br>java中对<code>BigDecimal</code>比较大小一般用的是<code>bigdemical</code>的<code>compareTo</code>方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> bigdemical.compareTo(bigdemical2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">bigdemica</span>(a).compareTo(<span class=\"keyword\">new</span> <span class=\"title class_\">bigdemical</span>(b)) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = -<span class=\"number\">1</span>,表示bigdemical小于bigdemical2；</span><br><span class=\"line\">a = <span class=\"number\">0</span>,表示bigdemical等于bigdemical2；</span><br><span class=\"line\">a = <span class=\"number\">1</span>,表示bigdemical大于bigdemical2；</span><br></pre></td></tr></table></figure>\n<p>（2）<code>BigDecimal</code>格式化<br>由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。<br>以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">currency</span> <span class=\"operator\">=</span> NumberFormat.getCurrencyInstance(); <span class=\"comment\">//建立货币格式化引用</span></span><br><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">percent</span> <span class=\"operator\">=</span> NumberFormat.getPercentInstance();  <span class=\"comment\">//建立百分比格式化引用</span></span><br><span class=\"line\">percent.setMaximumFractionDigits(<span class=\"number\">3</span>); <span class=\"comment\">//百分比小数点最多3位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">loanAmount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;15000.48&quot;</span>); <span class=\"comment\">//贷款金额</span></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">interestRate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.008&quot;</span>); <span class=\"comment\">//利率</span></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">interest</span> <span class=\"operator\">=</span> loanAmount.multiply(interestRate); <span class=\"comment\">//相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;贷款金额:\\t&quot;</span> + currency.format(loanAmount));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;利率:\\t&quot;</span> + percent.format(interestRate));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;利息:\\t&quot;</span> + currency.format(interest));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果输出</span></span><br><span class=\"line\">贷款金额: ￥<span class=\"number\">15</span>,<span class=\"number\">000.48</span> 利率: <span class=\"number\">0.8</span>% 利息: ￥<span class=\"number\">120.00</span></span><br></pre></td></tr></table></figure>\n<p>BigDecimal格式化保留2为小数，不足则补0：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NumberFormat</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] s)</span>&#123;</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;3.435&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"number\">0</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.00&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.001&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.006&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.206&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@desc</span> 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.传入的参数等于0，则直接返回字符串&quot;0.00&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.大于1的小数，直接格式化返回字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj传入的小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">formatToNumber</span><span class=\"params\">(BigDecimal obj)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DecimalFormat</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecimalFormat</span>(<span class=\"string\">&quot;#.00&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;0.00&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class=\"number\">0</span>&amp;&amp;obj.compareTo(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"number\">1</span>))&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>+df.format(obj).toString();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> df.format(obj).toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"number\">3.44</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.01</span></span><br><span class=\"line\"><span class=\"number\">0.21</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>BigDecimal</code>常见异常<br>（1）除法的时候出现异常  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原因分析</span></span><br><span class=\"line\"><span class=\"comment\">// 通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决办法</span></span><br><span class=\"line\"><span class=\"comment\">// divide方法设置精确的小数点，如：divide(xxxxx,2)</span></span><br></pre></td></tr></table></figure>\n<p>4、工具类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于高精确处理常用的数学运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArithmeticUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认除法运算精度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEF_DIV_SCALE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">add</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">add</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">sub</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">sub</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">mul</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">mul</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class=\"line\"><span class=\"comment\">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class=\"line\"><span class=\"comment\">     * 定精度，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class=\"line\"><span class=\"comment\">     * 定精度，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">div</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的小数位四舍五入处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v     需要四舍五入的数字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 四舍五入后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">round</span><span class=\"params\">(<span class=\"type\">double</span> v, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的小数位四舍五入处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v     需要四舍五入的数字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 四舍五入后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">round</span><span class=\"params\">(String v, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取余数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 余数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">remainder</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取余数  BigDecimal</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 余数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">remainder</span><span class=\"params\">(BigDecimal v1, BigDecimal v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被比较数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 比较数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compare</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bj</span> <span class=\"operator\">=</span> b1.compareTo(b2);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bj &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"九、Lombok同时使用-Data和-Builder坑\"><a href=\"#九、Lombok同时使用-Data和-Builder坑\" class=\"headerlink\" title=\"九、Lombok同时使用@Data和@Builder坑\"></a>九、Lombok同时使用@Data和@Builder坑</h1><p>1、说明<br>（1）使用@Data可以生成无参构造和get、set方法；<br>（2）使用@Builder可以生成有参构造；<br>（3）同时使用时，是不会生成无参构造的，如果手动加上无参构造会造成无参构造器报错，编译不通过。<br>2、解决办法<br>（1）方法一<br>同时使用时，如果要生成无参构造，需要在代码里面手动引入注解@Tolerate，让Lombok在生成类的时候，对指定的构造函数不感知。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Tolerate</span></span><br><span class=\"line\">\tTest () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）方法二<br>直接使用无参构造 + 有参构造的方式，@RequiredArgsConstructor来构建有参，@NoArgsConstructor来构建无参。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号\"><a href=\"#一、java自动生成编号的实现-格式：yyyyMMdd-三位流水号\" class=\"headerlink\" title=\"一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)\"></a>一、java自动生成编号的实现(格式：yyyyMMdd+三位流水号)</h1><p>这个问题需要考虑以下几个方面：<br>1、获取到当前的年月份；<br>2、要去数据库查询是否存在流水号数据；<br>3、存在就获取最大的那个流水号，实现自增加1的效果；<br>4、不存在就要生成新的流水号，并且存入数据库；<br>实现的代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">generateOddNumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newOddNum</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\">    <span class=\"type\">LocalDate</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDate.now(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">     <span class=\"comment\">// 格式化当前时间</span></span><br><span class=\"line\">    <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyyMMdd&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> now.format(formatter);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取当前最大的订单号</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">maxOddNum</span> <span class=\"operator\">=</span> findMaxOrderNo(prefix); </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxOddNum != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里需要将自增后的数字按照“xxx”的格式，格式化成例如“001”这种</span></span><br><span class=\"line\">        newOddNum = prefix + String.format(<span class=\"string\">&quot;%03d&quot;</span>,(Integer.parseInt(maxOddNum.substring(<span class=\"number\">8</span>)) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newOddNum = prefix + <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newOddNum ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、身份证显示前3后4中间\"><a href=\"#二、身份证显示前3后4中间\" class=\"headerlink\" title=\"二、身份证显示前3后4中间*\"></a>二、身份证显示前3后4中间*</h1><p>方法一：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.micrometer.core.instrument.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.BadPaddingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.InvalidKeyException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用密码对称加减密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * 此处还会处理身份证加密，前三后四，输出</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AESEncyptUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加密密码，因为后面会替换成国密算法，简单点实现此算法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">SecretKeySpec</span> <span class=\"variable\">keySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(<span class=\"string\">&quot;qasw@TYU^967/fht&quot;</span>.getBytes(StandardCharsets.UTF_8),<span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ciper非线程安全对象，不能共用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encrypt</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class=\"line\">            cipher.init(Cipher.ENCRYPT_MODE,keySpec);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = cipher.doFinal(source.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">decrypt</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(source)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class=\"line\">            cipher.init(Cipher.DECRYPT_MODE,keySpec);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = cipher.doFinal(Base64.getDecoder().decode(source));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(data,StandardCharsets.UTF_8);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理身份证，保留前三后四，中间全部替换成星号</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getIdentyCardPartCode</span><span class=\"params\">(String identyCardCode)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(identyCardCode)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 前三后四原则</span></span><br><span class=\"line\">        <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;(.&#123;3&#125;)(.*?)(.&#123;4&#125;$)&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(identyCardCode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matcher.find()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> matcher.group(<span class=\"number\">3</span>);</span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            builder.append(s1);</span><br><span class=\"line\">            builder.append(s2.replaceAll(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;*&quot;</span>));</span><br><span class=\"line\">            builder.append(s3);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IDCardUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MASK_CHAR</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_LENGTH</span> <span class=\"operator\">=</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_LENGTH</span> <span class=\"operator\">=</span> <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码只显示前3后4位，其它用*号来表示</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">maskIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idCard == <span class=\"literal\">null</span> || idCard.length() &lt; MIN_LENGTH) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> idCard;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        sb.append(idCard.substring(<span class=\"number\">0</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; i &lt; idCard.length() - <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            sb.append(MASK_CHAR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(idCard.substring(idCard.length() - <span class=\"number\">4</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码完全显示</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">showIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idCard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将身份证号码变回*号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> idCard 身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 处理后的身份证号码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">hideIDCard</span><span class=\"params\">(String idCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maskIDCard(idCard);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"三、Collections-工具类\"><a href=\"#三、Collections-工具类\" class=\"headerlink\" title=\"三、Collections 工具类\"></a>三、Collections 工具类</h1><p><code>Collections</code> 是一个操作<code>Set，List，Map</code>等的集合工具类，位于<code>java.util</code>包下（在<code>rt.jar</code>包中）。  </p>\n<h3 id=\"1、将元素添加到list\"><a href=\"#1、将元素添加到list\" class=\"headerlink\" title=\"1、将元素添加到list\"></a>1、将元素添加到list</h3><p><code>public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code>：将elements元素添加到c中。<br>1、例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统添加方式</span></span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素1&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素2&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素3&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素4&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;元素5&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用:Collections.addAll()</span></span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list, <span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组添加到list 中</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list, arr);</span><br></pre></td></tr></table></figure>\n<p>2、<code>Collections.addAll()</code>和<code>list.addAll()</code>的区别  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Collections.addAll()</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\"> ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"> Collections.addAll(list, arr);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// list.addAll()</span></span><br><span class=\"line\">String[] arr = &#123;<span class=\"string\">&quot;元素1&quot;</span>, <span class=\"string\">&quot;元素2&quot;</span>, <span class=\"string\">&quot;元素3&quot;</span>, <span class=\"string\">&quot;元素4&quot;</span>, <span class=\"string\">&quot;元素5&quot;</span>&#125;;</span><br><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.addAll(Arrays.asList(arr));</span><br></pre></td></tr></table></figure>\n<p>可以看出：<br>（1）<code>list.addAll()</code>在添加数组的时候，需要先对数组进行处理转换成<code>list</code>；<br>（2）<code>list.addAll()</code>无法直接添加多个元素，需要将多个元素转换成<code>list</code>；<br>（3）<code>Collections.addAll()</code>是静态方法，<code>list.add()</code>是实例方法。</p>\n<h3 id=\"2、List重排\"><a href=\"#2、List重排\" class=\"headerlink\" title=\"2、List重排\"></a>2、List重排</h3><p><code>public static void shuffle(List&lt;?&gt; list)</code>：对<code>list</code>中的所有元素打乱顺序，重排。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个List 集合</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用Collections的addAll()方法</span></span><br><span class=\"line\">\t\tCollections.addAll(numbers, <span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">345</span>,<span class=\"number\">66</span>,<span class=\"number\">22</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;原集合：&quot;</span> + numbers);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重排顺序</span></span><br><span class=\"line\">\t\tCollections.shuffle(numbers);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;重排顺序之后集合：&quot;</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、自然排序（升序排序）\"><a href=\"#3、自然排序（升序排序）\" class=\"headerlink\" title=\"3、自然排序（升序排序）\"></a>3、自然排序（升序排序）</h3><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：根据元素的自然顺序，对指定列表按升序进行排序。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;     </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;     </span><br><span class=\"line\">     &#125;      </span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个字符串List 集合</span></span><br><span class=\"line\">\t\tList&lt;String&gt; stringDemo = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;wolrd&quot;</span>);</span><br><span class=\"line\">\t\tstringDemo.add(<span class=\"string\">&quot;all&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;原集合&quot;</span> + stringDemo);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用排序算法</span></span><br><span class=\"line\">\t\tCollections.sort(stringDemo);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;排序之后&quot;</span>+stringDemo);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个自定义类型的List 集合</span></span><br><span class=\"line\">\t\tList&lt;Person&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>)); </span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>)); </span><br><span class=\"line\">\t\tpeople.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;--&quot;</span> + people);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果Person类中，这里报错了，为什么呢？ 在这里埋个伏笔，且看下文</span></span><br><span class=\"line\">\t\tCollections.sort(people);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;----&quot;</span> + people);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、<code>Comparable</code>和<code>Comparator</code><br><strong>说明：</strong>我们上面代码最后一个例子，使用了我们自定义的类型，在使用排序时，给我们报错了？这是为什么呢？整型包装类和字符串类型，和我们的自定义类型有什么区别？<br>通过API文档，查看<code>sort()</code>方法，可以看到根据元素的自然顺序对指定列表按升序进行排序。列表中的所有元素都必须实现<code>Comparable</code>接口。此外，列表中的所有元素都必须是可相互比较的。 而<code>Comparable</code>接口只有一个方法<code>int compareTo(T o)</code>比较此对象与指定对象的顺序。<br>说的白话一些，就是我们使用自定义类型，进行集合排序的时候，需要实现这个<code>Comparable接口</code>，并且重写<code>compareTo(T o)</code>。<br>（1）例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;Person2&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person2</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person2&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Person2 o)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重写方法如何写呢？</span></span><br><span class=\"line\"><span class=\"comment\">//        return 0; //默认元素都是相同的</span></span><br><span class=\"line\">        <span class=\"comment\">//自定义规则   我们通过person 的年龄进行比较  this 代表本身，而 o 代表传参的person对象</span></span><br><span class=\"line\">        <span class=\"comment\">//这里的比较规则</span></span><br><span class=\"line\">        <span class=\"comment\">//  ==》  升序 自己 - 别人</span></span><br><span class=\"line\">        <span class=\"comment\">//  ==》  降序 别人 - 自己</span></span><br><span class=\"line\"><span class=\"comment\">//        return this.getAge() - o.getAge(); //升</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> o.getAge() - <span class=\"built_in\">this</span>.getAge(); <span class=\"comment\">//降</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Person2&gt; people2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>));</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>));</span><br><span class=\"line\">        people2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--&quot;</span> + people2);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">// 现在就不会报错了</span></span><br><span class=\"line\">        Collections.sort(people2);</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----&quot;</span> + people2);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>但是上面这种使用自定义类去实现<code>Comparable接口</code>，然后直接在类里面重写<code>compareTo(T o)</code>方法不太实际，我们不可能每个自定义类都去干这件事，所以可以使用下面的方法：<br>（2）<code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Comparator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;秋香&quot;</span>, <span class=\"number\">15</span>)); </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;石榴姐&quot;</span>, <span class=\"number\">19</span>));   </span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;唐伯虎&quot;</span>, <span class=\"number\">12</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--&quot;</span> + people);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二个参数 采用匿名内部类的方式传参 - 可以复习之前有关内部类的使用</span></span><br><span class=\"line\">        Collections.sort(people, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Person o1, Person o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里怎么用呢 自定义按年龄排序</span></span><br><span class=\"line\"><span class=\"comment\">//                return 0;</span></span><br><span class=\"line\"><span class=\"comment\">//                return o1.getAge() - o2.getAge(); //升序</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.getAge() - o1.getAge(); <span class=\"comment\">//降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//结论： 前者 -后者  升序 反之，降序</span></span><br><span class=\"line\">                <span class=\"comment\">//这种方式 我们优先使用</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后----&quot;</span> + people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"四、BeanUilts实体类映射工具\"><a href=\"#四、BeanUilts实体类映射工具\" class=\"headerlink\" title=\"四、BeanUilts实体类映射工具\"></a>四、BeanUilts实体类映射工具</h1><p>1、说明<br><code>import org.springframework.beans.BeanUtils</code>包下的<code>BeanUilts</code>。<br>2、例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被复制的类，例如：实体类</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phoneNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Role role;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制到的类，例如：vo类</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserInfoCopy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserInfo</span> <span class=\"variable\">userInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserInfo</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;xiaohong&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;123&quot;</span>,<span class=\"string\">&quot;123&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">UserInfoCopy</span> <span class=\"variable\">userInfoCopy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserInfoCopy</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(userInfo,userInfoCopy);</span><br><span class=\"line\">        System.out.println(userInfo.toString());</span><br><span class=\"line\">        System.out.println(userInfoCopy.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//UserInfo(id=1, username=xiaohong, password=123, phoneNum=123, email=123, role=Role(id=1, roleName=123, description=123))</span></span><br><span class=\"line\"><span class=\"comment\">//UserInfoCopy(id=null, username=xiaohong, password=123, sex=null)</span></span><br></pre></td></tr></table></figure>\n<p>4、特别说明<br>（1）<code>BeanUtils.copyProperties(userInfo,userInfoCopy)</code>：第一个参数是被复制的类（实体类），第二个参数是复制到的类（VO类），VO类中必须要有实体类的字段，也可以有实体类中没有的字段，复制之后，类型不同的字段为null，实体类中没有的字段为null。<br>（2）<code>PropertyUtils.copyProperties(VO，实体类)</code>：有自动转换类型功能，上面那个没有，这个功能性差，耗时长。  </p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"五、MapStruct：实体映射最强工具类\"><a href=\"#五、MapStruct：实体映射最强工具类\" class=\"headerlink\" title=\"五、MapStruct：实体映射最强工具类\"></a>五、MapStruct：实体映射最强工具类</h1><p><a href=\"https://www.jianshu.com/p/340245270651\">详细教程</a><br>1、说明<br>这个工具用来映射实体类。<br>2、例子<br>从数据库查询出来了一个user对象（包含id，用户名，密码，手机号，邮箱，角色这些字段）和一个对应的角色对象role（包含id，角色名，角色描述这些字段），现在在controller需要用到user对象的id，用户名，和role角色对象的角色名三个属性。<br>一种方式是直接把两个对象传递到controller层，但是这样会多出很多没用的属性。更通用的方式是需要用到的属性封装成一个类(DTO)，通过传输这个类的实例来完成数据传输。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phoneNum;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Role role;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Role</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个类就是封装的类</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRoleDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 用户id  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long userId;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 用户名  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 角色名  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟从数据库中查出user对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Before</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">       <span class=\"type\">Role</span> <span class=\"variable\">role</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"number\">2L</span>, <span class=\"string\">&quot;administrator&quot;</span>, <span class=\"string\">&quot;超级管理员&quot;</span>);  </span><br><span class=\"line\">       user  = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;17677778888&quot;</span>, <span class=\"string\">&quot;123@qq.com&quot;</span>, role);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟把user对象转换成UserRoleDto对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Test</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(user.getId());  </span><br><span class=\"line\">        userRoleDto.setName(user.getUsername());  </span><br><span class=\"line\">        userRoleDto.setRoleName(user.getRole().getRoleName());  </span><br><span class=\"line\">        System.out.println(userRoleDto);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>使用<code>MapStruct</code>解决上述问题：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">default</span> UserRoleDto <span class=\"title function_\">defaultConvert</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(<span class=\"number\">0L</span>);  </span><br><span class=\"line\">        userRoleDto.setName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        userRoleDto.setRoleName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> userRoleDto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">userRoleMapperInstances</span> <span class=\"operator\">=</span> UserRoleMapper.INSTANCES;  </span><br><span class=\"line\">    <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> userRoleMapperInstances.defaultConvert();  </span><br><span class=\"line\">    System.out.println(userRoleDto);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>abstract class</code>来代替接口：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 提供默认方法，方法自己定义，这个方法是我随便写的，不是要按照这个格式来的  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">defaultConvert</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRoleDto</span>();  </span><br><span class=\"line\">        userRoleDto.setUserId(<span class=\"number\">0L</span>);  </span><br><span class=\"line\">        userRoleDto.setName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        userRoleDto.setRoleName(<span class=\"string\">&quot;None&quot;</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> userRoleDto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>可以使用多个参数：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mapstruct.demo;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是用于实现对象属性复制的方法  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Mapping</span> 用来定义属性复制规则 source 指定源对象属性 target指定目标对象属性  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 这个参数就是源对象，也就是需要被复制的对象  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是目标对象，就是最终的结果对象  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 多个参数中的值绑定   </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user 源1  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> role 源2  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 从源1、2中提取出的结果  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">toUserRoleDto</span><span class=\"params\">(User user, Role role)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接使用参数作为属性值：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mapstruct.demo;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mapping;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.Mappings;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mapstruct.factory.Mappers;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span> 定义这是一个MapStruct对象属性转换接口，在这个类里面规定转换规则  </span></span><br><span class=\"line\"><span class=\"comment\"> *          在项目构建时，会自动生成改接口的实现类，这个实现类将实现对象属性值复制  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取该类自动生成的实现类的实例  </span></span><br><span class=\"line\"><span class=\"comment\">     * 接口中的属性都是 public static final 的 方法都是public abstract的  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 直接使用参数作为值  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> myRoleName  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.id&quot;, target = &quot;userId&quot;), // 把user中的id绑定到目标对象的userId属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;user.username&quot;, target = &quot;name&quot;), // 把user中的username绑定到目标对象的name属性中  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;myRoleName&quot;, target = &quot;roleName&quot;) // 把role对象的roleName属性值绑定到目标对象的roleName中  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    UserRoleDto <span class=\"title function_\">useParameter</span><span class=\"params\">(User user, String myRoleName)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>测试：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Role</span> <span class=\"variable\">role</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Before</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        role = <span class=\"keyword\">new</span> <span class=\"title class_\">Role</span>(<span class=\"number\">2L</span>, <span class=\"string\">&quot;administrator&quot;</span>, <span class=\"string\">&quot;超级管理员&quot;</span>);  </span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;17677778888&quot;</span>, <span class=\"string\">&quot;123@qq.com&quot;</span>, role);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Test</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleMapper</span> <span class=\"variable\">instances</span> <span class=\"operator\">=</span> UserRoleMapper.INSTANCES;  </span><br><span class=\"line\">        <span class=\"type\">UserRoleDto</span> <span class=\"variable\">userRoleDto</span> <span class=\"operator\">=</span> instances.useParameter(user, <span class=\"string\">&quot;myUserRole&quot;</span>);  </span><br><span class=\"line\">        System.out.println(userRoleDto);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>更新对象属性：<br>在之前的例子中<code>UserRoleDto useParameter(User user, String myRoleName)</code>;都是通过类似上面的方法来生成一个对象。而<code>MapStruct</code>提供了另外一种方式来更新一个对象中的属性。<br><code>@MappingTarget</code>：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRoleMapper1</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">UserRoleMapper1</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(UserRoleMapper1.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;userId&quot;, target = &quot;id&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;name&quot;, target = &quot;username&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;roleName&quot;, target = &quot;role.roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateDto</span><span class=\"params\">(UserRoleDto userRoleDto, <span class=\"meta\">@MappingTarget</span> User user)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, <span class=\"meta\">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>通过<code>@MappingTarget</code>来指定目标类是谁（谁的属性需要被更新）。<code>@Mapping</code>还是用来定义属性对应规则。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;username&quot;, target = &quot;name&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;role.roleName&quot;, target = &quot;roleName&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, <span class=\"meta\">@MappingTarget</span> UserRoleDto userRoleDto)</span>;  </span><br></pre></td></tr></table></figure>\n<p><code>@MappingTarget</code>标注的类<code>UserRoleDto</code>为目标类，user类为源类，调用此方法，会把源类中的属性更新到目标类中。更新规则还是由<code>@Mapping</code>指定。<br>使用Spring依赖注入：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerName;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 这里主要是这个componentModel 属性，它的值就是当前要使用的依赖注入的环境  </span></span><br><span class=\"line\"><span class=\"meta\">@Mapper(componentModel = &quot;spring&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CustomerMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;)</span>  </span><br><span class=\"line\">    CustomerDto <span class=\"title function_\">toCustomerDto</span><span class=\"params\">(Customer customer)</span>;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p><code>@Mapper(componentModel = &quot;spring&quot;)</code>，表示把当前<code>Mapper</code>类纳入spring容器。可以在其它类中直接注入了：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>  </span><br><span class=\"line\"><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoMapstructApplication</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"comment\">// 注入Mapper  </span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomerMapper mapper;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        SpringApplication.run(DemoMapstructApplication.class, args);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">customer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;zhangsan&quot;</span>);  </span><br><span class=\"line\">        <span class=\"type\">CustomerDto</span> <span class=\"variable\">customerDto</span> <span class=\"operator\">=</span> mapper.toCustomerDto(customer);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> customerDto.toString();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>自定义类型转换：<br>有时候，在对象转换的时候可能会出现这样一个问题，就是源对象中的类型是Boolean类型，而目标对象类型是String类型，这种情况可以通过@Mapper的uses属性来实现：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isDisable;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDto</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerName;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String disable;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义转换规则的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BooleanStrFormat</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toStr</span><span class=\"params\">(Boolean isDisable)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDisable) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Y&quot;</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;N&quot;</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">toBoolean</span><span class=\"params\">(String str)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">&quot;Y&quot;</span>)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义Mapper，@Mapper( uses = &#123; BooleanStrFormat.class&#125;)，注意，这里的users属性用于引用之前定义的转换规则的类</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper( uses = &#123; BooleanStrFormat.class&#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CustomerMapper</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">CustomerMapper</span> <span class=\"variable\">INSTANCES</span> <span class=\"operator\">=</span> Mappers.getMapper(CustomerMapper.class);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;name&quot;, target = &quot;customerName&quot;),  </span></span><br><span class=\"line\"><span class=\"meta\">            @Mapping(source = &quot;isDisable&quot;, target = &quot;disable&quot;)  </span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span>  </span><br><span class=\"line\">    CustomerDto <span class=\"title function_\">toCustomerDto</span><span class=\"params\">(Customer customer)</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这样子，<code>Customer</code>类中的<code>isDisable</code>属性的<code>true</code>就会转变成<code>CustomerDto</code>中的<code>disable</code>属性的<code>yes</code>。</p>\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"六、BeanUtils-copyProperties转换List\"><a href=\"#六、BeanUtils-copyProperties转换List\" class=\"headerlink\" title=\"六、BeanUtils.copyProperties转换List\"></a>六、BeanUtils.copyProperties转换List</h1><p>说明：<code>BeanUtils.copyProperties</code>只能应用实体类，那<code>List</code>类要怎么使用？可以使用下面的方法：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单个类转换</span></span><br><span class=\"line\"><span class=\"comment\"> * List转换工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConverUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单个类转换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">conver</span><span class=\"params\">(Object sourceObj, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sourceObj == <span class=\"literal\">null</span> || targetClass == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">targetObj</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            targetObj = targetClass.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BeanUtils.copyProperties(sourceObj, targetObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> targetObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * List之间转换</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceList</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">converList</span><span class=\"params\">(List&lt;?&gt; sourceList, Class&lt;T&gt; targetClass)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(sourceList) || targetClass == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceList.stream().map(sourceObj -&gt; conver(sourceObj, targetClass)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"七、关于处理List-转-List-的问题\"><a href=\"#七、关于处理List-转-List-的问题\" class=\"headerlink\" title=\"七、关于处理List 转 List 的问题\"></a>七、关于处理List<LinkedTreeMap> 转 List<T> 的问题</h1><p>1、出现场景<br>当<code>Controller</code>方法使用<code>map</code>万能参数来接收前端传过来的数据，然后如果<code>map</code>中存在<code>List</code>类型时，获取<code>List</code>类型，将<code>List</code>类型循环转成具体的实体类时，就会发生异常报错。<br>2、解决方法  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mList</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> aClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getList</span><span class=\"params\">(List&lt;T&gt; mList, Class&lt;T[]&gt; aClass)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span>();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">toJson</span> <span class=\"operator\">=</span> gson.toJson(mList);</span><br><span class=\"line\">        T[] array = gson.fromJson(toJson , (Type) aClass);</span><br><span class=\"line\">        List&lt;T&gt; newList = Arrays.asList(array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、使用例子  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json是一个map，其中包含一个List</span></span><br><span class=\"line\">List&lt;DetectionRuleVO&gt; ruleList = (List&lt;DetectionRuleVO&gt;) json.get(<span class=\"string\">&quot;ruleList&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用getList处理List&lt;LinkedTreeMap&gt; 转 List&lt;T&gt;</span></span><br><span class=\"line\">ruleList = ListUtil.getList(ruleList, DetectionRuleVO[].class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不使用上面getList方法转换，下面会报错</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (DetectionRuleVO detectionRuleVO: ruleList) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理业务....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"八、BigDecimal用法\"><a href=\"#八、BigDecimal用法\" class=\"headerlink\" title=\"八、BigDecimal用法\"></a>八、BigDecimal用法</h1><p>1、强烈建议<br>（1）使用<code>BigDecimal</code>构造对象时，优先使用<code>String</code>构造方法来进行构造，例子：<code>BigDecimal a = new BigDecimal(&quot;0.1&quot;)</code>；<br>（2）如果使用<code>double</code>构造方法，请这样操作：先使用<code>Double.toString(double)</code>方法，然后使用<code>BigDecimal(String)</code>构造方法，将<code>double</code>转换为<code>String</code>，要获取该结果，请使用<code>static valueOf(double)</code>方法。<br>2、方法使用<br>（1）<code>BigDecimal</code>大小比较<br>java中对<code>BigDecimal</code>比较大小一般用的是<code>bigdemical</code>的<code>compareTo</code>方法。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> bigdemical.compareTo(bigdemical2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">bigdemica</span>(a).compareTo(<span class=\"keyword\">new</span> <span class=\"title class_\">bigdemical</span>(b)) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">a = -<span class=\"number\">1</span>,表示bigdemical小于bigdemical2；</span><br><span class=\"line\">a = <span class=\"number\">0</span>,表示bigdemical等于bigdemical2；</span><br><span class=\"line\">a = <span class=\"number\">1</span>,表示bigdemical大于bigdemical2；</span><br></pre></td></tr></table></figure>\n<p>（2）<code>BigDecimal</code>格式化<br>由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。<br>以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">currency</span> <span class=\"operator\">=</span> NumberFormat.getCurrencyInstance(); <span class=\"comment\">//建立货币格式化引用</span></span><br><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">percent</span> <span class=\"operator\">=</span> NumberFormat.getPercentInstance();  <span class=\"comment\">//建立百分比格式化引用</span></span><br><span class=\"line\">percent.setMaximumFractionDigits(<span class=\"number\">3</span>); <span class=\"comment\">//百分比小数点最多3位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">loanAmount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;15000.48&quot;</span>); <span class=\"comment\">//贷款金额</span></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">interestRate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.008&quot;</span>); <span class=\"comment\">//利率</span></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">interest</span> <span class=\"operator\">=</span> loanAmount.multiply(interestRate); <span class=\"comment\">//相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;贷款金额:\\t&quot;</span> + currency.format(loanAmount));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;利率:\\t&quot;</span> + percent.format(interestRate));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;利息:\\t&quot;</span> + currency.format(interest));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果输出</span></span><br><span class=\"line\">贷款金额: ￥<span class=\"number\">15</span>,<span class=\"number\">000.48</span> 利率: <span class=\"number\">0.8</span>% 利息: ￥<span class=\"number\">120.00</span></span><br></pre></td></tr></table></figure>\n<p>BigDecimal格式化保留2为小数，不足则补0：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NumberFormat</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] s)</span>&#123;</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;3.435&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"number\">0</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.00&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.001&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.006&quot;</span>)));</span><br><span class=\"line\">        System.out.println(formatToNumber(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.206&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@desc</span> 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.传入的参数等于0，则直接返回字符串&quot;0.00&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.大于1的小数，直接格式化返回字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj传入的小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">formatToNumber</span><span class=\"params\">(BigDecimal obj)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DecimalFormat</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DecimalFormat</span>(<span class=\"string\">&quot;#.00&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;0.00&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class=\"number\">0</span>&amp;&amp;obj.compareTo(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"number\">1</span>))&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>+df.format(obj).toString();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> df.format(obj).toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"number\">3.44</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.00</span></span><br><span class=\"line\"><span class=\"number\">0.01</span></span><br><span class=\"line\"><span class=\"number\">0.21</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>BigDecimal</code>常见异常<br>（1）除法的时候出现异常  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原因分析</span></span><br><span class=\"line\"><span class=\"comment\">// 通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决办法</span></span><br><span class=\"line\"><span class=\"comment\">// divide方法设置精确的小数点，如：divide(xxxxx,2)</span></span><br></pre></td></tr></table></figure>\n<p>4、工具类  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于高精确处理常用的数学运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArithmeticUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认除法运算精度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEF_DIV_SCALE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">add</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    加数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的和</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">add</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">sub</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    减数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的差</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">sub</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">mul</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    乘数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 保留scale 位小数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的积</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">mul</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class=\"line\"><span class=\"comment\">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class=\"line\"><span class=\"comment\">     * 定精度，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">double</span> v1, <span class=\"type\">double</span> v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v1));</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class=\"line\"><span class=\"comment\">     * 定精度，以后的数字四舍五入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 两个参数的商</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">div</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的小数位四舍五入处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v     需要四舍五入的数字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 四舍五入后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">round</span><span class=\"params\">(<span class=\"type\">double</span> v, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(Double.toString(v));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供精确的小数位四舍五入处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v     需要四舍五入的数字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 四舍五入后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">round</span><span class=\"params\">(String v, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取余数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 余数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">remainder</span><span class=\"params\">(String v1, String v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取余数  BigDecimal</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1    被除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2    除数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale 小数点后保留几位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 余数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title function_\">remainder</span><span class=\"params\">(BigDecimal v1, BigDecimal v2, <span class=\"type\">int</span> scale)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 被比较数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 比较数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compare</span><span class=\"params\">(String v1, String v2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v1);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(v2);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bj</span> <span class=\"operator\">=</span> b1.compareTo(b2);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bj &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n\n<hr>\n<br/>\n\n\n\n<h1 id=\"九、Lombok同时使用-Data和-Builder坑\"><a href=\"#九、Lombok同时使用-Data和-Builder坑\" class=\"headerlink\" title=\"九、Lombok同时使用@Data和@Builder坑\"></a>九、Lombok同时使用@Data和@Builder坑</h1><p>1、说明<br>（1）使用@Data可以生成无参构造和get、set方法；<br>（2）使用@Builder可以生成有参构造；<br>（3）同时使用时，是不会生成无参构造的，如果手动加上无参构造会造成无参构造器报错，编译不通过。<br>2、解决办法<br>（1）方法一<br>同时使用时，如果要生成无参构造，需要在代码里面手动引入注解@Tolerate，让Lombok在生成类的时候，对指定的构造函数不感知。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Tolerate</span></span><br><span class=\"line\">\tTest () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）方法二<br>直接使用无参构造 + 有参构造的方式，@RequiredArgsConstructor来构建有参，@NoArgsConstructor来构建无参。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"Java","path":"api/tags/Java.json"}]}