{"title":"MybatisPlus框架下替换数据校验的方法","slug":"MybatisPlus框架下替换数据校验的方法","date":"2025-06-09T02:53:58.000Z","updated":"2025-06-09T03:15:44.791Z","comments":true,"path":"api/articles/MybatisPlus框架下替换数据校验的方法.json","realPath":null,"excerpt":null,"covers":null,"cover":null,"content":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、基础替换案例\"><a href=\"#一、基础替换案例\" class=\"headerlink\" title=\"一、基础替换案例\"></a>一、基础替换案例</h1><p>1、说明<br>一个复杂的业务系统中，我们可能需要频繁地验证数据库中某个字段值是否有效，是否符合预期值。传统的做法可能充斥着大量相似的查询逻辑，每次都需要手动构建查询条件、执行查询并处理结果，这样的代码既冗长又难以维护。  </p>\n<p>2、示例<br>例如以下两个验证用户 ID 和部门 ID 是否有效的方法，虽然简单，但每次需要校验不同实体或不同条件时，就需要复制粘贴并做相应修改，导致代码库中充满了大量雷同的校验逻辑，给维护带来了困扰。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断用户 ID 是否有效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkUserExistence</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userDao.findById(userId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户ID无效&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断部门 ID 是否有效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkDeptExistence</span><span class=\"params\">(String deptId)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Dept</span> <span class=\"variable\">dept</span> <span class=\"operator\">=</span> deptDao.findById(deptId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dept == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;部门ID无效&quot;</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、替换示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 确认数据库字段值有效（通用）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;V&gt; 待验证值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> valueToCheck 待验证的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columnExtractor 实体类属性提取函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryExecutor 单条数据查询执行器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage 异常提示信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, V&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">ensureColumnValueValid</span><span class=\"params\">(V valueToCheck, SFunction&lt;T, R&gt; columnExtractor, SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryExecutor, String errorMessage)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueToCheck == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    wrapper.select(columnExtractor);</span><br><span class=\"line\">    wrapper.eq(columnExtractor, valueToCheck);</span><br><span class=\"line\">    wrapper.last(<span class=\"string\">&quot;LIMIT 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> queryExecutor.apply(wrapper);</span><br><span class=\"line\">    <span class=\"type\">R</span> <span class=\"variable\">columnValue</span> <span class=\"operator\">=</span> columnExtractor.apply(entity);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span> || columnValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataValidationException</span>(String.format(errorMessage, valueToCheck));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法接受一个待验证的值、一个实体类属性提取函数、一个单行数据查询执行器和一个异常信息模板作为参数。通过这四个参数，不仅能够进行针对特定属性的有效性检查，而且还能生成具有一致性的异常信息。<br>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assignTaskToUser</span><span class=\"params\">(AddOrderDTO dto)</span> &#123;</span><br><span class=\"line\">    ensureColumnValueValid(dto.getUserId(), User::getId, userDao::getOne, <span class=\"string\">&quot;用户ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getDeptId(), Dept::getId, deptDao::getOne, <span class=\"string\">&quot;部门ID无效&quot;</span>);    </span><br><span class=\"line\">    ensureColumnValueValid(dto.getCustomerId(), Customer::getId, customerDao::getOne, <span class=\"string\">&quot;客户ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getDeptId(), Dept::getId, deptDao::getOne, <span class=\"string\">&quot;部门ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getSupplieId(), Supplie::getId, supplierDao::getOne, <span class=\"string\">&quot;供应商ID无效&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以确信客户存在</span></span><br><span class=\"line\">    <span class=\"type\">Customer</span> <span class=\"variable\">cus</span> <span class=\"operator\">=</span> customerDao.findById(dto.getCustomerId());     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建订单的逻辑...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"扩展示例一（断言指定列值等于预期值）\"><a href=\"#扩展示例一（断言指定列值等于预期值）\" class=\"headerlink\" title=\"扩展示例一（断言指定列值等于预期值）\"></a>扩展示例一（断言指定列值等于预期值）</h1><p>有一个场景：除了验证数据的存在性，我们还需确认查询到的某列值是否与预期值相符。这在验证用户角色、状态变更等场景中尤为常见。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证查询结果中指定列的值是否与预期值匹配</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;             实体类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;R&gt;             目标列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;C&gt;             查询条件列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> targetColumn    目标列的提取函数，用于获取想要验证的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedValue   期望的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionColumn 条件列的提取函数，用于设置查询条件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionValue  条件列对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryMethod     执行查询的方法引用，返回单个实体对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage    验证失败时抛出异常的错误信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> RuntimeException 当查询结果中目标列的值与预期值不匹配时抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">validateColumnValueMatchesExpected</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;T, R&gt; targetColumn, R expectedValue,</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;T, C&gt; conditionColumn, C conditionValue,</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryMethod,</span></span><br><span class=\"line\"><span class=\"params\">      String errorMessage)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 创建查询包装器，选择目标列并设置查询条件</span></span><br><span class=\"line\">   LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">   wrapper.select(targetColumn);</span><br><span class=\"line\">   wrapper.eq(conditionColumn, conditionValue);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 执行查询方法</span></span><br><span class=\"line\">   <span class=\"type\">T</span> <span class=\"variable\">one</span> <span class=\"operator\">=</span> queryMethod.apply(wrapper);</span><br><span class=\"line\">   <span class=\"comment\">// 如果查询结果为空，则直接返回，视为验证通过（或忽略）</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (one == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 获取查询结果中目标列的实际值</span></span><br><span class=\"line\">   <span class=\"type\">R</span> <span class=\"variable\">actualValue</span> <span class=\"operator\">=</span> targetColumn.apply(one);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 比较实际值与预期值是否匹配，这里假设notMatch是一个自定义方法用于比较不匹配情况</span></span><br><span class=\"line\">   <span class=\"type\">boolean</span> <span class=\"variable\">doesNotMatch</span> <span class=\"operator\">=</span> notMatch(actualValue, expectedValue);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (doesNotMatch) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 若不匹配，则根据错误信息模板抛出异常</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(String.format(errorMessage, expectedValue, actualValue));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设的辅助方法，用于比较值是否不匹配，根据实际需要实现</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;R&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">notMatch</span><span class=\"params\">(R actual, R expected)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例简单实现为不相等判断，实际情况可能更复杂</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !Objects.equals(actual, expected);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法允许我们指定一个查询目标列（targetColumn）、预期值（expectedValue）、查询条件列（conditionColumn）及其对应的条件值（conditionValue），并提供一个查询方法（queryMethod）来执行查询。如果查询到的列值与预期不符，则抛出异常，错误信息通过 errorMessage 参数定制。<br>使用场景：例如在一个权限管理系统中，当需要更新用户角色时，系统需要确保当前用户的角色在更新前是 “普通用户”，才能将其升级为 “管理员”。此场景下，可以使用 validateColumnValueMatchesExpected 方法来验证用户当前的角色是否确实为“普通用户”。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当用户角色不是 “普通用户” 时抛异常</span></span><br><span class=\"line\">validateColumnValueMatchesExpected(User::getRoleType, <span class=\"string\">&quot;普通用户&quot;</span>, User::getId, userId, userMapper::getOne, <span class=\"string\">&quot;用户角色不是普通用户，无法升级为管理员！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"扩展示例二（断言指定值位于期望值列表内）\"><a href=\"#扩展示例二（断言指定值位于期望值列表内）\" class=\"headerlink\" title=\"扩展示例二（断言指定值位于期望值列表内）\"></a>扩展示例二（断言指定值位于期望值列表内）</h1><p>在数据校验中，有时需要确保某个字段的值在特定的范围内。例如，确保年龄在18到60岁之间。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证查询结果中指定列的值是否位于预期值列表内</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;             实体类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;R&gt;             目标列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;C&gt;             查询条件列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> targetColumn    目标列的提取函数，用于获取想要验证的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedValueList 期望值的列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionColumn 条件列的提取函数，用于设置查询条件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionValue  条件列对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryMethod     执行查询的方法引用，返回单个实体对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage    验证失败时抛出异常的错误信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> RuntimeException 当查询结果中目标列的值不在预期值列表内时抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">validateColumnValueInExpectedList</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;T, R&gt; targetColumn, List&lt;R&gt; expectedValueList,</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;T, C&gt; conditionColumn, C conditionValue,</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryMethod,</span></span><br><span class=\"line\"><span class=\"params\">        String errorMessage)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    wrapper.select(targetColumn);</span><br><span class=\"line\">    wrapper.eq(conditionColumn, conditionValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">one</span> <span class=\"operator\">=</span> queryMethod.apply(wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (one == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">R</span> <span class=\"variable\">actualValue</span> <span class=\"operator\">=</span> targetColumn.apply(one);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (actualValue == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;列查询结果为空&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!expectedValueList.contains(actualValue)) &#123;        </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(errorMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法接受一个目标列（targetColumn）、一个预期值列表（expectedValueList）、查询条件列（conditionColumn）及其条件值（conditionValue），同样需要一个查询方法（queryMethod）。如果查询到的列值不在预期值列表中，则触发异常。<br>使用场景：在一个电商平台的订单处理流程中，系统需要验证订单状态是否处于可取消的状态列表里（如 “待支付”、“待发货”）才允许用户取消订单。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 OrderStatusEnum 枚举了所有可能的订单状态，cancelableStatuses 包含可取消的状态</span></span><br><span class=\"line\">List&lt;String&gt; cancelableStatuses = Arrays.asList(OrderStatusEnum.WAITING_PAYMENT.getValue(), OrderStatusEnum.WAITING_DELIVERY.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证订单状态是否在可取消状态列表内</span></span><br><span class=\"line\">validateColumnValueInExpectedList(Order::getStatus, cancelableStatuses, Order::getOrderId, orderId, orderMapper::selectOne, <span class=\"string\">&quot;订单当前状态不允许取消！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n","more":"<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"一、基础替换案例\"><a href=\"#一、基础替换案例\" class=\"headerlink\" title=\"一、基础替换案例\"></a>一、基础替换案例</h1><p>1、说明<br>一个复杂的业务系统中，我们可能需要频繁地验证数据库中某个字段值是否有效，是否符合预期值。传统的做法可能充斥着大量相似的查询逻辑，每次都需要手动构建查询条件、执行查询并处理结果，这样的代码既冗长又难以维护。  </p>\n<p>2、示例<br>例如以下两个验证用户 ID 和部门 ID 是否有效的方法，虽然简单，但每次需要校验不同实体或不同条件时，就需要复制粘贴并做相应修改，导致代码库中充满了大量雷同的校验逻辑，给维护带来了困扰。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断用户 ID 是否有效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkUserExistence</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userDao.findById(userId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户ID无效&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断部门 ID 是否有效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkDeptExistence</span><span class=\"params\">(String deptId)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Dept</span> <span class=\"variable\">dept</span> <span class=\"operator\">=</span> deptDao.findById(deptId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dept == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;部门ID无效&quot;</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、替换示例  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 确认数据库字段值有效（通用）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;V&gt; 待验证值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> valueToCheck 待验证的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columnExtractor 实体类属性提取函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryExecutor 单条数据查询执行器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage 异常提示信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, V&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">ensureColumnValueValid</span><span class=\"params\">(V valueToCheck, SFunction&lt;T, R&gt; columnExtractor, SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryExecutor, String errorMessage)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueToCheck == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    wrapper.select(columnExtractor);</span><br><span class=\"line\">    wrapper.eq(columnExtractor, valueToCheck);</span><br><span class=\"line\">    wrapper.last(<span class=\"string\">&quot;LIMIT 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> queryExecutor.apply(wrapper);</span><br><span class=\"line\">    <span class=\"type\">R</span> <span class=\"variable\">columnValue</span> <span class=\"operator\">=</span> columnExtractor.apply(entity);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span> || columnValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataValidationException</span>(String.format(errorMessage, valueToCheck));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法接受一个待验证的值、一个实体类属性提取函数、一个单行数据查询执行器和一个异常信息模板作为参数。通过这四个参数，不仅能够进行针对特定属性的有效性检查，而且还能生成具有一致性的异常信息。<br>使用：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assignTaskToUser</span><span class=\"params\">(AddOrderDTO dto)</span> &#123;</span><br><span class=\"line\">    ensureColumnValueValid(dto.getUserId(), User::getId, userDao::getOne, <span class=\"string\">&quot;用户ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getDeptId(), Dept::getId, deptDao::getOne, <span class=\"string\">&quot;部门ID无效&quot;</span>);    </span><br><span class=\"line\">    ensureColumnValueValid(dto.getCustomerId(), Customer::getId, customerDao::getOne, <span class=\"string\">&quot;客户ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getDeptId(), Dept::getId, deptDao::getOne, <span class=\"string\">&quot;部门ID无效&quot;</span>);</span><br><span class=\"line\">    ensureColumnValueValid(dto.getSupplieId(), Supplie::getId, supplierDao::getOne, <span class=\"string\">&quot;供应商ID无效&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以确信客户存在</span></span><br><span class=\"line\">    <span class=\"type\">Customer</span> <span class=\"variable\">cus</span> <span class=\"operator\">=</span> customerDao.findById(dto.getCustomerId());     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建订单的逻辑...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"扩展示例一（断言指定列值等于预期值）\"><a href=\"#扩展示例一（断言指定列值等于预期值）\" class=\"headerlink\" title=\"扩展示例一（断言指定列值等于预期值）\"></a>扩展示例一（断言指定列值等于预期值）</h1><p>有一个场景：除了验证数据的存在性，我们还需确认查询到的某列值是否与预期值相符。这在验证用户角色、状态变更等场景中尤为常见。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证查询结果中指定列的值是否与预期值匹配</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;             实体类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;R&gt;             目标列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;C&gt;             查询条件列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> targetColumn    目标列的提取函数，用于获取想要验证的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedValue   期望的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionColumn 条件列的提取函数，用于设置查询条件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionValue  条件列对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryMethod     执行查询的方法引用，返回单个实体对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage    验证失败时抛出异常的错误信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> RuntimeException 当查询结果中目标列的值与预期值不匹配时抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">validateColumnValueMatchesExpected</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;T, R&gt; targetColumn, R expectedValue,</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;T, C&gt; conditionColumn, C conditionValue,</span></span><br><span class=\"line\"><span class=\"params\">      SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryMethod,</span></span><br><span class=\"line\"><span class=\"params\">      String errorMessage)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 创建查询包装器，选择目标列并设置查询条件</span></span><br><span class=\"line\">   LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">   wrapper.select(targetColumn);</span><br><span class=\"line\">   wrapper.eq(conditionColumn, conditionValue);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 执行查询方法</span></span><br><span class=\"line\">   <span class=\"type\">T</span> <span class=\"variable\">one</span> <span class=\"operator\">=</span> queryMethod.apply(wrapper);</span><br><span class=\"line\">   <span class=\"comment\">// 如果查询结果为空，则直接返回，视为验证通过（或忽略）</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (one == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 获取查询结果中目标列的实际值</span></span><br><span class=\"line\">   <span class=\"type\">R</span> <span class=\"variable\">actualValue</span> <span class=\"operator\">=</span> targetColumn.apply(one);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 比较实际值与预期值是否匹配，这里假设notMatch是一个自定义方法用于比较不匹配情况</span></span><br><span class=\"line\">   <span class=\"type\">boolean</span> <span class=\"variable\">doesNotMatch</span> <span class=\"operator\">=</span> notMatch(actualValue, expectedValue);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (doesNotMatch) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 若不匹配，则根据错误信息模板抛出异常</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(String.format(errorMessage, expectedValue, actualValue));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设的辅助方法，用于比较值是否不匹配，根据实际需要实现</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;R&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">notMatch</span><span class=\"params\">(R actual, R expected)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例简单实现为不相等判断，实际情况可能更复杂</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !Objects.equals(actual, expected);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法允许我们指定一个查询目标列（targetColumn）、预期值（expectedValue）、查询条件列（conditionColumn）及其对应的条件值（conditionValue），并提供一个查询方法（queryMethod）来执行查询。如果查询到的列值与预期不符，则抛出异常，错误信息通过 errorMessage 参数定制。<br>使用场景：例如在一个权限管理系统中，当需要更新用户角色时，系统需要确保当前用户的角色在更新前是 “普通用户”，才能将其升级为 “管理员”。此场景下，可以使用 validateColumnValueMatchesExpected 方法来验证用户当前的角色是否确实为“普通用户”。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当用户角色不是 “普通用户” 时抛异常</span></span><br><span class=\"line\">validateColumnValueMatchesExpected(User::getRoleType, <span class=\"string\">&quot;普通用户&quot;</span>, User::getId, userId, userMapper::getOne, <span class=\"string\">&quot;用户角色不是普通用户，无法升级为管理员！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n\n<hr>\n<br/>\n\n\n<h1 id=\"扩展示例二（断言指定值位于期望值列表内）\"><a href=\"#扩展示例二（断言指定值位于期望值列表内）\" class=\"headerlink\" title=\"扩展示例二（断言指定值位于期望值列表内）\"></a>扩展示例二（断言指定值位于期望值列表内）</h1><p>在数据校验中，有时需要确保某个字段的值在特定的范围内。例如，确保年龄在18到60岁之间。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证查询结果中指定列的值是否位于预期值列表内</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;             实体类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;R&gt;             目标列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;C&gt;             查询条件列值的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> targetColumn    目标列的提取函数，用于获取想要验证的列值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedValueList 期望值的列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionColumn 条件列的提取函数，用于设置查询条件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> conditionValue  条件列对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> queryMethod     执行查询的方法引用，返回单个实体对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> errorMessage    验证失败时抛出异常的错误信息模板</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> RuntimeException 当查询结果中目标列的值不在预期值列表内时抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, R, C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">validateColumnValueInExpectedList</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;T, R&gt; targetColumn, List&lt;R&gt; expectedValueList,</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;T, C&gt; conditionColumn, C conditionValue,</span></span><br><span class=\"line\"><span class=\"params\">        SFunction&lt;LambdaQueryWrapper&lt;T&gt;, T&gt; queryMethod,</span></span><br><span class=\"line\"><span class=\"params\">        String errorMessage)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LambdaQueryWrapper&lt;T&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    wrapper.select(targetColumn);</span><br><span class=\"line\">    wrapper.eq(conditionColumn, conditionValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">one</span> <span class=\"operator\">=</span> queryMethod.apply(wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (one == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">R</span> <span class=\"variable\">actualValue</span> <span class=\"operator\">=</span> targetColumn.apply(one);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (actualValue == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;列查询结果为空&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!expectedValueList.contains(actualValue)) &#123;        </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(errorMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这个方法接受一个目标列（targetColumn）、一个预期值列表（expectedValueList）、查询条件列（conditionColumn）及其条件值（conditionValue），同样需要一个查询方法（queryMethod）。如果查询到的列值不在预期值列表中，则触发异常。<br>使用场景：在一个电商平台的订单处理流程中，系统需要验证订单状态是否处于可取消的状态列表里（如 “待支付”、“待发货”）才允许用户取消订单。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 OrderStatusEnum 枚举了所有可能的订单状态，cancelableStatuses 包含可取消的状态</span></span><br><span class=\"line\">List&lt;String&gt; cancelableStatuses = Arrays.asList(OrderStatusEnum.WAITING_PAYMENT.getValue(), OrderStatusEnum.WAITING_DELIVERY.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证订单状态是否在可取消状态列表内</span></span><br><span class=\"line\">validateColumnValueInExpectedList(Order::getStatus, cancelableStatuses, Order::getOrderId, orderId, orderMapper::selectOne, <span class=\"string\">&quot;订单当前状态不允许取消！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"工作技能","path":"api/categories/工作技能.json"}],"tags":[{"name":"工作技能","path":"api/tags/工作技能.json"},{"name":"后端","path":"api/tags/后端.json"},{"name":"MybatisPlus","path":"api/tags/MybatisPlus.json"}]}